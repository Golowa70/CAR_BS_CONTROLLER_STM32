
car_bs_controller_f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008778  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002330  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb8  0800abb8  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  0800abb8  0800abb8  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abb8  0800abb8  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb8  0800abb8  0001abb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abbc  0800abbc  0001abbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800abc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b08  20000048  0800ac08  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  0800ac08  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00085cd3  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042b9  00000000  00000000  000a5d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d50  00000000  00000000  000aa000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002be0  00000000  00000000  000acd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001986a  00000000  00000000  000af930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b98f  00000000  00000000  000c919a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a735  00000000  00000000  000e4b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017f25e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c5e0  00000000  00000000  0017f2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000048 	.word	0x20000048
 800012c:	00000000 	.word	0x00000000
 8000130:	08008870 	.word	0x08008870

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000004c 	.word	0x2000004c
 800014c:	08008870 	.word	0x08008870

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_dmul>:
 8000164:	b570      	push	{r4, r5, r6, lr}
 8000166:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800016a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000172:	bf1d      	ittte	ne
 8000174:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000178:	ea94 0f0c 	teqne	r4, ip
 800017c:	ea95 0f0c 	teqne	r5, ip
 8000180:	f000 f8de 	bleq	8000340 <__aeabi_dmul+0x1dc>
 8000184:	442c      	add	r4, r5
 8000186:	ea81 0603 	eor.w	r6, r1, r3
 800018a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000192:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000196:	bf18      	it	ne
 8000198:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800019c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a4:	d038      	beq.n	8000218 <__aeabi_dmul+0xb4>
 80001a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001aa:	f04f 0500 	mov.w	r5, #0
 80001ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ba:	f04f 0600 	mov.w	r6, #0
 80001be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001c2:	f09c 0f00 	teq	ip, #0
 80001c6:	bf18      	it	ne
 80001c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d8:	d204      	bcs.n	80001e4 <__aeabi_dmul+0x80>
 80001da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001de:	416d      	adcs	r5, r5
 80001e0:	eb46 0606 	adc.w	r6, r6, r6
 80001e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001fc:	bf88      	it	hi
 80001fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000202:	d81e      	bhi.n	8000242 <__aeabi_dmul+0xde>
 8000204:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000208:	bf08      	it	eq
 800020a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020e:	f150 0000 	adcs.w	r0, r0, #0
 8000212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000216:	bd70      	pop	{r4, r5, r6, pc}
 8000218:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800021c:	ea46 0101 	orr.w	r1, r6, r1
 8000220:	ea40 0002 	orr.w	r0, r0, r2
 8000224:	ea81 0103 	eor.w	r1, r1, r3
 8000228:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800022c:	bfc2      	ittt	gt
 800022e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000232:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000236:	bd70      	popgt	{r4, r5, r6, pc}
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f04f 0e00 	mov.w	lr, #0
 8000240:	3c01      	subs	r4, #1
 8000242:	f300 80ab 	bgt.w	800039c <__aeabi_dmul+0x238>
 8000246:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800024a:	bfde      	ittt	le
 800024c:	2000      	movle	r0, #0
 800024e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000252:	bd70      	pople	{r4, r5, r6, pc}
 8000254:	f1c4 0400 	rsb	r4, r4, #0
 8000258:	3c20      	subs	r4, #32
 800025a:	da35      	bge.n	80002c8 <__aeabi_dmul+0x164>
 800025c:	340c      	adds	r4, #12
 800025e:	dc1b      	bgt.n	8000298 <__aeabi_dmul+0x134>
 8000260:	f104 0414 	add.w	r4, r4, #20
 8000264:	f1c4 0520 	rsb	r5, r4, #32
 8000268:	fa00 f305 	lsl.w	r3, r0, r5
 800026c:	fa20 f004 	lsr.w	r0, r0, r4
 8000270:	fa01 f205 	lsl.w	r2, r1, r5
 8000274:	ea40 0002 	orr.w	r0, r0, r2
 8000278:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800027c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000280:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000284:	fa21 f604 	lsr.w	r6, r1, r4
 8000288:	eb42 0106 	adc.w	r1, r2, r6
 800028c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000290:	bf08      	it	eq
 8000292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	f1c4 040c 	rsb	r4, r4, #12
 800029c:	f1c4 0520 	rsb	r5, r4, #32
 80002a0:	fa00 f304 	lsl.w	r3, r0, r4
 80002a4:	fa20 f005 	lsr.w	r0, r0, r5
 80002a8:	fa01 f204 	lsl.w	r2, r1, r4
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b8:	f141 0100 	adc.w	r1, r1, #0
 80002bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002c0:	bf08      	it	eq
 80002c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f205 	lsl.w	r2, r0, r5
 80002d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d4:	fa20 f304 	lsr.w	r3, r0, r4
 80002d8:	fa01 f205 	lsl.w	r2, r1, r5
 80002dc:	ea43 0302 	orr.w	r3, r3, r2
 80002e0:	fa21 f004 	lsr.w	r0, r1, r4
 80002e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	fa21 f204 	lsr.w	r2, r1, r4
 80002ec:	ea20 0002 	bic.w	r0, r0, r2
 80002f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f8:	bf08      	it	eq
 80002fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f094 0f00 	teq	r4, #0
 8000304:	d10f      	bne.n	8000326 <__aeabi_dmul+0x1c2>
 8000306:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800030a:	0040      	lsls	r0, r0, #1
 800030c:	eb41 0101 	adc.w	r1, r1, r1
 8000310:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000314:	bf08      	it	eq
 8000316:	3c01      	subeq	r4, #1
 8000318:	d0f7      	beq.n	800030a <__aeabi_dmul+0x1a6>
 800031a:	ea41 0106 	orr.w	r1, r1, r6
 800031e:	f095 0f00 	teq	r5, #0
 8000322:	bf18      	it	ne
 8000324:	4770      	bxne	lr
 8000326:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	eb43 0303 	adc.w	r3, r3, r3
 8000330:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000334:	bf08      	it	eq
 8000336:	3d01      	subeq	r5, #1
 8000338:	d0f7      	beq.n	800032a <__aeabi_dmul+0x1c6>
 800033a:	ea43 0306 	orr.w	r3, r3, r6
 800033e:	4770      	bx	lr
 8000340:	ea94 0f0c 	teq	r4, ip
 8000344:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000348:	bf18      	it	ne
 800034a:	ea95 0f0c 	teqne	r5, ip
 800034e:	d00c      	beq.n	800036a <__aeabi_dmul+0x206>
 8000350:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000354:	bf18      	it	ne
 8000356:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800035a:	d1d1      	bne.n	8000300 <__aeabi_dmul+0x19c>
 800035c:	ea81 0103 	eor.w	r1, r1, r3
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd70      	pop	{r4, r5, r6, pc}
 800036a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036e:	bf06      	itte	eq
 8000370:	4610      	moveq	r0, r2
 8000372:	4619      	moveq	r1, r3
 8000374:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000378:	d019      	beq.n	80003ae <__aeabi_dmul+0x24a>
 800037a:	ea94 0f0c 	teq	r4, ip
 800037e:	d102      	bne.n	8000386 <__aeabi_dmul+0x222>
 8000380:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000384:	d113      	bne.n	80003ae <__aeabi_dmul+0x24a>
 8000386:	ea95 0f0c 	teq	r5, ip
 800038a:	d105      	bne.n	8000398 <__aeabi_dmul+0x234>
 800038c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000390:	bf1c      	itt	ne
 8000392:	4610      	movne	r0, r2
 8000394:	4619      	movne	r1, r3
 8000396:	d10a      	bne.n	80003ae <__aeabi_dmul+0x24a>
 8000398:	ea81 0103 	eor.w	r1, r1, r3
 800039c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a8:	f04f 0000 	mov.w	r0, #0
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
 80003ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b6:	bd70      	pop	{r4, r5, r6, pc}

080003b8 <__aeabi_drsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	e002      	b.n	80003c4 <__adddf3>
 80003be:	bf00      	nop

080003c0 <__aeabi_dsub>:
 80003c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c4 <__adddf3>:
 80003c4:	b530      	push	{r4, r5, lr}
 80003c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	bf1f      	itttt	ne
 80003da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ea:	f000 80e2 	beq.w	80005b2 <__adddf3+0x1ee>
 80003ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f6:	bfb8      	it	lt
 80003f8:	426d      	neglt	r5, r5
 80003fa:	dd0c      	ble.n	8000416 <__adddf3+0x52>
 80003fc:	442c      	add	r4, r5
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	ea82 0000 	eor.w	r0, r2, r0
 800040a:	ea83 0101 	eor.w	r1, r3, r1
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	2d36      	cmp	r5, #54	; 0x36
 8000418:	bf88      	it	hi
 800041a:	bd30      	pophi	{r4, r5, pc}
 800041c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000420:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000424:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000428:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x70>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000438:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800043c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000440:	d002      	beq.n	8000448 <__adddf3+0x84>
 8000442:	4252      	negs	r2, r2
 8000444:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000448:	ea94 0f05 	teq	r4, r5
 800044c:	f000 80a7 	beq.w	800059e <__adddf3+0x1da>
 8000450:	f1a4 0401 	sub.w	r4, r4, #1
 8000454:	f1d5 0e20 	rsbs	lr, r5, #32
 8000458:	db0d      	blt.n	8000476 <__adddf3+0xb2>
 800045a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045e:	fa22 f205 	lsr.w	r2, r2, r5
 8000462:	1880      	adds	r0, r0, r2
 8000464:	f141 0100 	adc.w	r1, r1, #0
 8000468:	fa03 f20e 	lsl.w	r2, r3, lr
 800046c:	1880      	adds	r0, r0, r2
 800046e:	fa43 f305 	asr.w	r3, r3, r5
 8000472:	4159      	adcs	r1, r3
 8000474:	e00e      	b.n	8000494 <__adddf3+0xd0>
 8000476:	f1a5 0520 	sub.w	r5, r5, #32
 800047a:	f10e 0e20 	add.w	lr, lr, #32
 800047e:	2a01      	cmp	r2, #1
 8000480:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000484:	bf28      	it	cs
 8000486:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	18c0      	adds	r0, r0, r3
 8000490:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	d507      	bpl.n	80004aa <__adddf3+0xe6>
 800049a:	f04f 0e00 	mov.w	lr, #0
 800049e:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ae:	d31b      	bcc.n	80004e8 <__adddf3+0x124>
 80004b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b4:	d30c      	bcc.n	80004d0 <__adddf3+0x10c>
 80004b6:	0849      	lsrs	r1, r1, #1
 80004b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c0:	f104 0401 	add.w	r4, r4, #1
 80004c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004cc:	f080 809a 	bcs.w	8000604 <__adddf3+0x240>
 80004d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d4:	bf08      	it	eq
 80004d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004da:	f150 0000 	adcs.w	r0, r0, #0
 80004de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e2:	ea41 0105 	orr.w	r1, r1, r5
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004ec:	4140      	adcs	r0, r0
 80004ee:	eb41 0101 	adc.w	r1, r1, r1
 80004f2:	3c01      	subs	r4, #1
 80004f4:	bf28      	it	cs
 80004f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004fa:	d2e9      	bcs.n	80004d0 <__adddf3+0x10c>
 80004fc:	f091 0f00 	teq	r1, #0
 8000500:	bf04      	itt	eq
 8000502:	4601      	moveq	r1, r0
 8000504:	2000      	moveq	r0, #0
 8000506:	fab1 f381 	clz	r3, r1
 800050a:	bf08      	it	eq
 800050c:	3320      	addeq	r3, #32
 800050e:	f1a3 030b 	sub.w	r3, r3, #11
 8000512:	f1b3 0220 	subs.w	r2, r3, #32
 8000516:	da0c      	bge.n	8000532 <__adddf3+0x16e>
 8000518:	320c      	adds	r2, #12
 800051a:	dd08      	ble.n	800052e <__adddf3+0x16a>
 800051c:	f102 0c14 	add.w	ip, r2, #20
 8000520:	f1c2 020c 	rsb	r2, r2, #12
 8000524:	fa01 f00c 	lsl.w	r0, r1, ip
 8000528:	fa21 f102 	lsr.w	r1, r1, r2
 800052c:	e00c      	b.n	8000548 <__adddf3+0x184>
 800052e:	f102 0214 	add.w	r2, r2, #20
 8000532:	bfd8      	it	le
 8000534:	f1c2 0c20 	rsble	ip, r2, #32
 8000538:	fa01 f102 	lsl.w	r1, r1, r2
 800053c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000540:	bfdc      	itt	le
 8000542:	ea41 010c 	orrle.w	r1, r1, ip
 8000546:	4090      	lslle	r0, r2
 8000548:	1ae4      	subs	r4, r4, r3
 800054a:	bfa2      	ittt	ge
 800054c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000550:	4329      	orrge	r1, r5
 8000552:	bd30      	popge	{r4, r5, pc}
 8000554:	ea6f 0404 	mvn.w	r4, r4
 8000558:	3c1f      	subs	r4, #31
 800055a:	da1c      	bge.n	8000596 <__adddf3+0x1d2>
 800055c:	340c      	adds	r4, #12
 800055e:	dc0e      	bgt.n	800057e <__adddf3+0x1ba>
 8000560:	f104 0414 	add.w	r4, r4, #20
 8000564:	f1c4 0220 	rsb	r2, r4, #32
 8000568:	fa20 f004 	lsr.w	r0, r0, r4
 800056c:	fa01 f302 	lsl.w	r3, r1, r2
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	fa21 f304 	lsr.w	r3, r1, r4
 8000578:	ea45 0103 	orr.w	r1, r5, r3
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f1c4 040c 	rsb	r4, r4, #12
 8000582:	f1c4 0220 	rsb	r2, r4, #32
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 f304 	lsl.w	r3, r1, r4
 800058e:	ea40 0003 	orr.w	r0, r0, r3
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	fa21 f004 	lsr.w	r0, r1, r4
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	f094 0f00 	teq	r4, #0
 80005a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a6:	bf06      	itte	eq
 80005a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ac:	3401      	addeq	r4, #1
 80005ae:	3d01      	subne	r5, #1
 80005b0:	e74e      	b.n	8000450 <__adddf3+0x8c>
 80005b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b6:	bf18      	it	ne
 80005b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005bc:	d029      	beq.n	8000612 <__adddf3+0x24e>
 80005be:	ea94 0f05 	teq	r4, r5
 80005c2:	bf08      	it	eq
 80005c4:	ea90 0f02 	teqeq	r0, r2
 80005c8:	d005      	beq.n	80005d6 <__adddf3+0x212>
 80005ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ce:	bf04      	itt	eq
 80005d0:	4619      	moveq	r1, r3
 80005d2:	4610      	moveq	r0, r2
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	ea91 0f03 	teq	r1, r3
 80005da:	bf1e      	ittt	ne
 80005dc:	2100      	movne	r1, #0
 80005de:	2000      	movne	r0, #0
 80005e0:	bd30      	popne	{r4, r5, pc}
 80005e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e6:	d105      	bne.n	80005f4 <__adddf3+0x230>
 80005e8:	0040      	lsls	r0, r0, #1
 80005ea:	4149      	adcs	r1, r1
 80005ec:	bf28      	it	cs
 80005ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f8:	bf3c      	itt	cc
 80005fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fe:	bd30      	popcc	{r4, r5, pc}
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800060c:	f04f 0000 	mov.w	r0, #0
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000616:	bf1a      	itte	ne
 8000618:	4619      	movne	r1, r3
 800061a:	4610      	movne	r0, r2
 800061c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000620:	bf1c      	itt	ne
 8000622:	460b      	movne	r3, r1
 8000624:	4602      	movne	r2, r0
 8000626:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062a:	bf06      	itte	eq
 800062c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000630:	ea91 0f03 	teqeq	r1, r3
 8000634:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop

0800063c <__aeabi_ui2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f04f 0500 	mov.w	r5, #0
 8000654:	f04f 0100 	mov.w	r1, #0
 8000658:	e750      	b.n	80004fc <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_i2d>:
 800065c:	f090 0f00 	teq	r0, #0
 8000660:	bf04      	itt	eq
 8000662:	2100      	moveq	r1, #0
 8000664:	4770      	bxeq	lr
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000670:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000674:	bf48      	it	mi
 8000676:	4240      	negmi	r0, r0
 8000678:	f04f 0100 	mov.w	r1, #0
 800067c:	e73e      	b.n	80004fc <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_f2d>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000686:	ea4f 0131 	mov.w	r1, r1, rrx
 800068a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068e:	bf1f      	itttt	ne
 8000690:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000694:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000698:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800069c:	4770      	bxne	lr
 800069e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006a2:	bf08      	it	eq
 80006a4:	4770      	bxeq	lr
 80006a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006aa:	bf04      	itt	eq
 80006ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	e71c      	b.n	80004fc <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_ul2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	e00a      	b.n	80006ea <__aeabi_l2d+0x16>

080006d4 <__aeabi_l2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006e2:	d502      	bpl.n	80006ea <__aeabi_l2d+0x16>
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f6:	f43f aed8 	beq.w	80004aa <__adddf3+0xe6>
 80006fa:	f04f 0203 	mov.w	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000712:	f1c2 0320 	rsb	r3, r2, #32
 8000716:	fa00 fc03 	lsl.w	ip, r0, r3
 800071a:	fa20 f002 	lsr.w	r0, r0, r2
 800071e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000722:	ea40 000e 	orr.w	r0, r0, lr
 8000726:	fa21 f102 	lsr.w	r1, r1, r2
 800072a:	4414      	add	r4, r2
 800072c:	e6bd      	b.n	80004aa <__adddf3+0xe6>
 800072e:	bf00      	nop

08000730 <__gedf2>:
 8000730:	f04f 3cff 	mov.w	ip, #4294967295
 8000734:	e006      	b.n	8000744 <__cmpdf2+0x4>
 8000736:	bf00      	nop

08000738 <__ledf2>:
 8000738:	f04f 0c01 	mov.w	ip, #1
 800073c:	e002      	b.n	8000744 <__cmpdf2+0x4>
 800073e:	bf00      	nop

08000740 <__cmpdf2>:
 8000740:	f04f 0c01 	mov.w	ip, #1
 8000744:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000748:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800074c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000750:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800075a:	d01b      	beq.n	8000794 <__cmpdf2+0x54>
 800075c:	b001      	add	sp, #4
 800075e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000762:	bf0c      	ite	eq
 8000764:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000768:	ea91 0f03 	teqne	r1, r3
 800076c:	bf02      	ittt	eq
 800076e:	ea90 0f02 	teqeq	r0, r2
 8000772:	2000      	moveq	r0, #0
 8000774:	4770      	bxeq	lr
 8000776:	f110 0f00 	cmn.w	r0, #0
 800077a:	ea91 0f03 	teq	r1, r3
 800077e:	bf58      	it	pl
 8000780:	4299      	cmppl	r1, r3
 8000782:	bf08      	it	eq
 8000784:	4290      	cmpeq	r0, r2
 8000786:	bf2c      	ite	cs
 8000788:	17d8      	asrcs	r0, r3, #31
 800078a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800078e:	f040 0001 	orr.w	r0, r0, #1
 8000792:	4770      	bx	lr
 8000794:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000798:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800079c:	d102      	bne.n	80007a4 <__cmpdf2+0x64>
 800079e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007a2:	d107      	bne.n	80007b4 <__cmpdf2+0x74>
 80007a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007ac:	d1d6      	bne.n	800075c <__cmpdf2+0x1c>
 80007ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007b2:	d0d3      	beq.n	800075c <__cmpdf2+0x1c>
 80007b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_cdrcmple>:
 80007bc:	4684      	mov	ip, r0
 80007be:	4610      	mov	r0, r2
 80007c0:	4662      	mov	r2, ip
 80007c2:	468c      	mov	ip, r1
 80007c4:	4619      	mov	r1, r3
 80007c6:	4663      	mov	r3, ip
 80007c8:	e000      	b.n	80007cc <__aeabi_cdcmpeq>
 80007ca:	bf00      	nop

080007cc <__aeabi_cdcmpeq>:
 80007cc:	b501      	push	{r0, lr}
 80007ce:	f7ff ffb7 	bl	8000740 <__cmpdf2>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	bf48      	it	mi
 80007d6:	f110 0f00 	cmnmi.w	r0, #0
 80007da:	bd01      	pop	{r0, pc}

080007dc <__aeabi_dcmpeq>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff fff4 	bl	80007cc <__aeabi_cdcmpeq>
 80007e4:	bf0c      	ite	eq
 80007e6:	2001      	moveq	r0, #1
 80007e8:	2000      	movne	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmplt>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffea 	bl	80007cc <__aeabi_cdcmpeq>
 80007f8:	bf34      	ite	cc
 80007fa:	2001      	movcc	r0, #1
 80007fc:	2000      	movcs	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmple>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffe0 	bl	80007cc <__aeabi_cdcmpeq>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpge>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffce 	bl	80007bc <__aeabi_cdrcmple>
 8000820:	bf94      	ite	ls
 8000822:	2001      	movls	r0, #1
 8000824:	2000      	movhi	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_dcmpgt>:
 800082c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000830:	f7ff ffc4 	bl	80007bc <__aeabi_cdrcmple>
 8000834:	bf34      	ite	cc
 8000836:	2001      	movcc	r0, #1
 8000838:	2000      	movcs	r0, #0
 800083a:	f85d fb08 	ldr.w	pc, [sp], #8
 800083e:	bf00      	nop

08000840 <__aeabi_frsub>:
 8000840:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000844:	e002      	b.n	800084c <__addsf3>
 8000846:	bf00      	nop

08000848 <__aeabi_fsub>:
 8000848:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800084c <__addsf3>:
 800084c:	0042      	lsls	r2, r0, #1
 800084e:	bf1f      	itttt	ne
 8000850:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000854:	ea92 0f03 	teqne	r2, r3
 8000858:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800085c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000860:	d06a      	beq.n	8000938 <__addsf3+0xec>
 8000862:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000866:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800086a:	bfc1      	itttt	gt
 800086c:	18d2      	addgt	r2, r2, r3
 800086e:	4041      	eorgt	r1, r0
 8000870:	4048      	eorgt	r0, r1
 8000872:	4041      	eorgt	r1, r0
 8000874:	bfb8      	it	lt
 8000876:	425b      	neglt	r3, r3
 8000878:	2b19      	cmp	r3, #25
 800087a:	bf88      	it	hi
 800087c:	4770      	bxhi	lr
 800087e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000882:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000886:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800088a:	bf18      	it	ne
 800088c:	4240      	negne	r0, r0
 800088e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000892:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000896:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800089a:	bf18      	it	ne
 800089c:	4249      	negne	r1, r1
 800089e:	ea92 0f03 	teq	r2, r3
 80008a2:	d03f      	beq.n	8000924 <__addsf3+0xd8>
 80008a4:	f1a2 0201 	sub.w	r2, r2, #1
 80008a8:	fa41 fc03 	asr.w	ip, r1, r3
 80008ac:	eb10 000c 	adds.w	r0, r0, ip
 80008b0:	f1c3 0320 	rsb	r3, r3, #32
 80008b4:	fa01 f103 	lsl.w	r1, r1, r3
 80008b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008bc:	d502      	bpl.n	80008c4 <__addsf3+0x78>
 80008be:	4249      	negs	r1, r1
 80008c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008c8:	d313      	bcc.n	80008f2 <__addsf3+0xa6>
 80008ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ce:	d306      	bcc.n	80008de <__addsf3+0x92>
 80008d0:	0840      	lsrs	r0, r0, #1
 80008d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80008d6:	f102 0201 	add.w	r2, r2, #1
 80008da:	2afe      	cmp	r2, #254	; 0xfe
 80008dc:	d251      	bcs.n	8000982 <__addsf3+0x136>
 80008de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e6:	bf08      	it	eq
 80008e8:	f020 0001 	biceq.w	r0, r0, #1
 80008ec:	ea40 0003 	orr.w	r0, r0, r3
 80008f0:	4770      	bx	lr
 80008f2:	0049      	lsls	r1, r1, #1
 80008f4:	eb40 0000 	adc.w	r0, r0, r0
 80008f8:	3a01      	subs	r2, #1
 80008fa:	bf28      	it	cs
 80008fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000900:	d2ed      	bcs.n	80008de <__addsf3+0x92>
 8000902:	fab0 fc80 	clz	ip, r0
 8000906:	f1ac 0c08 	sub.w	ip, ip, #8
 800090a:	ebb2 020c 	subs.w	r2, r2, ip
 800090e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000912:	bfaa      	itet	ge
 8000914:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000918:	4252      	neglt	r2, r2
 800091a:	4318      	orrge	r0, r3
 800091c:	bfbc      	itt	lt
 800091e:	40d0      	lsrlt	r0, r2
 8000920:	4318      	orrlt	r0, r3
 8000922:	4770      	bx	lr
 8000924:	f092 0f00 	teq	r2, #0
 8000928:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800092c:	bf06      	itte	eq
 800092e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000932:	3201      	addeq	r2, #1
 8000934:	3b01      	subne	r3, #1
 8000936:	e7b5      	b.n	80008a4 <__addsf3+0x58>
 8000938:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800093c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000940:	bf18      	it	ne
 8000942:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000946:	d021      	beq.n	800098c <__addsf3+0x140>
 8000948:	ea92 0f03 	teq	r2, r3
 800094c:	d004      	beq.n	8000958 <__addsf3+0x10c>
 800094e:	f092 0f00 	teq	r2, #0
 8000952:	bf08      	it	eq
 8000954:	4608      	moveq	r0, r1
 8000956:	4770      	bx	lr
 8000958:	ea90 0f01 	teq	r0, r1
 800095c:	bf1c      	itt	ne
 800095e:	2000      	movne	r0, #0
 8000960:	4770      	bxne	lr
 8000962:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000966:	d104      	bne.n	8000972 <__addsf3+0x126>
 8000968:	0040      	lsls	r0, r0, #1
 800096a:	bf28      	it	cs
 800096c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000970:	4770      	bx	lr
 8000972:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000976:	bf3c      	itt	cc
 8000978:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800097c:	4770      	bxcc	lr
 800097e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000982:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	4770      	bx	lr
 800098c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000990:	bf16      	itet	ne
 8000992:	4608      	movne	r0, r1
 8000994:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000998:	4601      	movne	r1, r0
 800099a:	0242      	lsls	r2, r0, #9
 800099c:	bf06      	itte	eq
 800099e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009a2:	ea90 0f01 	teqeq	r0, r1
 80009a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_ui2f>:
 80009ac:	f04f 0300 	mov.w	r3, #0
 80009b0:	e004      	b.n	80009bc <__aeabi_i2f+0x8>
 80009b2:	bf00      	nop

080009b4 <__aeabi_i2f>:
 80009b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	bf48      	it	mi
 80009ba:	4240      	negmi	r0, r0
 80009bc:	ea5f 0c00 	movs.w	ip, r0
 80009c0:	bf08      	it	eq
 80009c2:	4770      	bxeq	lr
 80009c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009c8:	4601      	mov	r1, r0
 80009ca:	f04f 0000 	mov.w	r0, #0
 80009ce:	e01c      	b.n	8000a0a <__aeabi_l2f+0x2a>

080009d0 <__aeabi_ul2f>:
 80009d0:	ea50 0201 	orrs.w	r2, r0, r1
 80009d4:	bf08      	it	eq
 80009d6:	4770      	bxeq	lr
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	e00a      	b.n	80009f4 <__aeabi_l2f+0x14>
 80009de:	bf00      	nop

080009e0 <__aeabi_l2f>:
 80009e0:	ea50 0201 	orrs.w	r2, r0, r1
 80009e4:	bf08      	it	eq
 80009e6:	4770      	bxeq	lr
 80009e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009ec:	d502      	bpl.n	80009f4 <__aeabi_l2f+0x14>
 80009ee:	4240      	negs	r0, r0
 80009f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009f4:	ea5f 0c01 	movs.w	ip, r1
 80009f8:	bf02      	ittt	eq
 80009fa:	4684      	moveq	ip, r0
 80009fc:	4601      	moveq	r1, r0
 80009fe:	2000      	moveq	r0, #0
 8000a00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a04:	bf08      	it	eq
 8000a06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a0e:	fabc f28c 	clz	r2, ip
 8000a12:	3a08      	subs	r2, #8
 8000a14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a18:	db10      	blt.n	8000a3c <__aeabi_l2f+0x5c>
 8000a1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a1e:	4463      	add	r3, ip
 8000a20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a24:	f1c2 0220 	rsb	r2, r2, #32
 8000a28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a30:	eb43 0002 	adc.w	r0, r3, r2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f102 0220 	add.w	r2, r2, #32
 8000a40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a44:	f1c2 0220 	rsb	r2, r2, #32
 8000a48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000a50:	eb43 0002 	adc.w	r0, r3, r2
 8000a54:	bf08      	it	eq
 8000a56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_fmul>:
 8000a5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a64:	bf1e      	ittt	ne
 8000a66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a6a:	ea92 0f0c 	teqne	r2, ip
 8000a6e:	ea93 0f0c 	teqne	r3, ip
 8000a72:	d06f      	beq.n	8000b54 <__aeabi_fmul+0xf8>
 8000a74:	441a      	add	r2, r3
 8000a76:	ea80 0c01 	eor.w	ip, r0, r1
 8000a7a:	0240      	lsls	r0, r0, #9
 8000a7c:	bf18      	it	ne
 8000a7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a82:	d01e      	beq.n	8000ac2 <__aeabi_fmul+0x66>
 8000a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a90:	fba0 3101 	umull	r3, r1, r0, r1
 8000a94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a9c:	bf3e      	ittt	cc
 8000a9e:	0049      	lslcc	r1, r1, #1
 8000aa0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000aa4:	005b      	lslcc	r3, r3, #1
 8000aa6:	ea40 0001 	orr.w	r0, r0, r1
 8000aaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000aae:	2afd      	cmp	r2, #253	; 0xfd
 8000ab0:	d81d      	bhi.n	8000aee <__aeabi_fmul+0x92>
 8000ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	4770      	bx	lr
 8000ac2:	f090 0f00 	teq	r0, #0
 8000ac6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000aca:	bf08      	it	eq
 8000acc:	0249      	lsleq	r1, r1, #9
 8000ace:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ad2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ad6:	3a7f      	subs	r2, #127	; 0x7f
 8000ad8:	bfc2      	ittt	gt
 8000ada:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ade:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ae2:	4770      	bxgt	lr
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	3a01      	subs	r2, #1
 8000aee:	dc5d      	bgt.n	8000bac <__aeabi_fmul+0x150>
 8000af0:	f112 0f19 	cmn.w	r2, #25
 8000af4:	bfdc      	itt	le
 8000af6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000afa:	4770      	bxle	lr
 8000afc:	f1c2 0200 	rsb	r2, r2, #0
 8000b00:	0041      	lsls	r1, r0, #1
 8000b02:	fa21 f102 	lsr.w	r1, r1, r2
 8000b06:	f1c2 0220 	rsb	r2, r2, #32
 8000b0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b12:	f140 0000 	adc.w	r0, r0, #0
 8000b16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b1a:	bf08      	it	eq
 8000b1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b20:	4770      	bx	lr
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b2a:	bf02      	ittt	eq
 8000b2c:	0040      	lsleq	r0, r0, #1
 8000b2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b32:	3a01      	subeq	r2, #1
 8000b34:	d0f9      	beq.n	8000b2a <__aeabi_fmul+0xce>
 8000b36:	ea40 000c 	orr.w	r0, r0, ip
 8000b3a:	f093 0f00 	teq	r3, #0
 8000b3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b42:	bf02      	ittt	eq
 8000b44:	0049      	lsleq	r1, r1, #1
 8000b46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b4a:	3b01      	subeq	r3, #1
 8000b4c:	d0f9      	beq.n	8000b42 <__aeabi_fmul+0xe6>
 8000b4e:	ea41 010c 	orr.w	r1, r1, ip
 8000b52:	e78f      	b.n	8000a74 <__aeabi_fmul+0x18>
 8000b54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b58:	ea92 0f0c 	teq	r2, ip
 8000b5c:	bf18      	it	ne
 8000b5e:	ea93 0f0c 	teqne	r3, ip
 8000b62:	d00a      	beq.n	8000b7a <__aeabi_fmul+0x11e>
 8000b64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b68:	bf18      	it	ne
 8000b6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b6e:	d1d8      	bne.n	8000b22 <__aeabi_fmul+0xc6>
 8000b70:	ea80 0001 	eor.w	r0, r0, r1
 8000b74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	4770      	bx	lr
 8000b7a:	f090 0f00 	teq	r0, #0
 8000b7e:	bf17      	itett	ne
 8000b80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b84:	4608      	moveq	r0, r1
 8000b86:	f091 0f00 	teqne	r1, #0
 8000b8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b8e:	d014      	beq.n	8000bba <__aeabi_fmul+0x15e>
 8000b90:	ea92 0f0c 	teq	r2, ip
 8000b94:	d101      	bne.n	8000b9a <__aeabi_fmul+0x13e>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d10f      	bne.n	8000bba <__aeabi_fmul+0x15e>
 8000b9a:	ea93 0f0c 	teq	r3, ip
 8000b9e:	d103      	bne.n	8000ba8 <__aeabi_fmul+0x14c>
 8000ba0:	024b      	lsls	r3, r1, #9
 8000ba2:	bf18      	it	ne
 8000ba4:	4608      	movne	r0, r1
 8000ba6:	d108      	bne.n	8000bba <__aeabi_fmul+0x15e>
 8000ba8:	ea80 0001 	eor.w	r0, r0, r1
 8000bac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000bc2:	4770      	bx	lr

08000bc4 <__aeabi_fdiv>:
 8000bc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bcc:	bf1e      	ittt	ne
 8000bce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bd2:	ea92 0f0c 	teqne	r2, ip
 8000bd6:	ea93 0f0c 	teqne	r3, ip
 8000bda:	d069      	beq.n	8000cb0 <__aeabi_fdiv+0xec>
 8000bdc:	eba2 0203 	sub.w	r2, r2, r3
 8000be0:	ea80 0c01 	eor.w	ip, r0, r1
 8000be4:	0249      	lsls	r1, r1, #9
 8000be6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bea:	d037      	beq.n	8000c5c <__aeabi_fdiv+0x98>
 8000bec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bf0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bf4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	bf38      	it	cc
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	bf24      	itt	cs
 8000c0e:	1a5b      	subcs	r3, r3, r1
 8000c10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c18:	bf24      	itt	cs
 8000c1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c26:	bf24      	itt	cs
 8000c28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c34:	bf24      	itt	cs
 8000c36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	bf18      	it	ne
 8000c42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c46:	d1e0      	bne.n	8000c0a <__aeabi_fdiv+0x46>
 8000c48:	2afd      	cmp	r2, #253	; 0xfd
 8000c4a:	f63f af50 	bhi.w	8000aee <__aeabi_fmul+0x92>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c54:	bf08      	it	eq
 8000c56:	f020 0001 	biceq.w	r0, r0, #1
 8000c5a:	4770      	bx	lr
 8000c5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c64:	327f      	adds	r2, #127	; 0x7f
 8000c66:	bfc2      	ittt	gt
 8000c68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c70:	4770      	bxgt	lr
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	3a01      	subs	r2, #1
 8000c7c:	e737      	b.n	8000aee <__aeabi_fmul+0x92>
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fdiv+0xc2>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fdiv+0xda>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e795      	b.n	8000bdc <__aeabi_fdiv+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	d108      	bne.n	8000ccc <__aeabi_fdiv+0x108>
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	f47f af7d 	bne.w	8000bba <__aeabi_fmul+0x15e>
 8000cc0:	ea93 0f0c 	teq	r3, ip
 8000cc4:	f47f af70 	bne.w	8000ba8 <__aeabi_fmul+0x14c>
 8000cc8:	4608      	mov	r0, r1
 8000cca:	e776      	b.n	8000bba <__aeabi_fmul+0x15e>
 8000ccc:	ea93 0f0c 	teq	r3, ip
 8000cd0:	d104      	bne.n	8000cdc <__aeabi_fdiv+0x118>
 8000cd2:	024b      	lsls	r3, r1, #9
 8000cd4:	f43f af4c 	beq.w	8000b70 <__aeabi_fmul+0x114>
 8000cd8:	4608      	mov	r0, r1
 8000cda:	e76e      	b.n	8000bba <__aeabi_fmul+0x15e>
 8000cdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ce0:	bf18      	it	ne
 8000ce2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ce6:	d1ca      	bne.n	8000c7e <__aeabi_fdiv+0xba>
 8000ce8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000cec:	f47f af5c 	bne.w	8000ba8 <__aeabi_fmul+0x14c>
 8000cf0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	f47f af3c 	bne.w	8000b70 <__aeabi_fmul+0x114>
 8000cf8:	e75f      	b.n	8000bba <__aeabi_fmul+0x15e>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_f2iz>:
 8000cfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d04:	d30f      	bcc.n	8000d26 <__aeabi_f2iz+0x2a>
 8000d06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d0e:	d90d      	bls.n	8000d2c <__aeabi_f2iz+0x30>
 8000d10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d18:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d1c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d20:	bf18      	it	ne
 8000d22:	4240      	negne	r0, r0
 8000d24:	4770      	bx	lr
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	4770      	bx	lr
 8000d2c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d30:	d101      	bne.n	8000d36 <__aeabi_f2iz+0x3a>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d105      	bne.n	8000d42 <__aeabi_f2iz+0x46>
 8000d36:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d3a:	bf08      	it	eq
 8000d3c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d40:	4770      	bx	lr
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	4770      	bx	lr

08000d48 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d5a:	b29b      	uxth	r3, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	605a      	str	r2, [r3, #4]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
	...

08000d88 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <usart_setup+0x60>)
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <usart_setup+0x64>)
 8000d94:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <usart_setup+0x60>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <usart_setup+0x60>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <usart_setup+0x60>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <usart_setup+0x60>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <usart_setup+0x60>)
 8000db0:	220c      	movs	r2, #12
 8000db2:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <usart_setup+0x60>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <usart_setup+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <usart_setup+0x60>)
 8000dc2:	f007 f926 	bl	8008012 <HAL_HalfDuplex_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d000      	beq.n	8000dce <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 8000dcc:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <usart_setup+0x60>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <usart_setup+0x60>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f042 0220 	orr.w	r2, r2, #32
 8000ddc:	60da      	str	r2, [r3, #12]
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000adc 	.word	0x20000adc
 8000dec:	40004800 	.word	0x40004800

08000df0 <owInit>:

void owInit(OneWire *ow) {
 8000df0:	b480      	push	{r7}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000e00:	e015      	b.n	8000e2e <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]
    k=0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8000e10:	e007      	b.n	8000e22 <owInit+0x32>
    r[k] = 0;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	ddf4      	ble.n	8000e12 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	dde6      	ble.n	8000e02 <owInit+0x12>
  }
  k=0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8000e38:	e008      	b.n	8000e4c <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4413      	add	r3, r2
 8000e40:	3314      	adds	r3, #20
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b07      	cmp	r3, #7
 8000e50:	ddf3      	ble.n	8000e3a <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2240      	movs	r2, #64	; 0x40
 8000e56:	611a      	str	r2, [r3, #16]

}
 8000e58:	bf00      	nop
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
	...

08000e64 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8000e6a:	f000 f850 	bl	8000f0e <getUsartIndex>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <owReadHandler+0x70>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d025      	beq.n	8000eca <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <owReadHandler+0x70>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d01f      	beq.n	8000eca <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8000e8a:	bf00      	nop
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <owReadHandler+0x70>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0320 	and.w	r3, r3, #32
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f9      	beq.n	8000e8c <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 8000e98:	79fc      	ldrb	r4, [r7, #7]
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <owReadHandler+0x70>)
 8000e9c:	f7ff ff54 	bl	8000d48 <USART_ReceiveData>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <owReadHandler+0x74>)
 8000ea6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2201      	movs	r2, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	b25a      	sxtb	r2, r3
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <owReadHandler+0x78>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <owReadHandler+0x78>)
 8000ec8:	701a      	strb	r2, [r3, #0]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40004800 	.word	0x40004800
 8000ed8:	200008e0 	.word	0x200008e0
 8000edc:	20000894 	.word	0x20000894

08000ee0 <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 8000ee6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000eea:	f7ff ff4d 	bl	8000d88 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 8000eee:	20f0      	movs	r0, #240	; 0xf0
 8000ef0:	f000 f814 	bl	8000f1c <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 8000ef4:	f000 f850 	bl	8000f98 <owEchoRead>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 8000efc:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000f00:	f7ff ff42 	bl	8000d88 <usart_setup>
  return owPresence;
 8000f04:	88fb      	ldrh	r3, [r7, #6]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <owSend>:

void owSend(uint16_t data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 8000f26:	f7ff fff2 	bl	8000f0e <getUsartIndex>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4093      	lsls	r3, r2
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <owSend+0x50>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <owSend+0x50>)
 8000f44:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <owSend+0x54>)
 8000f4c:	f7ff ff0b 	bl	8000d66 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 8000f50:	bf00      	nop
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <owSend+0x58>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5c:	2b40      	cmp	r3, #64	; 0x40
 8000f5e:	d1f8      	bne.n	8000f52 <owSend+0x36>
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000894 	.word	0x20000894
 8000f70:	40004800 	.word	0x40004800
 8000f74:	20000adc 	.word	0x20000adc

08000f78 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	2bff      	cmp	r3, #255	; 0xff
 8000f86:	bf0c      	ite	eq
 8000f88:	2301      	moveq	r3, #1
 8000f8a:	2300      	movne	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <owEchoRead>:

uint16_t owEchoRead() {//
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 8000f9e:	f7ff ffb6 	bl	8000f0e <getUsartIndex>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 8000fac:	bf00      	nop
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <owEchoRead+0x48>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	797b      	ldrb	r3, [r7, #5]
 8000fb8:	fa42 f303 	asr.w	r3, r2, r3
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <owEchoRead+0x36>
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	1e5a      	subs	r2, r3, #1
 8000fc8:	80fa      	strh	r2, [r7, #6]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1ef      	bne.n	8000fae <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 8000fce:	797b      	ldrb	r3, [r7, #5]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <owEchoRead+0x4c>)
 8000fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd6:	b29b      	uxth	r3, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000894 	.word	0x20000894
 8000fe4:	200008e0 	.word	0x200008e0

08000fe8 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e014      	b.n	8001024 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	22ff      	movs	r2, #255	; 0xff
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e002      	b.n	8001012 <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	3301      	adds	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b07      	cmp	r3, #7
 8001028:	d9e7      	bls.n	8000ffa <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 800102a:	683b      	ldr	r3, [r7, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 8001040:	f107 020c 	add.w	r2, r7, #12
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ffcd 	bl	8000fe8 <byteToBits>
  for (i = 0; i < 8; ++i) {
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e00b      	b.n	800106c <owSendByte+0x36>
    owSend(data[i]);
 8001054:	f107 020c 	add.w	r2, r7, #12
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5b 	bl	8000f1c <owSend>
  for (i = 0; i < 8; ++i) {
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b07      	cmp	r3, #7
 8001070:	ddf0      	ble.n	8001054 <owSendByte+0x1e>
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	733b      	strb	r3, [r7, #12]
  crc = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e018      	b.n	80010d2 <owCRC+0x56>
      fb = crc ^ dat;
 80010a0:	7b7a      	ldrb	r2, [r7, #13]
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	4053      	eors	r3, r2
 80010a6:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	085b      	lsrs	r3, r3, #1
 80010b4:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d104      	bne.n	80010cc <owCRC+0x50>
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80010c8:	43db      	mvns	r3, r3
 80010ca:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	3301      	adds	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	d9e3      	bls.n	80010a0 <owCRC+0x24>
    }
    st_byt++;
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	3301      	adds	r3, #1
 80010dc:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 80010de:	7b3a      	ldrb	r2, [r7, #12]
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d3d4      	bcc.n	8001090 <owCRC+0x14>
  return crc;
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 80010fa:	2107      	movs	r1, #7
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ffbd 	bl	800107c <owCRC>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8001124:	f7ff fedc 	bl	8000ee0 <owResetCmd>
 8001128:	4603      	mov	r3, r0
 800112a:	2bf0      	cmp	r3, #240	; 0xf0
 800112c:	d101      	bne.n	8001132 <hasNextRom+0x26>
    return 0;
 800112e:	2300      	movs	r3, #0
 8001130:	e097      	b.n	8001262 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8001132:	20f0      	movs	r0, #240	; 0xf0
 8001134:	f7ff ff7f 	bl	8001036 <owSendByte>
  do {
		uint8_t answerBit =0;
 8001138:	2300      	movs	r3, #0
 800113a:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 8001150:	20ff      	movs	r0, #255	; 0xff
 8001152:	f7ff fee3 	bl	8000f1c <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8001156:	f7ff ff1f 	bl	8000f98 <owEchoRead>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff0b 	bl	8000f78 <owReadSlot>
 8001162:	4603      	mov	r3, r0
 8001164:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8001166:	20ff      	movs	r0, #255	; 0xff
 8001168:	f7ff fed8 	bl	8000f1c <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 800116c:	f7ff ff14 	bl	8000f98 <owEchoRead>
 8001170:	4603      	mov	r3, r0
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff00 	bl	8000f78 <owReadSlot>
 8001178:	4603      	mov	r3, r0
 800117a:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 800117c:	7afa      	ldrb	r2, [r7, #11]
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	429a      	cmp	r2, r3
 8001182:	d105      	bne.n	8001190 <hasNextRom+0x84>
 8001184:	7afb      	ldrb	r3, [r7, #11]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d102      	bne.n	8001190 <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e068      	b.n	8001262 <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 8001190:	7afa      	ldrb	r2, [r7, #11]
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	429a      	cmp	r2, r3
 8001196:	d002      	beq.n	800119e <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8001198:	7afb      	ldrb	r3, [r7, #11]
 800119a:	75bb      	strb	r3, [r7, #22]
 800119c:	e023      	b.n	80011e6 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 800119e:	7ffa      	ldrb	r2, [r7, #31]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d102      	bne.n	80011ae <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 80011a8:	2301      	movs	r3, #1
 80011aa:	75bb      	strb	r3, [r7, #22]
 80011ac:	e01b      	b.n	80011e6 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 80011ae:	7ffa      	ldrb	r2, [r7, #31]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dd02      	ble.n	80011be <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 80011b8:	2300      	movs	r3, #0
 80011ba:	75bb      	strb	r3, [r7, #22]
 80011bc:	e00e      	b.n	80011dc <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	3314      	adds	r3, #20
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	fa42 f303 	asr.w	r3, r2, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80011dc:	7dbb      	ldrb	r3, [r7, #22]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 80011e2:	7ffb      	ldrb	r3, [r7, #31]
 80011e4:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 80011e6:	7dbb      	ldrb	r3, [r7, #22]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00e      	beq.n	800120a <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b25b      	sxtb	r3, r3
 8001204:	b2da      	uxtb	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 800120a:	7dbb      	ldrb	r3, [r7, #22]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <hasNextRom+0x108>
 8001210:	2300      	movs	r3, #0
 8001212:	e000      	b.n	8001216 <hasNextRom+0x10a>
 8001214:	23ff      	movs	r3, #255	; 0xff
 8001216:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8001218:	7d7b      	ldrb	r3, [r7, #21]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe7d 	bl	8000f1c <owSend>
    ui32BitNumber++;//ищем следующий бит
 8001222:	7ffb      	ldrb	r3, [r7, #31]
 8001224:	3301      	adds	r3, #1
 8001226:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8001228:	7ffb      	ldrb	r3, [r7, #31]
 800122a:	2b3f      	cmp	r3, #63	; 0x3f
 800122c:	d984      	bls.n	8001138 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	611a      	str	r2, [r3, #16]
  for (; i < 7; i++)
 8001234:	e00b      	b.n	800124e <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	441a      	add	r2, r3
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	7811      	ldrb	r1, [r2, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	460a      	mov	r2, r1
 8001246:	751a      	strb	r2, [r3, #20]
  for (; i < 7; i++)
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	3301      	adds	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	2b06      	cmp	r3, #6
 8001252:	d9f0      	bls.n	8001236 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	bfcc      	ite	gt
 800125c:	2301      	movgt	r3, #1
 800125e:	2300      	movle	r3, #0
 8001260:	b2db      	uxtb	r3, r3
}
 8001262:	4618      	mov	r0, r3
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fdba 	bl	8000df0 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	4619      	mov	r1, r3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff40 	bl	800110c <hasNextRom>
 800128c:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da02      	bge.n	800129a <owSearchCmd+0x30>
      return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	e009      	b.n	80012ae <owSearchCmd+0x44>
    device++;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3301      	adds	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <owSearchCmd+0x42>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	dde7      	ble.n	800127c <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 80012ac:	68fb      	ldr	r3, [r7, #12]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	int i = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 80012c2:	f7ff fe0d 	bl	8000ee0 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 80012c6:	2055      	movs	r0, #85	; 0x55
 80012c8:	f7ff feb5 	bl	8001036 <owSendByte>
  for (; i < 8; i++)
 80012cc:	e009      	b.n	80012e2 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fead 	bl	8001036 <owSendByte>
  for (; i < 8; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	ddf2      	ble.n	80012ce <owMatchRomCmd+0x18>
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f7ff ffda 	bl	80012b6 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 8001302:	2044      	movs	r0, #68	; 0x44
 8001304:	f7ff fe97 	bl	8001036 <owSendByte>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 800131c:	2300      	movs	r3, #0
 800131e:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b10      	cmp	r3, #16
 8001326:	d001      	beq.n	800132c <owReadScratchpadCmd+0x1c>
 8001328:	2b28      	cmp	r3, #40	; 0x28
 800132a:	d109      	bne.n	8001340 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 800132c:	2348      	movs	r3, #72	; 0x48
 800132e:	82bb      	strh	r3, [r7, #20]
      break;
 8001330:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8001332:	68b8      	ldr	r0, [r7, #8]
 8001334:	f7ff ffbf 	bl	80012b6 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8001338:	20be      	movs	r0, #190	; 0xbe
 800133a:	f7ff fe7c 	bl	8001036 <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 800133e:	e048      	b.n	80013d2 <owReadScratchpadCmd+0xc2>
      return data;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	e04b      	b.n	80013dc <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 8001344:	8abb      	ldrh	r3, [r7, #20]
 8001346:	3b08      	subs	r3, #8
 8001348:	2b00      	cmp	r3, #0
 800134a:	da00      	bge.n	800134e <owReadScratchpadCmd+0x3e>
 800134c:	3307      	adds	r3, #7
 800134e:	10db      	asrs	r3, r3, #3
 8001350:	b2da      	uxtb	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	b29b      	uxth	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 800135e:	20ff      	movs	r0, #255	; 0xff
 8001360:	f7ff fddc 	bl	8000f1c <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8001364:	f7ff fe18 	bl	8000f98 <owEchoRead>
 8001368:	4603      	mov	r3, r0
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fe04 	bl	8000f78 <owReadSlot>
 8001370:	4603      	mov	r3, r0
 8001372:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8001374:	7cbb      	ldrb	r3, [r7, #18]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d113      	bne.n	80013a2 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25a      	sxtb	r2, r3
 8001384:	8afb      	ldrh	r3, [r7, #22]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	b25b      	sxtb	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b259      	sxtb	r1, r3
 8001396:	7cfb      	ldrb	r3, [r7, #19]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	b2ca      	uxtb	r2, r1
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e014      	b.n	80013cc <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 80013a2:	7cfb      	ldrb	r3, [r7, #19]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	8afb      	ldrh	r3, [r7, #22]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	4013      	ands	r3, r2
 80013c0:	b259      	sxtb	r1, r3
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	b2ca      	uxtb	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 80013cc:	8afb      	ldrh	r3, [r7, #22]
 80013ce:	3301      	adds	r3, #1
 80013d0:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 80013d2:	8afa      	ldrh	r2, [r7, #22]
 80013d4:	8abb      	ldrh	r3, [r7, #20]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3b4      	bcc.n	8001344 <owReadScratchpadCmd+0x34>
  }
  return data;
 80013da:	687b      	ldr	r3, [r7, #4]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	4613      	mov	r3, r2
 80013f0:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b10      	cmp	r3, #16
 8001410:	d022      	beq.n	8001458 <readTemperature+0x74>
 8001412:	2b28      	cmp	r3, #40	; 0x28
 8001414:	d13a      	bne.n	800148c <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	461a      	mov	r2, r3
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff ff76 	bl	8001310 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	79db      	ldrb	r3, [r3, #7]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	b25a      	sxtb	r2, r3
 800142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142e:	7a1b      	ldrb	r3, [r3, #8]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	b2db      	uxtb	r3, r3
 8001434:	b25b      	sxtb	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b25b      	sxtb	r3, r3
 800143a:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 800143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001440:	7a1b      	ldrb	r3, [r3, #8]
 8001442:	f003 020f 	and.w	r2, r3, #15
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	111b      	asrs	r3, r3, #4
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8001456:	e01c      	b.n	8001492 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	461a      	mov	r2, r3
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7ff ff55 	bl	8001310 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	7a1b      	ldrb	r3, [r3, #8]
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	b25b      	sxtb	r3, r3
 8001470:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	7a1b      	ldrb	r3, [r3, #8]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4413      	add	r3, r2
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 800148a:	e002      	b.n	8001492 <readTemperature+0xae>
    default:
      return t;
 800148c:	8c3b      	ldrh	r3, [r7, #32]
 800148e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001490:	e008      	b.n	80014a4 <readTemperature+0xc0>
  }
  if (reSense) {
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff ff29 	bl	80012f2 <owConvertTemperatureCmd>
  }
  return t;
 80014a0:	8c3b      	ldrh	r3, [r7, #32]
 80014a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80014a4:	2300      	movs	r3, #0
 80014a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014aa:	f362 0307 	bfi	r3, r2, #0, #8
 80014ae:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014b2:	f362 230f 	bfi	r3, r2, #8, #8
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3730      	adds	r7, #48	; 0x30
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80014c6:	f7ff fd0b 	bl	8000ee0 <owResetCmd>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2bf0      	cmp	r3, #240	; 0xf0
 80014ce:	d052      	beq.n	8001576 <get_ROMid+0xb6>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 80014d0:	483b      	ldr	r0, [pc, #236]	; (80015c0 <get_ROMid+0x100>)
 80014d2:	f7ff feca 	bl	800126a <owSearchCmd>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <get_ROMid+0x104>)
 80014dc:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <get_ROMid+0x104>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d113      	bne.n	800150e <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <get_ROMid+0x108>)
 80014e8:	4a38      	ldr	r2, [pc, #224]	; (80015cc <get_ROMid+0x10c>)
 80014ea:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80014ec:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <get_ROMid+0x110>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e005      	b.n	8001500 <get_ROMid+0x40>
					__asm__("nop");
 80014f4:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80014f6:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <get_ROMid+0x110>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <get_ROMid+0x110>)
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <get_ROMid+0x110>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <get_ROMid+0x108>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d3f3      	bcc.n	80014f4 <get_ROMid+0x34>
				pDelay = 1000000;
 800150c:	e7eb      	b.n	80014e6 <get_ROMid+0x26>
			}

		}
		i = 0;
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <get_ROMid+0x110>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8001514:	e028      	b.n	8001568 <get_ROMid+0xa8>
			RomCode *r = &ow.ids[i];
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <get_ROMid+0x110>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <get_ROMid+0x100>)
 800151e:	4413      	add	r3, r2
 8001520:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fde5 	bl	80010f2 <owCRC8>
 8001528:	4603      	mov	r3, r0
 800152a:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	79db      	ldrb	r3, [r3, #7]
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	429a      	cmp	r2, r3
 8001534:	d101      	bne.n	800153a <get_ROMid+0x7a>
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <get_ROMid+0x114>)
 8001538:	e000      	b.n	800153c <get_ROMid+0x7c>
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <get_ROMid+0x118>)
 800153c:	4a27      	ldr	r2, [pc, #156]	; (80015dc <get_ROMid+0x11c>)
 800153e:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <get_ROMid+0x110>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <get_ROMid+0x120>)
 8001548:	601a      	str	r2, [r3, #0]

			//sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
			//		r->code[2], r->code[1], r->code[0], r->crc);

			if (crc != r->crc) {
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	79db      	ldrb	r3, [r3, #7]
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	429a      	cmp	r2, r3
 8001552:	d004      	beq.n	800155e <get_ROMid+0x9e>
				devInfo.device = i;
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <get_ROMid+0x110>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <get_ROMid+0x120>)
 800155c:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <get_ROMid+0x110>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <get_ROMid+0x110>)
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <get_ROMid+0x104>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <get_ROMid+0x110>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d8cf      	bhi.n	8001516 <get_ROMid+0x56>
			//	sprintf (devInfo.info,"\n can't read cause CNC error");
			}
		}

	}
	pDelay = 1000000;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <get_ROMid+0x108>)
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <get_ROMid+0x10c>)
 800157a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <get_ROMid+0x110>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e005      	b.n	8001590 <get_ROMid+0xd0>
		__asm__("nop");
 8001584:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <get_ROMid+0x110>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <get_ROMid+0x110>)
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <get_ROMid+0x110>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <get_ROMid+0x108>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d3f3      	bcc.n	8001584 <get_ROMid+0xc4>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <get_ROMid+0x11c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <get_ROMid+0x114>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fdd4 	bl	8000150 <strcmp>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <get_ROMid+0xf2>
 80015ae:	2300      	movs	r3, #0
 80015b0:	e001      	b.n	80015b6 <get_ROMid+0xf6>
	else return -1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000089c 	.word	0x2000089c
 80015c4:	200008f4 	.word	0x200008f4
 80015c8:	20000000 	.word	0x20000000
 80015cc:	000f4240 	.word	0x000f4240
 80015d0:	20000898 	.word	0x20000898
 80015d4:	08008888 	.word	0x08008888
 80015d8:	08008890 	.word	0x08008890
 80015dc:	200008f8 	.word	0x200008f8
 80015e0:	200008bc 	.word	0x200008bc

080015e4 <get_Temperature>:

void get_Temperature (void)
{
 80015e4:	b598      	push	{r3, r4, r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	i=0;
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <get_Temperature+0x104>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80015ee:	e071      	b.n	80016d4 <get_Temperature+0xf0>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 80015f0:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <get_Temperature+0x104>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a3d      	ldr	r2, [pc, #244]	; (80016ec <get_Temperature+0x108>)
 80015f6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80015fa:	2b28      	cmp	r3, #40	; 0x28
 80015fc:	d006      	beq.n	800160c <get_Temperature+0x28>
 80015fe:	2b28      	cmp	r3, #40	; 0x28
 8001600:	dc60      	bgt.n	80016c4 <get_Temperature+0xe0>
 8001602:	2b00      	cmp	r3, #0
 8001604:	d060      	beq.n	80016c8 <get_Temperature+0xe4>
 8001606:	2b10      	cmp	r3, #16
 8001608:	d02e      	beq.n	8001668 <get_Temperature+0x84>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 800160a:	e05b      	b.n	80016c4 <get_Temperature+0xe0>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <get_Temperature+0x104>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4a36      	ldr	r2, [pc, #216]	; (80016ec <get_Temperature+0x108>)
 8001614:	4413      	add	r3, r2
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	4834      	ldr	r0, [pc, #208]	; (80016ec <get_Temperature+0x108>)
 800161c:	f7ff fee2 	bl	80013e4 <readTemperature>
 8001620:	4602      	mov	r2, r0
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <get_Temperature+0x10c>)
 8001624:	b212      	sxth	r2, r2
 8001626:	4611      	mov	r1, r2
 8001628:	7019      	strb	r1, [r3, #0]
 800162a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800162e:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <get_Temperature+0x10c>)
 8001632:	f993 3000 	ldrsb.w	r3, [r3]
 8001636:	461a      	mov	r2, r3
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	461a      	mov	r2, r3
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <get_Temperature+0x10c>)
 8001644:	785b      	ldrb	r3, [r3, #1]
 8001646:	4413      	add	r3, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f9b3 	bl	80009b4 <__aeabi_i2f>
 800164e:	4603      	mov	r3, r0
 8001650:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <get_Temperature+0x104>)
 8001652:	6814      	ldr	r4, [r2, #0]
 8001654:	4927      	ldr	r1, [pc, #156]	; (80016f4 <get_Temperature+0x110>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fab4 	bl	8000bc4 <__aeabi_fdiv>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <get_Temperature+0x114>)
 8001662:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8001666:	e030      	b.n	80016ca <get_Temperature+0xe6>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <get_Temperature+0x104>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <get_Temperature+0x108>)
 8001670:	4413      	add	r3, r2
 8001672:	2201      	movs	r2, #1
 8001674:	4619      	mov	r1, r3
 8001676:	481d      	ldr	r0, [pc, #116]	; (80016ec <get_Temperature+0x108>)
 8001678:	f7ff feb4 	bl	80013e4 <readTemperature>
 800167c:	4602      	mov	r2, r0
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <get_Temperature+0x10c>)
 8001680:	b212      	sxth	r2, r2
 8001682:	4611      	mov	r1, r2
 8001684:	7019      	strb	r1, [r3, #0]
 8001686:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800168a:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <get_Temperature+0x10c>)
 800168e:	f993 3000 	ldrsb.w	r3, [r3]
 8001692:	461a      	mov	r2, r3
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	461a      	mov	r2, r3
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <get_Temperature+0x10c>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	4413      	add	r3, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f985 	bl	80009b4 <__aeabi_i2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <get_Temperature+0x104>)
 80016ae:	6814      	ldr	r4, [r2, #0]
 80016b0:	4910      	ldr	r1, [pc, #64]	; (80016f4 <get_Temperature+0x110>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fa86 	bl	8000bc4 <__aeabi_fdiv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <get_Temperature+0x114>)
 80016be:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 80016c2:	e002      	b.n	80016ca <get_Temperature+0xe6>
			break;
 80016c4:	bf00      	nop
 80016c6:	e000      	b.n	80016ca <get_Temperature+0xe6>
			break;
 80016c8:	bf00      	nop
	for (; i < devices; i++) {
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <get_Temperature+0x104>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <get_Temperature+0x104>)
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <get_Temperature+0x118>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <get_Temperature+0x104>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d886      	bhi.n	80015f0 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	bd98      	pop	{r3, r4, r7, pc}
 80016e8:	20000898 	.word	0x20000898
 80016ec:	2000089c 	.word	0x2000089c
 80016f0:	200008b8 	.word	0x200008b8
 80016f4:	41200000 	.word	0x41200000
 80016f8:	200008ec 	.word	0x200008ec
 80016fc:	200008f4 	.word	0x200008f4

08001700 <Button_Add>:
 * @param handle handle of button to be registered
 * @retval return button ID (index of button in registred list), return -1 on failure
 * @note adjust MAX_BUTTONS accordingly
 */
int32_t Button_Add(Button_Struct_t *handle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");
    BUTTON_ASSERT(Button_Count < MAX_BUTTONS, "MAX Button count reached");

    if (Button_Count < MAX_BUTTONS && handle != NULL)
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <Button_Add+0x6c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d826      	bhi.n	800175e <Button_Add+0x5e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d023      	beq.n	800175e <Button_Add+0x5e>
    {
        BUTTON_ASSERT(handle->Button_Read, "Button_Read not defined");

        /* call init function if defined */
        if (handle->Button_Init != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <Button_Add+0x24>
        {
            handle->Button_Init();
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	4798      	blx	r3
        }
        handle->Button_Event = Button_Idle;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
        handle->Button_Clicked_Count = 0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	731a      	strb	r2, [r3, #12]
        handle->Button_Pressed_Ticks = 0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
        handle->Button_Released_Ticks = 0;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]

        Button_List[Button_Count] = handle;
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <Button_Add+0x6c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <Button_Add+0x70>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        Button_Count++;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <Button_Add+0x6c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <Button_Add+0x6c>)
 8001754:	701a      	strb	r2, [r3, #0]

        /** return button ID (index of button in registred list) */
        return Button_Count - 1;
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <Button_Add+0x6c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3b01      	subs	r3, #1
 800175c:	e001      	b.n	8001762 <Button_Add+0x62>
    }
    /** return error */
    return -1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000074 	.word	0x20000074
 8001770:	20000064 	.word	0x20000064

08001774 <Button_Loop>:
 * @brief frequently called in main loop or timer ISR. should be called at least every 20ms?
 * @param none
 * @retval none
 */
void Button_Loop(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
    static uint32_t Button_Scan_Time_Stamp = 0;

    /** execute this loop on every BUTTON_SCAN_TICK */
    if (Button_Get_Tick() - Button_Scan_Time_Stamp > BUTTON_SCAN_TICK)
 800177a:	f001 fe37 	bl	80033ec <Button_Get_Tick>
 800177e:	4602      	mov	r2, r0
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <Button_Loop+0x15c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b0a      	cmp	r3, #10
 8001788:	f240 809d 	bls.w	80018c6 <Button_Loop+0x152>
    {
        Button_Struct_t *handle = NULL;
 800178c:	2300      	movs	r3, #0
 800178e:	603b      	str	r3, [r7, #0]
        Button_Scan_Time_Stamp = Button_Get_Tick();
 8001790:	f001 fe2c 	bl	80033ec <Button_Get_Tick>
 8001794:	4603      	mov	r3, r0
 8001796:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <Button_Loop+0x15c>)
 8001798:	6013      	str	r3, [r2, #0]

        for (uint8_t Index = 0; Index < Button_Count; Index++)
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]
 800179e:	e08c      	b.n	80018ba <Button_Loop+0x146>
        {
            /** grab button handle from list */
            handle = Button_List[Index];
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <Button_Loop+0x160>)
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	603b      	str	r3, [r7, #0]

            BUTTON_ASSERT(handle, "NULL found in list");

            if (handle != NULL)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8081 	beq.w	80018b4 <Button_Loop+0x140>
            {
                /** button pressed detected */
                if (handle->Button_Read != NULL && handle->Button_Read())
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d038      	beq.n	800182c <Button_Loop+0xb8>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	4798      	blx	r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d032      	beq.n	800182c <Button_Loop+0xb8>
                {
                    handle->Button_Pressed_Ticks++;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	605a      	str	r2, [r3, #4]

                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b63      	cmp	r3, #99	; 0x63
 80017d6:	d80e      	bhi.n	80017f6 <Button_Loop+0x82>
                    {
                        /** button repressed detected */
                        if (handle->Button_Released_Ticks < BUTTON_REPRESSED_TICK)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b06      	cmp	r3, #6
 80017de:	d803      	bhi.n	80017e8 <Button_Loop+0x74>
                        {
                            handle->Button_Event = Button_Repressed;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2202      	movs	r2, #2
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e002      	b.n	80017ee <Button_Loop+0x7a>
                        }
                        else
                        {
                            handle->Button_Event = Button_Pressed;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
                        }
                        handle->Button_Released_Ticks = 0;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 80017f4:	e05d      	b.n	80018b2 <Button_Loop+0x13e>
                    }
                    else if (handle->Button_Event != Button_Long_Pressed)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d059      	beq.n	80018b2 <Button_Loop+0x13e>
                    {
                        /** button long pressed detected */
                        handle->Button_Event = Button_Long_Pressed;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2203      	movs	r2, #3
 8001802:	701a      	strb	r2, [r3, #0]
                        /** 0xFF for long press */
                        handle->Button_Clicked_Count = 0xFF;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	22ff      	movs	r2, #255	; 0xff
 8001808:	731a      	strb	r2, [r3, #12]
                        handle->Button_Count_Captured = 0xFF;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	22ff      	movs	r2, #255	; 0xff
 800180e:	735a      	strb	r2, [r3, #13]
                        /** if button callback is defined, call it*/
                        if (handle->Callback != NULL)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <Button_Loop+0xb0>
                        {
                            handle->Callback(handle->Button_Clicked_Count);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	7b12      	ldrb	r2, [r2, #12]
 8001820:	4610      	mov	r0, r2
 8001822:	4798      	blx	r3
                        }
                        handle->Button_Clicked_Count = 0;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	731a      	strb	r2, [r3, #12]
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 800182a:	e042      	b.n	80018b2 <Button_Loop+0x13e>
                    }
                }
                else
                {
                    /** button released detected */
                    handle->Button_Released_Ticks++;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	609a      	str	r2, [r3, #8]

                    /** if button was pressed for BUTTON_DEBOUNCE_TICK */
                    if (handle->Button_Pressed_Ticks > BUTTON_DEBOUNCE_TICK)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d91c      	bls.n	8001878 <Button_Loop+0x104>
                    {
                        handle->Button_Pressed_Ticks = 0;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]

                        if (handle->Button_Event == Button_Repressed)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d106      	bne.n	800185a <Button_Loop+0xe6>
                        {
                            handle->Button_Clicked_Count++;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	7b1b      	ldrb	r3, [r3, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	b2da      	uxtb	r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	731a      	strb	r2, [r3, #12]
 8001858:	e00e      	b.n	8001878 <Button_Loop+0x104>
                        }
                        else if (handle->Button_Event == Button_Pressed)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d103      	bne.n	800186a <Button_Loop+0xf6>
                        {
                            handle->Button_Clicked_Count = 1;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	731a      	strb	r2, [r3, #12]
 8001868:	e006      	b.n	8001878 <Button_Loop+0x104>
                        }
                        else if (handle->Button_Event == Button_Long_Pressed)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d102      	bne.n	8001878 <Button_Loop+0x104>
                        {
                            handle->Button_Event = Button_Idle;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /** if button released for BUTTON_CLICKED_TICK */
                    if (handle->Button_Released_Ticks > BUTTON_CLICKED_TICK)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d919      	bls.n	80018b4 <Button_Loop+0x140>
                    {
                        if (handle->Button_Event != Button_Idle)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d015      	beq.n	80018b4 <Button_Loop+0x140>
                        {
                            handle->Button_Event = Button_Idle;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
                            /** capture the button click so we can read it manually if we want */
                            handle->Button_Count_Captured = handle->Button_Clicked_Count;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	7b1a      	ldrb	r2, [r3, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	735a      	strb	r2, [r3, #13]
                            /** if button callback is defined, call it */
                            if (handle->Callback != NULL)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <Button_Loop+0x136>
                            {
                                handle->Callback(handle->Button_Clicked_Count);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	7b12      	ldrb	r2, [r2, #12]
 80018a6:	4610      	mov	r0, r2
 80018a8:	4798      	blx	r3
                            }
                            /** reest click count after callback and start the scan again */
                            handle->Button_Clicked_Count = 0;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2200      	movs	r2, #0
 80018ae:	731a      	strb	r2, [r3, #12]
 80018b0:	e000      	b.n	80018b4 <Button_Loop+0x140>
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 80018b2:	bf00      	nop
        for (uint8_t Index = 0; Index < Button_Count; Index++)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	3301      	adds	r3, #1
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <Button_Loop+0x164>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f4ff af6d 	bcc.w	80017a0 <Button_Loop+0x2c>
                    }
                }
            }
        }
    }
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000078 	.word	0x20000078
 80018d4:	20000064 	.word	0x20000064
 80018d8:	20000074 	.word	0x20000074

080018dc <Button_Get_Status>:
 * @brief return the current state of button
 * @param handle handle of button
 * @retval return Button_Event
 */
Button_Event_t Button_Get_Status(Button_Struct_t *handle)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");

    if (handle != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <Button_Get_Status+0x14>
    {
        return handle->Button_Event;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	e000      	b.n	80018f2 <Button_Get_Status+0x16>
    }
    /** error*/
    return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <Button_Get_Clicked_Count>:
 * @brief return the clicked count of button
 * @param handle handle of button
 * @retval return clicked count
 */
uint8_t Button_Get_Clicked_Count(Button_Struct_t *handle)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");

    uint8_t count = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

    if (handle != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00d      	beq.n	800192a <Button_Get_Clicked_Count+0x2e>
    {
        if (handle->Button_Event == Button_Idle || handle->Button_Event == Button_Long_Pressed)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <Button_Get_Clicked_Count+0x22>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d105      	bne.n	800192a <Button_Get_Clicked_Count+0x2e>
        {
            count = handle->Button_Count_Captured;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7b5b      	ldrb	r3, [r3, #13]
 8001922:	73fb      	strb	r3, [r7, #15]
            handle->Button_Count_Captured = 0;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	735a      	strb	r2, [r3, #13]
        }
    }

    return count;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
	...

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193c:	f004 fd9e 	bl	800647c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001940:	f000 f8dc 	bl	8001afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001944:	f000 f9aa 	bl	8001c9c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001948:	f000 f954 	bl	8001bf4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800194c:	f000 f91c 	bl	8001b88 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001950:	f000 f97a 	bl	8001c48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//FLASH INIT
  	  W25qxx_Init();
 8001954:	f004 fa16 	bl	8005d84 <W25qxx_Init>
	//W25qxx_EraseChip();
	//W25qxx_EraseBlock(0); // 65536 байт
	//W25qxx_EraseSector(0); // 4096 байт

//DISPLAY INIT
	u8g2_Setup_st7565_nhd_c12864_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi,
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <main+0x164>)
 800195a:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <main+0x168>)
 800195c:	4951      	ldr	r1, [pc, #324]	; (8001aa4 <main+0x16c>)
 800195e:	4852      	ldr	r0, [pc, #328]	; (8001aa8 <main+0x170>)
 8001960:	f002 fc22 	bl	80041a8 <u8g2_Setup_st7565_nhd_c12864_f>
			u8g2_gpio_and_delay_stm32);
	u8g2_InitDisplay(&u8g2); 	 // send init sequence to the display, display is in sleep mode after this
 8001964:	4850      	ldr	r0, [pc, #320]	; (8001aa8 <main+0x170>)
 8001966:	f004 f84c 	bl	8005a02 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 800196a:	2100      	movs	r1, #0
 800196c:	484e      	ldr	r0, [pc, #312]	; (8001aa8 <main+0x170>)
 800196e:	f004 f857 	bl	8005a20 <u8x8_SetPowerSave>
	u8g2_SetContrast(&u8g2, 250);
 8001972:	21fa      	movs	r1, #250	; 0xfa
 8001974:	484c      	ldr	r0, [pc, #304]	; (8001aa8 <main+0x170>)
 8001976:	f004 f864 	bl	8005a42 <u8x8_SetContrast>
	u8g2_ClearDisplay(&u8g2);
 800197a:	484b      	ldr	r0, [pc, #300]	; (8001aa8 <main+0x170>)
 800197c:	f002 fbef 	bl	800415e <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_courB18_tr);
 8001980:	494a      	ldr	r1, [pc, #296]	; (8001aac <main+0x174>)
 8001982:	4849      	ldr	r0, [pc, #292]	; (8001aa8 <main+0x170>)
 8001984:	f003 f9ba 	bl	8004cfc <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, 20, 30, "Hello!");
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <main+0x178>)
 800198a:	221e      	movs	r2, #30
 800198c:	2114      	movs	r1, #20
 800198e:	4846      	ldr	r0, [pc, #280]	; (8001aa8 <main+0x170>)
 8001990:	f003 f916 	bl	8004bc0 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8001994:	4844      	ldr	r0, [pc, #272]	; (8001aa8 <main+0x170>)
 8001996:	f002 fb7a 	bl	800408e <u8g2_SendBuffer>
	HAL_Delay(1000);
 800199a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199e:	f004 fdcf 	bl	8006540 <HAL_Delay>
	display_height = u8g2_GetDisplayHeight(&u8g2);
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <main+0x170>)
 80019a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <main+0x17c>)
 80019ac:	701a      	strb	r2, [r3, #0]
	display_width = u8g2_GetDisplayWidth(&u8g2);
 80019ae:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <main+0x170>)
 80019b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <main+0x180>)
 80019b8:	701a      	strb	r2, [r3, #0]
	display_num_lines = display_height / (LCD_FONT_HIGHT + LCD_LINE_SPACER);
 80019ba:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <main+0x17c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	4a3f      	ldr	r2, [pc, #252]	; (8001abc <main+0x184>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <main+0x188>)
 80019ca:	701a      	strb	r2, [r3, #0]

//BUTTONS INIT
	Button_A.Button_Init = NULL; // инициализация кнопки
 80019cc:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <main+0x18c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
	Button_A.Button_Read = Button_A_Read;
 80019d2:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <main+0x18c>)
 80019d4:	4a3c      	ldr	r2, [pc, #240]	; (8001ac8 <main+0x190>)
 80019d6:	615a      	str	r2, [r3, #20]
	Button_A.Callback = NULL; //    NULL; /** without callback */
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <main+0x18c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_A);
 80019de:	4839      	ldr	r0, [pc, #228]	; (8001ac4 <main+0x18c>)
 80019e0:	f7ff fe8e 	bl	8001700 <Button_Add>

	Button_B.Button_Init = NULL;
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <main+0x194>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
	Button_B.Button_Read = Button_B_Read;
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <main+0x194>)
 80019ec:	4a38      	ldr	r2, [pc, #224]	; (8001ad0 <main+0x198>)
 80019ee:	615a      	str	r2, [r3, #20]
	Button_B.Callback = NULL; //    NULL; /** without callback */
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <main+0x194>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_B);
 80019f6:	4835      	ldr	r0, [pc, #212]	; (8001acc <main+0x194>)
 80019f8:	f7ff fe82 	bl	8001700 <Button_Add>

	Button_C.Button_Init = NULL;
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <main+0x19c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
	Button_C.Button_Read = Button_C_Read;
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <main+0x19c>)
 8001a04:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <main+0x1a0>)
 8001a06:	615a      	str	r2, [r3, #20]
	Button_C.Callback = NULL; //    NULL; /** without callback */
 8001a08:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <main+0x19c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_C);
 8001a0e:	4831      	ldr	r0, [pc, #196]	; (8001ad4 <main+0x19c>)
 8001a10:	f7ff fe76 	bl	8001700 <Button_Add>

	Button_D.Button_Init = NULL;
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <main+0x1a4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
	Button_D.Button_Read = Button_D_Read;
 8001a1a:	4b30      	ldr	r3, [pc, #192]	; (8001adc <main+0x1a4>)
 8001a1c:	4a30      	ldr	r2, [pc, #192]	; (8001ae0 <main+0x1a8>)
 8001a1e:	615a      	str	r2, [r3, #20]
	Button_D.Callback = NULL; //    NULL; /** without callback */
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <main+0x1a4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_D);
 8001a26:	482d      	ldr	r0, [pc, #180]	; (8001adc <main+0x1a4>)
 8001a28:	f7ff fe6a 	bl	8001700 <Button_Add>

//READ SETPOINTS FROM FLASH W25Q
	W25qxx_ReadBytes(SetpointsUnion.SetpointsArray, SETPOINTS_FLASH_SECTOR*FLASH_SECTOR_SIZE, MENU_SETPOINTS_NUM_ITEMS);
 8001a2c:	2219      	movs	r2, #25
 8001a2e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001a32:	482c      	ldr	r0, [pc, #176]	; (8001ae4 <main+0x1ac>)
 8001a34:	f004 fca2 	bl	800637c <W25qxx_ReadBytes>

//ONE WIRE
	get_ROMid();
 8001a38:	f7ff fd42 	bl	80014c0 <get_ROMid>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if((HAL_GetTick() - time_b) > BLINK_INTERVAL) // интервал 500мс
 8001a3c:	f004 fd76 	bl	800652c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <main+0x1b0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a4c:	d915      	bls.n	8001a7a <main+0x142>
	   {
		  flag_blink = !flag_blink;
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <main+0x1b4>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f083 0301 	eor.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <main+0x1b4>)
 8001a6a:	701a      	strb	r2, [r3, #0]
		  time_b = HAL_GetTick();
 8001a6c:	f004 fd5e 	bl	800652c <HAL_GetTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <main+0x1b0>)
 8001a74:	6013      	str	r3, [r2, #0]
		  get_Temperature();
 8001a76:	f7ff fdb5 	bl	80015e4 <get_Temperature>
	   }

	  main_data.inside_temperature = Temp[0];
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <main+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <main+0x1bc>)
 8001a80:	6053      	str	r3, [r2, #4]
	  main_data.outside_temperature = Temp[1];
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <main+0x1b8>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <main+0x1bc>)
 8001a88:	6013      	str	r3, [r2, #0]

	  fnMenuProcess();
 8001a8a:	f001 f9b7 	bl	8002dfc <fnMenuProcess>

	  btn_state = fnGetPressKey();// опрос кнопок
 8001a8e:	f001 fbe3 	bl	8003258 <fnGetPressKey>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <main+0x1c0>)
 8001a98:	801a      	strh	r2, [r3, #0]
	  if((HAL_GetTick() - time_b) > BLINK_INTERVAL) // интервал 500мс
 8001a9a:	e7cf      	b.n	8001a3c <main+0x104>
 8001a9c:	08001e8d 	.word	0x08001e8d
 8001aa0:	08001fa1 	.word	0x08001fa1
 8001aa4:	0800ab50 	.word	0x0800ab50
 8001aa8:	200009e8 	.word	0x200009e8
 8001aac:	08009328 	.word	0x08009328
 8001ab0:	0800889c 	.word	0x0800889c
 8001ab4:	20000901 	.word	0x20000901
 8001ab8:	20000b20 	.word	0x20000b20
 8001abc:	aaaaaaab 	.word	0xaaaaaaab
 8001ac0:	20000900 	.word	0x20000900
 8001ac4:	200009cc 	.word	0x200009cc
 8001ac8:	080033fd 	.word	0x080033fd
 8001acc:	200009b0 	.word	0x200009b0
 8001ad0:	0800341d 	.word	0x0800341d
 8001ad4:	20000994 	.word	0x20000994
 8001ad8:	0800343d 	.word	0x0800343d
 8001adc:	20000978 	.word	0x20000978
 8001ae0:	0800345d 	.word	0x0800345d
 8001ae4:	20000ac0 	.word	0x20000ac0
 8001ae8:	20000088 	.word	0x20000088
 8001aec:	2000008c 	.word	0x2000008c
 8001af0:	200008ec 	.word	0x200008ec
 8001af4:	2000095c 	.word	0x2000095c
 8001af8:	20000080 	.word	0x20000080

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b090      	sub	sp, #64	; 0x40
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0318 	add.w	r3, r7, #24
 8001b06:	2228      	movs	r2, #40	; 0x28
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f006 fea8 	bl	8008860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b30:	2302      	movs	r3, #2
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	4618      	mov	r0, r3
 8001b46:	f005 f891 	bl	8006c6c <HAL_RCC_OscConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b50:	f001 fc94 	bl	800347c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b54:	230f      	movs	r3, #15
 8001b56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 fafc 	bl	800716c <HAL_RCC_ClockConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b7a:	f001 fc7f 	bl	800347c <Error_Handler>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3740      	adds	r7, #64	; 0x40
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_SPI1_Init+0x64>)
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <MX_SPI1_Init+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_SPI1_Init+0x64>)
 8001b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_SPI1_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_SPI1_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_SPI1_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bbc:	2218      	movs	r2, #24
 8001bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bd4:	220a      	movs	r2, #10
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_SPI1_Init+0x64>)
 8001bda:	f005 fc61 	bl	80074a0 <HAL_SPI_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001be4:	f001 fc4a 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000904 	.word	0x20000904
 8001bf0:	40013000 	.word	0x40013000

08001bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <MX_USART1_UART_Init+0x50>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	f006 f9a4 	bl	8007f78 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c36:	f001 fc21 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000a7c 	.word	0x20000a7c
 8001c44:	40013800 	.word	0x40013800

08001c48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <MX_USART3_UART_Init+0x50>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_USART3_UART_Init+0x4c>)
 8001c80:	f006 f9c7 	bl	8008012 <HAL_HalfDuplex_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c8a:	f001 fbf7 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000adc 	.word	0x20000adc
 8001c98:	40004800 	.word	0x40004800

08001c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a3c      	ldr	r2, [pc, #240]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a36      	ldr	r2, [pc, #216]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a30      	ldr	r2, [pc, #192]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001cfe:	f043 0308 	orr.w	r3, r3, #8
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <MX_GPIO_Init+0x10c>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d16:	4825      	ldr	r0, [pc, #148]	; (8001dac <MX_GPIO_Init+0x110>)
 8001d18:	f004 ff8f 	bl	8006c3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2118      	movs	r1, #24
 8001d20:	4823      	ldr	r0, [pc, #140]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001d22:	f004 ff8a 	bl	8006c3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4822      	ldr	r0, [pc, #136]	; (8001db4 <MX_GPIO_Init+0x118>)
 8001d2c:	f004 ff85 	bl	8006c3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W25Q_CS_Pin */
  GPIO_InitStruct.Pin = W25Q_CS_Pin;
 8001d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	4619      	mov	r1, r3
 8001d48:	4818      	ldr	r0, [pc, #96]	; (8001dac <MX_GPIO_Init+0x110>)
 8001d4a:	f004 fddb 	bl	8006904 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin;
 8001d4e:	2318      	movs	r3, #24
 8001d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4619      	mov	r1, r3
 8001d64:	4812      	ldr	r0, [pc, #72]	; (8001db0 <MX_GPIO_Init+0x114>)
 8001d66:	f004 fdcd 	bl	8006904 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <MX_GPIO_Init+0x118>)
 8001d82:	f004 fdbf 	bl	8006904 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_ENTER_Pin BUTTON_ESC_Pin BUTTON_UP_Pin BUTTON_DOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_ENTER_Pin|BUTTON_ESC_Pin|BUTTON_UP_Pin|BUTTON_DOWN_Pin;
 8001d86:	2378      	movs	r3, #120	; 0x78
 8001d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4619      	mov	r1, r3
 8001d98:	4806      	ldr	r0, [pc, #24]	; (8001db4 <MX_GPIO_Init+0x118>)
 8001d9a:	f004 fdb3 	bl	8006904 <HAL_GPIO_Init>

}
 8001d9e:	bf00      	nop
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40010800 	.word	0x40010800
 8001db4:	40010c00 	.word	0x40010c00

08001db8 <u8g_port_delay_ns>:


//****************************************************************************

//функции задержек для работы библиотеки дисплея
void u8g_port_delay_ns(uint8_t ns) {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
	// Core @72 MHZ: 14ns per instruction.
	// __NOP(); is direct "nop;" instruction to cpu.
	// Divide ns / 28 (extra instruction for jump back to beginning of the loop) for loop cycles.
	for (uint8_t i = 0; i < (ns / 28); i++) {
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e003      	b.n	8001dd0 <u8g_port_delay_ns+0x18>
		__NOP();
 8001dc8:	bf00      	nop
	for (uint8_t i = 0; i < (ns / 28); i++) {
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <u8g_port_delay_ns+0x38>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d3f2      	bcc.n	8001dc8 <u8g_port_delay_ns+0x10>
	}
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	24924925 	.word	0x24924925
 8001df4:	00000000 	.word	0x00000000

08001df8 <u8g_port_delay_100ns>:

void u8g_port_delay_100ns(uint8_t ns) {
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	// Same as in u8g_hw_port_delay_ns function.
	// 100 / 28 = 3.57;
	for (uint16_t i = 0; i < (ns * 3.57); i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	81fb      	strh	r3, [r7, #14]
 8001e06:	e003      	b.n	8001e10 <u8g_port_delay_100ns+0x18>
		__NOP();
 8001e08:	bf00      	nop
	for (uint16_t i = 0; i < (ns * 3.57); i++) {
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	81fb      	strh	r3, [r7, #14]
 8001e10:	89fb      	ldrh	r3, [r7, #14]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fc22 	bl	800065c <__aeabi_i2d>
 8001e18:	4604      	mov	r4, r0
 8001e1a:	460d      	mov	r5, r1
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fc1c 	bl	800065c <__aeabi_i2d>
 8001e24:	a30a      	add	r3, pc, #40	; (adr r3, 8001e50 <u8g_port_delay_100ns+0x58>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe f99b 	bl	8000164 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4620      	mov	r0, r4
 8001e34:	4629      	mov	r1, r5
 8001e36:	f7fe fcdb 	bl	80007f0 <__aeabi_dcmplt>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e3      	bne.n	8001e08 <u8g_port_delay_100ns+0x10>
	}
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	f3af 8000 	nop.w
 8001e50:	28f5c28f 	.word	0x28f5c28f
 8001e54:	400c8f5c 	.word	0x400c8f5c

08001e58 <u8g_port_delay_10us>:

void u8g_port_delay_10us(uint8_t us) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	// Same as in u8g_hw_port_delay_ns function.
	// 3.57 * 100 ? 357;
	for (uint16_t i = 0; i < (us * 357); i++) {
 8001e62:	2300      	movs	r3, #0
 8001e64:	81fb      	strh	r3, [r7, #14]
 8001e66:	e003      	b.n	8001e70 <u8g_port_delay_10us+0x18>
		__NOP();
 8001e68:	bf00      	nop
	for (uint16_t i = 0; i < (us * 357); i++) {
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	81fb      	strh	r3, [r7, #14]
 8001e70:	89fa      	ldrh	r2, [r7, #14]
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f240 1165 	movw	r1, #357	; 0x165
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf3      	blt.n	8001e68 <u8g_port_delay_10us+0x10>
	}
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <u8g2_gpio_and_delay_stm32>:
//************************************************************************

// функция обработки задержек и управления gpio для работы библиотеки дисплея
uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8,
		U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
		U8X8_UNUSED void *arg_ptr) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	72fb      	strb	r3, [r7, #11]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	72bb      	strb	r3, [r7, #10]

	switch (msg) {
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	3b28      	subs	r3, #40	; 0x28
 8001ea2:	2b23      	cmp	r3, #35	; 0x23
 8001ea4:	d873      	bhi.n	8001f8e <u8g2_gpio_and_delay_stm32+0x102>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <u8g2_gpio_and_delay_stm32+0x20>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001f3d 	.word	0x08001f3d
 8001eb0:	08001f67 	.word	0x08001f67
 8001eb4:	08001f5d 	.word	0x08001f5d
 8001eb8:	08001f53 	.word	0x08001f53
 8001ebc:	08001f49 	.word	0x08001f49
 8001ec0:	08001f8f 	.word	0x08001f8f
 8001ec4:	08001f8f 	.word	0x08001f8f
 8001ec8:	08001f8f 	.word	0x08001f8f
 8001ecc:	08001f8f 	.word	0x08001f8f
 8001ed0:	08001f8f 	.word	0x08001f8f
 8001ed4:	08001f8f 	.word	0x08001f8f
 8001ed8:	08001f8f 	.word	0x08001f8f
 8001edc:	08001f8f 	.word	0x08001f8f
 8001ee0:	08001f8f 	.word	0x08001f8f
 8001ee4:	08001f8f 	.word	0x08001f8f
 8001ee8:	08001f8f 	.word	0x08001f8f
 8001eec:	08001f8f 	.word	0x08001f8f
 8001ef0:	08001f8f 	.word	0x08001f8f
 8001ef4:	08001f8f 	.word	0x08001f8f
 8001ef8:	08001f8f 	.word	0x08001f8f
 8001efc:	08001f8f 	.word	0x08001f8f
 8001f00:	08001f8f 	.word	0x08001f8f
 8001f04:	08001f8f 	.word	0x08001f8f
 8001f08:	08001f8f 	.word	0x08001f8f
 8001f0c:	08001f8f 	.word	0x08001f8f
 8001f10:	08001f8f 	.word	0x08001f8f
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f8f 	.word	0x08001f8f
 8001f1c:	08001f8f 	.word	0x08001f8f
 8001f20:	08001f8f 	.word	0x08001f8f
 8001f24:	08001f8f 	.word	0x08001f8f
 8001f28:	08001f8f 	.word	0x08001f8f
 8001f2c:	08001f8f 	.word	0x08001f8f
 8001f30:	08001f8f 	.word	0x08001f8f
 8001f34:	08001f8f 	.word	0x08001f8f
 8001f38:	08001f71 	.word	0x08001f71

		case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2110      	movs	r1, #16
 8001f40:	4816      	ldr	r0, [pc, #88]	; (8001f9c <u8g2_gpio_and_delay_stm32+0x110>)
 8001f42:	f004 fe7a 	bl	8006c3a <HAL_GPIO_WritePin>
		break;
 8001f46:	e024      	b.n	8001f92 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_NANO:
		u8g_port_delay_ns(arg_int);
 8001f48:	7abb      	ldrb	r3, [r7, #10]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff34 	bl	8001db8 <u8g_port_delay_ns>
		break;
 8001f50:	e01f      	b.n	8001f92 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_100NANO:
		u8g_port_delay_100ns(arg_int);
 8001f52:	7abb      	ldrb	r3, [r7, #10]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff4f 	bl	8001df8 <u8g_port_delay_100ns>
		break;
 8001f5a:	e01a      	b.n	8001f92 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_10MICRO:
		u8g_port_delay_10us(arg_int);
 8001f5c:	7abb      	ldrb	r3, [r7, #10]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff7a 	bl	8001e58 <u8g_port_delay_10us>
		break;
 8001f64:	e015      	b.n	8001f92 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8001f66:	7abb      	ldrb	r3, [r7, #10]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 fae9 	bl	8006540 <HAL_Delay>
		break;
 8001f6e:	e010      	b.n	8001f92 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_GPIO_RESET:
		if (arg_int)
 8001f70:	7abb      	ldrb	r3, [r7, #10]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <u8g2_gpio_and_delay_stm32+0xf6>
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2108      	movs	r1, #8
 8001f7a:	4808      	ldr	r0, [pc, #32]	; (8001f9c <u8g2_gpio_and_delay_stm32+0x110>)
 8001f7c:	f004 fe5d 	bl	8006c3a <HAL_GPIO_WritePin>
		else
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
		break;
 8001f80:	e007      	b.n	8001f92 <u8g2_gpio_and_delay_stm32+0x106>
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2108      	movs	r1, #8
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <u8g2_gpio_and_delay_stm32+0x110>)
 8001f88:	f004 fe57 	bl	8006c3a <HAL_GPIO_WritePin>
		break;
 8001f8c:	e001      	b.n	8001f92 <u8g2_gpio_and_delay_stm32+0x106>
		default:
		return 0;//A message was received which is not implemented, return 0 to indicate an error
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <u8g2_gpio_and_delay_stm32+0x108>
	}

	return 1; // command processed successfully.
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010800 	.word	0x40010800

08001fa0 <u8x8_byte_4wire_hw_spi>:
//***************************************************************************************************

// функция для работы библиотеки дисплея по SPI
uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	72fb      	strb	r3, [r7, #11]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	72bb      	strb	r3, [r7, #10]

	switch (msg) {
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	3b14      	subs	r3, #20
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d837      	bhi.n	800202a <u8x8_byte_4wire_hw_spi+0x8a>
 8001fba:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <u8x8_byte_4wire_hw_spi+0x20>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	0800202f 	.word	0x0800202f
 8001fc4:	0800202b 	.word	0x0800202b
 8001fc8:	0800202b 	.word	0x0800202b
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	08002013 	.word	0x08002013
 8001fd4:	0800201f 	.word	0x0800201f
 8001fd8:	0800202b 	.word	0x0800202b
 8001fdc:	0800202b 	.word	0x0800202b
 8001fe0:	0800202b 	.word	0x0800202b
 8001fe4:	0800202b 	.word	0x0800202b
 8001fe8:	0800202b 	.word	0x0800202b
 8001fec:	0800202b 	.word	0x0800202b
 8001ff0:	08002005 	.word	0x08002005
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 100);
 8001ff4:	7abb      	ldrb	r3, [r7, #10]
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	2364      	movs	r3, #100	; 0x64
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	480f      	ldr	r0, [pc, #60]	; (800203c <u8x8_byte_4wire_hw_spi+0x9c>)
 8001ffe:	f005 fad3 	bl	80075a8 <HAL_SPI_Transmit>
		break;
 8002002:	e015      	b.n	8002030 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_INIT:
		break;

	case U8X8_MSG_BYTE_SET_DC:
		 HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, arg_int);
 8002004:	7abb      	ldrb	r3, [r7, #10]
 8002006:	461a      	mov	r2, r3
 8002008:	2101      	movs	r1, #1
 800200a:	480d      	ldr	r0, [pc, #52]	; (8002040 <u8x8_byte_4wire_hw_spi+0xa0>)
 800200c:	f004 fe15 	bl	8006c3a <HAL_GPIO_WritePin>
		break;
 8002010:	e00e      	b.n	8002030 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_START_TRANSFER:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	2110      	movs	r1, #16
 8002016:	480b      	ldr	r0, [pc, #44]	; (8002044 <u8x8_byte_4wire_hw_spi+0xa4>)
 8002018:	f004 fe0f 	bl	8006c3a <HAL_GPIO_WritePin>
		break;
 800201c:	e008      	b.n	8002030 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 800201e:	2201      	movs	r2, #1
 8002020:	2110      	movs	r1, #16
 8002022:	4808      	ldr	r0, [pc, #32]	; (8002044 <u8x8_byte_4wire_hw_spi+0xa4>)
 8002024:	f004 fe09 	bl	8006c3a <HAL_GPIO_WritePin>
		break;
 8002028:	e002      	b.n	8002030 <u8x8_byte_4wire_hw_spi+0x90>

	default:
		return 0;
 800202a:	2300      	movs	r3, #0
 800202c:	e001      	b.n	8002032 <u8x8_byte_4wire_hw_spi+0x92>
		break;
 800202e:	bf00      	nop
	}
	return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000904 	.word	0x20000904
 8002040:	40010c00 	.word	0x40010c00
 8002044:	40010800 	.word	0x40010800

08002048 <fnPrintMenuItemName>:
//*****************************************************************************************

//Функция печати имени пункта меню из progmem (общая для всех меню) --------------
void fnPrintMenuItemName(uint8_t _num_item, uint8_t _num_line, const char* const* _names) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	603a      	str	r2, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	460b      	mov	r3, r1
 8002056:	71bb      	strb	r3, [r7, #6]

  char buffer[32] = {0,};                            // Буфер на полную строку
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
 800206c:	615a      	str	r2, [r3, #20]
 800206e:	619a      	str	r2, [r3, #24]
  uint8_t i = 0;                                     // Переменная - счетчик
 8002070:	2300      	movs	r3, #0
 8002072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  const char * ptr = _names[_num_item];			// Получаем указатель на первый символ строки
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28


  do {                                            // Начало цикла
    buffer[i] = *ptr;        					  // Прочитать в буфер один символ из PGM и подвинуть указатель на 1
 8002082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800208e:	440b      	add	r3, r1
 8002090:	f803 2c28 	strb.w	r2, [r3, #-40]
    i++;
 8002094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002098:	3301      	adds	r3, #1
 800209a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ptr++;
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	3301      	adds	r3, #1
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
  } while (i<ITEM_MAX_CHARS);                     // Если это не конец строки - вернуться в начало цикла
 80020a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d9ea      	bls.n	8002082 <fnPrintMenuItemName+0x3a>
      buffer[i++] = (char)(pgm_read_byte(ptr));   // выводим
      ptr++;                                      // следующий символ
    }
 */

  u8g2_SetFont(&u8g2,u8g2_font_6x12_tr);
 80020ac:	490d      	ldr	r1, [pc, #52]	; (80020e4 <fnPrintMenuItemName+0x9c>)
 80020ae:	480e      	ldr	r0, [pc, #56]	; (80020e8 <fnPrintMenuItemName+0xa0>)
 80020b0:	f002 fe24 	bl	8004cfc <u8g2_SetFont>
  u8g2_DrawStr(&u8g2,3,(_num_line*12)-1,buffer); // Вывод готовой строки
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	0052      	lsls	r2, r2, #1
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	2103      	movs	r1, #3
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <fnPrintMenuItemName+0xa0>)
 80020ce:	f002 fd77 	bl	8004bc0 <u8g2_DrawStr>
  u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 80020d2:	4906      	ldr	r1, [pc, #24]	; (80020ec <fnPrintMenuItemName+0xa4>)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <fnPrintMenuItemName+0xa0>)
 80020d6:	f002 fe11 	bl	8004cfc <u8g2_SetFont>

}
 80020da:	bf00      	nop
 80020dc:	3730      	adds	r7, #48	; 0x30
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	08008f5c 	.word	0x08008f5c
 80020e8:	200009e8 	.word	0x200009e8
 80020ec:	08009bec 	.word	0x08009bec

080020f0 <fnPrintSelectionFrame>:
//*******************************************************************************************************************

//----------- Функция печати рамки навигации по меню -------------------
void fnPrintSelectionFrame(uint8_t item_pointer) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]

  uint8_t n = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]


  if(item_pointer < display_num_lines)n = item_pointer;
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <fnPrintSelectionFrame+0xd4>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	79fa      	ldrb	r2, [r7, #7]
 8002104:	429a      	cmp	r2, r3
 8002106:	d202      	bcs.n	800210e <fnPrintSelectionFrame+0x1e>
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e008      	b.n	8002120 <fnPrintSelectionFrame+0x30>
  else n = item_pointer % display_num_lines;
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <fnPrintSelectionFrame+0xd4>)
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	fbb3 f1f2 	udiv	r1, r3, r2
 8002118:	fb02 f201 	mul.w	r2, r2, r1
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	73fb      	strb	r3, [r7, #15]

  if(menu_mode == MENU_SETPOINTS_EDIT_MODE){
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <fnPrintSelectionFrame+0xd8>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d135      	bne.n	8002194 <fnPrintSelectionFrame+0xa4>


    if(flag_blink)u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 8002128:	4b28      	ldr	r3, [pc, #160]	; (80021cc <fnPrintSelectionFrame+0xdc>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d014      	beq.n	800215a <fnPrintSelectionFrame+0x6a>
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	b29b      	uxth	r3, r3
 800213e:	3302      	adds	r3, #2
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <fnPrintSelectionFrame+0xe0>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b02      	subs	r3, #2
 800214a:	b29b      	uxth	r3, r3
 800214c:	210c      	movs	r1, #12
 800214e:	9100      	str	r1, [sp, #0]
 8002150:	2100      	movs	r1, #0
 8002152:	4820      	ldr	r0, [pc, #128]	; (80021d4 <fnPrintSelectionFrame+0xe4>)
 8002154:	f001 fecb 	bl	8003eee <u8g2_DrawFrame>
  }
  else{
	  u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
  }

}
 8002158:	e030      	b.n	80021bc <fnPrintSelectionFrame+0xcc>
      u8g2_SetDrawColor(&u8g2,0);
 800215a:	2100      	movs	r1, #0
 800215c:	481d      	ldr	r0, [pc, #116]	; (80021d4 <fnPrintSelectionFrame+0xe4>)
 800215e:	f002 fef9 	bl	8004f54 <u8g2_SetDrawColor>
      u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	0052      	lsls	r2, r2, #1
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	b29b      	uxth	r3, r3
 8002170:	3302      	adds	r3, #2
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <fnPrintSelectionFrame+0xe0>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b02      	subs	r3, #2
 800217c:	b29b      	uxth	r3, r3
 800217e:	210c      	movs	r1, #12
 8002180:	9100      	str	r1, [sp, #0]
 8002182:	2100      	movs	r1, #0
 8002184:	4813      	ldr	r0, [pc, #76]	; (80021d4 <fnPrintSelectionFrame+0xe4>)
 8002186:	f001 feb2 	bl	8003eee <u8g2_DrawFrame>
      u8g2_SetDrawColor(&u8g2,1);
 800218a:	2101      	movs	r1, #1
 800218c:	4811      	ldr	r0, [pc, #68]	; (80021d4 <fnPrintSelectionFrame+0xe4>)
 800218e:	f002 fee1 	bl	8004f54 <u8g2_SetDrawColor>
}
 8002192:	e013      	b.n	80021bc <fnPrintSelectionFrame+0xcc>
	  u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	0052      	lsls	r2, r2, #1
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3302      	adds	r3, #2
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <fnPrintSelectionFrame+0xe0>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b02      	subs	r3, #2
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	210c      	movs	r1, #12
 80021b2:	9100      	str	r1, [sp, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <fnPrintSelectionFrame+0xe4>)
 80021b8:	f001 fe99 	bl	8003eee <u8g2_DrawFrame>
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000900 	.word	0x20000900
 80021c8:	2000007e 	.word	0x2000007e
 80021cc:	2000008c 	.word	0x2000008c
 80021d0:	20000b20 	.word	0x20000b20
 80021d4:	200009e8 	.word	0x200009e8

080021d8 <printMenuSetpoints>:
//********************************************************************************************************************

//--------- Функция вывода меню уставок ------------------------------------------------
void printMenuSetpoints(void){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0

  u8g2_ClearBuffer(&u8g2);				//
 80021de:	482d      	ldr	r0, [pc, #180]	; (8002294 <printMenuSetpoints+0xbc>)
 80021e0:	f001 fee2 	bl	8003fa8 <u8g2_ClearBuffer>
  u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 80021e4:	492c      	ldr	r1, [pc, #176]	; (8002298 <printMenuSetpoints+0xc0>)
 80021e6:	482b      	ldr	r0, [pc, #172]	; (8002294 <printMenuSetpoints+0xbc>)
 80021e8:	f002 fd88 	bl	8004cfc <u8g2_SetFont>

  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 80021ec:	2300      	movs	r3, #0
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	e024      	b.n	800223c <printMenuSetpoints+0x64>

    fnPrintMenuItemName(i+(menu_current_page*display_num_lines), i+1, setpoints_menu_names); // Выводим название пункта
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <printMenuSetpoints+0xc4>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <printMenuSetpoints+0xc8>)
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4413      	add	r3, r2
 8002204:	b2d8      	uxtb	r0, r3
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	3301      	adds	r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <printMenuSetpoints+0xcc>)
 800220e:	4619      	mov	r1, r3
 8002210:	f7ff ff1a 	bl	8002048 <fnPrintMenuItemName>
    fnPrintMenuSetpointsItemVal(i+(menu_current_page*display_num_lines), i+1); // Выводим значение пункта меню уставок
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <printMenuSetpoints+0xc4>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <printMenuSetpoints+0xc8>)
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	b2da      	uxtb	r2, r3
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	4413      	add	r3, r2
 8002226:	b2da      	uxtb	r2, r3
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	3301      	adds	r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4619      	mov	r1, r3
 8002230:	4610      	mov	r0, r2
 8002232:	f000 f83d 	bl	80022b0 <fnPrintMenuSetpointsItemVal>
  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	3301      	adds	r3, #1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <printMenuSetpoints+0xc8>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	429a      	cmp	r2, r3
 8002244:	d3d5      	bcc.n	80021f2 <printMenuSetpoints+0x1a>
  }

  //рисуем рамку
  fnPrintSelectionFrame(menu_current_item);
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <printMenuSetpoints+0xd0>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff50 	bl	80020f0 <fnPrintSelectionFrame>

  //рисуем боковой скролл бар
  uint8_t scroll_bar_height = display_height/(MENU_SETPOINTS_NUM_ITEMS/display_num_lines);
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <printMenuSetpoints+0xd4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <printMenuSetpoints+0xc8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4619      	mov	r1, r3
 800225c:	2319      	movs	r3, #25
 800225e:	fb93 f3f1 	sdiv	r3, r3, r1
 8002262:	fb92 f3f3 	sdiv	r3, r2, r3
 8002266:	71bb      	strb	r3, [r7, #6]
  u8g2_DrawVLine(&u8g2,127, menu_current_page*scroll_bar_height, scroll_bar_height);
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <printMenuSetpoints+0xc4>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	79ba      	ldrb	r2, [r7, #6]
 8002270:	b292      	uxth	r2, r2
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	b29a      	uxth	r2, r3
 8002278:	79bb      	ldrb	r3, [r7, #6]
 800227a:	b29b      	uxth	r3, r3
 800227c:	217f      	movs	r1, #127	; 0x7f
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <printMenuSetpoints+0xbc>)
 8002280:	f002 fe4f 	bl	8004f22 <u8g2_DrawVLine>

  u8g2_SendBuffer(&u8g2);
 8002284:	4803      	ldr	r0, [pc, #12]	; (8002294 <printMenuSetpoints+0xbc>)
 8002286:	f001 ff02 	bl	800408e <u8g2_SendBuffer>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200009e8 	.word	0x200009e8
 8002298:	08009bec 	.word	0x08009bec
 800229c:	2000007d 	.word	0x2000007d
 80022a0:	20000900 	.word	0x20000900
 80022a4:	08008b94 	.word	0x08008b94
 80022a8:	2000007c 	.word	0x2000007c
 80022ac:	20000901 	.word	0x20000901

080022b0 <fnPrintMenuSetpointsItemVal>:
//*************************************************************************************************************

//Функция печати значения пункта меню уставок ---------------------------------
void fnPrintMenuSetpointsItemVal(uint8_t num_item, uint8_t num_line){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	4603      	mov	r3, r0
 80022b8:	460a      	mov	r2, r1
 80022ba:	71fb      	strb	r3, [r7, #7]
 80022bc:	4613      	mov	r3, r2
 80022be:	71bb      	strb	r3, [r7, #6]

  //если все параметры одного типа то можно выводить через массив
  //snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
  //u8g2_DrawStr(&u8g2,98,(num_line*12)-2,buffer);

  char buffer[10] = {0,};
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	809a      	strh	r2, [r3, #4]
  uint8_t float_m, float_n; // переменные для разбития числа на целую и дробную часть

	switch (num_item) {
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b18      	cmp	r3, #24
 80022d2:	f200 81f3 	bhi.w	80026bc <fnPrintMenuSetpointsItemVal+0x40c>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <fnPrintMenuSetpointsItemVal+0x2c>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	08002341 	.word	0x08002341
 80022e0:	08002355 	.word	0x08002355
 80022e4:	080023a1 	.word	0x080023a1
 80022e8:	080023e1 	.word	0x080023e1
 80022ec:	080023f5 	.word	0x080023f5
 80022f0:	08002435 	.word	0x08002435
 80022f4:	08002449 	.word	0x08002449
 80022f8:	08002495 	.word	0x08002495
 80022fc:	080024d5 	.word	0x080024d5
 8002300:	080024e9 	.word	0x080024e9
 8002304:	08002529 	.word	0x08002529
 8002308:	0800253d 	.word	0x0800253d
 800230c:	08002551 	.word	0x08002551
 8002310:	08002565 	.word	0x08002565
 8002314:	080025b1 	.word	0x080025b1
 8002318:	080025c5 	.word	0x080025c5
 800231c:	080025d9 	.word	0x080025d9
 8002320:	080025ed 	.word	0x080025ed
 8002324:	08002631 	.word	0x08002631
 8002328:	08002645 	.word	0x08002645
 800232c:	08002659 	.word	0x08002659
 8002330:	0800266d 	.word	0x0800266d
 8002334:	08002681 	.word	0x08002681
 8002338:	08002695 	.word	0x08002695
 800233c:	080026a9 	.word	0x080026a9
	case 0:
		snprintf(buffer, sizeof(buffer), "%ds",
				SetpointsUnion.SetpointsArray[num_item]);
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	4aaf      	ldr	r2, [pc, #700]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%ds",
 8002346:	f107 000c 	add.w	r0, r7, #12
 800234a:	4aae      	ldr	r2, [pc, #696]	; (8002604 <fnPrintMenuSetpointsItemVal+0x354>)
 800234c:	210a      	movs	r1, #10
 800234e:	f001 fb93 	bl	8003a78 <mini_snprintf>
		break;
 8002352:	e1b4      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 1:

		switch (SetpointsUnion.SetpointsArray[num_item]) {
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	4aaa      	ldr	r2, [pc, #680]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d00e      	beq.n	800237c <fnPrintMenuSetpointsItemVal+0xcc>
 800235e:	2b02      	cmp	r3, #2
 8002360:	dc1c      	bgt.n	800239c <fnPrintMenuSetpointsItemVal+0xec>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <fnPrintMenuSetpointsItemVal+0xbc>
 8002366:	2b01      	cmp	r3, #1
 8002368:	d010      	beq.n	800238c <fnPrintMenuSetpointsItemVal+0xdc>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 800236a:	e017      	b.n	800239c <fnPrintMenuSetpointsItemVal+0xec>
			snprintf(buffer, sizeof(buffer), "off");
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4aa5      	ldr	r2, [pc, #660]	; (8002608 <fnPrintMenuSetpointsItemVal+0x358>)
 8002372:	210a      	movs	r1, #10
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fb7f 	bl	8003a78 <mini_snprintf>
			break;
 800237a:	e010      	b.n	800239e <fnPrintMenuSetpointsItemVal+0xee>
			snprintf(buffer, sizeof(buffer), "on");
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	4aa2      	ldr	r2, [pc, #648]	; (800260c <fnPrintMenuSetpointsItemVal+0x35c>)
 8002382:	210a      	movs	r1, #10
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fb77 	bl	8003a78 <mini_snprintf>
			break;
 800238a:	e008      	b.n	800239e <fnPrintMenuSetpointsItemVal+0xee>
			snprintf(buffer, sizeof(buffer), "auto");
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	4a9f      	ldr	r2, [pc, #636]	; (8002610 <fnPrintMenuSetpointsItemVal+0x360>)
 8002392:	210a      	movs	r1, #10
 8002394:	4618      	mov	r0, r3
 8002396:	f001 fb6f 	bl	8003a78 <mini_snprintf>
			break;
 800239a:	e000      	b.n	800239e <fnPrintMenuSetpointsItemVal+0xee>
			break;
 800239c:	bf00      	nop
		}

		break;
 800239e:	e18e      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 2:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4a97      	ldr	r2, [pc, #604]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 80023a8:	7dfa      	ldrb	r2, [r7, #23]
 80023aa:	4b9a      	ldr	r3, [pc, #616]	; (8002614 <fnPrintMenuSetpointsItemVal+0x364>)
 80023ac:	fba3 1302 	umull	r1, r3, r3, r2
 80023b0:	08d9      	lsrs	r1, r3, #3
 80023b2:	460b      	mov	r3, r1
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	4a94      	ldr	r2, [pc, #592]	; (8002614 <fnPrintMenuSetpointsItemVal+0x364>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 80023ca:	7dfa      	ldrb	r2, [r7, #23]
 80023cc:	7dbb      	ldrb	r3, [r7, #22]
 80023ce:	f107 000c 	add.w	r0, r7, #12
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	4a90      	ldr	r2, [pc, #576]	; (8002618 <fnPrintMenuSetpointsItemVal+0x368>)
 80023d8:	210a      	movs	r1, #10
 80023da:	f001 fb4d 	bl	8003a78 <mini_snprintf>
		break;
 80023de:	e16e      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 3:
		snprintf(buffer, sizeof(buffer), "%ds",
				SetpointsUnion.SetpointsArray[num_item]);
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	4a87      	ldr	r2, [pc, #540]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%ds",
 80023e6:	f107 000c 	add.w	r0, r7, #12
 80023ea:	4a86      	ldr	r2, [pc, #536]	; (8002604 <fnPrintMenuSetpointsItemVal+0x354>)
 80023ec:	210a      	movs	r1, #10
 80023ee:	f001 fb43 	bl	8003a78 <mini_snprintf>
		break;
 80023f2:	e164      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 4:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	4a82      	ldr	r2, [pc, #520]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 80023fc:	7dfa      	ldrb	r2, [r7, #23]
 80023fe:	4b85      	ldr	r3, [pc, #532]	; (8002614 <fnPrintMenuSetpointsItemVal+0x364>)
 8002400:	fba3 1302 	umull	r1, r3, r3, r2
 8002404:	08d9      	lsrs	r1, r3, #3
 8002406:	460b      	mov	r3, r1
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 8002412:	7dfb      	ldrb	r3, [r7, #23]
 8002414:	4a7f      	ldr	r2, [pc, #508]	; (8002614 <fnPrintMenuSetpointsItemVal+0x364>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 800241e:	7dfa      	ldrb	r2, [r7, #23]
 8002420:	7dbb      	ldrb	r3, [r7, #22]
 8002422:	f107 000c 	add.w	r0, r7, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	4a7b      	ldr	r2, [pc, #492]	; (8002618 <fnPrintMenuSetpointsItemVal+0x368>)
 800242c:	210a      	movs	r1, #10
 800242e:	f001 fb23 	bl	8003a78 <mini_snprintf>
		break;
 8002432:	e144      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 5:
		snprintf(buffer, sizeof(buffer), "%dm",
				SetpointsUnion.SetpointsArray[num_item]);
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	4a72      	ldr	r2, [pc, #456]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%dm",
 800243a:	f107 000c 	add.w	r0, r7, #12
 800243e:	4a77      	ldr	r2, [pc, #476]	; (800261c <fnPrintMenuSetpointsItemVal+0x36c>)
 8002440:	210a      	movs	r1, #10
 8002442:	f001 fb19 	bl	8003a78 <mini_snprintf>
		break;
 8002446:	e13a      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 6:
		switch (SetpointsUnion.SetpointsArray[num_item]) {
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4a6d      	ldr	r2, [pc, #436]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 800244c:	5cd3      	ldrb	r3, [r2, r3]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d00e      	beq.n	8002470 <fnPrintMenuSetpointsItemVal+0x1c0>
 8002452:	2b02      	cmp	r3, #2
 8002454:	dc1c      	bgt.n	8002490 <fnPrintMenuSetpointsItemVal+0x1e0>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <fnPrintMenuSetpointsItemVal+0x1b0>
 800245a:	2b01      	cmp	r3, #1
 800245c:	d010      	beq.n	8002480 <fnPrintMenuSetpointsItemVal+0x1d0>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 800245e:	e017      	b.n	8002490 <fnPrintMenuSetpointsItemVal+0x1e0>
			snprintf(buffer, sizeof(buffer), "off");
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	4a68      	ldr	r2, [pc, #416]	; (8002608 <fnPrintMenuSetpointsItemVal+0x358>)
 8002466:	210a      	movs	r1, #10
 8002468:	4618      	mov	r0, r3
 800246a:	f001 fb05 	bl	8003a78 <mini_snprintf>
			break;
 800246e:	e010      	b.n	8002492 <fnPrintMenuSetpointsItemVal+0x1e2>
			snprintf(buffer, sizeof(buffer), "on");
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4a65      	ldr	r2, [pc, #404]	; (800260c <fnPrintMenuSetpointsItemVal+0x35c>)
 8002476:	210a      	movs	r1, #10
 8002478:	4618      	mov	r0, r3
 800247a:	f001 fafd 	bl	8003a78 <mini_snprintf>
			break;
 800247e:	e008      	b.n	8002492 <fnPrintMenuSetpointsItemVal+0x1e2>
			snprintf(buffer, sizeof(buffer), "auto");
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	4a62      	ldr	r2, [pc, #392]	; (8002610 <fnPrintMenuSetpointsItemVal+0x360>)
 8002486:	210a      	movs	r1, #10
 8002488:	4618      	mov	r0, r3
 800248a:	f001 faf5 	bl	8003a78 <mini_snprintf>
			break;
 800248e:	e000      	b.n	8002492 <fnPrintMenuSetpointsItemVal+0x1e2>
			break;
 8002490:	bf00      	nop
		}
		break;
 8002492:	e114      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 7:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4a5a      	ldr	r2, [pc, #360]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
 800249a:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 800249c:	7dfa      	ldrb	r2, [r7, #23]
 800249e:	4b5d      	ldr	r3, [pc, #372]	; (8002614 <fnPrintMenuSetpointsItemVal+0x364>)
 80024a0:	fba3 1302 	umull	r1, r3, r3, r2
 80024a4:	08d9      	lsrs	r1, r3, #3
 80024a6:	460b      	mov	r3, r1
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	4a57      	ldr	r2, [pc, #348]	; (8002614 <fnPrintMenuSetpointsItemVal+0x364>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 80024be:	7dfa      	ldrb	r2, [r7, #23]
 80024c0:	7dbb      	ldrb	r3, [r7, #22]
 80024c2:	f107 000c 	add.w	r0, r7, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	4a53      	ldr	r2, [pc, #332]	; (8002618 <fnPrintMenuSetpointsItemVal+0x368>)
 80024cc:	210a      	movs	r1, #10
 80024ce:	f001 fad3 	bl	8003a78 <mini_snprintf>
		break;
 80024d2:	e0f4      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 8:
	  	snprintf(buffer,sizeof(buffer), "%ds", SetpointsUnion.SetpointsArray[num_item]);
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4a4a      	ldr	r2, [pc, #296]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80024d8:	5cd3      	ldrb	r3, [r2, r3]
 80024da:	f107 000c 	add.w	r0, r7, #12
 80024de:	4a49      	ldr	r2, [pc, #292]	; (8002604 <fnPrintMenuSetpointsItemVal+0x354>)
 80024e0:	210a      	movs	r1, #10
 80024e2:	f001 fac9 	bl	8003a78 <mini_snprintf>
	  	break;
 80024e6:	e0ea      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 9:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	4a45      	ldr	r2, [pc, #276]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80024ec:	5cd3      	ldrb	r3, [r2, r3]
 80024ee:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 80024f0:	7dfa      	ldrb	r2, [r7, #23]
 80024f2:	4b48      	ldr	r3, [pc, #288]	; (8002614 <fnPrintMenuSetpointsItemVal+0x364>)
 80024f4:	fba3 1302 	umull	r1, r3, r3, r2
 80024f8:	08d9      	lsrs	r1, r3, #3
 80024fa:	460b      	mov	r3, r1
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	4a42      	ldr	r2, [pc, #264]	; (8002614 <fnPrintMenuSetpointsItemVal+0x364>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	08db      	lsrs	r3, r3, #3
 8002510:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 8002512:	7dfa      	ldrb	r2, [r7, #23]
 8002514:	7dbb      	ldrb	r3, [r7, #22]
 8002516:	f107 000c 	add.w	r0, r7, #12
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	4a3e      	ldr	r2, [pc, #248]	; (8002618 <fnPrintMenuSetpointsItemVal+0x368>)
 8002520:	210a      	movs	r1, #10
 8002522:	f001 faa9 	bl	8003a78 <mini_snprintf>
		break;
 8002526:	e0ca      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 10:
	  	snprintf(buffer,sizeof(buffer), "%dm", SetpointsUnion.SetpointsArray[num_item]);
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	4a35      	ldr	r2, [pc, #212]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	f107 000c 	add.w	r0, r7, #12
 8002532:	4a3a      	ldr	r2, [pc, #232]	; (800261c <fnPrintMenuSetpointsItemVal+0x36c>)
 8002534:	210a      	movs	r1, #10
 8002536:	f001 fa9f 	bl	8003a78 <mini_snprintf>
	      break;
 800253a:	e0c0      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 11:
	  	snprintf(buffer,sizeof(buffer), "%dC", SetpointsUnion.SetpointsArray[num_item]);
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	4a30      	ldr	r2, [pc, #192]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	f107 000c 	add.w	r0, r7, #12
 8002546:	4a36      	ldr	r2, [pc, #216]	; (8002620 <fnPrintMenuSetpointsItemVal+0x370>)
 8002548:	210a      	movs	r1, #10
 800254a:	f001 fa95 	bl	8003a78 <mini_snprintf>
	    break;
 800254e:	e0b6      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 12:
	  	snprintf(buffer,sizeof(buffer), "%dC", SetpointsUnion.SetpointsArray[num_item]);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	f107 000c 	add.w	r0, r7, #12
 800255a:	4a31      	ldr	r2, [pc, #196]	; (8002620 <fnPrintMenuSetpointsItemVal+0x370>)
 800255c:	210a      	movs	r1, #10
 800255e:	f001 fa8b 	bl	8003a78 <mini_snprintf>
	    break;
 8002562:	e0ac      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 13:
		switch (SetpointsUnion.SetpointsArray[num_item]) {
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d00e      	beq.n	800258c <fnPrintMenuSetpointsItemVal+0x2dc>
 800256e:	2b02      	cmp	r3, #2
 8002570:	dc1c      	bgt.n	80025ac <fnPrintMenuSetpointsItemVal+0x2fc>
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <fnPrintMenuSetpointsItemVal+0x2cc>
 8002576:	2b01      	cmp	r3, #1
 8002578:	d010      	beq.n	800259c <fnPrintMenuSetpointsItemVal+0x2ec>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 800257a:	e017      	b.n	80025ac <fnPrintMenuSetpointsItemVal+0x2fc>
			snprintf(buffer, sizeof(buffer), "off");
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	4a21      	ldr	r2, [pc, #132]	; (8002608 <fnPrintMenuSetpointsItemVal+0x358>)
 8002582:	210a      	movs	r1, #10
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fa77 	bl	8003a78 <mini_snprintf>
			break;
 800258a:	e010      	b.n	80025ae <fnPrintMenuSetpointsItemVal+0x2fe>
			snprintf(buffer, sizeof(buffer), "on");
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <fnPrintMenuSetpointsItemVal+0x35c>)
 8002592:	210a      	movs	r1, #10
 8002594:	4618      	mov	r0, r3
 8002596:	f001 fa6f 	bl	8003a78 <mini_snprintf>
			break;
 800259a:	e008      	b.n	80025ae <fnPrintMenuSetpointsItemVal+0x2fe>
			snprintf(buffer, sizeof(buffer), "auto");
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <fnPrintMenuSetpointsItemVal+0x360>)
 80025a2:	210a      	movs	r1, #10
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 fa67 	bl	8003a78 <mini_snprintf>
			break;
 80025aa:	e000      	b.n	80025ae <fnPrintMenuSetpointsItemVal+0x2fe>
			break;
 80025ac:	bf00      	nop
		}
	    break;
 80025ae:	e086      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 14:
		snprintf(buffer,sizeof(buffer), "%dR", SetpointsUnion.SetpointsArray[num_item]);
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	4a13      	ldr	r2, [pc, #76]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	f107 000c 	add.w	r0, r7, #12
 80025ba:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <fnPrintMenuSetpointsItemVal+0x374>)
 80025bc:	210a      	movs	r1, #10
 80025be:	f001 fa5b 	bl	8003a78 <mini_snprintf>
		break;
 80025c2:	e07c      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 15:
	  	snprintf(buffer,sizeof(buffer), "%dR", SetpointsUnion.SetpointsArray[num_item]);
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
 80025ca:	f107 000c 	add.w	r0, r7, #12
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <fnPrintMenuSetpointsItemVal+0x374>)
 80025d0:	210a      	movs	r1, #10
 80025d2:	f001 fa51 	bl	8003a78 <mini_snprintf>
	    break;
 80025d6:	e072      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 16:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	f107 000c 	add.w	r0, r7, #12
 80025e2:	4a11      	ldr	r2, [pc, #68]	; (8002628 <fnPrintMenuSetpointsItemVal+0x378>)
 80025e4:	210a      	movs	r1, #10
 80025e6:	f001 fa47 	bl	8003a78 <mini_snprintf>
	    break;
 80025ea:	e068      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 17:
	  	snprintf(buffer,sizeof(buffer), "%dL", SetpointsUnion.SetpointsArray[num_item]);
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	4a04      	ldr	r2, [pc, #16]	; (8002600 <fnPrintMenuSetpointsItemVal+0x350>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	f107 000c 	add.w	r0, r7, #12
 80025f6:	4a0d      	ldr	r2, [pc, #52]	; (800262c <fnPrintMenuSetpointsItemVal+0x37c>)
 80025f8:	210a      	movs	r1, #10
 80025fa:	f001 fa3d 	bl	8003a78 <mini_snprintf>
	    break;
 80025fe:	e05e      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>
 8002600:	20000ac0 	.word	0x20000ac0
 8002604:	080088a4 	.word	0x080088a4
 8002608:	080088a8 	.word	0x080088a8
 800260c:	080088ac 	.word	0x080088ac
 8002610:	080088b0 	.word	0x080088b0
 8002614:	cccccccd 	.word	0xcccccccd
 8002618:	080088b8 	.word	0x080088b8
 800261c:	080088c0 	.word	0x080088c0
 8002620:	080088c4 	.word	0x080088c4
 8002624:	080088c8 	.word	0x080088c8
 8002628:	080088cc 	.word	0x080088cc
 800262c:	080088d0 	.word	0x080088d0

	case 18:
	  	snprintf(buffer,sizeof(buffer), "%dh", SetpointsUnion.SetpointsArray[num_item]);
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <fnPrintMenuSetpointsItemVal+0x430>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	f107 000c 	add.w	r0, r7, #12
 800263a:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <fnPrintMenuSetpointsItemVal+0x434>)
 800263c:	210a      	movs	r1, #10
 800263e:	f001 fa1b 	bl	8003a78 <mini_snprintf>
	    break;
 8002642:	e03c      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 19:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <fnPrintMenuSetpointsItemVal+0x430>)
 8002648:	5cd3      	ldrb	r3, [r2, r3]
 800264a:	f107 000c 	add.w	r0, r7, #12
 800264e:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <fnPrintMenuSetpointsItemVal+0x438>)
 8002650:	210a      	movs	r1, #10
 8002652:	f001 fa11 	bl	8003a78 <mini_snprintf>
	    break;
 8002656:	e032      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 20:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <fnPrintMenuSetpointsItemVal+0x430>)
 800265c:	5cd3      	ldrb	r3, [r2, r3]
 800265e:	f107 000c 	add.w	r0, r7, #12
 8002662:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <fnPrintMenuSetpointsItemVal+0x438>)
 8002664:	210a      	movs	r1, #10
 8002666:	f001 fa07 	bl	8003a78 <mini_snprintf>
	    break;
 800266a:	e028      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 21:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <fnPrintMenuSetpointsItemVal+0x430>)
 8002670:	5cd3      	ldrb	r3, [r2, r3]
 8002672:	f107 000c 	add.w	r0, r7, #12
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <fnPrintMenuSetpointsItemVal+0x438>)
 8002678:	210a      	movs	r1, #10
 800267a:	f001 f9fd 	bl	8003a78 <mini_snprintf>
	    break;
 800267e:	e01e      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 22:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <fnPrintMenuSetpointsItemVal+0x430>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	f107 000c 	add.w	r0, r7, #12
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <fnPrintMenuSetpointsItemVal+0x438>)
 800268c:	210a      	movs	r1, #10
 800268e:	f001 f9f3 	bl	8003a78 <mini_snprintf>
	    break;
 8002692:	e014      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 23:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <fnPrintMenuSetpointsItemVal+0x430>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	f107 000c 	add.w	r0, r7, #12
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <fnPrintMenuSetpointsItemVal+0x438>)
 80026a0:	210a      	movs	r1, #10
 80026a2:	f001 f9e9 	bl	8003a78 <mini_snprintf>
	    break;
 80026a6:	e00a      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	case 24:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <fnPrintMenuSetpointsItemVal+0x430>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	f107 000c 	add.w	r0, r7, #12
 80026b2:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <fnPrintMenuSetpointsItemVal+0x438>)
 80026b4:	210a      	movs	r1, #10
 80026b6:	f001 f9df 	bl	8003a78 <mini_snprintf>
	    break;
 80026ba:	e000      	b.n	80026be <fnPrintMenuSetpointsItemVal+0x40e>

	default:
		break;
 80026bc:	bf00      	nop
	}

   u8g2_DrawStr(&u8g2,102,(num_line*12),buffer);
 80026be:	79bb      	ldrb	r3, [r7, #6]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	0052      	lsls	r2, r2, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	2166      	movs	r1, #102	; 0x66
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <fnPrintMenuSetpointsItemVal+0x43c>)
 80026d4:	f002 fa74 	bl	8004bc0 <u8g2_DrawStr>

 }
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000ac0 	.word	0x20000ac0
 80026e4:	080088d4 	.word	0x080088d4
 80026e8:	080088cc 	.word	0x080088cc
 80026ec:	200009e8 	.word	0x200009e8

080026f0 <fnPrintMenuParamItemVal>:
//*********************************************************************************************************************


//Функция печати значения пункта меню просмотра параметров ------------------------------
void fnPrintMenuParamItemVal(uint8_t num_item, uint8_t num_line){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	4603      	mov	r3, r0
 80026f8:	460a      	mov	r2, r1
 80026fa:	71fb      	strb	r3, [r7, #7]
 80026fc:	4613      	mov	r3, r2
 80026fe:	71bb      	strb	r3, [r7, #6]

  char buffer[10] = {0,};
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	809a      	strh	r2, [r3, #4]
  int float_m, float_n; // переменные для разбития числа на целую и дробную часть

  switch (num_item)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b0e      	cmp	r3, #14
 8002712:	f200 814d 	bhi.w	80029b0 <fnPrintMenuParamItemVal+0x2c0>
 8002716:	a201      	add	r2, pc, #4	; (adr r2, 800271c <fnPrintMenuParamItemVal+0x2c>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	08002759 	.word	0x08002759
 8002720:	080027a7 	.word	0x080027a7
 8002724:	080027b9 	.word	0x080027b9
 8002728:	0800280f 	.word	0x0800280f
 800272c:	08002865 	.word	0x08002865
 8002730:	080028bb 	.word	0x080028bb
 8002734:	08002909 	.word	0x08002909
 8002738:	08002933 	.word	0x08002933
 800273c:	08002945 	.word	0x08002945
 8002740:	08002957 	.word	0x08002957
 8002744:	08002969 	.word	0x08002969
 8002748:	0800297b 	.word	0x0800297b
 800274c:	0800298d 	.word	0x0800298d
 8002750:	0800299f 	.word	0x0800299f
 8002754:	080029b1 	.word	0x080029b1
  {
  case 0:
    float_m = (int)(main_data.battery_voltage * 10);
 8002758:	4b9e      	ldr	r3, [pc, #632]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 800275a:	7b9b      	ldrb	r3, [r3, #14]
 800275c:	461a      	mov	r2, r3
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	4b9b      	ldr	r3, [pc, #620]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 800276c:	fb83 1302 	smull	r1, r3, r3, r2
 8002770:	1099      	asrs	r1, r3, #2
 8002772:	17d3      	asrs	r3, r2, #31
 8002774:	1ac9      	subs	r1, r1, r3
 8002776:	460b      	mov	r3, r1
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4a94      	ldr	r2, [pc, #592]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 8002786:	fb82 1203 	smull	r1, r2, r2, r3
 800278a:	1092      	asrs	r2, r2, #2
 800278c:	17db      	asrs	r3, r3, #31
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 8002792:	f107 000c 	add.w	r0, r7, #12
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4a8f      	ldr	r2, [pc, #572]	; (80029dc <fnPrintMenuParamItemVal+0x2ec>)
 800279e:	210a      	movs	r1, #10
 80027a0:	f001 f96a 	bl	8003a78 <mini_snprintf>
    break;
 80027a4:	e105      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 1:
    snprintf(buffer,sizeof(buffer),"%uL", main_data.water_level_liter);
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 80027a8:	7c1b      	ldrb	r3, [r3, #16]
 80027aa:	f107 000c 	add.w	r0, r7, #12
 80027ae:	4a8c      	ldr	r2, [pc, #560]	; (80029e0 <fnPrintMenuParamItemVal+0x2f0>)
 80027b0:	210a      	movs	r1, #10
 80027b2:	f001 f961 	bl	8003a78 <mini_snprintf>
    break;
 80027b6:	e0fc      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 2:
    float_m = (int)(main_data.outside_temperature * 10);
 80027b8:	4b86      	ldr	r3, [pc, #536]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4989      	ldr	r1, [pc, #548]	; (80029e4 <fnPrintMenuParamItemVal+0x2f4>)
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe f94c 	bl	8000a5c <__aeabi_fmul>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fa98 	bl	8000cfc <__aeabi_f2iz>
 80027cc:	4603      	mov	r3, r0
 80027ce:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 80027d4:	fb83 1302 	smull	r1, r3, r3, r2
 80027d8:	1099      	asrs	r1, r3, #2
 80027da:	17d3      	asrs	r3, r2, #31
 80027dc:	1ac9      	subs	r1, r1, r3
 80027de:	460b      	mov	r3, r1
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4a7a      	ldr	r2, [pc, #488]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 80027ee:	fb82 1203 	smull	r1, r2, r2, r3
 80027f2:	1092      	asrs	r2, r2, #2
 80027f4:	17db      	asrs	r3, r3, #31
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 80027fa:	f107 000c 	add.w	r0, r7, #12
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4a78      	ldr	r2, [pc, #480]	; (80029e8 <fnPrintMenuParamItemVal+0x2f8>)
 8002806:	210a      	movs	r1, #10
 8002808:	f001 f936 	bl	8003a78 <mini_snprintf>
    break;
 800280c:	e0d1      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 3:
    float_m = (int)(main_data.inside_temperature * 10);
 800280e:	4b71      	ldr	r3, [pc, #452]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4974      	ldr	r1, [pc, #464]	; (80029e4 <fnPrintMenuParamItemVal+0x2f4>)
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe f921 	bl	8000a5c <__aeabi_fmul>
 800281a:	4603      	mov	r3, r0
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fa6d 	bl	8000cfc <__aeabi_f2iz>
 8002822:	4603      	mov	r3, r0
 8002824:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	4b6b      	ldr	r3, [pc, #428]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 800282a:	fb83 1302 	smull	r1, r3, r3, r2
 800282e:	1099      	asrs	r1, r3, #2
 8002830:	17d3      	asrs	r3, r2, #31
 8002832:	1ac9      	subs	r1, r1, r3
 8002834:	460b      	mov	r3, r1
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 8002844:	fb82 1203 	smull	r1, r2, r2, r3
 8002848:	1092      	asrs	r2, r2, #2
 800284a:	17db      	asrs	r3, r3, #31
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 8002850:	f107 000c 	add.w	r0, r7, #12
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4a63      	ldr	r2, [pc, #396]	; (80029e8 <fnPrintMenuParamItemVal+0x2f8>)
 800285c:	210a      	movs	r1, #10
 800285e:	f001 f90b 	bl	8003a78 <mini_snprintf>
    break;
 8002862:	e0a6      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 4:
    float_m = (int)(main_data.fridge_temperature * 10);
 8002864:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	495e      	ldr	r1, [pc, #376]	; (80029e4 <fnPrintMenuParamItemVal+0x2f4>)
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe f8f6 	bl	8000a5c <__aeabi_fmul>
 8002870:	4603      	mov	r3, r0
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fa42 	bl	8000cfc <__aeabi_f2iz>
 8002878:	4603      	mov	r3, r0
 800287a:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 8002880:	fb83 1302 	smull	r1, r3, r3, r2
 8002884:	1099      	asrs	r1, r3, #2
 8002886:	17d3      	asrs	r3, r2, #31
 8002888:	1ac9      	subs	r1, r1, r3
 800288a:	460b      	mov	r3, r1
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4a4f      	ldr	r2, [pc, #316]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 800289a:	fb82 1203 	smull	r1, r2, r2, r3
 800289e:	1092      	asrs	r2, r2, #2
 80028a0:	17db      	asrs	r3, r3, #31
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 80028a6:	f107 000c 	add.w	r0, r7, #12
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4a4d      	ldr	r2, [pc, #308]	; (80029e8 <fnPrintMenuParamItemVal+0x2f8>)
 80028b2:	210a      	movs	r1, #10
 80028b4:	f001 f8e0 	bl	8003a78 <mini_snprintf>
    break;
 80028b8:	e07b      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 5:
    float_m = (int)(main_data.sensors_supply_voltage * 10);
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 80028bc:	7bdb      	ldrb	r3, [r3, #15]
 80028be:	461a      	mov	r2, r3
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 80028ce:	fb83 1302 	smull	r1, r3, r3, r2
 80028d2:	1099      	asrs	r1, r3, #2
 80028d4:	17d3      	asrs	r3, r2, #31
 80028d6:	1ac9      	subs	r1, r1, r3
 80028d8:	460b      	mov	r3, r1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <fnPrintMenuParamItemVal+0x2e8>)
 80028e8:	fb82 1203 	smull	r1, r2, r2, r3
 80028ec:	1092      	asrs	r2, r2, #2
 80028ee:	17db      	asrs	r3, r3, #31
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 80028f4:	f107 000c 	add.w	r0, r7, #12
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4a37      	ldr	r2, [pc, #220]	; (80029dc <fnPrintMenuParamItemVal+0x2ec>)
 8002900:	210a      	movs	r1, #10
 8002902:	f001 f8b9 	bl	8003a78 <mini_snprintf>
    break;
 8002906:	e054      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 6:
    if(main_data.res_sensor_resistance <= MAX_RESISTANCE)snprintf(buffer,sizeof(buffer),"%d",main_data.res_sensor_resistance);
 8002908:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 800290a:	899b      	ldrh	r3, [r3, #12]
 800290c:	2bf0      	cmp	r3, #240	; 0xf0
 800290e:	d808      	bhi.n	8002922 <fnPrintMenuParamItemVal+0x232>
 8002910:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 8002912:	899b      	ldrh	r3, [r3, #12]
 8002914:	f107 000c 	add.w	r0, r7, #12
 8002918:	4a34      	ldr	r2, [pc, #208]	; (80029ec <fnPrintMenuParamItemVal+0x2fc>)
 800291a:	210a      	movs	r1, #10
 800291c:	f001 f8ac 	bl	8003a78 <mini_snprintf>
    else snprintf(buffer,sizeof(buffer),"xxx");
    break;
 8002920:	e047      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>
    else snprintf(buffer,sizeof(buffer),"xxx");
 8002922:	f107 030c 	add.w	r3, r7, #12
 8002926:	4a32      	ldr	r2, [pc, #200]	; (80029f0 <fnPrintMenuParamItemVal+0x300>)
 8002928:	210a      	movs	r1, #10
 800292a:	4618      	mov	r0, r3
 800292c:	f001 f8a4 	bl	8003a78 <mini_snprintf>
    break;
 8002930:	e03f      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 7:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.door_switch_state);
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 8002934:	7c9b      	ldrb	r3, [r3, #18]
 8002936:	f107 000c 	add.w	r0, r7, #12
 800293a:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <fnPrintMenuParamItemVal+0x304>)
 800293c:	210a      	movs	r1, #10
 800293e:	f001 f89b 	bl	8003a78 <mini_snprintf>

    break;
 8002942:	e036      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 8:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.proximity_sensor_state);
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 8002946:	7cdb      	ldrb	r3, [r3, #19]
 8002948:	f107 000c 	add.w	r0, r7, #12
 800294c:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <fnPrintMenuParamItemVal+0x304>)
 800294e:	210a      	movs	r1, #10
 8002950:	f001 f892 	bl	8003a78 <mini_snprintf>
    break;
 8002954:	e02d      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>
  case 9:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.ignition_switch_state);
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 8002958:	7d1b      	ldrb	r3, [r3, #20]
 800295a:	f107 000c 	add.w	r0, r7, #12
 800295e:	4a25      	ldr	r2, [pc, #148]	; (80029f4 <fnPrintMenuParamItemVal+0x304>)
 8002960:	210a      	movs	r1, #10
 8002962:	f001 f889 	bl	8003a78 <mini_snprintf>
    break;
 8002966:	e024      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 10:
	snprintf(buffer,sizeof(buffer),"%1u", main_data.converter_output_state);
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 800296a:	7d5b      	ldrb	r3, [r3, #21]
 800296c:	f107 000c 	add.w	r0, r7, #12
 8002970:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <fnPrintMenuParamItemVal+0x304>)
 8002972:	210a      	movs	r1, #10
 8002974:	f001 f880 	bl	8003a78 <mini_snprintf>
    break;
 8002978:	e01b      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 11:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.fridge_output_state);
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 800297c:	7d9b      	ldrb	r3, [r3, #22]
 800297e:	f107 000c 	add.w	r0, r7, #12
 8002982:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <fnPrintMenuParamItemVal+0x304>)
 8002984:	210a      	movs	r1, #10
 8002986:	f001 f877 	bl	8003a78 <mini_snprintf>
    break;
 800298a:	e012      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 12:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.pump_output_state);
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 800298e:	7ddb      	ldrb	r3, [r3, #23]
 8002990:	f107 000c 	add.w	r0, r7, #12
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <fnPrintMenuParamItemVal+0x304>)
 8002996:	210a      	movs	r1, #10
 8002998:	f001 f86e 	bl	8003a78 <mini_snprintf>
    break;
 800299c:	e009      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>

  case 13:
	snprintf(buffer,sizeof(buffer),"%1u", main_data.error_code);
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <fnPrintMenuParamItemVal+0x2e4>)
 80029a0:	7c5b      	ldrb	r3, [r3, #17]
 80029a2:	f107 000c 	add.w	r0, r7, #12
 80029a6:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <fnPrintMenuParamItemVal+0x304>)
 80029a8:	210a      	movs	r1, #10
 80029aa:	f001 f865 	bl	8003a78 <mini_snprintf>
    break;
 80029ae:	e000      	b.n	80029b2 <fnPrintMenuParamItemVal+0x2c2>
  case 14:

    break;

  default:
    break;
 80029b0:	bf00      	nop
  }

  u8g2_DrawStr(&u8g2,98,(num_line*12),buffer);
 80029b2:	79bb      	ldrb	r3, [r7, #6]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	0052      	lsls	r2, r2, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	b29a      	uxth	r2, r3
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	2162      	movs	r1, #98	; 0x62
 80029c6:	480c      	ldr	r0, [pc, #48]	; (80029f8 <fnPrintMenuParamItemVal+0x308>)
 80029c8:	f002 f8fa 	bl	8004bc0 <u8g2_DrawStr>
}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	2000095c 	.word	0x2000095c
 80029d8:	66666667 	.word	0x66666667
 80029dc:	080088d8 	.word	0x080088d8
 80029e0:	080088e0 	.word	0x080088e0
 80029e4:	41200000 	.word	0x41200000
 80029e8:	080088e4 	.word	0x080088e4
 80029ec:	080088cc 	.word	0x080088cc
 80029f0:	080088ec 	.word	0x080088ec
 80029f4:	080088f0 	.word	0x080088f0
 80029f8:	200009e8 	.word	0x200009e8

080029fc <fnPrintMenuParamView>:
//*************************************************************************************************************

//Функция вывода меню параметров  ---------------------------------------------
void fnPrintMenuParamView(void){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0

	u8g2_ClearBuffer(&u8g2);				//
 8002a02:	482a      	ldr	r0, [pc, #168]	; (8002aac <fnPrintMenuParamView+0xb0>)
 8002a04:	f001 fad0 	bl	8003fa8 <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 8002a08:	4929      	ldr	r1, [pc, #164]	; (8002ab0 <fnPrintMenuParamView+0xb4>)
 8002a0a:	4828      	ldr	r0, [pc, #160]	; (8002aac <fnPrintMenuParamView+0xb0>)
 8002a0c:	f002 f976 	bl	8004cfc <u8g2_SetFont>

  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 8002a10:	2300      	movs	r3, #0
 8002a12:	71fb      	strb	r3, [r7, #7]
 8002a14:	e024      	b.n	8002a60 <fnPrintMenuParamView+0x64>

    fnPrintMenuItemName(i+(menu_current_page*display_num_lines), i+1, parameters_names); // Выводим название пункта
 8002a16:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <fnPrintMenuParamView+0xb8>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <fnPrintMenuParamView+0xbc>)
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	4413      	add	r3, r2
 8002a28:	b2d8      	uxtb	r0, r3
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <fnPrintMenuParamView+0xc0>)
 8002a32:	4619      	mov	r1, r3
 8002a34:	f7ff fb08 	bl	8002048 <fnPrintMenuItemName>
    fnPrintMenuParamItemVal(i+(menu_current_page*display_num_lines), i+1); // Выводим значение пункта меню уставок
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <fnPrintMenuParamView+0xb8>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <fnPrintMenuParamView+0xbc>)
 8002a3e:	7812      	ldrb	r2, [r2, #0]
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	4413      	add	r3, r2
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f7ff fe4b 	bl	80026f0 <fnPrintMenuParamItemVal>
  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	71fb      	strb	r3, [r7, #7]
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <fnPrintMenuParamView+0xbc>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	79fa      	ldrb	r2, [r7, #7]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d3d5      	bcc.n	8002a16 <fnPrintMenuParamView+0x1a>
  }

  //рисуем боковой скролл бар
    uint8_t scroll_bar_height = display_height/(MENU_PARAM_VIEW_NUM_ITEMS/display_num_lines);
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <fnPrintMenuParamView+0xc4>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <fnPrintMenuParamView+0xbc>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	230f      	movs	r3, #15
 8002a78:	fb93 f3f1 	sdiv	r3, r3, r1
 8002a7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a80:	71bb      	strb	r3, [r7, #6]
    u8g2_DrawVLine(&u8g2,127, menu_current_page*scroll_bar_height, scroll_bar_height);
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <fnPrintMenuParamView+0xb8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	79ba      	ldrb	r2, [r7, #6]
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	79bb      	ldrb	r3, [r7, #6]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	217f      	movs	r1, #127	; 0x7f
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <fnPrintMenuParamView+0xb0>)
 8002a9a:	f002 fa42 	bl	8004f22 <u8g2_DrawVLine>

    u8g2_SendBuffer(&u8g2);
 8002a9e:	4803      	ldr	r0, [pc, #12]	; (8002aac <fnPrintMenuParamView+0xb0>)
 8002aa0:	f001 faf5 	bl	800408e <u8g2_SendBuffer>

}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200009e8 	.word	0x200009e8
 8002ab0:	08009bec 	.word	0x08009bec
 8002ab4:	2000007d 	.word	0x2000007d
 8002ab8:	20000900 	.word	0x20000900
 8002abc:	080089ec 	.word	0x080089ec
 8002ac0:	20000901 	.word	0x20000901

08002ac4 <fnPrintMainView>:
//*******************************************************************************************************************

//Функция вывода главного экрана -----------------------------------------------
void fnPrintMainView(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8

  char buffer[20] = {0,};
 8002aca:	2300      	movs	r3, #0
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
  uint8_t float_m, float_n; // переменные для разбития числа на целую и дробную часть

  u8g2_ClearBuffer(&u8g2);					//
 8002ada:	48b8      	ldr	r0, [pc, #736]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002adc:	f001 fa64 	bl	8003fa8 <u8g2_ClearBuffer>


  u8g2_SetFont(&u8g2,u8g2_font_5x7_tr);
 8002ae0:	49b7      	ldr	r1, [pc, #732]	; (8002dc0 <fnPrintMainView+0x2fc>)
 8002ae2:	48b6      	ldr	r0, [pc, #728]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002ae4:	f002 f90a 	bl	8004cfc <u8g2_SetFont>

  u8g2_DrawBox(&u8g2,98,1,31,8);
 8002ae8:	2308      	movs	r3, #8
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	231f      	movs	r3, #31
 8002aee:	2201      	movs	r2, #1
 8002af0:	2162      	movs	r1, #98	; 0x62
 8002af2:	48b2      	ldr	r0, [pc, #712]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002af4:	f001 f9c5 	bl	8003e82 <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,98,11,31,8);
 8002af8:	2308      	movs	r3, #8
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	231f      	movs	r3, #31
 8002afe:	220b      	movs	r2, #11
 8002b00:	2162      	movs	r1, #98	; 0x62
 8002b02:	48ae      	ldr	r0, [pc, #696]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002b04:	f001 f9bd 	bl	8003e82 <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,98,21,31,8);
 8002b08:	2308      	movs	r3, #8
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	231f      	movs	r3, #31
 8002b0e:	2215      	movs	r2, #21
 8002b10:	2162      	movs	r1, #98	; 0x62
 8002b12:	48aa      	ldr	r0, [pc, #680]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002b14:	f001 f9b5 	bl	8003e82 <u8g2_DrawBox>

  u8g2_SetDrawColor(&u8g2,0);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	48a8      	ldr	r0, [pc, #672]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002b1c:	f002 fa1a 	bl	8004f54 <u8g2_SetDrawColor>

  float_m = (uint8_t)(main_data.battery_voltage * 10);
 8002b20:	4ba8      	ldr	r3, [pc, #672]	; (8002dc4 <fnPrintMainView+0x300>)
 8002b22:	7b9b      	ldrb	r3, [r3, #14]
 8002b24:	461a      	mov	r2, r3
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
  float_n = float_m%10;
 8002b2e:	7dfa      	ldrb	r2, [r7, #23]
 8002b30:	4ba5      	ldr	r3, [pc, #660]	; (8002dc8 <fnPrintMainView+0x304>)
 8002b32:	fba3 1302 	umull	r1, r3, r3, r2
 8002b36:	08d9      	lsrs	r1, r3, #3
 8002b38:	460b      	mov	r3, r1
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	75bb      	strb	r3, [r7, #22]
  float_m = float_m/10;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	4aa0      	ldr	r2, [pc, #640]	; (8002dc8 <fnPrintMainView+0x304>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	75fb      	strb	r3, [r7, #23]
  snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 8002b50:	7dfa      	ldrb	r2, [r7, #23]
 8002b52:	7dbb      	ldrb	r3, [r7, #22]
 8002b54:	4638      	mov	r0, r7
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	4a9c      	ldr	r2, [pc, #624]	; (8002dcc <fnPrintMainView+0x308>)
 8002b5c:	2114      	movs	r1, #20
 8002b5e:	f000 ff8b 	bl	8003a78 <mini_snprintf>
  u8g2_DrawStr(&u8g2,102, 8, buffer);
 8002b62:	463b      	mov	r3, r7
 8002b64:	2208      	movs	r2, #8
 8002b66:	2166      	movs	r1, #102	; 0x66
 8002b68:	4894      	ldr	r0, [pc, #592]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002b6a:	f002 f829 	bl	8004bc0 <u8g2_DrawStr>

  snprintf(buffer,sizeof(buffer),"> %dC", (int)main_data.inside_temperature);
 8002b6e:	4b95      	ldr	r3, [pc, #596]	; (8002dc4 <fnPrintMainView+0x300>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f8c2 	bl	8000cfc <__aeabi_f2iz>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	4a94      	ldr	r2, [pc, #592]	; (8002dd0 <fnPrintMainView+0x30c>)
 8002b7e:	2114      	movs	r1, #20
 8002b80:	f000 ff7a 	bl	8003a78 <mini_snprintf>
  u8g2_DrawStr(&u8g2, 98, 18, buffer);
 8002b84:	463b      	mov	r3, r7
 8002b86:	2212      	movs	r2, #18
 8002b88:	2162      	movs	r1, #98	; 0x62
 8002b8a:	488c      	ldr	r0, [pc, #560]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002b8c:	f002 f818 	bl	8004bc0 <u8g2_DrawStr>

  snprintf(buffer,sizeof(buffer),"< %dC", (int)main_data.outside_temperature);
 8002b90:	4b8c      	ldr	r3, [pc, #560]	; (8002dc4 <fnPrintMainView+0x300>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f8b1 	bl	8000cfc <__aeabi_f2iz>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	4a8d      	ldr	r2, [pc, #564]	; (8002dd4 <fnPrintMainView+0x310>)
 8002ba0:	2114      	movs	r1, #20
 8002ba2:	f000 ff69 	bl	8003a78 <mini_snprintf>
  u8g2_DrawStr(&u8g2, 98, 28, buffer);
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	221c      	movs	r2, #28
 8002baa:	2162      	movs	r1, #98	; 0x62
 8002bac:	4883      	ldr	r0, [pc, #524]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002bae:	f002 f807 	bl	8004bc0 <u8g2_DrawStr>

  u8g2_SetDrawColor(&u8g2,1);
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4881      	ldr	r0, [pc, #516]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002bb6:	f002 f9cd 	bl	8004f54 <u8g2_SetDrawColor>

  if(main_data.pump_output_state){
 8002bba:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <fnPrintMainView+0x300>)
 8002bbc:	7ddb      	ldrb	r3, [r3, #23]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <fnPrintMainView+0x12c>
	u8g2_DrawBox(&u8g2,64,1,21,8);
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2315      	movs	r3, #21
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2140      	movs	r1, #64	; 0x40
 8002bcc:	487b      	ldr	r0, [pc, #492]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002bce:	f001 f958 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4879      	ldr	r0, [pc, #484]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002bd6:	f002 f9bd 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 8, "PUMP");
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <fnPrintMainView+0x314>)
 8002bdc:	2208      	movs	r2, #8
 8002bde:	2141      	movs	r1, #65	; 0x41
 8002be0:	4876      	ldr	r0, [pc, #472]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002be2:	f001 ffed 	bl	8004bc0 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8002be6:	2101      	movs	r1, #1
 8002be8:	4874      	ldr	r0, [pc, #464]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002bea:	f002 f9b3 	bl	8004f54 <u8g2_SetDrawColor>
 8002bee:	e00f      	b.n	8002c10 <fnPrintMainView+0x14c>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4872      	ldr	r0, [pc, #456]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002bf4:	f002 f9ae 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,1,21,8);
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2315      	movs	r3, #21
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	486e      	ldr	r0, [pc, #440]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c04:	f001 f93d 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	486c      	ldr	r0, [pc, #432]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c0c:	f002 f9a2 	bl	8004f54 <u8g2_SetDrawColor>
  }

  if(main_data.converter_output_state){
 8002c10:	4b6c      	ldr	r3, [pc, #432]	; (8002dc4 <fnPrintMainView+0x300>)
 8002c12:	7d5b      	ldrb	r3, [r3, #21]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d016      	beq.n	8002c46 <fnPrintMainView+0x182>
	u8g2_DrawBox(&u8g2,64,11,21,8);
 8002c18:	2308      	movs	r3, #8
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2315      	movs	r3, #21
 8002c1e:	220b      	movs	r2, #11
 8002c20:	2140      	movs	r1, #64	; 0x40
 8002c22:	4866      	ldr	r0, [pc, #408]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c24:	f001 f92d 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4864      	ldr	r0, [pc, #400]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c2c:	f002 f992 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 18, "CONV");
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <fnPrintMainView+0x318>)
 8002c32:	2212      	movs	r2, #18
 8002c34:	2141      	movs	r1, #65	; 0x41
 8002c36:	4861      	ldr	r0, [pc, #388]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c38:	f001 ffc2 	bl	8004bc0 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	485f      	ldr	r0, [pc, #380]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c40:	f002 f988 	bl	8004f54 <u8g2_SetDrawColor>
 8002c44:	e00f      	b.n	8002c66 <fnPrintMainView+0x1a2>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8002c46:	2100      	movs	r1, #0
 8002c48:	485c      	ldr	r0, [pc, #368]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c4a:	f002 f983 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,11,21,8);
 8002c4e:	2308      	movs	r3, #8
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2315      	movs	r3, #21
 8002c54:	220b      	movs	r2, #11
 8002c56:	2140      	movs	r1, #64	; 0x40
 8002c58:	4858      	ldr	r0, [pc, #352]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c5a:	f001 f912 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 8002c5e:	2101      	movs	r1, #1
 8002c60:	4856      	ldr	r0, [pc, #344]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c62:	f002 f977 	bl	8004f54 <u8g2_SetDrawColor>
  }

  if(main_data.fridge_output_state){
 8002c66:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <fnPrintMainView+0x300>)
 8002c68:	7d9b      	ldrb	r3, [r3, #22]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <fnPrintMainView+0x1d8>
	u8g2_DrawBox(&u8g2,64,21,21,8);
 8002c6e:	2308      	movs	r3, #8
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2315      	movs	r3, #21
 8002c74:	2215      	movs	r2, #21
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	4850      	ldr	r0, [pc, #320]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c7a:	f001 f902 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	484e      	ldr	r0, [pc, #312]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c82:	f002 f967 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 28, "FRDG");
 8002c86:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <fnPrintMainView+0x31c>)
 8002c88:	221c      	movs	r2, #28
 8002c8a:	2141      	movs	r1, #65	; 0x41
 8002c8c:	484b      	ldr	r0, [pc, #300]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c8e:	f001 ff97 	bl	8004bc0 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8002c92:	2101      	movs	r1, #1
 8002c94:	4849      	ldr	r0, [pc, #292]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002c96:	f002 f95d 	bl	8004f54 <u8g2_SetDrawColor>
 8002c9a:	e00f      	b.n	8002cbc <fnPrintMainView+0x1f8>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4847      	ldr	r0, [pc, #284]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002ca0:	f002 f958 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,21,21,8);
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2315      	movs	r3, #21
 8002caa:	2215      	movs	r2, #21
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	4843      	ldr	r0, [pc, #268]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002cb0:	f001 f8e7 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4841      	ldr	r0, [pc, #260]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002cb8:	f002 f94c 	bl	8004f54 <u8g2_SetDrawColor>
  }

  if(main_data.error_code){
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <fnPrintMainView+0x300>)
 8002cbe:	7c5b      	ldrb	r3, [r3, #17]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d016      	beq.n	8002cf2 <fnPrintMainView+0x22e>
	u8g2_DrawBox(&u8g2,1,1,16,8);
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2310      	movs	r3, #16
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2101      	movs	r1, #1
 8002cce:	483b      	ldr	r0, [pc, #236]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002cd0:	f001 f8d7 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4839      	ldr	r0, [pc, #228]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002cd8:	f002 f93c 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,2, 8, "ERR");
 8002cdc:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <fnPrintMainView+0x320>)
 8002cde:	2208      	movs	r2, #8
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4836      	ldr	r0, [pc, #216]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002ce4:	f001 ff6c 	bl	8004bc0 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4834      	ldr	r0, [pc, #208]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002cec:	f002 f932 	bl	8004f54 <u8g2_SetDrawColor>
 8002cf0:	e00f      	b.n	8002d12 <fnPrintMainView+0x24e>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4831      	ldr	r0, [pc, #196]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002cf6:	f002 f92d 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,1,1,16,8);
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2310      	movs	r3, #16
 8002d00:	2201      	movs	r2, #1
 8002d02:	2101      	movs	r1, #1
 8002d04:	482d      	ldr	r0, [pc, #180]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d06:	f001 f8bc 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	482b      	ldr	r0, [pc, #172]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d0e:	f002 f921 	bl	8004f54 <u8g2_SetDrawColor>
  }

  if(flag_mb_connected){
 8002d12:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <fnPrintMainView+0x324>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <fnPrintMainView+0x284>
	u8g2_DrawBox(&u8g2,19,1,11,8);
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	230b      	movs	r3, #11
 8002d20:	2201      	movs	r2, #1
 8002d22:	2113      	movs	r1, #19
 8002d24:	4825      	ldr	r0, [pc, #148]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d26:	f001 f8ac 	bl	8003e82 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4823      	ldr	r0, [pc, #140]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d2e:	f002 f911 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,20, 8, "MB");
 8002d32:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <fnPrintMainView+0x328>)
 8002d34:	2208      	movs	r2, #8
 8002d36:	2114      	movs	r1, #20
 8002d38:	4820      	ldr	r0, [pc, #128]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d3a:	f001 ff41 	bl	8004bc0 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8002d3e:	2101      	movs	r1, #1
 8002d40:	481e      	ldr	r0, [pc, #120]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d42:	f002 f907 	bl	8004f54 <u8g2_SetDrawColor>
 8002d46:	e00f      	b.n	8002d68 <fnPrintMainView+0x2a4>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	481c      	ldr	r0, [pc, #112]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d4c:	f002 f902 	bl	8004f54 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,19,1,16,8);
 8002d50:	2308      	movs	r3, #8
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2310      	movs	r3, #16
 8002d56:	2201      	movs	r2, #1
 8002d58:	2113      	movs	r1, #19
 8002d5a:	4818      	ldr	r0, [pc, #96]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d5c:	f001 f891 	bl	8003e82 <u8g2_DrawBox>
    u8g2_SetDrawColor(&u8g2,1);
 8002d60:	2101      	movs	r1, #1
 8002d62:	4816      	ldr	r0, [pc, #88]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d64:	f002 f8f6 	bl	8004f54 <u8g2_SetDrawColor>
  }

  snprintf(buffer,sizeof(buffer),"%d L",main_data.water_level_liter);
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <fnPrintMainView+0x300>)
 8002d6a:	7c1b      	ldrb	r3, [r3, #16]
 8002d6c:	4638      	mov	r0, r7
 8002d6e:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <fnPrintMainView+0x32c>)
 8002d70:	2114      	movs	r1, #20
 8002d72:	f000 fe81 	bl	8003a78 <mini_snprintf>
  u8g2_SetFont(&u8g2, u8g2_font_ncenB18_tr);	//
 8002d76:	491f      	ldr	r1, [pc, #124]	; (8002df4 <fnPrintMainView+0x330>)
 8002d78:	4810      	ldr	r0, [pc, #64]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d7a:	f001 ffbf 	bl	8004cfc <u8g2_SetFont>
  u8g2_DrawStr(&u8g2,55, 55, buffer);
 8002d7e:	463b      	mov	r3, r7
 8002d80:	2237      	movs	r2, #55	; 0x37
 8002d82:	2137      	movs	r1, #55	; 0x37
 8002d84:	480d      	ldr	r0, [pc, #52]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002d86:	f001 ff1b 	bl	8004bc0 <u8g2_DrawStr>

  W25qxx_ReadBytes(imageBuff, (IMAGE_WATER_LEVEL), 1024);
 8002d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8002d92:	4819      	ldr	r0, [pc, #100]	; (8002df8 <fnPrintMainView+0x334>)
 8002d94:	f003 faf2 	bl	800637c <W25qxx_ReadBytes>
  u8g2_DrawXBM(&u8g2,5, 12, 50, 50, imageBuff);
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <fnPrintMainView+0x334>)
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	2332      	movs	r3, #50	; 0x32
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2332      	movs	r3, #50	; 0x32
 8002da2:	220c      	movs	r2, #12
 8002da4:	2105      	movs	r1, #5
 8002da6:	4805      	ldr	r0, [pc, #20]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002da8:	f001 f828 	bl	8003dfc <u8g2_DrawXBM>

  u8g2_SendBuffer(&u8g2);
 8002dac:	4803      	ldr	r0, [pc, #12]	; (8002dbc <fnPrintMainView+0x2f8>)
 8002dae:	f001 f96e 	bl	800408e <u8g2_SendBuffer>
}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200009e8 	.word	0x200009e8
 8002dc0:	08008c10 	.word	0x08008c10
 8002dc4:	2000095c 	.word	0x2000095c
 8002dc8:	cccccccd 	.word	0xcccccccd
 8002dcc:	080088d8 	.word	0x080088d8
 8002dd0:	080088f4 	.word	0x080088f4
 8002dd4:	080088fc 	.word	0x080088fc
 8002dd8:	08008904 	.word	0x08008904
 8002ddc:	0800890c 	.word	0x0800890c
 8002de0:	08008914 	.word	0x08008914
 8002de4:	0800891c 	.word	0x0800891c
 8002de8:	20000490 	.word	0x20000490
 8002dec:	08008920 	.word	0x08008920
 8002df0:	08008924 	.word	0x08008924
 8002df4:	0800a094 	.word	0x0800a094
 8002df8:	20000090 	.word	0x20000090

08002dfc <fnMenuProcess>:
//***********************************************************************************************************

//Menu -----------------
void fnMenuProcess(void){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af02      	add	r7, sp, #8

    //определение текущей страницы меню
    if(menu_current_item < display_num_lines) menu_current_page = 0;
 8002e02:	4b9b      	ldr	r3, [pc, #620]	; (8003070 <fnMenuProcess+0x274>)
 8002e04:	781a      	ldrb	r2, [r3, #0]
 8002e06:	4b9b      	ldr	r3, [pc, #620]	; (8003074 <fnMenuProcess+0x278>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d203      	bcs.n	8002e16 <fnMenuProcess+0x1a>
 8002e0e:	4b9a      	ldr	r3, [pc, #616]	; (8003078 <fnMenuProcess+0x27c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e053      	b.n	8002ebe <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*2)menu_current_page = 1 ;
 8002e16:	4b96      	ldr	r3, [pc, #600]	; (8003070 <fnMenuProcess+0x274>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b95      	ldr	r3, [pc, #596]	; (8003074 <fnMenuProcess+0x278>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	429a      	cmp	r2, r3
 8002e24:	da03      	bge.n	8002e2e <fnMenuProcess+0x32>
 8002e26:	4b94      	ldr	r3, [pc, #592]	; (8003078 <fnMenuProcess+0x27c>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e047      	b.n	8002ebe <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*3)menu_current_page = 2 ;
 8002e2e:	4b90      	ldr	r3, [pc, #576]	; (8003070 <fnMenuProcess+0x274>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <fnMenuProcess+0x278>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	4299      	cmp	r1, r3
 8002e42:	da03      	bge.n	8002e4c <fnMenuProcess+0x50>
 8002e44:	4b8c      	ldr	r3, [pc, #560]	; (8003078 <fnMenuProcess+0x27c>)
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e038      	b.n	8002ebe <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*4)menu_current_page = 3 ;
 8002e4c:	4b88      	ldr	r3, [pc, #544]	; (8003070 <fnMenuProcess+0x274>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b88      	ldr	r3, [pc, #544]	; (8003074 <fnMenuProcess+0x278>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	da03      	bge.n	8002e64 <fnMenuProcess+0x68>
 8002e5c:	4b86      	ldr	r3, [pc, #536]	; (8003078 <fnMenuProcess+0x27c>)
 8002e5e:	2203      	movs	r2, #3
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e02c      	b.n	8002ebe <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*5)menu_current_page = 4 ;
 8002e64:	4b82      	ldr	r3, [pc, #520]	; (8003070 <fnMenuProcess+0x274>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4b82      	ldr	r3, [pc, #520]	; (8003074 <fnMenuProcess+0x278>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	4299      	cmp	r1, r3
 8002e78:	da03      	bge.n	8002e82 <fnMenuProcess+0x86>
 8002e7a:	4b7f      	ldr	r3, [pc, #508]	; (8003078 <fnMenuProcess+0x27c>)
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e01d      	b.n	8002ebe <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*6)menu_current_page = 5 ;
 8002e82:	4b7b      	ldr	r3, [pc, #492]	; (8003070 <fnMenuProcess+0x274>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4619      	mov	r1, r3
 8002e88:	4b7a      	ldr	r3, [pc, #488]	; (8003074 <fnMenuProcess+0x278>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4299      	cmp	r1, r3
 8002e98:	da03      	bge.n	8002ea2 <fnMenuProcess+0xa6>
 8002e9a:	4b77      	ldr	r3, [pc, #476]	; (8003078 <fnMenuProcess+0x27c>)
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e00d      	b.n	8002ebe <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*7)menu_current_page = 6 ;
 8002ea2:	4b73      	ldr	r3, [pc, #460]	; (8003070 <fnMenuProcess+0x274>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4b72      	ldr	r3, [pc, #456]	; (8003074 <fnMenuProcess+0x278>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	4299      	cmp	r1, r3
 8002eb6:	da02      	bge.n	8002ebe <fnMenuProcess+0xc2>
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	; (8003078 <fnMenuProcess+0x27c>)
 8002eba:	2206      	movs	r2, #6
 8002ebc:	701a      	strb	r2, [r3, #0]

    switch (menu_mode)
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	; (800307c <fnMenuProcess+0x280>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	f200 81a9 	bhi.w	800321a <fnMenuProcess+0x41e>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <fnMenuProcess+0xd4>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002ee5 	.word	0x08002ee5
 8002ed4:	08002f15 	.word	0x08002f15
 8002ed8:	08002f95 	.word	0x08002f95
 8002edc:	08003013 	.word	0x08003013
 8002ee0:	08003151 	.word	0x08003151
    {
      case MENU_MAIN_VIEW:

        fnPrintMainView();
 8002ee4:	f7ff fdee 	bl	8002ac4 <fnPrintMainView>

        if(btn_state == BTN_ENTER_LONG_PRESS){
 8002ee8:	4b65      	ldr	r3, [pc, #404]	; (8003080 <fnMenuProcess+0x284>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d105      	bne.n	8002efc <fnMenuProcess+0x100>
          menu_mode = MENU_SETPOINTS;
 8002ef0:	4b62      	ldr	r3, [pc, #392]	; (800307c <fnMenuProcess+0x280>)
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 8002ef6:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <fnMenuProcess+0x274>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
         // tone(BUZZER,500,200);
        }

        if(btn_state == BTN_ENTER){
 8002efc:	4b60      	ldr	r3, [pc, #384]	; (8003080 <fnMenuProcess+0x284>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	f040 818c 	bne.w	800321e <fnMenuProcess+0x422>
          menu_mode = MENU_PARAM_VIEW;
 8002f06:	4b5d      	ldr	r3, [pc, #372]	; (800307c <fnMenuProcess+0x280>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 8002f0c:	4b58      	ldr	r3, [pc, #352]	; (8003070 <fnMenuProcess+0x274>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002f12:	e184      	b.n	800321e <fnMenuProcess+0x422>

      case MENU_PARAM_VIEW:

        fnPrintMenuParamView();
 8002f14:	f7ff fd72 	bl	80029fc <fnPrintMenuParamView>

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)) {         // Если кнопку нажали или удерживают
 8002f18:	4b59      	ldr	r3, [pc, #356]	; (8003080 <fnMenuProcess+0x284>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d003      	beq.n	8002f28 <fnMenuProcess+0x12c>
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <fnMenuProcess+0x284>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d115      	bne.n	8002f54 <fnMenuProcess+0x158>
          menu_current_item = constrain(menu_current_item - display_num_lines , 0, MENU_PARAM_VIEW_NUM_ITEMS - 1); // Двигаем указатель в пределах дисплея
 8002f28:	4b51      	ldr	r3, [pc, #324]	; (8003070 <fnMenuProcess+0x274>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b51      	ldr	r3, [pc, #324]	; (8003074 <fnMenuProcess+0x278>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <fnMenuProcess+0x152>
 8002f38:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <fnMenuProcess+0x274>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b4d      	ldr	r3, [pc, #308]	; (8003074 <fnMenuProcess+0x278>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b0e      	cmp	r3, #14
 8002f46:	bfa8      	it	ge
 8002f48:	230e      	movge	r3, #14
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	e000      	b.n	8002f50 <fnMenuProcess+0x154>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	4a47      	ldr	r2, [pc, #284]	; (8003070 <fnMenuProcess+0x274>)
 8002f52:	7013      	strb	r3, [r2, #0]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)) {
 8002f54:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <fnMenuProcess+0x284>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d003      	beq.n	8002f64 <fnMenuProcess+0x168>
 8002f5c:	4b48      	ldr	r3, [pc, #288]	; (8003080 <fnMenuProcess+0x284>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d10b      	bne.n	8002f7c <fnMenuProcess+0x180>
          menu_current_item = constrain(menu_current_item + display_num_lines, 0, MENU_PARAM_VIEW_NUM_ITEMS - 1);
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <fnMenuProcess+0x274>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b42      	ldr	r3, [pc, #264]	; (8003074 <fnMenuProcess+0x278>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	2b0e      	cmp	r3, #14
 8002f72:	bfa8      	it	ge
 8002f74:	230e      	movge	r3, #14
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <fnMenuProcess+0x274>)
 8002f7a:	701a      	strb	r2, [r3, #0]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if(btn_state == BTN_ENTER){
 8002f7c:	4b40      	ldr	r3, [pc, #256]	; (8003080 <fnMenuProcess+0x284>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	f040 814e 	bne.w	8003222 <fnMenuProcess+0x426>
          menu_mode = MENU_LOGO_VIEW;
 8002f86:	4b3d      	ldr	r3, [pc, #244]	; (800307c <fnMenuProcess+0x280>)
 8002f88:	2204      	movs	r2, #4
 8002f8a:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 8002f8c:	4b38      	ldr	r3, [pc, #224]	; (8003070 <fnMenuProcess+0x274>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
        }

        break;
 8002f92:	e146      	b.n	8003222 <fnMenuProcess+0x426>

      case MENU_SETPOINTS:

        printMenuSetpoints();
 8002f94:	f7ff f920 	bl	80021d8 <printMenuSetpoints>

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)) {         // Если кнопку нажали или удерживают
 8002f98:	4b39      	ldr	r3, [pc, #228]	; (8003080 <fnMenuProcess+0x284>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d003      	beq.n	8002fa8 <fnMenuProcess+0x1ac>
 8002fa0:	4b37      	ldr	r3, [pc, #220]	; (8003080 <fnMenuProcess+0x284>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d109      	bne.n	8002fbc <fnMenuProcess+0x1c0>
          menu_current_item = constrain(menu_current_item + 1, 0, MENU_SETPOINTS_NUM_ITEMS - 1); // Двигаем указатель в пределах дисплея
 8002fa8:	4b31      	ldr	r3, [pc, #196]	; (8003070 <fnMenuProcess+0x274>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b17      	cmp	r3, #23
 8002fae:	bf28      	it	cs
 8002fb0:	2317      	movcs	r3, #23
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <fnMenuProcess+0x274>)
 8002fba:	701a      	strb	r2, [r3, #0]
          //Serial.println(menu_current_item);
        }

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)) {
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <fnMenuProcess+0x284>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d003      	beq.n	8002fcc <fnMenuProcess+0x1d0>
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <fnMenuProcess+0x284>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d10f      	bne.n	8002fec <fnMenuProcess+0x1f0>
          menu_current_item = constrain(menu_current_item - 1, 0, MENU_SETPOINTS_NUM_ITEMS - 1);
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <fnMenuProcess+0x274>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <fnMenuProcess+0x1ea>
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <fnMenuProcess+0x274>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b19      	cmp	r3, #25
 8002fda:	bf28      	it	cs
 8002fdc:	2319      	movcs	r3, #25
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	e000      	b.n	8002fe8 <fnMenuProcess+0x1ec>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	4a21      	ldr	r2, [pc, #132]	; (8003070 <fnMenuProcess+0x274>)
 8002fea:	7013      	strb	r3, [r2, #0]
          //if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if(btn_state == BTN_ENTER)menu_mode = MENU_SETPOINTS_EDIT_MODE;
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <fnMenuProcess+0x284>)
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d102      	bne.n	8002ffa <fnMenuProcess+0x1fe>
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <fnMenuProcess+0x280>)
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	701a      	strb	r2, [r3, #0]

        if(btn_state == BTN_ESC){
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <fnMenuProcess+0x284>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	f040 8111 	bne.w	8003226 <fnMenuProcess+0x42a>
          menu_mode = MENU_MAIN_VIEW;
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <fnMenuProcess+0x280>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <fnMenuProcess+0x274>)
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
          //tone(BUZZER,500,200);
        }

        break;
 8003010:	e109      	b.n	8003226 <fnMenuProcess+0x42a>

      case MENU_SETPOINTS_EDIT_MODE:

        printMenuSetpoints();
 8003012:	f7ff f8e1 	bl	80021d8 <printMenuSetpoints>

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)){
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <fnMenuProcess+0x284>)
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d003      	beq.n	8003026 <fnMenuProcess+0x22a>
 800301e:	4b18      	ldr	r3, [pc, #96]	; (8003080 <fnMenuProcess+0x284>)
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d140      	bne.n	80030a8 <fnMenuProcess+0x2ac>
          SetpointsUnion.SetpointsArray[menu_current_item] = constrain(SetpointsUnion.SetpointsArray[menu_current_item]+1,param_range_min[menu_current_item],param_range_max[menu_current_item]);
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <fnMenuProcess+0x274>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <fnMenuProcess+0x288>)
 800302e:	5c9b      	ldrb	r3, [r3, r2]
 8003030:	3301      	adds	r3, #1
 8003032:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <fnMenuProcess+0x274>)
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	4611      	mov	r1, r2
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <fnMenuProcess+0x28c>)
 800303a:	5c52      	ldrb	r2, [r2, r1]
 800303c:	4293      	cmp	r3, r2
 800303e:	da05      	bge.n	800304c <fnMenuProcess+0x250>
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <fnMenuProcess+0x274>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <fnMenuProcess+0x28c>)
 8003048:	5c9b      	ldrb	r3, [r3, r2]
 800304a:	e028      	b.n	800309e <fnMenuProcess+0x2a2>
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <fnMenuProcess+0x274>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <fnMenuProcess+0x288>)
 8003054:	5c9a      	ldrb	r2, [r3, r2]
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <fnMenuProcess+0x274>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <fnMenuProcess+0x290>)
 800305e:	5c5b      	ldrb	r3, [r3, r1]
 8003060:	429a      	cmp	r2, r3
 8003062:	d315      	bcc.n	8003090 <fnMenuProcess+0x294>
 8003064:	4b02      	ldr	r3, [pc, #8]	; (8003070 <fnMenuProcess+0x274>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <fnMenuProcess+0x290>)
 800306c:	5c9b      	ldrb	r3, [r3, r2]
 800306e:	e016      	b.n	800309e <fnMenuProcess+0x2a2>
 8003070:	2000007c 	.word	0x2000007c
 8003074:	20000900 	.word	0x20000900
 8003078:	2000007d 	.word	0x2000007d
 800307c:	2000007e 	.word	0x2000007e
 8003080:	20000080 	.word	0x20000080
 8003084:	20000ac0 	.word	0x20000ac0
 8003088:	20000004 	.word	0x20000004
 800308c:	20000020 	.word	0x20000020
 8003090:	4b69      	ldr	r3, [pc, #420]	; (8003238 <fnMenuProcess+0x43c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b69      	ldr	r3, [pc, #420]	; (800323c <fnMenuProcess+0x440>)
 8003098:	5c9b      	ldrb	r3, [r3, r2]
 800309a:	3301      	adds	r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4a66      	ldr	r2, [pc, #408]	; (8003238 <fnMenuProcess+0x43c>)
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4a65      	ldr	r2, [pc, #404]	; (800323c <fnMenuProcess+0x440>)
 80030a6:	5453      	strb	r3, [r2, r1]
         // Serial.println(SetpointsUnion.SetpointsArray[menu_current_item]);
        }

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)){
 80030a8:	4b65      	ldr	r3, [pc, #404]	; (8003240 <fnMenuProcess+0x444>)
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d003      	beq.n	80030b8 <fnMenuProcess+0x2bc>
 80030b0:	4b63      	ldr	r3, [pc, #396]	; (8003240 <fnMenuProcess+0x444>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d125      	bne.n	8003104 <fnMenuProcess+0x308>
          SetpointsUnion.SetpointsArray[menu_current_item] = constrain(SetpointsUnion.SetpointsArray[menu_current_item]-1,param_range_min[menu_current_item],param_range_max[menu_current_item]);
 80030b8:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <fnMenuProcess+0x43c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b5f      	ldr	r3, [pc, #380]	; (800323c <fnMenuProcess+0x440>)
 80030c0:	5c9a      	ldrb	r2, [r3, r2]
 80030c2:	4b5d      	ldr	r3, [pc, #372]	; (8003238 <fnMenuProcess+0x43c>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <fnMenuProcess+0x448>)
 80030ca:	5c5b      	ldrb	r3, [r3, r1]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d805      	bhi.n	80030dc <fnMenuProcess+0x2e0>
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <fnMenuProcess+0x43c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b5b      	ldr	r3, [pc, #364]	; (8003244 <fnMenuProcess+0x448>)
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	e00e      	b.n	80030fa <fnMenuProcess+0x2fe>
 80030dc:	4b56      	ldr	r3, [pc, #344]	; (8003238 <fnMenuProcess+0x43c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b56      	ldr	r3, [pc, #344]	; (800323c <fnMenuProcess+0x440>)
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	4a53      	ldr	r2, [pc, #332]	; (8003238 <fnMenuProcess+0x43c>)
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4a56      	ldr	r2, [pc, #344]	; (8003248 <fnMenuProcess+0x44c>)
 80030f0:	5c52      	ldrb	r2, [r2, r1]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	bfa8      	it	ge
 80030f6:	4613      	movge	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	4a4f      	ldr	r2, [pc, #316]	; (8003238 <fnMenuProcess+0x43c>)
 80030fc:	7812      	ldrb	r2, [r2, #0]
 80030fe:	4611      	mov	r1, r2
 8003100:	4a4e      	ldr	r2, [pc, #312]	; (800323c <fnMenuProcess+0x440>)
 8003102:	5453      	strb	r3, [r2, r1]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(SetpointsUnion.SetpointsArray[menu_current_item]);
        }

        if(btn_state == BTN_ENTER){
 8003104:	4b4e      	ldr	r3, [pc, #312]	; (8003240 <fnMenuProcess+0x444>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	2b10      	cmp	r3, #16
 800310a:	d119      	bne.n	8003140 <fnMenuProcess+0x344>
          //выход с сохранением в flash
        	W25qxx_EraseSector(SETPOINTS_FLASH_SECTOR);
 800310c:	200a      	movs	r0, #10
 800310e:	f002 ff01 	bl	8005f14 <W25qxx_EraseSector>
        	bool flag_empty = false;
 8003112:	2300      	movs	r3, #0
 8003114:	71fb      	strb	r3, [r7, #7]
        	flag_empty = W25qxx_IsEmptySector(SETPOINTS_FLASH_SECTOR, 0,MENU_SETPOINTS_NUM_ITEMS);
 8003116:	2219      	movs	r2, #25
 8003118:	2100      	movs	r1, #0
 800311a:	200a      	movs	r0, #10
 800311c:	f002 ff64 	bl	8005fe8 <W25qxx_IsEmptySector>
 8003120:	4603      	mov	r3, r0
 8003122:	71fb      	strb	r3, [r7, #7]
        	if(flag_empty){
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <fnMenuProcess+0x33e>
        		W25qxx_WriteSector(SetpointsUnion.SetpointsArray, SETPOINTS_FLASH_SECTOR, 0, MENU_SETPOINTS_NUM_ITEMS);
 800312a:	2319      	movs	r3, #25
 800312c:	2200      	movs	r2, #0
 800312e:	210a      	movs	r1, #10
 8003130:	4842      	ldr	r0, [pc, #264]	; (800323c <fnMenuProcess+0x440>)
 8003132:	f003 f8c1 	bl	80062b8 <W25qxx_WriteSector>
        		flag_empty = false;
 8003136:	2300      	movs	r3, #0
 8003138:	71fb      	strb	r3, [r7, #7]
        		//tone(BUZZER,500,200);
        	}

          menu_mode = MENU_SETPOINTS;
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <fnMenuProcess+0x450>)
 800313c:	2202      	movs	r2, #2
 800313e:	701a      	strb	r2, [r3, #0]
        }

        if(btn_state == BTN_ESC){
 8003140:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <fnMenuProcess+0x444>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	2b20      	cmp	r3, #32
 8003146:	d170      	bne.n	800322a <fnMenuProcess+0x42e>
		  //выход без сохранения
		  menu_mode = MENU_SETPOINTS;
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <fnMenuProcess+0x450>)
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
		}

        break;
 800314e:	e06c      	b.n	800322a <fnMenuProcess+0x42e>

      case MENU_LOGO_VIEW:

        switch (SetpointsUnion.setpoints_data.logo)
 8003150:	4b3a      	ldr	r3, [pc, #232]	; (800323c <fnMenuProcess+0x440>)
 8003152:	7d5b      	ldrb	r3, [r3, #21]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d036      	beq.n	80031c6 <fnMenuProcess+0x3ca>
 8003158:	2b02      	cmp	r3, #2
 800315a:	dc4c      	bgt.n	80031f6 <fnMenuProcess+0x3fa>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <fnMenuProcess+0x36a>
 8003160:	2b01      	cmp	r3, #1
 8003162:	d018      	beq.n	8003196 <fnMenuProcess+0x39a>
 8003164:	e047      	b.n	80031f6 <fnMenuProcess+0x3fa>
        {
        case 0:
          u8g2_ClearBuffer(&u8g2);
 8003166:	483a      	ldr	r0, [pc, #232]	; (8003250 <fnMenuProcess+0x454>)
 8003168:	f000 ff1e 	bl	8003fa8 <u8g2_ClearBuffer>
          W25qxx_ReadBytes(imageBuff, IMAGE_LOGO_FK, 1024);
 800316c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003174:	4837      	ldr	r0, [pc, #220]	; (8003254 <fnMenuProcess+0x458>)
 8003176:	f003 f901 	bl	800637c <W25qxx_ReadBytes>
          u8g2_DrawXBM(&u8g2,33,5, 64, 55, imageBuff);
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <fnMenuProcess+0x458>)
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	2337      	movs	r3, #55	; 0x37
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	2340      	movs	r3, #64	; 0x40
 8003184:	2205      	movs	r2, #5
 8003186:	2121      	movs	r1, #33	; 0x21
 8003188:	4831      	ldr	r0, [pc, #196]	; (8003250 <fnMenuProcess+0x454>)
 800318a:	f000 fe37 	bl	8003dfc <u8g2_DrawXBM>
          u8g2_SendBuffer(&u8g2);
 800318e:	4830      	ldr	r0, [pc, #192]	; (8003250 <fnMenuProcess+0x454>)
 8003190:	f000 ff7d 	bl	800408e <u8g2_SendBuffer>
          break;
 8003194:	e036      	b.n	8003204 <fnMenuProcess+0x408>

        case 1:
          u8g2_ClearBuffer(&u8g2);
 8003196:	482e      	ldr	r0, [pc, #184]	; (8003250 <fnMenuProcess+0x454>)
 8003198:	f000 ff06 	bl	8003fa8 <u8g2_ClearBuffer>
          W25qxx_ReadBytes(imageBuff, IMAGE_LOGO_2, 1024);
 800319c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031a4:	482b      	ldr	r0, [pc, #172]	; (8003254 <fnMenuProcess+0x458>)
 80031a6:	f003 f8e9 	bl	800637c <W25qxx_ReadBytes>
          u8g2_DrawXBM(&u8g2,33,5, 64, 55, imageBuff);
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <fnMenuProcess+0x458>)
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	2337      	movs	r3, #55	; 0x37
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	2340      	movs	r3, #64	; 0x40
 80031b4:	2205      	movs	r2, #5
 80031b6:	2121      	movs	r1, #33	; 0x21
 80031b8:	4825      	ldr	r0, [pc, #148]	; (8003250 <fnMenuProcess+0x454>)
 80031ba:	f000 fe1f 	bl	8003dfc <u8g2_DrawXBM>
          u8g2_SendBuffer(&u8g2);
 80031be:	4824      	ldr	r0, [pc, #144]	; (8003250 <fnMenuProcess+0x454>)
 80031c0:	f000 ff65 	bl	800408e <u8g2_SendBuffer>
          break;
 80031c4:	e01e      	b.n	8003204 <fnMenuProcess+0x408>

        case 2:
          u8g2_ClearBuffer(&u8g2);
 80031c6:	4822      	ldr	r0, [pc, #136]	; (8003250 <fnMenuProcess+0x454>)
 80031c8:	f000 feee 	bl	8003fa8 <u8g2_ClearBuffer>
          W25qxx_ReadBytes(imageBuff, IMAGE_LOGO_3, 1024);
 80031cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80031d4:	481f      	ldr	r0, [pc, #124]	; (8003254 <fnMenuProcess+0x458>)
 80031d6:	f003 f8d1 	bl	800637c <W25qxx_ReadBytes>
          u8g2_DrawXBM(&u8g2,33,5, 64, 55, imageBuff);
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <fnMenuProcess+0x458>)
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	2337      	movs	r3, #55	; 0x37
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	2205      	movs	r2, #5
 80031e6:	2121      	movs	r1, #33	; 0x21
 80031e8:	4819      	ldr	r0, [pc, #100]	; (8003250 <fnMenuProcess+0x454>)
 80031ea:	f000 fe07 	bl	8003dfc <u8g2_DrawXBM>
          u8g2_SendBuffer(&u8g2);
 80031ee:	4818      	ldr	r0, [pc, #96]	; (8003250 <fnMenuProcess+0x454>)
 80031f0:	f000 ff4d 	bl	800408e <u8g2_SendBuffer>
          break;
 80031f4:	e006      	b.n	8003204 <fnMenuProcess+0x408>

		default:
			u8g2_ClearBuffer(&u8g2);
 80031f6:	4816      	ldr	r0, [pc, #88]	; (8003250 <fnMenuProcess+0x454>)
 80031f8:	f000 fed6 	bl	8003fa8 <u8g2_ClearBuffer>
			//пусто
			u8g2_SendBuffer(&u8g2);
 80031fc:	4814      	ldr	r0, [pc, #80]	; (8003250 <fnMenuProcess+0x454>)
 80031fe:	f000 ff46 	bl	800408e <u8g2_SendBuffer>
			break;
 8003202:	bf00      	nop
        }


        if(btn_state == BTN_ENTER){
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <fnMenuProcess+0x444>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	2b10      	cmp	r3, #16
 800320a:	d110      	bne.n	800322e <fnMenuProcess+0x432>
          menu_mode = MENU_MAIN_VIEW;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <fnMenuProcess+0x450>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <fnMenuProcess+0x43c>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
        }

        break;
 8003218:	e009      	b.n	800322e <fnMenuProcess+0x432>

      default:

      break;
 800321a:	bf00      	nop
 800321c:	e008      	b.n	8003230 <fnMenuProcess+0x434>
        break;
 800321e:	bf00      	nop
 8003220:	e006      	b.n	8003230 <fnMenuProcess+0x434>
        break;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <fnMenuProcess+0x434>
        break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <fnMenuProcess+0x434>
        break;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <fnMenuProcess+0x434>
        break;
 800322e:	bf00      	nop

    }
  //end menu
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	2000007c 	.word	0x2000007c
 800323c:	20000ac0 	.word	0x20000ac0
 8003240:	20000080 	.word	0x20000080
 8003244:	20000004 	.word	0x20000004
 8003248:	20000020 	.word	0x20000020
 800324c:	2000007e 	.word	0x2000007e
 8003250:	200009e8 	.word	0x200009e8
 8003254:	20000090 	.word	0x20000090

08003258 <fnGetPressKey>:

//***************************************************************************************************************

//
static uint16_t fnGetPressKey(void){
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0

 	static uint16_t key_pressed;

 	 //считываем состояние кнопок и заносим в массив
 		  btnStatesArray[BUTTON_UP] = Button_Get_Clicked_Count(&Button_A);  //
 800325c:	485d      	ldr	r0, [pc, #372]	; (80033d4 <fnGetPressKey+0x17c>)
 800325e:	f7fe fb4d 	bl	80018fc <Button_Get_Clicked_Count>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <fnGetPressKey+0x180>)
 8003268:	701a      	strb	r2, [r3, #0]
 		  btnStatesArray[BUTTON_DOWN] = Button_Get_Clicked_Count(&Button_B);
 800326a:	485c      	ldr	r0, [pc, #368]	; (80033dc <fnGetPressKey+0x184>)
 800326c:	f7fe fb46 	bl	80018fc <Button_Get_Clicked_Count>
 8003270:	4603      	mov	r3, r0
 8003272:	461a      	mov	r2, r3
 8003274:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <fnGetPressKey+0x180>)
 8003276:	705a      	strb	r2, [r3, #1]
 		  btnStatesArray[BUTTON_ENTER] = Button_Get_Clicked_Count(&Button_C);
 8003278:	4859      	ldr	r0, [pc, #356]	; (80033e0 <fnGetPressKey+0x188>)
 800327a:	f7fe fb3f 	bl	80018fc <Button_Get_Clicked_Count>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <fnGetPressKey+0x180>)
 8003284:	709a      	strb	r2, [r3, #2]
 		  btnStatesArray[BUTTON_ESC] = Button_Get_Clicked_Count(&Button_D);
 8003286:	4857      	ldr	r0, [pc, #348]	; (80033e4 <fnGetPressKey+0x18c>)
 8003288:	f7fe fb38 	bl	80018fc <Button_Get_Clicked_Count>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	4b51      	ldr	r3, [pc, #324]	; (80033d8 <fnGetPressKey+0x180>)
 8003292:	70da      	strb	r2, [r3, #3]


 	if(btnStatesArray[BUTTON_UP] == 1)key_pressed |= BTN_UP;
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <fnGetPressKey+0x180>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <fnGetPressKey+0x54>
 800329c:	4b52      	ldr	r3, [pc, #328]	; (80033e8 <fnGetPressKey+0x190>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <fnGetPressKey+0x190>)
 80032a8:	801a      	strh	r2, [r3, #0]
 80032aa:	e006      	b.n	80032ba <fnGetPressKey+0x62>
 		else key_pressed &= ~BTN_UP;
 80032ac:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <fnGetPressKey+0x190>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <fnGetPressKey+0x190>)
 80032b8:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_DOWN] == 1) key_pressed |= BTN_DOWN;    //
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <fnGetPressKey+0x180>)
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <fnGetPressKey+0x7a>
 80032c2:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <fnGetPressKey+0x190>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <fnGetPressKey+0x190>)
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	e006      	b.n	80032e0 <fnGetPressKey+0x88>
 		else key_pressed &= ~BTN_DOWN;
 80032d2:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <fnGetPressKey+0x190>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	f023 0302 	bic.w	r3, r3, #2
 80032da:	b29a      	uxth	r2, r3
 80032dc:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <fnGetPressKey+0x190>)
 80032de:	801a      	strh	r2, [r3, #0]

 	if(Button_Get_Status(&Button_A) == Button_Long_Pressed)key_pressed |= BTN_UP_LONG_PRESS;
 80032e0:	483c      	ldr	r0, [pc, #240]	; (80033d4 <fnGetPressKey+0x17c>)
 80032e2:	f7fe fafb 	bl	80018dc <Button_Get_Status>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d107      	bne.n	80032fc <fnGetPressKey+0xa4>
 80032ec:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <fnGetPressKey+0x190>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <fnGetPressKey+0x190>)
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e006      	b.n	800330a <fnGetPressKey+0xb2>
 	 	else key_pressed &= ~BTN_UP_LONG_PRESS;
 80032fc:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <fnGetPressKey+0x190>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	b29a      	uxth	r2, r3
 8003306:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <fnGetPressKey+0x190>)
 8003308:	801a      	strh	r2, [r3, #0]

	if(Button_Get_Status(&Button_B) == Button_Long_Pressed)key_pressed |= BTN_DOWN_LONG_PRESS; //
 800330a:	4834      	ldr	r0, [pc, #208]	; (80033dc <fnGetPressKey+0x184>)
 800330c:	f7fe fae6 	bl	80018dc <Button_Get_Status>
 8003310:	4603      	mov	r3, r0
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <fnGetPressKey+0xce>
 8003316:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <fnGetPressKey+0x190>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f043 0308 	orr.w	r3, r3, #8
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <fnGetPressKey+0x190>)
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	e006      	b.n	8003334 <fnGetPressKey+0xdc>
		else key_pressed &= ~BTN_DOWN_LONG_PRESS;
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <fnGetPressKey+0x190>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	f023 0308 	bic.w	r3, r3, #8
 800332e:	b29a      	uxth	r2, r3
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <fnGetPressKey+0x190>)
 8003332:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ENTER] == 1) key_pressed |= BTN_ENTER;    //
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <fnGetPressKey+0x180>)
 8003336:	789b      	ldrb	r3, [r3, #2]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <fnGetPressKey+0xf4>
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <fnGetPressKey+0x190>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	f043 0310 	orr.w	r3, r3, #16
 8003344:	b29a      	uxth	r2, r3
 8003346:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <fnGetPressKey+0x190>)
 8003348:	801a      	strh	r2, [r3, #0]
 800334a:	e006      	b.n	800335a <fnGetPressKey+0x102>
 		else key_pressed &= ~BTN_ENTER;
 800334c:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <fnGetPressKey+0x190>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	f023 0310 	bic.w	r3, r3, #16
 8003354:	b29a      	uxth	r2, r3
 8003356:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <fnGetPressKey+0x190>)
 8003358:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ESC] == 1) key_pressed |= BTN_ESC;  //
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <fnGetPressKey+0x180>)
 800335c:	78db      	ldrb	r3, [r3, #3]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d107      	bne.n	8003372 <fnGetPressKey+0x11a>
 8003362:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <fnGetPressKey+0x190>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f043 0320 	orr.w	r3, r3, #32
 800336a:	b29a      	uxth	r2, r3
 800336c:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <fnGetPressKey+0x190>)
 800336e:	801a      	strh	r2, [r3, #0]
 8003370:	e006      	b.n	8003380 <fnGetPressKey+0x128>
 		else key_pressed &= ~BTN_ESC;
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <fnGetPressKey+0x190>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	f023 0320 	bic.w	r3, r3, #32
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <fnGetPressKey+0x190>)
 800337e:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ENTER] == 255) key_pressed |= BTN_ENTER_LONG_PRESS;  //
 8003380:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <fnGetPressKey+0x180>)
 8003382:	789b      	ldrb	r3, [r3, #2]
 8003384:	2bff      	cmp	r3, #255	; 0xff
 8003386:	d107      	bne.n	8003398 <fnGetPressKey+0x140>
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <fnGetPressKey+0x190>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <fnGetPressKey+0x190>)
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	e006      	b.n	80033a6 <fnGetPressKey+0x14e>
 		else key_pressed &= ~BTN_ENTER_LONG_PRESS;
 8003398:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <fnGetPressKey+0x190>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <fnGetPressKey+0x190>)
 80033a4:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ESC] == 255) key_pressed |= BTN_ESC_LONG_PRESS;  //
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <fnGetPressKey+0x180>)
 80033a8:	78db      	ldrb	r3, [r3, #3]
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	d107      	bne.n	80033be <fnGetPressKey+0x166>
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <fnGetPressKey+0x190>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <fnGetPressKey+0x190>)
 80033ba:	801a      	strh	r2, [r3, #0]
 80033bc:	e006      	b.n	80033cc <fnGetPressKey+0x174>
 		else key_pressed &= ~BTN_ESC_LONG_PRESS;
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <fnGetPressKey+0x190>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <fnGetPressKey+0x190>)
 80033ca:	801a      	strh	r2, [r3, #0]

 	return key_pressed;
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <fnGetPressKey+0x190>)
 80033ce:	881b      	ldrh	r3, [r3, #0]
 }
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200009cc 	.word	0x200009cc
 80033d8:	20000084 	.word	0x20000084
 80033dc:	200009b0 	.word	0x200009b0
 80033e0:	20000994 	.word	0x20000994
 80033e4:	20000978 	.word	0x20000978
 80033e8:	20000492 	.word	0x20000492

080033ec <Button_Get_Tick>:

//*********************************************************************************

//
uint32_t Button_Get_Tick(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80033f0:	f003 f89c 	bl	800652c <HAL_GetTick>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <Button_A_Read>:
//**********************************************************************************

//
uint8_t Button_A_Read(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) ? 0 : 1;
 8003400:	2120      	movs	r1, #32
 8003402:	4805      	ldr	r0, [pc, #20]	; (8003418 <Button_A_Read+0x1c>)
 8003404:	f003 fc02 	bl	8006c0c <HAL_GPIO_ReadPin>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40010c00 	.word	0x40010c00

0800341c <Button_B_Read>:
//**********************************************************************************

//
uint8_t Button_B_Read(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin) ? 0 : 1;
 8003420:	2140      	movs	r1, #64	; 0x40
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <Button_B_Read+0x1c>)
 8003424:	f003 fbf2 	bl	8006c0c <HAL_GPIO_ReadPin>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40010c00 	.word	0x40010c00

0800343c <Button_C_Read>:
//*********************************************************************************

//
uint8_t Button_C_Read(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_ENTER_GPIO_Port, BUTTON_ENTER_Pin) ? 0 : 1;
 8003440:	2108      	movs	r1, #8
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <Button_C_Read+0x1c>)
 8003444:	f003 fbe2 	bl	8006c0c <HAL_GPIO_ReadPin>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40010c00 	.word	0x40010c00

0800345c <Button_D_Read>:
//****************************************************************************************

//
uint8_t Button_D_Read(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_ESC_GPIO_Port, BUTTON_ESC_Pin) ? 0 : 1;
 8003460:	2110      	movs	r1, #16
 8003462:	4805      	ldr	r0, [pc, #20]	; (8003478 <Button_D_Read+0x1c>)
 8003464:	f003 fbd2 	bl	8006c0c <HAL_GPIO_ReadPin>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40010c00 	.word	0x40010c00

0800347c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003480:	b672      	cpsid	i
}
 8003482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003484:	e7fe      	b.n	8003484 <Error_Handler+0x8>

08003486 <mini_strlen>:

#include "mini-printf.h"

static int
mini_strlen(const char *s)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
	int len = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
	while (s[len] != '\0') len++;
 8003492:	e002      	b.n	800349a <mini_strlen+0x14>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f6      	bne.n	8003494 <mini_strlen+0xe>
	return len;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <mini_itoa>:

static int
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
	 char *buffer)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b08b      	sub	sp, #44	; 0x2c
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
	char	*pbuffer = buffer;
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
	int	negative = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	623b      	str	r3, [r7, #32]
	int	i, len;

	/* No support for unusual radixes. */
	if (radix > 16)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d901      	bls.n	80034d2 <mini_itoa+0x20>
		return 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e069      	b.n	80035a6 <mini_itoa+0xf4>

	if (value < 0 && !unsig) {
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da07      	bge.n	80034e8 <mini_itoa+0x36>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <mini_itoa+0x36>
		negative = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	623b      	str	r3, [r7, #32]
		value = -value;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	425b      	negs	r3, r3
 80034e6:	60fb      	str	r3, [r7, #12]
	}

	/* This builds the string back to front ... */
	do {
		int digit = value % radix;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	fb01 f202 	mul.w	r2, r1, r2
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	dc04      	bgt.n	800350a <mini_itoa+0x58>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3330      	adds	r3, #48	; 0x30
 8003506:	b2da      	uxtb	r2, r3
 8003508:	e00b      	b.n	8003522 <mini_itoa+0x70>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <mini_itoa+0x62>
 8003510:	2241      	movs	r2, #65	; 0x41
 8003512:	e000      	b.n	8003516 <mini_itoa+0x64>
 8003514:	2261      	movs	r2, #97	; 0x61
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4413      	add	r3, r2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	3b0a      	subs	r3, #10
 8003520:	b2da      	uxtb	r2, r3
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1c59      	adds	r1, r3, #1
 8003526:	6279      	str	r1, [r7, #36]	; 0x24
 8003528:	701a      	strb	r2, [r3, #0]
		value /= radix;
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	60fb      	str	r3, [r7, #12]
	} while (value > 0);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dcd6      	bgt.n	80034e8 <mini_itoa+0x36>

	if (negative)
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <mini_itoa+0x98>
		*(pbuffer++) = '-';
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	627a      	str	r2, [r7, #36]	; 0x24
 8003546:	222d      	movs	r2, #45	; 0x2d
 8003548:	701a      	strb	r2, [r3, #0]

	*(pbuffer) = '\0';
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]

	/* ... now we reverse it (could do it recursively but will
	 * conserve the stack space) */
	len = (pbuffer - buffer);
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len / 2; i++) {
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e01a      	b.n	8003594 <mini_itoa+0xe2>
		char j = buffer[i];
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003562:	4413      	add	r3, r2
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	74fb      	strb	r3, [r7, #19]
		buffer[i] = buffer[len-i-1];
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003572:	441a      	add	r2, r3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003578:	440b      	add	r3, r1
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	701a      	strb	r2, [r3, #0]
		buffer[len-i-1] = j;
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003588:	4413      	add	r3, r2
 800358a:	7cfa      	ldrb	r2, [r7, #19]
 800358c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len / 2; i++) {
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3301      	adds	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	0fda      	lsrs	r2, r3, #31
 8003598:	4413      	add	r3, r2
 800359a:	105b      	asrs	r3, r3, #1
 800359c:	461a      	mov	r2, r3
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4293      	cmp	r3, r2
 80035a2:	dbdc      	blt.n	800355e <mini_itoa+0xac>
	}

	return len;
 80035a4:	697b      	ldr	r3, [r7, #20]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	372c      	adds	r7, #44	; 0x2c
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <mini_pad>:

static int
mini_pad(char* ptr, int len, char pad_char, int pad_to, char *buffer)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	71fb      	strb	r3, [r7, #7]
	int i;
	int overflow = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
	char * pbuffer = buffer;
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	617b      	str	r3, [r7, #20]
	if(pad_to == 0) pad_to = len;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <mini_pad+0x22>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	603b      	str	r3, [r7, #0]
	if(len > pad_to) {
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	dd03      	ble.n	80035e2 <mini_pad+0x32>
		len = pad_to;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	60bb      	str	r3, [r7, #8]
		overflow = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
	}
	for(i = pad_to - len; i > 0; i --) {
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	e007      	b.n	80035fc <mini_pad+0x4c>
		*(pbuffer++) = pad_char;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	617a      	str	r2, [r7, #20]
 80035f2:	79fa      	ldrb	r2, [r7, #7]
 80035f4:	701a      	strb	r2, [r3, #0]
	for(i = pad_to - len; i > 0; i --) {
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	dcf4      	bgt.n	80035ec <mini_pad+0x3c>
	}
	for(i = len; i > 0; i --) {
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e00a      	b.n	800361e <mini_pad+0x6e>
		*(pbuffer++) = *(ptr++);
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	1c53      	adds	r3, r2, #1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	1c59      	adds	r1, r3, #1
 8003612:	6179      	str	r1, [r7, #20]
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	701a      	strb	r2, [r3, #0]
	for(i = len; i > 0; i --) {
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3b01      	subs	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	dcf1      	bgt.n	8003608 <mini_pad+0x58>
	}
	len = pbuffer - buffer;
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	60bb      	str	r3, [r7, #8]
	if(overflow) {
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d012      	beq.n	8003658 <mini_pad+0xa8>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	e008      	b.n	800364a <mini_pad+0x9a>
			*(pbuffer-- - 1) = '*';
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1e5a      	subs	r2, r3, #1
 800363c:	617a      	str	r2, [r7, #20]
 800363e:	3b01      	subs	r3, #1
 8003640:	222a      	movs	r2, #42	; 0x2a
 8003642:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2b02      	cmp	r3, #2
 800364e:	dc03      	bgt.n	8003658 <mini_pad+0xa8>
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	429a      	cmp	r2, r3
 8003656:	d8ef      	bhi.n	8003638 <mini_pad+0x88>
		}
	}
	return len;
 8003658:	68bb      	ldr	r3, [r7, #8]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	; 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <_puts>:
	unsigned int buffer_len;
};

static int
_puts(char *s, int len, void *buf)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
	if(!buf) return len;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <_puts+0x16>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	e02c      	b.n	80036d4 <_puts+0x70>
	struct mini_buff *b = buf;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	61bb      	str	r3, [r7, #24]
	char * p0 = b->buffer;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	617b      	str	r3, [r7, #20]
	int i;
	/* Copy to buffer */
	for (i = 0; i < len; i++) {
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e016      	b.n	80036b8 <_puts+0x54>
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	6819      	ldr	r1, [r3, #0]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	3b01      	subs	r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	429a      	cmp	r2, r3
 800369c:	d011      	beq.n	80036c2 <_puts+0x5e>
			break;
		}
		*(b->pbuffer ++) = s[i];
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	441a      	add	r2, r3
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	1c58      	adds	r0, r3, #1
 80036aa:	69b9      	ldr	r1, [r7, #24]
 80036ac:	6048      	str	r0, [r1, #4]
 80036ae:	7812      	ldrb	r2, [r2, #0]
 80036b0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	dbe4      	blt.n	800368a <_puts+0x26>
 80036c0:	e000      	b.n	80036c4 <_puts+0x60>
			break;
 80036c2:	bf00      	nop
	}
	*(b->pbuffer) = 0;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
	return b->pbuffer - p0;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3724      	adds	r7, #36	; 0x24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
	...

080036e0 <mini_vsnprintf>:
}
#endif

int
mini_vsnprintf(char *buffer, unsigned int buffer_len, const char *fmt, va_list va)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
	struct mini_buff b;
	b.buffer = buffer;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	613b      	str	r3, [r7, #16]
	b.pbuffer = buffer;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	617b      	str	r3, [r7, #20]
	b.buffer_len = buffer_len;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	61bb      	str	r3, [r7, #24]
	if(buffer_len == 0) buffer = (void*) 0;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <mini_vsnprintf+0x24>
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <mini_vsnprintf+0x30>
 800370a:	f107 0110 	add.w	r1, r7, #16
 800370e:	e000      	b.n	8003712 <mini_vsnprintf+0x32>
 8003710:	2100      	movs	r1, #0
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4808      	ldr	r0, [pc, #32]	; (8003738 <mini_vsnprintf+0x58>)
 8003718:	f000 f810 	bl	800373c <mini_vpprintf>
 800371c:	61f8      	str	r0, [r7, #28]
	if(buffer == (void*) 0) {
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <mini_vsnprintf+0x48>
		return n;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	e002      	b.n	800372e <mini_vsnprintf+0x4e>
	}
	return b.pbuffer - b.buffer;
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	08003665 	.word	0x08003665

0800373c <mini_vpprintf>:

int
mini_vpprintf(int (*puts)(char* s, int len, void* buf), void* buf, const char *fmt, va_list va)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b09a      	sub	sp, #104	; 0x68
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
	char bf2[24];
	char ch;
#ifdef MINI_PRINTF_ENABLE_OBJECTS
	void* obj;
#endif
	if(puts == (void*)0) {
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d103      	bne.n	8003758 <mini_vpprintf+0x1c>
		/* run puts in counting mode. */
		puts = _puts; buf = (void*)0;
 8003750:	4bb5      	ldr	r3, [pc, #724]	; (8003a28 <mini_vpprintf+0x2ec>)
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	2300      	movs	r3, #0
 8003756:	60bb      	str	r3, [r7, #8]
	}
	int n = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	65fb      	str	r3, [r7, #92]	; 0x5c
	while ((ch=*(fmt++))) {
 800375c:	e17b      	b.n	8003a56 <mini_vpprintf+0x31a>
		int len;
		if (ch!='%') {
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2b25      	cmp	r3, #37	; 0x25
 8003762:	d009      	beq.n	8003778 <mini_vpprintf+0x3c>
			len = 1;
 8003764:	2301      	movs	r3, #1
 8003766:	65bb      	str	r3, [r7, #88]	; 0x58
			len = puts(&ch, len, buf);
 8003768:	f107 0017 	add.w	r0, r7, #23
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003772:	4798      	blx	r3
 8003774:	65b8      	str	r0, [r7, #88]	; 0x58
 8003776:	e16a      	b.n	8003a4e <mini_vpprintf+0x312>
		} else {
			char pad_char = ' ';
 8003778:	2320      	movs	r3, #32
 800377a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			int pad_to = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	653b      	str	r3, [r7, #80]	; 0x50
			char l = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			char *ptr;

			ch=*(fmt++);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	75fb      	strb	r3, [r7, #23]

			/* Zero padding requested */
			if (ch == '0') pad_char = '0';
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d112      	bne.n	80037be <mini_vpprintf+0x82>
 8003798:	2330      	movs	r3, #48	; 0x30
 800379a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			while (ch >= '0' && ch <= '9') {
 800379e:	e00e      	b.n	80037be <mini_vpprintf+0x82>
				pad_to = pad_to * 10 + (ch - '0');
 80037a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	461a      	mov	r2, r3
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	3b30      	subs	r3, #48	; 0x30
 80037b0:	4413      	add	r3, r2
 80037b2:	653b      	str	r3, [r7, #80]	; 0x50
				ch=*(fmt++);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	75fb      	strb	r3, [r7, #23]
			while (ch >= '0' && ch <= '9') {
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	2b2f      	cmp	r3, #47	; 0x2f
 80037c2:	d902      	bls.n	80037ca <mini_vpprintf+0x8e>
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	2b39      	cmp	r3, #57	; 0x39
 80037c8:	d9ea      	bls.n	80037a0 <mini_vpprintf+0x64>
			}
			if(pad_to > (signed int) sizeof(bf)) {
 80037ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037cc:	2b18      	cmp	r3, #24
 80037ce:	dd01      	ble.n	80037d4 <mini_vpprintf+0x98>
				pad_to = sizeof(bf);
 80037d0:	2318      	movs	r3, #24
 80037d2:	653b      	str	r3, [r7, #80]	; 0x50
			}
			if (ch == 'l') {
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b6c      	cmp	r3, #108	; 0x6c
 80037d8:	d107      	bne.n	80037ea <mini_vpprintf+0xae>
				l = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				ch=*(fmt++);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	75fb      	strb	r3, [r7, #23]
			}

			switch (ch) {
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 813c 	beq.w	8003a6a <mini_vpprintf+0x32e>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f2c0 8121 	blt.w	8003a3a <mini_vpprintf+0x2fe>
 80037f8:	2b78      	cmp	r3, #120	; 0x78
 80037fa:	f300 811e 	bgt.w	8003a3a <mini_vpprintf+0x2fe>
 80037fe:	2b58      	cmp	r3, #88	; 0x58
 8003800:	f2c0 811b 	blt.w	8003a3a <mini_vpprintf+0x2fe>
 8003804:	3b58      	subs	r3, #88	; 0x58
 8003806:	2b20      	cmp	r3, #32
 8003808:	f200 8117 	bhi.w	8003a3a <mini_vpprintf+0x2fe>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <mini_vpprintf+0xd8>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003933 	.word	0x08003933
 8003818:	08003a3b 	.word	0x08003a3b
 800381c:	08003a3b 	.word	0x08003a3b
 8003820:	08003a3b 	.word	0x08003a3b
 8003824:	08003a3b 	.word	0x08003a3b
 8003828:	08003a3b 	.word	0x08003a3b
 800382c:	08003a3b 	.word	0x08003a3b
 8003830:	08003a3b 	.word	0x08003a3b
 8003834:	08003a3b 	.word	0x08003a3b
 8003838:	08003a3b 	.word	0x08003a3b
 800383c:	08003a3b 	.word	0x08003a3b
 8003840:	080039b5 	.word	0x080039b5
 8003844:	08003899 	.word	0x08003899
 8003848:	08003a3b 	.word	0x08003a3b
 800384c:	08003a3b 	.word	0x08003a3b
 8003850:	08003a3b 	.word	0x08003a3b
 8003854:	08003a3b 	.word	0x08003a3b
 8003858:	08003a3b 	.word	0x08003a3b
 800385c:	08003a3b 	.word	0x08003a3b
 8003860:	08003a3b 	.word	0x08003a3b
 8003864:	08003a3b 	.word	0x08003a3b
 8003868:	08003a3b 	.word	0x08003a3b
 800386c:	08003a3b 	.word	0x08003a3b
 8003870:	08003a3b 	.word	0x08003a3b
 8003874:	08003a3b 	.word	0x08003a3b
 8003878:	08003a3b 	.word	0x08003a3b
 800387c:	08003a3b 	.word	0x08003a3b
 8003880:	080039e9 	.word	0x080039e9
 8003884:	08003a3b 	.word	0x08003a3b
 8003888:	08003899 	.word	0x08003899
 800388c:	08003a3b 	.word	0x08003a3b
 8003890:	08003a3b 	.word	0x08003a3b
 8003894:	08003933 	.word	0x08003933
				case 0:
					goto end;
				case 'u':
				case 'd':
					if(l) {
 8003898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <mini_vpprintf+0x190>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	1d1a      	adds	r2, r3, #4
 80038a4:	603a      	str	r2, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b75      	cmp	r3, #117	; 0x75
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	f107 0318 	add.w	r3, r7, #24
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	2200      	movs	r2, #0
 80038c2:	210a      	movs	r1, #10
 80038c4:	f7ff fdf5 	bl	80034b2 <mini_itoa>
 80038c8:	65b8      	str	r0, [r7, #88]	; 0x58
 80038ca:	e01e      	b.n	800390a <mini_vpprintf+0x1ce>
					} else {
						if(ch == 'u') {
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b75      	cmp	r3, #117	; 0x75
 80038d0:	d10e      	bne.n	80038f0 <mini_vpprintf+0x1b4>
							len = mini_itoa((unsigned long) va_arg(va, unsigned int), 10, 0, 1, bf2);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	1d1a      	adds	r2, r3, #4
 80038d6:	603a      	str	r2, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f107 0318 	add.w	r3, r7, #24
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2301      	movs	r3, #1
 80038e4:	2200      	movs	r2, #0
 80038e6:	210a      	movs	r1, #10
 80038e8:	f7ff fde3 	bl	80034b2 <mini_itoa>
 80038ec:	65b8      	str	r0, [r7, #88]	; 0x58
 80038ee:	e00c      	b.n	800390a <mini_vpprintf+0x1ce>
						} else {
							len = mini_itoa((long) va_arg(va, int), 10, 0, 0, bf2);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	1d1a      	adds	r2, r3, #4
 80038f4:	603a      	str	r2, [r7, #0]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	f107 0318 	add.w	r3, r7, #24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	2200      	movs	r2, #0
 8003902:	210a      	movs	r1, #10
 8003904:	f7ff fdd5 	bl	80034b2 <mini_itoa>
 8003908:	65b8      	str	r0, [r7, #88]	; 0x58
						}
					}
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 800390a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800390e:	f107 0018 	add.w	r0, r7, #24
 8003912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800391c:	f7ff fe48 	bl	80035b0 <mini_pad>
 8003920:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 8003922:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800392c:	4798      	blx	r3
 800392e:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8003930:	e08d      	b.n	8003a4e <mini_vpprintf+0x312>

				case 'x':
				case 'X':
					if(l) {
 8003932:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003936:	2b00      	cmp	r3, #0
 8003938:	d014      	beq.n	8003964 <mini_vpprintf+0x228>
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	1d1a      	adds	r2, r3, #4
 800393e:	603a      	str	r2, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	2b58      	cmp	r3, #88	; 0x58
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	f107 0318 	add.w	r3, r7, #24
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2301      	movs	r3, #1
 800395a:	2110      	movs	r1, #16
 800395c:	f7ff fda9 	bl	80034b2 <mini_itoa>
 8003960:	65b8      	str	r0, [r7, #88]	; 0x58
 8003962:	e013      	b.n	800398c <mini_vpprintf+0x250>
					} else {
						len = mini_itoa((unsigned long) va_arg(va, unsigned int), 16, (ch=='X'), 1, bf2);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	603a      	str	r2, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b58      	cmp	r3, #88	; 0x58
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2301      	movs	r3, #1
 8003984:	2110      	movs	r1, #16
 8003986:	f7ff fd94 	bl	80034b2 <mini_itoa>
 800398a:	65b8      	str	r0, [r7, #88]	; 0x58
					}
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 800398c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003990:	f107 0018 	add.w	r0, r7, #24
 8003994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800399e:	f7ff fe07 	bl	80035b0 <mini_pad>
 80039a2:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 80039a4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039ae:	4798      	blx	r3
 80039b0:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 80039b2:	e04c      	b.n	8003a4e <mini_vpprintf+0x312>

				case 'c' :
					ch = (char)(va_arg(va, int));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	1d1a      	adds	r2, r3, #4
 80039b8:	603a      	str	r2, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	75fb      	strb	r3, [r7, #23]
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 80039c0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80039c4:	f107 0017 	add.w	r0, r7, #23
 80039c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d0:	2101      	movs	r1, #1
 80039d2:	f7ff fded 	bl	80035b0 <mini_pad>
 80039d6:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 80039d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039e2:	4798      	blx	r3
 80039e4:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 80039e6:	e032      	b.n	8003a4e <mini_vpprintf+0x312>

				case 's' :
					ptr = va_arg(va, char*);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	1d1a      	adds	r2, r3, #4
 80039ec:	603a      	str	r2, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
					len = mini_strlen(ptr);
 80039f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80039f4:	f7ff fd47 	bl	8003486 <mini_strlen>
 80039f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (pad_to > 0) {
 80039fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	dd15      	ble.n	8003a2c <mini_vpprintf+0x2f0>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
 8003a00:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a0e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003a10:	f7ff fdce 	bl	80035b0 <mini_pad>
 8003a14:	65b8      	str	r0, [r7, #88]	; 0x58
						len = puts(bf, len, buf);
 8003a16:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a20:	4798      	blx	r3
 8003a22:	65b8      	str	r0, [r7, #88]	; 0x58
					} else {
						len = puts(ptr, len, buf);
					}
					break;
 8003a24:	e013      	b.n	8003a4e <mini_vpprintf+0x312>
 8003a26:	bf00      	nop
 8003a28:	08003665 	.word	0x08003665
						len = puts(ptr, len, buf);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a32:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003a34:	4798      	blx	r3
 8003a36:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8003a38:	e009      	b.n	8003a4e <mini_vpprintf+0x312>
					}
					mini_handler_freeor(mini_handler_data, ptr);
					break;
#endif
				default:
					len = 1;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	65bb      	str	r3, [r7, #88]	; 0x58
					len = puts(&ch, len, buf);
 8003a3e:	f107 0017 	add.w	r0, r7, #23
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a48:	4798      	blx	r3
 8003a4a:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8003a4c:	bf00      	nop
			}
		}
		n = n + len;
 8003a4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a52:	4413      	add	r3, r2
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
	while ((ch=*(fmt++))) {
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	75fb      	strb	r3, [r7, #23]
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f ae7b 	bne.w	800375e <mini_vpprintf+0x22>
	}
end:
 8003a68:	e000      	b.n	8003a6c <mini_vpprintf+0x330>
					goto end;
 8003a6a:	bf00      	nop
	return n;
 8003a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3760      	adds	r7, #96	; 0x60
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop

08003a78 <mini_snprintf>:


int
mini_snprintf(char* buffer, unsigned int buffer_len, const char *fmt, ...)
{
 8003a78:	b40c      	push	{r2, r3}
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
	int ret;
	va_list va;
	va_start(va, fmt);
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	60bb      	str	r3, [r7, #8]
	ret = mini_vsnprintf(buffer, buffer_len, fmt, va);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	6839      	ldr	r1, [r7, #0]
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fe25 	bl	80036e0 <mini_vsnprintf>
 8003a96:	60f8      	str	r0, [r7, #12]
	va_end(va);

	return ret;
 8003a98:	68fb      	ldr	r3, [r7, #12]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003aa4:	b002      	add	sp, #8
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_MspInit+0x5c>)
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <HAL_MspInit+0x5c>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6193      	str	r3, [r2, #24]
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_MspInit+0x5c>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <HAL_MspInit+0x5c>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <HAL_MspInit+0x5c>)
 8003acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	61d3      	str	r3, [r2, #28]
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <HAL_MspInit+0x5c>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_MspInit+0x60>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <HAL_MspInit+0x60>)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40010000 	.word	0x40010000

08003b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b14:	f107 0310 	add.w	r3, r7, #16
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <HAL_SPI_MspInit+0x88>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d12f      	bne.n	8003b8c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_SPI_MspInit+0x8c>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <HAL_SPI_MspInit+0x8c>)
 8003b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b36:	6193      	str	r3, [r2, #24]
 8003b38:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <HAL_SPI_MspInit+0x8c>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_SPI_MspInit+0x8c>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_SPI_MspInit+0x8c>)
 8003b4a:	f043 0304 	orr.w	r3, r3, #4
 8003b4e:	6193      	str	r3, [r2, #24]
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_SPI_MspInit+0x8c>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003b5c:	23a0      	movs	r3, #160	; 0xa0
 8003b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b64:	2303      	movs	r3, #3
 8003b66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b68:	f107 0310 	add.w	r3, r7, #16
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	480b      	ldr	r0, [pc, #44]	; (8003b9c <HAL_SPI_MspInit+0x90>)
 8003b70:	f002 fec8 	bl	8006904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b74:	2340      	movs	r3, #64	; 0x40
 8003b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b80:	f107 0310 	add.w	r3, r7, #16
 8003b84:	4619      	mov	r1, r3
 8003b86:	4805      	ldr	r0, [pc, #20]	; (8003b9c <HAL_SPI_MspInit+0x90>)
 8003b88:	f002 febc 	bl	8006904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b8c:	bf00      	nop
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40013000 	.word	0x40013000
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	40010800 	.word	0x40010800

08003ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	f107 0318 	add.w	r3, r7, #24
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a36      	ldr	r2, [pc, #216]	; (8003c94 <HAL_UART_MspInit+0xf4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d132      	bne.n	8003c26 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bc0:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	4a34      	ldr	r2, [pc, #208]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bca:	6193      	str	r3, [r2, #24]
 8003bcc:	4b32      	ldr	r3, [pc, #200]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd8:	4b2f      	ldr	r3, [pc, #188]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	4a2e      	ldr	r2, [pc, #184]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003bde:	f043 0304 	orr.w	r3, r3, #4
 8003be2:	6193      	str	r3, [r2, #24]
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bfe:	f107 0318 	add.w	r3, r7, #24
 8003c02:	4619      	mov	r1, r3
 8003c04:	4825      	ldr	r0, [pc, #148]	; (8003c9c <HAL_UART_MspInit+0xfc>)
 8003c06:	f002 fe7d 	bl	8006904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	f107 0318 	add.w	r3, r7, #24
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	481f      	ldr	r0, [pc, #124]	; (8003c9c <HAL_UART_MspInit+0xfc>)
 8003c20:	f002 fe70 	bl	8006904 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c24:	e031      	b.n	8003c8a <HAL_UART_MspInit+0xea>
  else if(huart->Instance==USART3)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <HAL_UART_MspInit+0x100>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d12c      	bne.n	8003c8a <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3a:	61d3      	str	r3, [r2, #28]
 8003c3c:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003c4e:	f043 0308 	orr.w	r3, r3, #8
 8003c52:	6193      	str	r3, [r2, #24]
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_UART_MspInit+0xf8>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c66:	2312      	movs	r3, #18
 8003c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6e:	f107 0318 	add.w	r3, r7, #24
 8003c72:	4619      	mov	r1, r3
 8003c74:	480b      	ldr	r0, [pc, #44]	; (8003ca4 <HAL_UART_MspInit+0x104>)
 8003c76:	f002 fe45 	bl	8006904 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2027      	movs	r0, #39	; 0x27
 8003c80:	f002 fd59 	bl	8006736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c84:	2027      	movs	r0, #39	; 0x27
 8003c86:	f002 fd72 	bl	800676e <HAL_NVIC_EnableIRQ>
}
 8003c8a:	bf00      	nop
 8003c8c:	3728      	adds	r7, #40	; 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40013800 	.word	0x40013800
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40010800 	.word	0x40010800
 8003ca0:	40004800 	.word	0x40004800
 8003ca4:	40010c00 	.word	0x40010c00

08003ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cac:	e7fe      	b.n	8003cac <NMI_Handler+0x4>

08003cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cb2:	e7fe      	b.n	8003cb2 <HardFault_Handler+0x4>

08003cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <MemManage_Handler+0x4>

08003cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cbe:	e7fe      	b.n	8003cbe <BusFault_Handler+0x4>

08003cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cc4:	e7fe      	b.n	8003cc4 <UsageFault_Handler+0x4>

08003cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cee:	f002 fc0b 	bl	8006508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Button_Loop();
 8003cf2:	f7fd fd3f 	bl	8001774 <Button_Loop>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	owReadHandler();
 8003d00:	f7fd f8b0 	bl	8000e64 <owReadHandler>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <USART3_IRQHandler+0x14>)
 8003d06:	f004 f9d9 	bl	80080bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000adc 	.word	0x20000adc

08003d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	817b      	strh	r3, [r7, #10]
 8003d32:	460b      	mov	r3, r1
 8003d34:	813b      	strh	r3, [r7, #8]
 8003d36:	4613      	mov	r3, r2
 8003d38:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003d40:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8003d42:	7dbb      	ldrb	r3, [r7, #22]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8003d50:	897a      	ldrh	r2, [r7, #10]
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	4413      	add	r3, r2
 8003d56:	b298      	uxth	r0, r3
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	893a      	ldrh	r2, [r7, #8]
 8003d60:	8979      	ldrh	r1, [r7, #10]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4603      	mov	r3, r0
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f001 f93d 	bl	8004fe6 <u8g2_IsIntersection>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d040      	beq.n	8003df4 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8003d76:	e035      	b.n	8003de4 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	781a      	ldrb	r2, [r3, #0]
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00c      	beq.n	8003da0 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	7dba      	ldrb	r2, [r7, #22]
 8003d8a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8003d8e:	893a      	ldrh	r2, [r7, #8]
 8003d90:	8979      	ldrh	r1, [r7, #10]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2301      	movs	r3, #1
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f001 f837 	bl	8004e0c <u8g2_DrawHVLine>
 8003d9e:	e010      	b.n	8003dc2 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	7d7a      	ldrb	r2, [r7, #21]
 8003dae:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8003db2:	893a      	ldrh	r2, [r7, #8]
 8003db4:	8979      	ldrh	r1, [r7, #10]
 8003db6:	2300      	movs	r3, #0
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f001 f825 	bl	8004e0c <u8g2_DrawHVLine>
    }
    x++;
 8003dc2:	897b      	ldrh	r3, [r7, #10]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
      b++;
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	623b      	str	r3, [r7, #32]
    }
    len--;
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1c6      	bne.n	8003d78 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	7dba      	ldrb	r2, [r7, #22]
 8003dee:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8003df2:	e000      	b.n	8003df6 <u8g2_DrawHXBM+0xd6>
    return;
 8003df4:	bf00      	nop
}
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	817b      	strh	r3, [r7, #10]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	813b      	strh	r3, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	3307      	adds	r3, #7
 8003e1e:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8003e20:	8afb      	ldrh	r3, [r7, #22]
 8003e22:	08db      	lsrs	r3, r3, #3
 8003e24:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003e26:	897a      	ldrh	r2, [r7, #10]
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	b298      	uxth	r0, r3
 8003e2e:	893a      	ldrh	r2, [r7, #8]
 8003e30:	8c3b      	ldrh	r3, [r7, #32]
 8003e32:	4413      	add	r3, r2
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	893a      	ldrh	r2, [r7, #8]
 8003e38:	8979      	ldrh	r1, [r7, #10]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f001 f8d1 	bl	8004fe6 <u8g2_IsIntersection>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d017      	beq.n	8003e7a <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8003e4a:	e012      	b.n	8003e72 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8003e4c:	88f8      	ldrh	r0, [r7, #6]
 8003e4e:	893a      	ldrh	r2, [r7, #8]
 8003e50:	8979      	ldrh	r1, [r7, #10]
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	4603      	mov	r3, r0
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ff61 	bl	8003d20 <u8g2_DrawHXBM>
    bitmap += blen;
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	4413      	add	r3, r2
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8003e66:	893b      	ldrh	r3, [r7, #8]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	813b      	strh	r3, [r7, #8]
    h--;
 8003e6c:	8c3b      	ldrh	r3, [r7, #32]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8003e72:	8c3b      	ldrh	r3, [r7, #32]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e9      	bne.n	8003e4c <u8g2_DrawXBM+0x50>
 8003e78:	e000      	b.n	8003e7c <u8g2_DrawXBM+0x80>
    return;
 8003e7a:	bf00      	nop
  }
}
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af02      	add	r7, sp, #8
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	4608      	mov	r0, r1
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4603      	mov	r3, r0
 8003e92:	817b      	strh	r3, [r7, #10]
 8003e94:	460b      	mov	r3, r1
 8003e96:	813b      	strh	r3, [r7, #8]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003e9c:	897a      	ldrh	r2, [r7, #10]
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	b298      	uxth	r0, r3
 8003ea4:	893a      	ldrh	r2, [r7, #8]
 8003ea6:	8b3b      	ldrh	r3, [r7, #24]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	893a      	ldrh	r2, [r7, #8]
 8003eae:	8979      	ldrh	r1, [r7, #10]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f001 f896 	bl	8004fe6 <u8g2_IsIntersection>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8003ec0:	e00d      	b.n	8003ede <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	893a      	ldrh	r2, [r7, #8]
 8003ec6:	8979      	ldrh	r1, [r7, #10]
 8003ec8:	2000      	movs	r0, #0
 8003eca:	9000      	str	r0, [sp, #0]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 ff9d 	bl	8004e0c <u8g2_DrawHVLine>
    y++;    
 8003ed2:	893b      	ldrh	r3, [r7, #8]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	813b      	strh	r3, [r7, #8]
    h--;
 8003ed8:	8b3b      	ldrh	r3, [r7, #24]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8003ede:	8b3b      	ldrh	r3, [r7, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ee      	bne.n	8003ec2 <u8g2_DrawBox+0x40>
 8003ee4:	e000      	b.n	8003ee8 <u8g2_DrawBox+0x66>
    return;
 8003ee6:	bf00      	nop
  }
}
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b088      	sub	sp, #32
 8003ef2:	af02      	add	r7, sp, #8
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	4608      	mov	r0, r1
 8003ef8:	4611      	mov	r1, r2
 8003efa:	461a      	mov	r2, r3
 8003efc:	4603      	mov	r3, r0
 8003efe:	817b      	strh	r3, [r7, #10]
 8003f00:	460b      	mov	r3, r1
 8003f02:	813b      	strh	r3, [r7, #8]
 8003f04:	4613      	mov	r3, r2
 8003f06:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003f0c:	897a      	ldrh	r2, [r7, #10]
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	4413      	add	r3, r2
 8003f12:	b298      	uxth	r0, r3
 8003f14:	893a      	ldrh	r2, [r7, #8]
 8003f16:	8c3b      	ldrh	r3, [r7, #32]
 8003f18:	4413      	add	r3, r2
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	893a      	ldrh	r2, [r7, #8]
 8003f1e:	8979      	ldrh	r1, [r7, #10]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	4603      	mov	r3, r0
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f001 f85e 	bl	8004fe6 <u8g2_IsIntersection>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d037      	beq.n	8003fa0 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	893a      	ldrh	r2, [r7, #8]
 8003f34:	8979      	ldrh	r1, [r7, #10]
 8003f36:	2000      	movs	r0, #0
 8003f38:	9000      	str	r0, [sp, #0]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 ff66 	bl	8004e0c <u8g2_DrawHVLine>
  if (h >= 2) {
 8003f40:	8c3b      	ldrh	r3, [r7, #32]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d92d      	bls.n	8003fa2 <u8g2_DrawFrame+0xb4>
    h-=2;
 8003f46:	8c3b      	ldrh	r3, [r7, #32]
 8003f48:	3b02      	subs	r3, #2
 8003f4a:	843b      	strh	r3, [r7, #32]
    y++;
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8003f52:	8c3b      	ldrh	r3, [r7, #32]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01a      	beq.n	8003f8e <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8003f58:	8c3b      	ldrh	r3, [r7, #32]
 8003f5a:	893a      	ldrh	r2, [r7, #8]
 8003f5c:	8979      	ldrh	r1, [r7, #10]
 8003f5e:	2001      	movs	r0, #1
 8003f60:	9000      	str	r0, [sp, #0]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 ff52 	bl	8004e0c <u8g2_DrawHVLine>
      x+=w;
 8003f68:	897a      	ldrh	r2, [r7, #10]
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	817b      	strh	r3, [r7, #10]
      x--;
 8003f70:	897b      	ldrh	r3, [r7, #10]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8003f76:	8c3b      	ldrh	r3, [r7, #32]
 8003f78:	893a      	ldrh	r2, [r7, #8]
 8003f7a:	8979      	ldrh	r1, [r7, #10]
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	9000      	str	r0, [sp, #0]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 ff43 	bl	8004e0c <u8g2_DrawHVLine>
      y+=h;
 8003f86:	893a      	ldrh	r2, [r7, #8]
 8003f88:	8c3b      	ldrh	r3, [r7, #32]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	893a      	ldrh	r2, [r7, #8]
 8003f92:	8af9      	ldrh	r1, [r7, #22]
 8003f94:	2000      	movs	r0, #0
 8003f96:	9000      	str	r0, [sp, #0]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 ff37 	bl	8004e0c <u8g2_DrawHVLine>
 8003f9e:	e000      	b.n	8003fa2 <u8g2_DrawFrame+0xb4>
    return;
 8003fa0:	bf00      	nop
  }
}
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	7c1b      	ldrb	r3, [r3, #16]
 8003fb6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 fc42 	bl	8008860 <memset>
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	7c1b      	ldrb	r3, [r3, #16]
 8003ffa:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	b29b      	uxth	r3, r3
 800400a:	89ba      	ldrh	r2, [r7, #12]
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8004012:	89bb      	ldrh	r3, [r7, #12]
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8004018:	89bb      	ldrh	r3, [r7, #12]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4413      	add	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8004020:	7bf9      	ldrb	r1, [r7, #15]
 8004022:	78ba      	ldrb	r2, [r7, #2]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	460b      	mov	r3, r1
 800402a:	2100      	movs	r1, #0
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f001 fcb7 	bl	80059a0 <u8x8_DrawTile>
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800404c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004054:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	7c5b      	ldrb	r3, [r3, #17]
 800405c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800405e:	7bba      	ldrb	r2, [r7, #14]
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ffbd 	bl	8003fe4 <u8g2_send_tile_row>
    src_row++;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	3301      	adds	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004070:	7bbb      	ldrb	r3, [r7, #14]
 8004072:	3301      	adds	r3, #1
 8004074:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	7b7b      	ldrb	r3, [r7, #13]
 800407a:	429a      	cmp	r2, r3
 800407c:	d203      	bcs.n	8004086 <u8g2_send_buffer+0x4c>
 800407e:	7bba      	ldrb	r2, [r7, #14]
 8004080:	7b3b      	ldrb	r3, [r7, #12]
 8004082:	429a      	cmp	r2, r3
 8004084:	d3eb      	bcc.n	800405e <u8g2_send_buffer+0x24>
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffcf 	bl	800403a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f001 fce1 	bl	8005a64 <u8x8_RefreshDisplay>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ff5b 	bl	8003fa8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80040f2:	2100      	movs	r1, #0
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ffd8 	bl	80040aa <u8g2_SetBufferCurrTileRow>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ff95 	bl	800403a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004116:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	4413      	add	r3, r2
 8004122:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	7c5b      	ldrb	r3, [r3, #17]
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	429a      	cmp	r2, r3
 800412e:	d304      	bcc.n	800413a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f001 fc97 	bl	8005a64 <u8x8_RefreshDisplay>
    return 0;
 8004136:	2300      	movs	r3, #0
 8004138:	e00d      	b.n	8004156 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff2f 	bl	8003fa8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff ffab 	bl	80040aa <u8g2_SetBufferCurrTileRow>
  return 1;
 8004154:	2301      	movs	r3, #1
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff ffb7 	bl	80040da <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ffc8 	bl	8004102 <u8g2_NextPage>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f9      	bne.n	800416c <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8004178:	2100      	movs	r1, #0
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff ff95 	bl	80040aa <u8g2_SetBufferCurrTileRow>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2208      	movs	r2, #8
 8004194:	701a      	strb	r2, [r3, #0]
  return buf;
 8004196:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000494 	.word	0x20000494

080041a8 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a0b      	ldr	r2, [pc, #44]	; (80041ec <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 80041be:	490c      	ldr	r1, [pc, #48]	; (80041f0 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f001 fcaf 	bl	8005b24 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80041c6:	f107 0313 	add.w	r3, r7, #19
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff ffdc 	bl	8004188 <u8g2_m_16_8_f>
 80041d0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80041d2:	7cfa      	ldrb	r2, [r7, #19]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 ffeb 	bl	80051b8 <u8g2_SetupBuffer>
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	080056bd 	.word	0x080056bd
 80041f0:	0800585d 	.word	0x0800585d
 80041f4:	0800503d 	.word	0x0800503d

080041f8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	781b      	ldrb	r3, [r3, #0]
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	81fb      	strh	r3, [r7, #14]
    font++;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3301      	adds	r3, #1
 8004238:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800423a:	89fb      	ldrh	r3, [r7, #14]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b29a      	uxth	r2, r3
 8004246:	89fb      	ldrh	r3, [r7, #14]
 8004248:	4413      	add	r3, r2
 800424a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800424c:	89fb      	ldrh	r3, [r7, #14]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8004262:	2100      	movs	r1, #0
 8004264:	6838      	ldr	r0, [r7, #0]
 8004266:	f7ff ffc7 	bl	80041f8 <u8g2_font_get_byte>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8004272:	2101      	movs	r1, #1
 8004274:	6838      	ldr	r0, [r7, #0]
 8004276:	f7ff ffbf 	bl	80041f8 <u8g2_font_get_byte>
 800427a:	4603      	mov	r3, r0
 800427c:	461a      	mov	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8004282:	2102      	movs	r1, #2
 8004284:	6838      	ldr	r0, [r7, #0]
 8004286:	f7ff ffb7 	bl	80041f8 <u8g2_font_get_byte>
 800428a:	4603      	mov	r3, r0
 800428c:	461a      	mov	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8004292:	2103      	movs	r1, #3
 8004294:	6838      	ldr	r0, [r7, #0]
 8004296:	f7ff ffaf 	bl	80041f8 <u8g2_font_get_byte>
 800429a:	4603      	mov	r3, r0
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80042a2:	2104      	movs	r1, #4
 80042a4:	6838      	ldr	r0, [r7, #0]
 80042a6:	f7ff ffa7 	bl	80041f8 <u8g2_font_get_byte>
 80042aa:	4603      	mov	r3, r0
 80042ac:	461a      	mov	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80042b2:	2105      	movs	r1, #5
 80042b4:	6838      	ldr	r0, [r7, #0]
 80042b6:	f7ff ff9f 	bl	80041f8 <u8g2_font_get_byte>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461a      	mov	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80042c2:	2106      	movs	r1, #6
 80042c4:	6838      	ldr	r0, [r7, #0]
 80042c6:	f7ff ff97 	bl	80041f8 <u8g2_font_get_byte>
 80042ca:	4603      	mov	r3, r0
 80042cc:	461a      	mov	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80042d2:	2107      	movs	r1, #7
 80042d4:	6838      	ldr	r0, [r7, #0]
 80042d6:	f7ff ff8f 	bl	80041f8 <u8g2_font_get_byte>
 80042da:	4603      	mov	r3, r0
 80042dc:	461a      	mov	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80042e2:	2108      	movs	r1, #8
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	f7ff ff87 	bl	80041f8 <u8g2_font_get_byte>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80042f2:	2109      	movs	r1, #9
 80042f4:	6838      	ldr	r0, [r7, #0]
 80042f6:	f7ff ff7f 	bl	80041f8 <u8g2_font_get_byte>
 80042fa:	4603      	mov	r3, r0
 80042fc:	b25a      	sxtb	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8004302:	210a      	movs	r1, #10
 8004304:	6838      	ldr	r0, [r7, #0]
 8004306:	f7ff ff77 	bl	80041f8 <u8g2_font_get_byte>
 800430a:	4603      	mov	r3, r0
 800430c:	b25a      	sxtb	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8004312:	210b      	movs	r1, #11
 8004314:	6838      	ldr	r0, [r7, #0]
 8004316:	f7ff ff6f 	bl	80041f8 <u8g2_font_get_byte>
 800431a:	4603      	mov	r3, r0
 800431c:	b25a      	sxtb	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8004322:	210c      	movs	r1, #12
 8004324:	6838      	ldr	r0, [r7, #0]
 8004326:	f7ff ff67 	bl	80041f8 <u8g2_font_get_byte>
 800432a:	4603      	mov	r3, r0
 800432c:	b25a      	sxtb	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8004332:	210d      	movs	r1, #13
 8004334:	6838      	ldr	r0, [r7, #0]
 8004336:	f7ff ff5f 	bl	80041f8 <u8g2_font_get_byte>
 800433a:	4603      	mov	r3, r0
 800433c:	b25a      	sxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8004342:	210e      	movs	r1, #14
 8004344:	6838      	ldr	r0, [r7, #0]
 8004346:	f7ff ff57 	bl	80041f8 <u8g2_font_get_byte>
 800434a:	4603      	mov	r3, r0
 800434c:	b25a      	sxtb	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8004352:	210f      	movs	r1, #15
 8004354:	6838      	ldr	r0, [r7, #0]
 8004356:	f7ff ff4f 	bl	80041f8 <u8g2_font_get_byte>
 800435a:	4603      	mov	r3, r0
 800435c:	b25a      	sxtb	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8004362:	2110      	movs	r1, #16
 8004364:	6838      	ldr	r0, [r7, #0]
 8004366:	f7ff ff47 	bl	80041f8 <u8g2_font_get_byte>
 800436a:	4603      	mov	r3, r0
 800436c:	b25a      	sxtb	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004372:	2111      	movs	r1, #17
 8004374:	6838      	ldr	r0, [r7, #0]
 8004376:	f7ff ff50 	bl	800421a <u8g2_font_get_word>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004382:	2113      	movs	r1, #19
 8004384:	6838      	ldr	r0, [r7, #0]
 8004386:	f7ff ff48 	bl	800421a <u8g2_font_get_word>
 800438a:	4603      	mov	r3, r0
 800438c:	461a      	mov	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004392:	2115      	movs	r1, #21
 8004394:	6838      	ldr	r0, [r7, #0]
 8004396:	f7ff ff40 	bl	800421a <u8g2_font_get_word>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	82da      	strh	r2, [r3, #22]
#endif
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7b1b      	ldrb	r3, [r3, #12]
 80043ba:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	7b7b      	ldrb	r3, [r7, #13]
 80043c8:	fa42 f303 	asr.w	r3, r2, r3
 80043cc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80043ce:	7b7b      	ldrb	r3, [r7, #13]
 80043d0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80043d2:	7bba      	ldrb	r2, [r7, #14]
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	4413      	add	r3, r2
 80043d8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80043da:	7bbb      	ldrb	r3, [r7, #14]
 80043dc:	2b07      	cmp	r3, #7
 80043de:	d91a      	bls.n	8004416 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80043e0:	2308      	movs	r3, #8
 80043e2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80043e4:	7b3a      	ldrb	r2, [r7, #12]
 80043e6:	7b7b      	ldrb	r3, [r7, #13]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	7b3b      	ldrb	r3, [r7, #12]
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	b25a      	sxtb	r2, r3
 8004406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440a:	4313      	orrs	r3, r2
 800440c:	b25b      	sxtb	r3, r3
 800440e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004410:	7bbb      	ldrb	r3, [r7, #14]
 8004412:	3b08      	subs	r3, #8
 8004414:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f04f 32ff 	mov.w	r2, #4294967295
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	43db      	mvns	r3, r3
 8004424:	b2da      	uxtb	r2, r3
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	4013      	ands	r3, r2
 800442a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	7bba      	ldrb	r2, [r7, #14]
 8004430:	731a      	strb	r2, [r3, #12]
  return val;
 8004432:	7bfb      	ldrb	r3, [r7, #15]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ffab 	bl	80043aa <u8g2_font_decode_get_unsigned_bits>
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8004458:	2301      	movs	r3, #1
 800445a:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	3b01      	subs	r3, #1
 8004460:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8004462:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800446e:	7bfa      	ldrb	r2, [r7, #15]
 8004470:	7bbb      	ldrb	r3, [r7, #14]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	73fb      	strb	r3, [r7, #15]
  return v;
 8004478:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8004484:	b490      	push	{r4, r7}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	4604      	mov	r4, r0
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4623      	mov	r3, r4
 8004494:	80fb      	strh	r3, [r7, #6]
 8004496:	4603      	mov	r3, r0
 8004498:	717b      	strb	r3, [r7, #5]
 800449a:	460b      	mov	r3, r1
 800449c:	713b      	strb	r3, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d014      	beq.n	80044d2 <u8g2_add_vector_y+0x4e>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	dc19      	bgt.n	80044e0 <u8g2_add_vector_y+0x5c>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <u8g2_add_vector_y+0x32>
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d007      	beq.n	80044c4 <u8g2_add_vector_y+0x40>
 80044b4:	e014      	b.n	80044e0 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80044b6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	4413      	add	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
      break;
 80044c2:	e014      	b.n	80044ee <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80044c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	4413      	add	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
      break;
 80044d0:	e00d      	b.n	80044ee <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80044d2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	88fa      	ldrh	r2, [r7, #6]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	80fb      	strh	r3, [r7, #6]
      break;
 80044de:	e006      	b.n	80044ee <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80044e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	80fb      	strh	r3, [r7, #6]
      break;      
 80044ec:	bf00      	nop
  }
  return dy;
 80044ee:	88fb      	ldrh	r3, [r7, #6]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc90      	pop	{r4, r7}
 80044f8:	4770      	bx	lr

080044fa <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80044fa:	b490      	push	{r4, r7}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	4604      	mov	r4, r0
 8004502:	4608      	mov	r0, r1
 8004504:	4611      	mov	r1, r2
 8004506:	461a      	mov	r2, r3
 8004508:	4623      	mov	r3, r4
 800450a:	80fb      	strh	r3, [r7, #6]
 800450c:	4603      	mov	r3, r0
 800450e:	717b      	strb	r3, [r7, #5]
 8004510:	460b      	mov	r3, r1
 8004512:	713b      	strb	r3, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d014      	beq.n	8004548 <u8g2_add_vector_x+0x4e>
 800451e:	2b02      	cmp	r3, #2
 8004520:	dc19      	bgt.n	8004556 <u8g2_add_vector_x+0x5c>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <u8g2_add_vector_x+0x32>
 8004526:	2b01      	cmp	r3, #1
 8004528:	d007      	beq.n	800453a <u8g2_add_vector_x+0x40>
 800452a:	e014      	b.n	8004556 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800452c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004530:	b29a      	uxth	r2, r3
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	4413      	add	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
      break;
 8004538:	e014      	b.n	8004564 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 800453a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800453e:	b29b      	uxth	r3, r3
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	80fb      	strh	r3, [r7, #6]
      break;
 8004546:	e00d      	b.n	8004564 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8004548:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800454c:	b29b      	uxth	r3, r3
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	80fb      	strh	r3, [r7, #6]
      break;
 8004554:	e006      	b.n	8004564 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8004556:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800455a:	b29a      	uxth	r2, r3
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	4413      	add	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
      break;      
 8004562:	bf00      	nop
  }
  return dx;
 8004564:	88fb      	ldrh	r3, [r7, #6]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bc90      	pop	{r4, r7}
 800456e:	4770      	bx	lr

08004570 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
 800457c:	4613      	mov	r3, r2
 800457e:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3360      	adds	r3, #96	; 0x60
 8004584:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004590:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004598:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80045a0:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	7d7b      	ldrb	r3, [r7, #21]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80045ae:	7dfa      	ldrb	r2, [r7, #23]
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d201      	bcs.n	80045ba <u8g2_font_decode_len+0x4a>
      current = cnt;
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	889b      	ldrh	r3, [r3, #4]
 80045be:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	88db      	ldrh	r3, [r3, #6]
 80045c4:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80045c6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80045ca:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	7c1b      	ldrb	r3, [r3, #16]
 80045d2:	89b8      	ldrh	r0, [r7, #12]
 80045d4:	f7ff ff91 	bl	80044fa <u8g2_add_vector_x>
 80045d8:	4603      	mov	r3, r0
 80045da:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80045dc:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80045e0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	7c1b      	ldrb	r3, [r3, #16]
 80045e8:	8978      	ldrh	r0, [r7, #10]
 80045ea:	f7ff ff4b 	bl	8004484 <u8g2_add_vector_y>
 80045ee:	4603      	mov	r3, r0
 80045f0:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80045f2:	78bb      	ldrb	r3, [r7, #2]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	7b9a      	ldrb	r2, [r3, #14]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004602:	7dbb      	ldrb	r3, [r7, #22]
 8004604:	b298      	uxth	r0, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	7c1b      	ldrb	r3, [r3, #16]
 800460a:	897a      	ldrh	r2, [r7, #10]
 800460c:	89b9      	ldrh	r1, [r7, #12]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	4603      	mov	r3, r0
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fbfa 	bl	8004e0c <u8g2_DrawHVLine>
 8004618:	e013      	b.n	8004642 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	7b5b      	ldrb	r3, [r3, #13]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	7bda      	ldrb	r2, [r3, #15]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800462c:	7dbb      	ldrb	r3, [r7, #22]
 800462e:	b298      	uxth	r0, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	7c1b      	ldrb	r3, [r3, #16]
 8004634:	897a      	ldrh	r2, [r7, #10]
 8004636:	89b9      	ldrh	r1, [r7, #12]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4603      	mov	r3, r0
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fbe5 	bl	8004e0c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004642:	7dfa      	ldrb	r2, [r7, #23]
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	429a      	cmp	r2, r3
 8004648:	d309      	bcc.n	800465e <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800464a:	7dfa      	ldrb	r2, [r7, #23]
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	757b      	strb	r3, [r7, #21]
    ly++;
 8004656:	7d3b      	ldrb	r3, [r7, #20]
 8004658:	3301      	adds	r3, #1
 800465a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800465c:	e79d      	b.n	800459a <u8g2_font_decode_len+0x2a>
      break;
 800465e:	bf00      	nop
  }
  lx += cnt;
 8004660:	7d7a      	ldrb	r2, [r7, #21]
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	4413      	add	r3, r2
 8004666:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004668:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8004670:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	725a      	strb	r2, [r3, #9]
  
}
 8004678:	bf00      	nop
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3360      	adds	r3, #96	; 0x60
 800468e:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80046a2:	4619      	mov	r1, r3
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff fe80 	bl	80043aa <u8g2_font_decode_get_unsigned_bits>
 80046aa:	4603      	mov	r3, r0
 80046ac:	b25a      	sxtb	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80046b8:	4619      	mov	r1, r3
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff fe75 	bl	80043aa <u8g2_font_decode_get_unsigned_bits>
 80046c0:	4603      	mov	r3, r0
 80046c2:	b25a      	sxtb	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	7b9b      	ldrb	r3, [r3, #14]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	73da      	strb	r2, [r3, #15]
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3360      	adds	r3, #96	; 0x60
 80046fe:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ffbc 	bl	8004680 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800470e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8004716:	4619      	mov	r1, r3
 8004718:	6978      	ldr	r0, [r7, #20]
 800471a:	f7ff fe90 	bl	800443e <u8g2_font_decode_get_signed_bits>
 800471e:	4603      	mov	r3, r0
 8004720:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8004728:	4619      	mov	r1, r3
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f7ff fe87 	bl	800443e <u8g2_font_decode_get_signed_bits>
 8004730:	4603      	mov	r3, r0
 8004732:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800473a:	4619      	mov	r1, r3
 800473c:	6978      	ldr	r0, [r7, #20]
 800473e:	f7ff fe7e 	bl	800443e <u8g2_font_decode_get_signed_bits>
 8004742:	4603      	mov	r3, r0
 8004744:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f340 80d7 	ble.w	8004900 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	8898      	ldrh	r0, [r3, #4]
 8004756:	7cfa      	ldrb	r2, [r7, #19]
 8004758:	7c7b      	ldrb	r3, [r7, #17]
 800475a:	4413      	add	r3, r2
 800475c:	b2db      	uxtb	r3, r3
 800475e:	425b      	negs	r3, r3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	b25a      	sxtb	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	7c1b      	ldrb	r3, [r3, #16]
 8004768:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800476c:	f7ff fec5 	bl	80044fa <u8g2_add_vector_x>
 8004770:	4603      	mov	r3, r0
 8004772:	461a      	mov	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	88d8      	ldrh	r0, [r3, #6]
 800477c:	7cfa      	ldrb	r2, [r7, #19]
 800477e:	7c7b      	ldrb	r3, [r7, #17]
 8004780:	4413      	add	r3, r2
 8004782:	b2db      	uxtb	r3, r3
 8004784:	425b      	negs	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	b25a      	sxtb	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	7c1b      	ldrb	r3, [r3, #16]
 800478e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8004792:	f7ff fe77 	bl	8004484 <u8g2_add_vector_y>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	889b      	ldrh	r3, [r3, #4]
 80047a2:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	88db      	ldrh	r3, [r3, #6]
 80047a8:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80047aa:	8bfb      	ldrh	r3, [r7, #30]
 80047ac:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80047ae:	8b7b      	ldrh	r3, [r7, #26]
 80047b0:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	7c1b      	ldrb	r3, [r3, #16]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d85a      	bhi.n	8004870 <u8g2_font_decode_glyph+0x180>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <u8g2_font_decode_glyph+0xd0>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047d1 	.word	0x080047d1
 80047c4:	080047ed 	.word	0x080047ed
 80047c8:	08004815 	.word	0x08004815
 80047cc:	08004849 	.word	0x08004849
      {
	case 0:
	    x1 += decode->glyph_width;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	8bbb      	ldrh	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80047de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	8b3b      	ldrh	r3, [r7, #24]
 80047e6:	4413      	add	r3, r2
 80047e8:	833b      	strh	r3, [r7, #24]
	    break;
 80047ea:	e041      	b.n	8004870 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80047ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8bfa      	ldrh	r2, [r7, #30]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80047f8:	8bfb      	ldrh	r3, [r7, #30]
 80047fa:	3301      	adds	r3, #1
 80047fc:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80047fe:	8bbb      	ldrh	r3, [r7, #28]
 8004800:	3301      	adds	r3, #1
 8004802:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800480a:	b29a      	uxth	r2, r3
 800480c:	8b3b      	ldrh	r3, [r7, #24]
 800480e:	4413      	add	r3, r2
 8004810:	833b      	strh	r3, [r7, #24]
	    break;
 8004812:	e02d      	b.n	8004870 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800481a:	b29b      	uxth	r3, r3
 800481c:	8bfa      	ldrh	r2, [r7, #30]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004822:	8bfb      	ldrh	r3, [r7, #30]
 8004824:	3301      	adds	r3, #1
 8004826:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8004828:	8bbb      	ldrh	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 800482e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004832:	b29b      	uxth	r3, r3
 8004834:	8b7a      	ldrh	r2, [r7, #26]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800483a:	8b7b      	ldrh	r3, [r7, #26]
 800483c:	3301      	adds	r3, #1
 800483e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8004840:	8b3b      	ldrh	r3, [r7, #24]
 8004842:	3301      	adds	r3, #1
 8004844:	833b      	strh	r3, [r7, #24]
	    break;	  
 8004846:	e013      	b.n	8004870 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8004848:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800484c:	b29a      	uxth	r2, r3
 800484e:	8bbb      	ldrh	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800485a:	b29b      	uxth	r3, r3
 800485c:	8b7a      	ldrh	r2, [r7, #26]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004862:	8b7b      	ldrh	r3, [r7, #26]
 8004864:	3301      	adds	r3, #1
 8004866:	837b      	strh	r3, [r7, #26]
	    y1++;
 8004868:	8b3b      	ldrh	r3, [r7, #24]
 800486a:	3301      	adds	r3, #1
 800486c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800486e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004870:	8bb8      	ldrh	r0, [r7, #28]
 8004872:	8b7a      	ldrh	r2, [r7, #26]
 8004874:	8bf9      	ldrh	r1, [r7, #30]
 8004876:	8b3b      	ldrh	r3, [r7, #24]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	4603      	mov	r3, r0
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fbb2 	bl	8004fe6 <u8g2_IsIntersection>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d102      	bne.n	800488e <u8g2_font_decode_glyph+0x19e>
	return d;
 8004888:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800488c:	e03a      	b.n	8004904 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2200      	movs	r2, #0
 8004892:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2200      	movs	r2, #0
 8004898:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80048a0:	4619      	mov	r1, r3
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f7ff fd81 	bl	80043aa <u8g2_font_decode_get_unsigned_bits>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80048b2:	4619      	mov	r1, r3
 80048b4:	6978      	ldr	r0, [r7, #20]
 80048b6:	f7ff fd78 	bl	80043aa <u8g2_font_decode_get_unsigned_bits>
 80048ba:	4603      	mov	r3, r0
 80048bc:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	2200      	movs	r2, #0
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fe53 	bl	8004570 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80048ca:	7bbb      	ldrb	r3, [r7, #14]
 80048cc:	2201      	movs	r2, #1
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff fe4d 	bl	8004570 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80048d6:	2101      	movs	r1, #1
 80048d8:	6978      	ldr	r0, [r7, #20]
 80048da:	f7ff fd66 	bl	80043aa <u8g2_font_decode_get_unsigned_bits>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ec      	bne.n	80048be <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80048ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	dd00      	ble.n	80048f4 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80048f2:	e7d2      	b.n	800489a <u8g2_font_decode_glyph+0x1aa>
	break;
 80048f4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	7b9a      	ldrb	r2, [r3, #14]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8004900:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	3317      	adds	r3, #23
 8004922:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004924:	887b      	ldrh	r3, [r7, #2]
 8004926:	2bff      	cmp	r3, #255	; 0xff
 8004928:	d82a      	bhi.n	8004980 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	2b60      	cmp	r3, #96	; 0x60
 800492e:	d907      	bls.n	8004940 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004936:	461a      	mov	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e009      	b.n	8004954 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d906      	bls.n	8004954 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800494c:	461a      	mov	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4413      	add	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3301      	adds	r3, #1
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d04e      	beq.n	80049fc <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	887a      	ldrh	r2, [r7, #2]
 8004966:	429a      	cmp	r2, r3
 8004968:	d102      	bne.n	8004970 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	3302      	adds	r3, #2
 800496e:	e049      	b.n	8004a04 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	3301      	adds	r3, #1
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800497e:	e7e9      	b.n	8004954 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8004986:	461a      	mov	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004992:	2100      	movs	r1, #0
 8004994:	6938      	ldr	r0, [r7, #16]
 8004996:	f7ff fc40 	bl	800421a <u8g2_font_get_word>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80049a4:	2102      	movs	r1, #2
 80049a6:	6938      	ldr	r0, [r7, #16]
 80049a8:	f7ff fc37 	bl	800421a <u8g2_font_get_word>
 80049ac:	4603      	mov	r3, r0
 80049ae:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3304      	adds	r3, #4
 80049b4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80049b6:	89fa      	ldrh	r2, [r7, #14]
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3e9      	bcc.n	8004992 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80049c4:	89fb      	ldrh	r3, [r7, #14]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	3301      	adds	r3, #1
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	89fb      	ldrh	r3, [r7, #14]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d010      	beq.n	8004a00 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80049de:	89fa      	ldrh	r2, [r7, #14]
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d102      	bne.n	80049ec <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	3303      	adds	r3, #3
 80049ea:	e00b      	b.n	8004a04 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	3302      	adds	r3, #2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4413      	add	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80049fa:	e7e0      	b.n	80049be <u8g2_font_get_glyph_data+0xb2>
	break;
 80049fc:	bf00      	nop
 80049fe:	e000      	b.n	8004a02 <u8g2_font_get_glyph_data+0xf6>
	break;
 8004a00:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	4608      	mov	r0, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	817b      	strh	r3, [r7, #10]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	813b      	strh	r3, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	897a      	ldrh	r2, [r7, #10]
 8004a2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	893a      	ldrh	r2, [r7, #8]
 8004a36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff ff64 	bl	800490c <u8g2_font_get_glyph_data>
 8004a44:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004a4c:	6939      	ldr	r1, [r7, #16]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff fe4e 	bl	80046f0 <u8g2_font_decode_glyph>
 8004a54:	4603      	mov	r3, r0
 8004a56:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8004a58:	8afb      	ldrh	r3, [r7, #22]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	817b      	strh	r3, [r7, #10]
 8004a76:	460b      	mov	r3, r1
 8004a78:	813b      	strh	r3, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d833      	bhi.n	8004af0 <u8g2_DrawGlyph+0x8c>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <u8g2_DrawGlyph+0x2c>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004aa1 	.word	0x08004aa1
 8004a94:	08004ab5 	.word	0x08004ab5
 8004a98:	08004ac9 	.word	0x08004ac9
 8004a9c:	08004add 	.word	0x08004add
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	4798      	blx	r3
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	893b      	ldrh	r3, [r7, #8]
 8004aae:	4413      	add	r3, r2
 8004ab0:	813b      	strh	r3, [r7, #8]
      break;
 8004ab2:	e01d      	b.n	8004af0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	4798      	blx	r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	897b      	ldrh	r3, [r7, #10]
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	817b      	strh	r3, [r7, #10]
      break;
 8004ac6:	e013      	b.n	8004af0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	4798      	blx	r3
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	893b      	ldrh	r3, [r7, #8]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	813b      	strh	r3, [r7, #8]
      break;
 8004ada:	e009      	b.n	8004af0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	4798      	blx	r3
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	897b      	ldrh	r3, [r7, #10]
 8004aea:	4413      	add	r3, r2
 8004aec:	817b      	strh	r3, [r7, #10]
      break;
 8004aee:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	893a      	ldrh	r2, [r7, #8]
 8004af4:	8979      	ldrh	r1, [r7, #10]
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff ff88 	bl	8004a0c <u8g2_font_draw_glyph>
 8004afc:	4603      	mov	r3, r0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop

08004b08 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	817b      	strh	r3, [r7, #10]
 8004b16:	4613      	mov	r3, r2
 8004b18:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fccc 	bl	80054b8 <u8x8_utf8_init>
  sum = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	4798      	blx	r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004b36:	8abb      	ldrh	r3, [r7, #20]
 8004b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d038      	beq.n	8004bb2 <u8g2_draw_string+0xaa>
      break;
    str++;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3301      	adds	r3, #1
 8004b44:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004b46:	8abb      	ldrh	r3, [r7, #20]
 8004b48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d0e9      	beq.n	8004b24 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004b50:	8abb      	ldrh	r3, [r7, #20]
 8004b52:	893a      	ldrh	r2, [r7, #8]
 8004b54:	8979      	ldrh	r1, [r7, #10]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7ff ff84 	bl	8004a64 <u8g2_DrawGlyph>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d81e      	bhi.n	8004ba8 <u8g2_draw_string+0xa0>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <u8g2_draw_string+0x68>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004b8b 	.word	0x08004b8b
 8004b78:	08004b95 	.word	0x08004b95
 8004b7c:	08004b9f 	.word	0x08004b9f
      {
	case 0:
	  x += delta;
 8004b80:	897a      	ldrh	r2, [r7, #10]
 8004b82:	8a7b      	ldrh	r3, [r7, #18]
 8004b84:	4413      	add	r3, r2
 8004b86:	817b      	strh	r3, [r7, #10]
	  break;
 8004b88:	e00e      	b.n	8004ba8 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004b8a:	893a      	ldrh	r2, [r7, #8]
 8004b8c:	8a7b      	ldrh	r3, [r7, #18]
 8004b8e:	4413      	add	r3, r2
 8004b90:	813b      	strh	r3, [r7, #8]
	  break;
 8004b92:	e009      	b.n	8004ba8 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004b94:	897a      	ldrh	r2, [r7, #10]
 8004b96:	8a7b      	ldrh	r3, [r7, #18]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	817b      	strh	r3, [r7, #10]
	  break;
 8004b9c:	e004      	b.n	8004ba8 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004b9e:	893a      	ldrh	r2, [r7, #8]
 8004ba0:	8a7b      	ldrh	r3, [r7, #18]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	813b      	strh	r3, [r7, #8]
	  break;
 8004ba6:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8004ba8:	8afa      	ldrh	r2, [r7, #22]
 8004baa:	8a7b      	ldrh	r3, [r7, #18]
 8004bac:	4413      	add	r3, r2
 8004bae:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004bb0:	e7b8      	b.n	8004b24 <u8g2_draw_string+0x1c>
      break;
 8004bb2:	bf00      	nop
    }
  }
  return sum;
 8004bb4:	8afb      	ldrh	r3, [r7, #22]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop

08004bc0 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	817b      	strh	r3, [r7, #10]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a06      	ldr	r2, [pc, #24]	; (8004bf0 <u8g2_DrawStr+0x30>)
 8004bd6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004bd8:	893a      	ldrh	r2, [r7, #8]
 8004bda:	8979      	ldrh	r1, [r7, #10]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff ff92 	bl	8004b08 <u8g2_draw_string>
 8004be4:	4603      	mov	r3, r0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	080054d3 	.word	0x080054d3

08004bf4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d05d      	beq.n	8004cc0 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d04d      	beq.n	8004cc2 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d11c      	bne.n	8004c6a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	da05      	bge.n	8004c4c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	dd32      	ble.n	8004cc2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004c68:	e02b      	b.n	8004cc2 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004c78:	4619      	mov	r1, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004c80:	440b      	add	r3, r1
 8004c82:	429a      	cmp	r2, r3
 8004c84:	da0d      	bge.n	8004ca2 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	b25a      	sxtb	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	dd07      	ble.n	8004cc2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004cbe:	e000      	b.n	8004cc2 <u8g2_UpdateRefHeight+0xce>
    return;
 8004cc0:	bf00      	nop
  }  
}
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  return 0;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr
	...

08004ce0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a03      	ldr	r2, [pc, #12]	; (8004cf8 <u8g2_SetFontPosBaseline+0x18>)
 8004cec:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	08004ccb 	.word	0x08004ccb

08004cfc <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d00b      	beq.n	8004d28 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3374      	adds	r3, #116	; 0x74
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fa9b 	bl	8004258 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff ff66 	bl	8004bf4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	460b      	mov	r3, r1
 8004d40:	80fb      	strh	r3, [r7, #6]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8004d4c:	8afb      	ldrh	r3, [r7, #22]
 8004d4e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	881a      	ldrh	r2, [r3, #0]
 8004d54:	8abb      	ldrh	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004d5a:	8afa      	ldrh	r2, [r7, #22]
 8004d5c:	8abb      	ldrh	r3, [r7, #20]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d90b      	bls.n	8004d7a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004d62:	8afa      	ldrh	r2, [r7, #22]
 8004d64:	88bb      	ldrh	r3, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d205      	bcs.n	8004d76 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004d6a:	88bb      	ldrh	r3, [r7, #4]
 8004d6c:	82bb      	strh	r3, [r7, #20]
      b--;
 8004d6e:	8abb      	ldrh	r3, [r7, #20]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	82bb      	strh	r3, [r7, #20]
 8004d74:	e001      	b.n	8004d7a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004d7a:	8afa      	ldrh	r2, [r7, #22]
 8004d7c:	88bb      	ldrh	r3, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d301      	bcc.n	8004d86 <u8g2_clip_intersection2+0x56>
    return 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e01c      	b.n	8004dc0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004d86:	8aba      	ldrh	r2, [r7, #20]
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d801      	bhi.n	8004d92 <u8g2_clip_intersection2+0x62>
    return 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e016      	b.n	8004dc0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8004d92:	8afa      	ldrh	r2, [r7, #22]
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d201      	bcs.n	8004d9e <u8g2_clip_intersection2+0x6e>
    a = c;
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8004d9e:	8aba      	ldrh	r2, [r7, #20]
 8004da0:	88bb      	ldrh	r3, [r7, #4]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d901      	bls.n	8004daa <u8g2_clip_intersection2+0x7a>
    b = d;
 8004da6:	88bb      	ldrh	r3, [r7, #4]
 8004da8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8afa      	ldrh	r2, [r7, #22]
 8004dae:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004db0:	8aba      	ldrh	r2, [r7, #20]
 8004db2:	8afb      	ldrh	r3, [r7, #22]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	8aba      	ldrh	r2, [r7, #20]
 8004dbc:	801a      	strh	r2, [r3, #0]
  return 1;
 8004dbe:	2301      	movs	r3, #1
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004dca:	b590      	push	{r4, r7, lr}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af02      	add	r7, sp, #8
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	4608      	mov	r0, r1
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4603      	mov	r3, r0
 8004dda:	817b      	strh	r3, [r7, #10]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	813b      	strh	r3, [r7, #8]
 8004de0:	4613      	mov	r3, r2
 8004de2:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de8:	893a      	ldrh	r2, [r7, #8]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004df2:	88f8      	ldrh	r0, [r7, #6]
 8004df4:	893a      	ldrh	r2, [r7, #8]
 8004df6:	8979      	ldrh	r1, [r7, #10]
 8004df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4603      	mov	r3, r0
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	47a0      	blx	r4
}
 8004e04:	bf00      	nop
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd90      	pop	{r4, r7, pc}

08004e0c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004e0c:	b590      	push	{r4, r7, lr}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	817b      	strh	r3, [r7, #10]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	813b      	strh	r3, [r7, #8]
 8004e22:	4613      	mov	r3, r2
 8004e24:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d075      	beq.n	8004f1c <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d072      	beq.n	8004f1c <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d91a      	bls.n	8004e72 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004e3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d109      	bne.n	8004e58 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8004e44:	897a      	ldrh	r2, [r7, #10]
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	817b      	strh	r3, [r7, #10]
	  x++;
 8004e4e:	897b      	ldrh	r3, [r7, #10]
 8004e50:	3301      	adds	r3, #1
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	817b      	strh	r3, [r7, #10]
 8004e56:	e00c      	b.n	8004e72 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8004e58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d108      	bne.n	8004e72 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8004e60:	893a      	ldrh	r2, [r7, #8]
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	813b      	strh	r3, [r7, #8]
	  y++;
 8004e6a:	893b      	ldrh	r3, [r7, #8]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8004e72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11a      	bne.n	8004ebc <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004e8c:	893b      	ldrh	r3, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d83b      	bhi.n	8004f0a <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004e98:	893b      	ldrh	r3, [r7, #8]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d937      	bls.n	8004f0e <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004eaa:	1db9      	adds	r1, r7, #6
 8004eac:	f107 000a 	add.w	r0, r7, #10
 8004eb0:	f7ff ff3e 	bl	8004d30 <u8g2_clip_intersection2>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d11a      	bne.n	8004ef0 <u8g2_DrawHVLine+0xe4>
	  return;
 8004eba:	e02f      	b.n	8004f1c <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004ec2:	897b      	ldrh	r3, [r7, #10]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d824      	bhi.n	8004f12 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004ece:	897b      	ldrh	r3, [r7, #10]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d920      	bls.n	8004f16 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004ee0:	1db9      	adds	r1, r7, #6
 8004ee2:	f107 0008 	add.w	r0, r7, #8
 8004ee6:	f7ff ff23 	bl	8004d30 <u8g2_clip_intersection2>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d014      	beq.n	8004f1a <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	689c      	ldr	r4, [r3, #8]
 8004ef6:	8979      	ldrh	r1, [r7, #10]
 8004ef8:	893a      	ldrh	r2, [r7, #8]
 8004efa:	88f8      	ldrh	r0, [r7, #6]
 8004efc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4603      	mov	r3, r0
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	47a0      	blx	r4
 8004f08:	e008      	b.n	8004f1c <u8g2_DrawHVLine+0x110>
	  return;
 8004f0a:	bf00      	nop
 8004f0c:	e006      	b.n	8004f1c <u8g2_DrawHVLine+0x110>
	  return;
 8004f0e:	bf00      	nop
 8004f10:	e004      	b.n	8004f1c <u8g2_DrawHVLine+0x110>
	  return;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <u8g2_DrawHVLine+0x110>
	  return;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <u8g2_DrawHVLine+0x110>
	  return;
 8004f1a:	bf00      	nop
    }
}
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd90      	pop	{r4, r7, pc}

08004f22 <u8g2_DrawVLine>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
}

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af02      	add	r7, sp, #8
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	4608      	mov	r0, r1
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4603      	mov	r3, r0
 8004f32:	817b      	strh	r3, [r7, #10]
 8004f34:	460b      	mov	r3, r1
 8004f36:	813b      	strh	r3, [r7, #8]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	893a      	ldrh	r2, [r7, #8]
 8004f40:	8979      	ldrh	r1, [r7, #10]
 8004f42:	2001      	movs	r0, #1
 8004f44:	9000      	str	r0, [sp, #0]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff ff60 	bl	8004e0c <u8g2_DrawHVLine>
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d903      	bls.n	8004f76 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004f80:	b490      	push	{r4, r7}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4604      	mov	r4, r0
 8004f88:	4608      	mov	r0, r1
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4623      	mov	r3, r4
 8004f90:	80fb      	strh	r3, [r7, #6]
 8004f92:	4603      	mov	r3, r0
 8004f94:	80bb      	strh	r3, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	807b      	strh	r3, [r7, #2]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004f9e:	887a      	ldrh	r2, [r7, #2]
 8004fa0:	88bb      	ldrh	r3, [r7, #4]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d20d      	bcs.n	8004fc2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004fa6:	883a      	ldrh	r2, [r7, #0]
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d901      	bls.n	8004fb2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e014      	b.n	8004fdc <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	883b      	ldrh	r3, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d901      	bls.n	8004fbe <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e00e      	b.n	8004fdc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e00c      	b.n	8004fdc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004fc2:	883a      	ldrh	r2, [r7, #0]
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d907      	bls.n	8004fda <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	883b      	ldrh	r3, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d901      	bls.n	8004fd6 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e002      	b.n	8004fdc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004fda:	2300      	movs	r3, #0
    }
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc90      	pop	{r4, r7}
 8004fe4:	4770      	bx	lr

08004fe6 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	4608      	mov	r0, r1
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	817b      	strh	r3, [r7, #10]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	813b      	strh	r3, [r7, #8]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800500c:	8b3b      	ldrh	r3, [r7, #24]
 800500e:	893a      	ldrh	r2, [r7, #8]
 8005010:	f7ff ffb6 	bl	8004f80 <u8g2_is_intersection_decision_tree>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <u8g2_IsIntersection+0x38>
    return 0; 
 800501a:	2300      	movs	r3, #0
 800501c:	e00a      	b.n	8005034 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	897a      	ldrh	r2, [r7, #10]
 800502e:	f7ff ffa7 	bl	8004f80 <u8g2_is_intersection_decision_tree>
 8005032:	4603      	mov	r3, r0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	; 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	461a      	mov	r2, r3
 800504a:	4603      	mov	r3, r0
 800504c:	817b      	strh	r3, [r7, #10]
 800504e:	460b      	mov	r3, r1
 8005050:	813b      	strh	r3, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005056:	893b      	ldrh	r3, [r7, #8]
 8005058:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800505a:	7efb      	ldrb	r3, [r7, #27]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8005066:	7e3a      	ldrb	r2, [r7, #24]
 8005068:	7efb      	ldrb	r3, [r7, #27]
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800507e:	2b01      	cmp	r3, #1
 8005080:	d801      	bhi.n	8005086 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8005082:	7e3b      	ldrb	r3, [r7, #24]
 8005084:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800508c:	2b01      	cmp	r3, #1
 800508e:	d001      	beq.n	8005094 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8005090:	7e3b      	ldrb	r3, [r7, #24]
 8005092:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8005098:	8afb      	ldrh	r3, [r7, #22]
 800509a:	f023 0307 	bic.w	r3, r3, #7
 800509e:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	7c1b      	ldrb	r3, [r3, #16]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8afa      	ldrh	r2, [r7, #22]
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80050b6:	8afb      	ldrh	r3, [r7, #22]
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80050c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d117      	bne.n	80050fe <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	7ebb      	ldrb	r3, [r7, #26]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	7e7b      	ldrb	r3, [r7, #25]
 80050e2:	4053      	eors	r3, r2
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	701a      	strb	r2, [r3, #0]
	ptr++;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3301      	adds	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
	len--;
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e8      	bne.n	80050ce <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80050fc:	e038      	b.n	8005170 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	7ebb      	ldrb	r3, [r7, #26]
 8005104:	4313      	orrs	r3, r2
 8005106:	b2da      	uxtb	r2, r3
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	781a      	ldrb	r2, [r3, #0]
 8005110:	7e7b      	ldrb	r3, [r7, #25]
 8005112:	4053      	eors	r3, r2
 8005114:	b2da      	uxtb	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800511a:	7efb      	ldrb	r3, [r7, #27]
 800511c:	3301      	adds	r3, #1
 800511e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005120:	7efb      	ldrb	r3, [r7, #27]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	76fb      	strb	r3, [r7, #27]
      len--;
 8005128:	88fb      	ldrh	r3, [r7, #6]
 800512a:	3b01      	subs	r3, #1
 800512c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800512e:	7efb      	ldrb	r3, [r7, #27]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d114      	bne.n	800515e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005138:	461a      	mov	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005146:	2b01      	cmp	r3, #1
 8005148:	d801      	bhi.n	800514e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005154:	2b01      	cmp	r3, #1
 8005156:	d008      	beq.n	800516a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8005158:	2301      	movs	r3, #1
 800515a:	767b      	strb	r3, [r7, #25]
 800515c:	e005      	b.n	800516a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800515e:	7ebb      	ldrb	r3, [r7, #26]
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8005164:	7e7b      	ldrb	r3, [r7, #25]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1c6      	bne.n	80050fe <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005170:	bf00      	nop
 8005172:	3724      	adds	r7, #36	; 0x24
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005198:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	79fa      	ldrb	r2, [r7, #7]
 80051de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff ffad 	bl	800517a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7ff fd5d 	bl	8004ce0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800524a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800524c:	89fb      	ldrh	r3, [r7, #14]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	89fa      	ldrh	r2, [r7, #14]
 8005256:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	7c1b      	ldrb	r3, [r3, #16]
 800525c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800525e:	89fb      	ldrh	r3, [r7, #14]
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	89fa      	ldrh	r2, [r7, #14]
 8005268:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005270:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005272:	89fb      	ldrh	r3, [r7, #14]
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	89fa      	ldrh	r2, [r7, #14]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005284:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005286:	89fb      	ldrh	r3, [r7, #14]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800528e:	4413      	add	r3, r2
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	7c52      	ldrb	r2, [r2, #17]
 8005294:	4293      	cmp	r3, r2
 8005296:	dd08      	ble.n	80052aa <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	7c5b      	ldrb	r3, [r3, #17]
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80052aa:	89fb      	ldrh	r3, [r7, #14]
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80052cc:	89fb      	ldrh	r3, [r7, #14]
 80052ce:	4413      	add	r3, r2
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	8a9a      	ldrh	r2, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	8ada      	ldrh	r2, [r3, #22]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af02      	add	r7, sp, #8
 80052fc:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4603      	mov	r3, r0
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fe63 	bl	8004fe6 <u8g2_IsIntersection>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800532e:	e03b      	b.n	80053a8 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005344:	429a      	cmp	r2, r3
 8005346:	d205      	bcs.n	8005354 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005360:	429a      	cmp	r2, r3
 8005362:	d905      	bls.n	8005370 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800537c:	429a      	cmp	r2, r3
 800537e:	d205      	bcs.n	800538c <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005398:	429a      	cmp	r2, r3
 800539a:	d905      	bls.n	80053a8 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ff3c 	bl	8005236 <u8g2_update_dimension_common>
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d30a      	bcc.n	8005410 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	b29a      	uxth	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff ff65 	bl	80052f6 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	4608      	mov	r0, r1
 800543e:	4611      	mov	r1, r2
 8005440:	461a      	mov	r2, r3
 8005442:	4603      	mov	r3, r0
 8005444:	817b      	strh	r3, [r7, #10]
 8005446:	460b      	mov	r3, r1
 8005448:	813b      	strh	r3, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005454:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8005456:	8aba      	ldrh	r2, [r7, #20]
 8005458:	893b      	ldrh	r3, [r7, #8]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005464:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8005466:	8afa      	ldrh	r2, [r7, #22]
 8005468:	897b      	ldrh	r3, [r7, #10]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 800546e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d107      	bne.n	8005486 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8005476:	8abb      	ldrh	r3, [r7, #20]
 8005478:	3b01      	subs	r3, #1
 800547a:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 800547c:	8afa      	ldrh	r2, [r7, #22]
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	82fb      	strh	r3, [r7, #22]
 8005484:	e00a      	b.n	800549c <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8005486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d106      	bne.n	800549c <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 800548e:	8afb      	ldrh	r3, [r7, #22]
 8005490:	3b01      	subs	r3, #1
 8005492:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8005494:	8aba      	ldrh	r2, [r7, #20]
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800549c:	88f8      	ldrh	r0, [r7, #6]
 800549e:	8aba      	ldrh	r2, [r7, #20]
 80054a0:	8af9      	ldrh	r1, [r7, #22]
 80054a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	4603      	mov	r3, r0
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fc8d 	bl	8004dca <u8g2_draw_hv_line_2dir>
}
 80054b0:	bf00      	nop
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <u8x8_ascii_next+0x18>
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	2b0a      	cmp	r3, #10
 80054e8:	d102      	bne.n	80054f0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80054ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ee:	e001      	b.n	80054f4 <u8x8_ascii_next+0x22>
  return b;
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	b29b      	uxth	r3, r3
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80054fe:	b590      	push	{r4, r7, lr}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	460b      	mov	r3, r1
 8005508:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691c      	ldr	r4, [r3, #16]
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	2300      	movs	r3, #0
 8005512:	2120      	movs	r1, #32
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	47a0      	blx	r4
 8005518:	4603      	mov	r3, r0
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bd90      	pop	{r4, r7, pc}

08005522 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005522:	b590      	push	{r4, r7, lr}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	460b      	mov	r3, r1
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	691c      	ldr	r4, [r3, #16]
 8005534:	7afa      	ldrb	r2, [r7, #11]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2117      	movs	r1, #23
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	47a0      	blx	r4
 800553e:	4603      	mov	r3, r0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	bd90      	pop	{r4, r7, pc}

08005548 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005554:	1cfb      	adds	r3, r7, #3
 8005556:	461a      	mov	r2, r3
 8005558:	2101      	movs	r1, #1
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff ffe1 	bl	8005522 <u8x8_byte_SendBytes>
 8005560:	4603      	mov	r3, r0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800556a:	b590      	push	{r4, r7, lr}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	460b      	mov	r3, r1
 8005574:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68dc      	ldr	r4, [r3, #12]
 800557a:	78fa      	ldrb	r2, [r7, #3]
 800557c:	2300      	movs	r3, #0
 800557e:	2115      	movs	r1, #21
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	47a0      	blx	r4
 8005584:	4603      	mov	r3, r0
}
 8005586:	4618      	mov	r0, r3
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}

0800558e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800558e:	b590      	push	{r4, r7, lr}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68dc      	ldr	r4, [r3, #12]
 800559e:	78fa      	ldrb	r2, [r7, #3]
 80055a0:	2300      	movs	r3, #0
 80055a2:	2116      	movs	r1, #22
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	47a0      	blx	r4
 80055a8:	4603      	mov	r3, r0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd90      	pop	{r4, r7, pc}

080055b2 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80055b2:	b590      	push	{r4, r7, lr}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	460b      	mov	r3, r1
 80055bc:	607a      	str	r2, [r7, #4]
 80055be:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68dc      	ldr	r4, [r3, #12]
 80055c4:	7afa      	ldrb	r2, [r7, #11]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2117      	movs	r1, #23
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	47a0      	blx	r4
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd90      	pop	{r4, r7, pc}

080055d8 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80055d8:	b590      	push	{r4, r7, lr}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68dc      	ldr	r4, [r3, #12]
 80055e4:	2300      	movs	r3, #0
 80055e6:	2200      	movs	r2, #0
 80055e8:	2118      	movs	r1, #24
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	47a0      	blx	r4
 80055ee:	4603      	mov	r3, r0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd90      	pop	{r4, r7, pc}

080055f8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68dc      	ldr	r4, [r3, #12]
 8005604:	2300      	movs	r3, #0
 8005606:	2200      	movs	r2, #0
 8005608:	2119      	movs	r1, #25
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	47a0      	blx	r4
 800560e:	4603      	mov	r3, r0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bd90      	pop	{r4, r7, pc}

08005618 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005618:	b590      	push	{r4, r7, lr}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	73fb      	strb	r3, [r7, #15]
    data++;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2bfe      	cmp	r3, #254	; 0xfe
 8005632:	d031      	beq.n	8005698 <u8x8_cad_SendSequence+0x80>
 8005634:	2bfe      	cmp	r3, #254	; 0xfe
 8005636:	dc3d      	bgt.n	80056b4 <u8x8_cad_SendSequence+0x9c>
 8005638:	2b19      	cmp	r3, #25
 800563a:	dc3b      	bgt.n	80056b4 <u8x8_cad_SendSequence+0x9c>
 800563c:	2b18      	cmp	r3, #24
 800563e:	da23      	bge.n	8005688 <u8x8_cad_SendSequence+0x70>
 8005640:	2b16      	cmp	r3, #22
 8005642:	dc02      	bgt.n	800564a <u8x8_cad_SendSequence+0x32>
 8005644:	2b15      	cmp	r3, #21
 8005646:	da03      	bge.n	8005650 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8005648:	e034      	b.n	80056b4 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800564a:	2b17      	cmp	r3, #23
 800564c:	d00e      	beq.n	800566c <u8x8_cad_SendSequence+0x54>
	return;
 800564e:	e031      	b.n	80056b4 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68dc      	ldr	r4, [r3, #12]
 800565a:	7bba      	ldrb	r2, [r7, #14]
 800565c:	7bf9      	ldrb	r1, [r7, #15]
 800565e:	2300      	movs	r3, #0
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	47a0      	blx	r4
	  data++;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	603b      	str	r3, [r7, #0]
	  break;
 800566a:	e022      	b.n	80056b2 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005672:	f107 030e 	add.w	r3, r7, #14
 8005676:	461a      	mov	r2, r3
 8005678:	2101      	movs	r1, #1
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff ff99 	bl	80055b2 <u8x8_cad_SendData>
	  data++;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	603b      	str	r3, [r7, #0]
	  break;
 8005686:	e014      	b.n	80056b2 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68dc      	ldr	r4, [r3, #12]
 800568c:	7bf9      	ldrb	r1, [r7, #15]
 800568e:	2300      	movs	r3, #0
 8005690:	2200      	movs	r2, #0
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	47a0      	blx	r4
	  break;
 8005696:	e00c      	b.n	80056b2 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	461a      	mov	r2, r3
 80056a2:	2129      	movs	r1, #41	; 0x29
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f9ec 	bl	8005a82 <u8x8_gpio_call>
	  data++;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	603b      	str	r3, [r7, #0]
	  break;
 80056b0:	bf00      	nop
    cmd = *data;
 80056b2:	e7b6      	b.n	8005622 <u8x8_cad_SendSequence+0xa>
	return;
 80056b4:	bf00      	nop
    }
  }
}
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd90      	pop	{r4, r7, pc}

080056bc <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607b      	str	r3, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	72fb      	strb	r3, [r7, #11]
 80056ca:	4613      	mov	r3, r2
 80056cc:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	3b14      	subs	r3, #20
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d82f      	bhi.n	8005736 <u8x8_cad_001+0x7a>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <u8x8_cad_001+0x20>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	08005725 	.word	0x08005725
 80056e0:	080056f5 	.word	0x080056f5
 80056e4:	08005709 	.word	0x08005709
 80056e8:	0800571d 	.word	0x0800571d
 80056ec:	08005725 	.word	0x08005725
 80056f0:	08005725 	.word	0x08005725
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80056f4:	2100      	movs	r1, #0
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff ff01 	bl	80054fe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80056fc:	7abb      	ldrb	r3, [r7, #10]
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ff21 	bl	8005548 <u8x8_byte_SendByte>
      break;
 8005706:	e018      	b.n	800573a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8005708:	2100      	movs	r1, #0
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff fef7 	bl	80054fe <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005710:	7abb      	ldrb	r3, [r7, #10]
 8005712:	4619      	mov	r1, r3
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff ff17 	bl	8005548 <u8x8_byte_SendByte>
      break;
 800571a:	e00e      	b.n	800573a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800571c:	2101      	movs	r1, #1
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff feed 	bl	80054fe <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	691c      	ldr	r4, [r3, #16]
 8005728:	7aba      	ldrb	r2, [r7, #10]
 800572a:	7af9      	ldrb	r1, [r7, #11]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	47a0      	blx	r4
 8005732:	4603      	mov	r3, r0
 8005734:	e002      	b.n	800573c <u8x8_cad_001+0x80>
    default:
      return 0;
 8005736:	2300      	movs	r3, #0
 8005738:	e000      	b.n	800573c <u8x8_cad_001+0x80>
  }
  return 1;
 800573a:	2301      	movs	r3, #1
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	bd90      	pop	{r4, r7, pc}

08005744 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	72fb      	strb	r3, [r7, #11]
 8005752:	4613      	mov	r3, r2
 8005754:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005756:	7afb      	ldrb	r3, [r7, #11]
 8005758:	2b0f      	cmp	r3, #15
 800575a:	d006      	beq.n	800576a <u8x8_d_st7565_common+0x26>
 800575c:	2b0f      	cmp	r3, #15
 800575e:	dc71      	bgt.n	8005844 <u8x8_d_st7565_common+0x100>
 8005760:	2b0b      	cmp	r3, #11
 8005762:	d050      	beq.n	8005806 <u8x8_d_st7565_common+0xc2>
 8005764:	2b0e      	cmp	r3, #14
 8005766:	d05b      	beq.n	8005820 <u8x8_d_st7565_common+0xdc>
 8005768:	e06c      	b.n	8005844 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff ff34 	bl	80055d8 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	795b      	ldrb	r3, [r3, #5]
 8005774:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 8005776:	7dbb      	ldrb	r3, [r7, #22]
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005782:	7dbb      	ldrb	r3, [r7, #22]
 8005784:	4413      	add	r3, r2
 8005786:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005788:	7dbb      	ldrb	r3, [r7, #22]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	b2db      	uxtb	r3, r3
 800578e:	f043 0310 	orr.w	r3, r3, #16
 8005792:	b2db      	uxtb	r3, r3
 8005794:	4619      	mov	r1, r3
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fee7 	bl	800556a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 800579c:	7dbb      	ldrb	r3, [r7, #22]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	4619      	mov	r1, r3
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7ff fedf 	bl	800556a <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	799b      	ldrb	r3, [r3, #6]
 80057b0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	4619      	mov	r1, r3
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7ff fed6 	bl	800556a <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	791b      	ldrb	r3, [r3, #4]
 80057c2:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80057d0:	7dfa      	ldrb	r2, [r7, #23]
 80057d2:	7dbb      	ldrb	r3, [r7, #22]
 80057d4:	4413      	add	r3, r2
 80057d6:	2b84      	cmp	r3, #132	; 0x84
 80057d8:	d905      	bls.n	80057e6 <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 80057da:	2384      	movs	r3, #132	; 0x84
 80057dc:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80057de:	7dfa      	ldrb	r2, [r7, #23]
 80057e0:	7dbb      	ldrb	r3, [r7, #22]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4619      	mov	r1, r3
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff fee0 	bl	80055b2 <u8x8_cad_SendData>
	arg_int--;
 80057f2:	7abb      	ldrb	r3, [r7, #10]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80057f8:	7abb      	ldrb	r3, [r7, #10]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f3      	bne.n	80057e6 <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff fefa 	bl	80055f8 <u8x8_cad_EndTransfer>
      break;
 8005804:	e020      	b.n	8005848 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005806:	7abb      	ldrb	r3, [r7, #10]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d104      	bne.n	8005816 <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 800580c:	4911      	ldr	r1, [pc, #68]	; (8005854 <u8x8_d_st7565_common+0x110>)
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f7ff ff02 	bl	8005618 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8005814:	e018      	b.n	8005848 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8005816:	4910      	ldr	r1, [pc, #64]	; (8005858 <u8x8_d_st7565_common+0x114>)
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff fefd 	bl	8005618 <u8x8_cad_SendSequence>
      break;
 800581e:	e013      	b.n	8005848 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fed9 	bl	80055d8 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8005826:	2181      	movs	r1, #129	; 0x81
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fe9e 	bl	800556a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 800582e:	7abb      	ldrb	r3, [r7, #10]
 8005830:	089b      	lsrs	r3, r3, #2
 8005832:	b2db      	uxtb	r3, r3
 8005834:	4619      	mov	r1, r3
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff fea9 	bl	800558e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff fedb 	bl	80055f8 <u8x8_cad_EndTransfer>
      break;
 8005842:	e001      	b.n	8005848 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8005848:	2301      	movs	r3, #1
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	0800ab5c 	.word	0x0800ab5c
 8005858:	0800ab64 	.word	0x0800ab64

0800585c <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	460b      	mov	r3, r1
 8005868:	72fb      	strb	r3, [r7, #11]
 800586a:	4613      	mov	r3, r2
 800586c:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 800586e:	7aba      	ldrb	r2, [r7, #10]
 8005870:	7af9      	ldrb	r1, [r7, #11]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7ff ff65 	bl	8005744 <u8x8_d_st7565_common>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d131      	bne.n	80058e4 <u8x8_d_st7565_nhd_c12864+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	2b0d      	cmp	r3, #13
 8005884:	d013      	beq.n	80058ae <u8x8_d_st7565_nhd_c12864+0x52>
 8005886:	2b0d      	cmp	r3, #13
 8005888:	dc2a      	bgt.n	80058e0 <u8x8_d_st7565_nhd_c12864+0x84>
 800588a:	2b09      	cmp	r3, #9
 800588c:	d002      	beq.n	8005894 <u8x8_d_st7565_nhd_c12864+0x38>
 800588e:	2b0a      	cmp	r3, #10
 8005890:	d005      	beq.n	800589e <u8x8_d_st7565_nhd_c12864+0x42>
 8005892:	e025      	b.n	80058e0 <u8x8_d_st7565_nhd_c12864+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8005894:	4916      	ldr	r1, [pc, #88]	; (80058f0 <u8x8_d_st7565_nhd_c12864+0x94>)
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f832 	bl	8005900 <u8x8_d_helper_display_setup_memory>
	break;
 800589c:	e023      	b.n	80058e6 <u8x8_d_st7565_nhd_c12864+0x8a>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f841 	bl	8005926 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 80058a4:	4913      	ldr	r1, [pc, #76]	; (80058f4 <u8x8_d_st7565_nhd_c12864+0x98>)
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff feb6 	bl	8005618 <u8x8_cad_SendSequence>
	break;
 80058ac:	e01b      	b.n	80058e6 <u8x8_d_st7565_nhd_c12864+0x8a>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 80058ae:	7abb      	ldrb	r3, [r7, #10]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <u8x8_d_st7565_nhd_c12864+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 80058b4:	4910      	ldr	r1, [pc, #64]	; (80058f8 <u8x8_d_st7565_nhd_c12864+0x9c>)
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff feae 	bl	8005618 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	7c9a      	ldrb	r2, [r3, #18]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 80058c8:	e00d      	b.n	80058e6 <u8x8_d_st7565_nhd_c12864+0x8a>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 80058ca:	490c      	ldr	r1, [pc, #48]	; (80058fc <u8x8_d_st7565_nhd_c12864+0xa0>)
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff fea3 	bl	8005618 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	7cda      	ldrb	r2, [r3, #19]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 80058de:	e002      	b.n	80058e6 <u8x8_d_st7565_nhd_c12864+0x8a>
      default:
	return 0;		/* msg unknown */
 80058e0:	2300      	movs	r3, #0
 80058e2:	e001      	b.n	80058e8 <u8x8_d_st7565_nhd_c12864+0x8c>
    }
  }
 80058e4:	bf00      	nop
  return 1;
 80058e6:	2301      	movs	r3, #1
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	0800ab7c 	.word	0x0800ab7c
 80058f4:	0800ab94 	.word	0x0800ab94
 80058f8:	0800ab6c 	.word	0x0800ab6c
 80058fc:	0800ab74 	.word	0x0800ab74

08005900 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	7c9a      	ldrb	r2, [r3, #18]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8005926:	b590      	push	{r4, r7, lr}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695c      	ldr	r4, [r3, #20]
 8005932:	2300      	movs	r3, #0
 8005934:	2200      	movs	r2, #0
 8005936:	2128      	movs	r1, #40	; 0x28
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68dc      	ldr	r4, [r3, #12]
 8005940:	2300      	movs	r3, #0
 8005942:	2200      	movs	r2, #0
 8005944:	2114      	movs	r1, #20
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800594a:	2201      	movs	r2, #1
 800594c:	214b      	movs	r1, #75	; 0x4b
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f897 	bl	8005a82 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	791b      	ldrb	r3, [r3, #4]
 800595a:	461a      	mov	r2, r3
 800595c:	2129      	movs	r1, #41	; 0x29
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f88f 	bl	8005a82 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005964:	2200      	movs	r2, #0
 8005966:	214b      	movs	r1, #75	; 0x4b
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f88a 	bl	8005a82 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	791b      	ldrb	r3, [r3, #4]
 8005974:	461a      	mov	r2, r3
 8005976:	2129      	movs	r1, #41	; 0x29
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f882 	bl	8005a82 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800597e:	2201      	movs	r2, #1
 8005980:	214b      	movs	r1, #75	; 0x4b
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f87d 	bl	8005a82 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	795b      	ldrb	r3, [r3, #5]
 800598e:	461a      	mov	r2, r3
 8005990:	2129      	movs	r1, #41	; 0x29
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f875 	bl	8005a82 <u8x8_gpio_call>
}    
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bd90      	pop	{r4, r7, pc}

080059a0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80059a0:	b590      	push	{r4, r7, lr}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	70fb      	strb	r3, [r7, #3]
 80059b2:	460b      	mov	r3, r1
 80059b4:	70bb      	strb	r3, [r7, #2]
 80059b6:	4613      	mov	r3, r2
 80059b8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80059be:	78bb      	ldrb	r3, [r7, #2]
 80059c0:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80059c2:	787b      	ldrb	r3, [r7, #1]
 80059c4:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689c      	ldr	r4, [r3, #8]
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	2201      	movs	r2, #1
 80059d4:	210f      	movs	r1, #15
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	47a0      	blx	r4
 80059da:	4603      	mov	r3, r0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd90      	pop	{r4, r7, pc}

080059e4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80059e4:	b590      	push	{r4, r7, lr}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689c      	ldr	r4, [r3, #8]
 80059f0:	2300      	movs	r3, #0
 80059f2:	2200      	movs	r2, #0
 80059f4:	2109      	movs	r1, #9
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	47a0      	blx	r4
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd90      	pop	{r4, r7, pc}

08005a02 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8005a02:	b590      	push	{r4, r7, lr}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689c      	ldr	r4, [r3, #8]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2200      	movs	r2, #0
 8005a12:	210a      	movs	r1, #10
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	47a0      	blx	r4
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd90      	pop	{r4, r7, pc}

08005a20 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689c      	ldr	r4, [r3, #8]
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	2300      	movs	r3, #0
 8005a34:	210b      	movs	r1, #11
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	47a0      	blx	r4
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd90      	pop	{r4, r7, pc}

08005a42 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8005a42:	b590      	push	{r4, r7, lr}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689c      	ldr	r4, [r3, #8]
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	2300      	movs	r3, #0
 8005a56:	210e      	movs	r1, #14
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	47a0      	blx	r4
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd90      	pop	{r4, r7, pc}

08005a64 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689c      	ldr	r4, [r3, #8]
 8005a70:	2300      	movs	r3, #0
 8005a72:	2200      	movs	r2, #0
 8005a74:	2110      	movs	r1, #16
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	47a0      	blx	r4
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd90      	pop	{r4, r7, pc}

08005a82 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8005a82:	b590      	push	{r4, r7, lr}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695c      	ldr	r4, [r3, #20]
 8005a96:	78ba      	ldrb	r2, [r7, #2]
 8005a98:	78f9      	ldrb	r1, [r7, #3]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	47a0      	blx	r4
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd90      	pop	{r4, r7, pc}

08005aa8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	72fb      	strb	r3, [r7, #11]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr
	...

08005ac8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a11      	ldr	r2, [pc, #68]	; (8005b20 <u8x8_SetupDefaults+0x58>)
 8005ada:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a10      	ldr	r2, [pc, #64]	; (8005b20 <u8x8_SetupDefaults+0x58>)
 8005ae0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a0e      	ldr	r2, [pc, #56]	; (8005b20 <u8x8_SetupDefaults+0x58>)
 8005ae6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <u8x8_SetupDefaults+0x58>)
 8005aec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	22ff      	movs	r2, #255	; 0xff
 8005b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	22ff      	movs	r2, #255	; 0xff
 8005b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	08005aa9 	.word	0x08005aa9

08005b24 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff ffc8 	bl	8005ac8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ff47 	bl	80059e4 <u8x8_SetupMemory>
}
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	4603      	mov	r3, r0
 8005b68:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8005b6a:	f107 020f 	add.w	r2, r7, #15
 8005b6e:	1df9      	adds	r1, r7, #7
 8005b70:	2364      	movs	r3, #100	; 0x64
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2301      	movs	r3, #1
 8005b76:	4804      	ldr	r0, [pc, #16]	; (8005b88 <W25qxx_Spi+0x28>)
 8005b78:	f001 ff63 	bl	8007a42 <HAL_SPI_TransmitReceive>
	return ret;	
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000904 	.word	0x20000904

08005b8c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ba8:	4813      	ldr	r0, [pc, #76]	; (8005bf8 <W25qxx_ReadID+0x6c>)
 8005baa:	f001 f846 	bl	8006c3a <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8005bae:	209f      	movs	r0, #159	; 0x9f
 8005bb0:	f7ff ffd6 	bl	8005b60 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005bb4:	20a5      	movs	r0, #165	; 0xa5
 8005bb6:	f7ff ffd3 	bl	8005b60 <W25qxx_Spi>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005bbe:	20a5      	movs	r0, #165	; 0xa5
 8005bc0:	f7ff ffce 	bl	8005b60 <W25qxx_Spi>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005bc8:	20a5      	movs	r0, #165	; 0xa5
 8005bca:	f7ff ffc9 	bl	8005b60 <W25qxx_Spi>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bd8:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <W25qxx_ReadID+0x6c>)
 8005bda:	f001 f82e 	bl	8006c3a <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	041a      	lsls	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	4313      	orrs	r3, r2
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  return Temp;
 8005bee:	68fb      	ldr	r3, [r7, #12]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40011000 	.word	0x40011000

08005bfc <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005c02:	2200      	movs	r2, #0
 8005c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c08:	4816      	ldr	r0, [pc, #88]	; (8005c64 <W25qxx_ReadUniqID+0x68>)
 8005c0a:	f001 f816 	bl	8006c3a <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8005c0e:	204b      	movs	r0, #75	; 0x4b
 8005c10:	f7ff ffa6 	bl	8005b60 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	71fb      	strb	r3, [r7, #7]
 8005c18:	e005      	b.n	8005c26 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005c1a:	20a5      	movs	r0, #165	; 0xa5
 8005c1c:	f7ff ffa0 	bl	8005b60 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	3301      	adds	r3, #1
 8005c24:	71fb      	strb	r3, [r7, #7]
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d9f6      	bls.n	8005c1a <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	71bb      	strb	r3, [r7, #6]
 8005c30:	e00b      	b.n	8005c4a <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005c32:	79bc      	ldrb	r4, [r7, #6]
 8005c34:	20a5      	movs	r0, #165	; 0xa5
 8005c36:	f7ff ff93 	bl	8005b60 <W25qxx_Spi>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <W25qxx_ReadUniqID+0x6c>)
 8005c40:	4423      	add	r3, r4
 8005c42:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8005c44:	79bb      	ldrb	r3, [r7, #6]
 8005c46:	3301      	adds	r3, #1
 8005c48:	71bb      	strb	r3, [r7, #6]
 8005c4a:	79bb      	ldrb	r3, [r7, #6]
 8005c4c:	2b07      	cmp	r3, #7
 8005c4e:	d9f0      	bls.n	8005c32 <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005c50:	2201      	movs	r2, #1
 8005c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c56:	4803      	ldr	r0, [pc, #12]	; (8005c64 <W25qxx_ReadUniqID+0x68>)
 8005c58:	f000 ffef 	bl	8006c3a <HAL_GPIO_WritePin>
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd90      	pop	{r4, r7, pc}
 8005c64:	40011000 	.word	0x40011000
 8005c68:	20000b24 	.word	0x20000b24

08005c6c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005c70:	2200      	movs	r2, #0
 8005c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c76:	4808      	ldr	r0, [pc, #32]	; (8005c98 <W25qxx_WriteEnable+0x2c>)
 8005c78:	f000 ffdf 	bl	8006c3a <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8005c7c:	2006      	movs	r0, #6
 8005c7e:	f7ff ff6f 	bl	8005b60 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005c82:	2201      	movs	r2, #1
 8005c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c88:	4803      	ldr	r0, [pc, #12]	; (8005c98 <W25qxx_WriteEnable+0x2c>)
 8005c8a:	f000 ffd6 	bl	8006c3a <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8005c8e:	2001      	movs	r0, #1
 8005c90:	f000 fc56 	bl	8006540 <HAL_Delay>
}
 8005c94:	bf00      	nop
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40011000 	.word	0x40011000

08005c9c <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005caa:	2200      	movs	r2, #0
 8005cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cb0:	481c      	ldr	r0, [pc, #112]	; (8005d24 <W25qxx_ReadStatusRegister+0x88>)
 8005cb2:	f000 ffc2 	bl	8006c3a <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d10c      	bne.n	8005cd6 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8005cbc:	2005      	movs	r0, #5
 8005cbe:	f7ff ff4f 	bl	8005b60 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005cc2:	20a5      	movs	r0, #165	; 0xa5
 8005cc4:	f7ff ff4c 	bl	8005b60 <W25qxx_Spi>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8005ccc:	4a16      	ldr	r2, [pc, #88]	; (8005d28 <W25qxx_ReadStatusRegister+0x8c>)
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005cd4:	e01b      	b.n	8005d0e <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d10c      	bne.n	8005cf6 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8005cdc:	2035      	movs	r0, #53	; 0x35
 8005cde:	f7ff ff3f 	bl	8005b60 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005ce2:	20a5      	movs	r0, #165	; 0xa5
 8005ce4:	f7ff ff3c 	bl	8005b60 <W25qxx_Spi>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8005cec:	4a0e      	ldr	r2, [pc, #56]	; (8005d28 <W25qxx_ReadStatusRegister+0x8c>)
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8005cf4:	e00b      	b.n	8005d0e <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8005cf6:	2015      	movs	r0, #21
 8005cf8:	f7ff ff32 	bl	8005b60 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8005cfc:	20a5      	movs	r0, #165	; 0xa5
 8005cfe:	f7ff ff2f 	bl	8005b60 <W25qxx_Spi>
 8005d02:	4603      	mov	r3, r0
 8005d04:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8005d06:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <W25qxx_ReadStatusRegister+0x8c>)
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d14:	4803      	ldr	r0, [pc, #12]	; (8005d24 <W25qxx_ReadStatusRegister+0x88>)
 8005d16:	f000 ff90 	bl	8006c3a <HAL_GPIO_WritePin>
	return status;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40011000 	.word	0x40011000
 8005d28:	20000b24 	.word	0x20000b24

08005d2c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8005d30:	2001      	movs	r0, #1
 8005d32:	f000 fc05 	bl	8006540 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005d36:	2200      	movs	r2, #0
 8005d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d3c:	480f      	ldr	r0, [pc, #60]	; (8005d7c <W25qxx_WaitForWriteEnd+0x50>)
 8005d3e:	f000 ff7c 	bl	8006c3a <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8005d42:	2005      	movs	r0, #5
 8005d44:	f7ff ff0c 	bl	8005b60 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005d48:	20a5      	movs	r0, #165	; 0xa5
 8005d4a:	f7ff ff09 	bl	8005b60 <W25qxx_Spi>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	461a      	mov	r2, r3
 8005d52:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <W25qxx_WaitForWriteEnd+0x54>)
 8005d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8005d58:	2001      	movs	r0, #1
 8005d5a:	f000 fbf1 	bl	8006540 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <W25qxx_WaitForWriteEnd+0x54>)
 8005d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1ed      	bne.n	8005d48 <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d72:	4802      	ldr	r0, [pc, #8]	; (8005d7c <W25qxx_WaitForWriteEnd+0x50>)
 8005d74:	f000 ff61 	bl	8006c3a <HAL_GPIO_WritePin>
}
 8005d78:	bf00      	nop
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40011000 	.word	0x40011000
 8005d80:	20000b24 	.word	0x20000b24

08005d84 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8005d8a:	4b60      	ldr	r3, [pc, #384]	; (8005f0c <W25qxx_Init+0x188>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8005d92:	e002      	b.n	8005d9a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8005d94:	2001      	movs	r0, #1
 8005d96:	f000 fbd3 	bl	8006540 <HAL_Delay>
	while(HAL_GetTick()<100)
 8005d9a:	f000 fbc7 	bl	800652c <HAL_GetTick>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b63      	cmp	r3, #99	; 0x63
 8005da2:	d9f7      	bls.n	8005d94 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005da4:	2201      	movs	r2, #1
 8005da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005daa:	4859      	ldr	r0, [pc, #356]	; (8005f10 <W25qxx_Init+0x18c>)
 8005dac:	f000 ff45 	bl	8006c3a <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8005db0:	2064      	movs	r0, #100	; 0x64
 8005db2:	f000 fbc5 	bl	8006540 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8005db6:	f7ff fee9 	bl	8005b8c <W25qxx_ReadID>
 8005dba:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005dc4:	3b11      	subs	r3, #17
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	d85f      	bhi.n	8005e8a <W25qxx_Init+0x106>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <W25qxx_Init+0x4c>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005e7d 	.word	0x08005e7d
 8005dd4:	08005e6f 	.word	0x08005e6f
 8005dd8:	08005e61 	.word	0x08005e61
 8005ddc:	08005e53 	.word	0x08005e53
 8005de0:	08005e45 	.word	0x08005e45
 8005de4:	08005e37 	.word	0x08005e37
 8005de8:	08005e29 	.word	0x08005e29
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	08005e09 	.word	0x08005e09
 8005df4:	08005df9 	.word	0x08005df9
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8005df8:	4b44      	ldr	r3, [pc, #272]	; (8005f0c <W25qxx_Init+0x188>)
 8005dfa:	220a      	movs	r2, #10
 8005dfc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8005dfe:	4b43      	ldr	r3, [pc, #268]	; (8005f0c <W25qxx_Init+0x188>)
 8005e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e04:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8005e06:	e046      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8005e08:	4b40      	ldr	r3, [pc, #256]	; (8005f0c <W25qxx_Init+0x188>)
 8005e0a:	2209      	movs	r2, #9
 8005e0c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8005e0e:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <W25qxx_Init+0x188>)
 8005e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e14:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8005e16:	e03e      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8005e18:	4b3c      	ldr	r3, [pc, #240]	; (8005f0c <W25qxx_Init+0x188>)
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8005e1e:	4b3b      	ldr	r3, [pc, #236]	; (8005f0c <W25qxx_Init+0x188>)
 8005e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e24:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8005e26:	e036      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8005e28:	4b38      	ldr	r3, [pc, #224]	; (8005f0c <W25qxx_Init+0x188>)
 8005e2a:	2207      	movs	r2, #7
 8005e2c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8005e2e:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <W25qxx_Init+0x188>)
 8005e30:	2280      	movs	r2, #128	; 0x80
 8005e32:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8005e34:	e02f      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8005e36:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <W25qxx_Init+0x188>)
 8005e38:	2206      	movs	r2, #6
 8005e3a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8005e3c:	4b33      	ldr	r3, [pc, #204]	; (8005f0c <W25qxx_Init+0x188>)
 8005e3e:	2240      	movs	r2, #64	; 0x40
 8005e40:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8005e42:	e028      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8005e44:	4b31      	ldr	r3, [pc, #196]	; (8005f0c <W25qxx_Init+0x188>)
 8005e46:	2205      	movs	r2, #5
 8005e48:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8005e4a:	4b30      	ldr	r3, [pc, #192]	; (8005f0c <W25qxx_Init+0x188>)
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8005e50:	e021      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8005e52:	4b2e      	ldr	r3, [pc, #184]	; (8005f0c <W25qxx_Init+0x188>)
 8005e54:	2204      	movs	r2, #4
 8005e56:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8005e58:	4b2c      	ldr	r3, [pc, #176]	; (8005f0c <W25qxx_Init+0x188>)
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8005e5e:	e01a      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8005e60:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <W25qxx_Init+0x188>)
 8005e62:	2203      	movs	r2, #3
 8005e64:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8005e66:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <W25qxx_Init+0x188>)
 8005e68:	2208      	movs	r2, #8
 8005e6a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8005e6c:	e013      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8005e6e:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <W25qxx_Init+0x188>)
 8005e70:	2202      	movs	r2, #2
 8005e72:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <W25qxx_Init+0x188>)
 8005e76:	2204      	movs	r2, #4
 8005e78:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8005e7a:	e00c      	b.n	8005e96 <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8005e7c:	4b23      	ldr	r3, [pc, #140]	; (8005f0c <W25qxx_Init+0x188>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8005e82:	4b22      	ldr	r3, [pc, #136]	; (8005f0c <W25qxx_Init+0x188>)
 8005e84:	2202      	movs	r2, #2
 8005e86:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8005e88:	e005      	b.n	8005e96 <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8005e8a:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <W25qxx_Init+0x188>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e036      	b.n	8005f04 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <W25qxx_Init+0x188>)
 8005e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e9c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8005e9e:	4b1b      	ldr	r3, [pc, #108]	; (8005f0c <W25qxx_Init+0x188>)
 8005ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ea4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8005ea6:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <W25qxx_Init+0x188>)
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	4a17      	ldr	r2, [pc, #92]	; (8005f0c <W25qxx_Init+0x188>)
 8005eae:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8005eb0:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <W25qxx_Init+0x188>)
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <W25qxx_Init+0x188>)
 8005eb6:	6912      	ldr	r2, [r2, #16]
 8005eb8:	fb02 f303 	mul.w	r3, r2, r3
 8005ebc:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <W25qxx_Init+0x188>)
 8005ebe:	8952      	ldrh	r2, [r2, #10]
 8005ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec4:	4a11      	ldr	r2, [pc, #68]	; (8005f0c <W25qxx_Init+0x188>)
 8005ec6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8005ec8:	4b10      	ldr	r3, [pc, #64]	; (8005f0c <W25qxx_Init+0x188>)
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	4a0f      	ldr	r2, [pc, #60]	; (8005f0c <W25qxx_Init+0x188>)
 8005ed0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <W25qxx_Init+0x188>)
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <W25qxx_Init+0x188>)
 8005ed8:	6912      	ldr	r2, [r2, #16]
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	0a9b      	lsrs	r3, r3, #10
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <W25qxx_Init+0x188>)
 8005ee2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8005ee4:	f7ff fe8a 	bl	8005bfc <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f7ff fed7 	bl	8005c9c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8005eee:	2002      	movs	r0, #2
 8005ef0:	f7ff fed4 	bl	8005c9c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8005ef4:	2003      	movs	r0, #3
 8005ef6:	f7ff fed1 	bl	8005c9c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8005efa:	4b04      	ldr	r3, [pc, #16]	; (8005f0c <W25qxx_Init+0x188>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8005f02:	2301      	movs	r3, #1
}	
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000b24 	.word	0x20000b24
 8005f10:	40011000 	.word	0x40011000

08005f14 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;	
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8005f1c:	e002      	b.n	8005f24 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f000 fb0e 	bl	8006540 <HAL_Delay>
	while(w25qxx.Lock==1)
 8005f24:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <W25qxx_EraseSector+0xa4>)
 8005f26:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d0f7      	beq.n	8005f1e <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 8005f2e:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <W25qxx_EraseSector+0xa4>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 8005f36:	f7ff fef9 	bl	8005d2c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8005f3a:	4b1f      	ldr	r3, [pc, #124]	; (8005fb8 <W25qxx_EraseSector+0xa4>)
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	fb02 f303 	mul.w	r3, r2, r3
 8005f44:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8005f46:	f7ff fe91 	bl	8005c6c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f50:	481a      	ldr	r0, [pc, #104]	; (8005fbc <W25qxx_EraseSector+0xa8>)
 8005f52:	f000 fe72 	bl	8006c3a <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 8005f56:	2020      	movs	r0, #32
 8005f58:	f7ff fe02 	bl	8005b60 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <W25qxx_EraseSector+0xa4>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d905      	bls.n	8005f70 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	0e1b      	lsrs	r3, r3, #24
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff fdf8 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fdf2 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fdec 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fde7 	bl	8005b60 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8005f92:	2201      	movs	r2, #1
 8005f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f98:	4808      	ldr	r0, [pc, #32]	; (8005fbc <W25qxx_EraseSector+0xa8>)
 8005f9a:	f000 fe4e 	bl	8006c3a <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8005f9e:	f7ff fec5 	bl	8005d2c <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	f000 facc 	bl	8006540 <HAL_Delay>
	w25qxx.Lock=0;
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <W25qxx_EraseSector+0xa4>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20000b24 	.word	0x20000b24
 8005fbc:	40011000 	.word	0x40011000

08005fc0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <W25qxx_SectorToPage+0x24>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	4a04      	ldr	r2, [pc, #16]	; (8005fe4 <W25qxx_SectorToPage+0x24>)
 8005fd4:	8952      	ldrh	r2, [r2, #10]
 8005fd6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr
 8005fe4:	20000b24 	.word	0x20000b24

08005fe8 <W25qxx_IsEmptySector>:
	w25qxx.Lock=0;
	return false;
}
//###################################################################################################################
bool 	W25qxx_IsEmptySector(uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_SectorSize)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b090      	sub	sp, #64	; 0x40
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8005ff4:	e002      	b.n	8005ffc <W25qxx_IsEmptySector+0x14>
	W25qxx_Delay(1);
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f000 faa2 	bl	8006540 <HAL_Delay>
	while(w25qxx.Lock==1)
 8005ffc:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 8005ffe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006002:	2b01      	cmp	r3, #1
 8006004:	d0f7      	beq.n	8005ff6 <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock=1;	
 8006006:	4b68      	ldr	r3, [pc, #416]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToCheck_up_to_SectorSize==0))
 800600e:	4b66      	ldr	r3, [pc, #408]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d802      	bhi.n	800601e <W25qxx_IsEmptySector+0x36>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d102      	bne.n	8006024 <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize=w25qxx.SectorSize;
 800601e:	4b62      	ldr	r3, [pc, #392]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006028:	e054      	b.n	80060d4 <W25qxx_IsEmptySector+0xec>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800602a:	2200      	movs	r2, #0
 800602c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006030:	485e      	ldr	r0, [pc, #376]	; (80061ac <W25qxx_IsEmptySector+0x1c4>)
 8006032:	f000 fe02 	bl	8006c3a <HAL_GPIO_WritePin>
		WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 8006036:	4b5c      	ldr	r3, [pc, #368]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006042:	4413      	add	r3, r2
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8006046:	200b      	movs	r0, #11
 8006048:	f7ff fd8a 	bl	8005b60 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 800604c:	4b56      	ldr	r3, [pc, #344]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d905      	bls.n	8006060 <W25qxx_IsEmptySector+0x78>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8006054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006056:	0e1b      	lsrs	r3, r3, #24
 8006058:	b2db      	uxtb	r3, r3
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fd80 	bl	8005b60 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006062:	0c1b      	lsrs	r3, r3, #16
 8006064:	b2db      	uxtb	r3, r3
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fd7a 	bl	8005b60 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	b2db      	uxtb	r3, r3
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff fd74 	bl	8005b60 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fd6f 	bl	8005b60 <W25qxx_Spi>
		W25qxx_Spi(0);
 8006082:	2000      	movs	r0, #0
 8006084:	f7ff fd6c 	bl	8005b60 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 8006088:	f107 0114 	add.w	r1, r7, #20
 800608c:	2364      	movs	r3, #100	; 0x64
 800608e:	2220      	movs	r2, #32
 8006090:	4847      	ldr	r0, [pc, #284]	; (80061b0 <W25qxx_IsEmptySector+0x1c8>)
 8006092:	f001 fbc5 	bl	8007820 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8006096:	2201      	movs	r2, #1
 8006098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800609c:	4843      	ldr	r0, [pc, #268]	; (80061ac <W25qxx_IsEmptySector+0x1c4>)
 800609e:	f000 fdcc 	bl	8006c3a <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80060a8:	e00d      	b.n	80060c6 <W25qxx_IsEmptySector+0xde>
		{
			if(pBuffer[x]!=0xFF)
 80060aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80060b2:	4413      	add	r3, r2
 80060b4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80060b8:	2bff      	cmp	r3, #255	; 0xff
 80060ba:	d169      	bne.n	8006190 <W25qxx_IsEmptySector+0x1a8>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80060bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060c0:	3301      	adds	r3, #1
 80060c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80060c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060ca:	2b1f      	cmp	r3, #31
 80060cc:	d9ed      	bls.n	80060aa <W25qxx_IsEmptySector+0xc2>
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 80060ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d0:	3320      	adds	r3, #32
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d4:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060da:	429a      	cmp	r2, r3
 80060dc:	d3a5      	bcc.n	800602a <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.SectorSize+OffsetInByte)%sizeof(pBuffer)!=0)
 80060de:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4413      	add	r3, r2
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d04a      	beq.n	8006184 <W25qxx_IsEmptySector+0x19c>
	{
		i-=sizeof(pBuffer);
 80060ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f0:	3b20      	subs	r3, #32
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.SectorSize; i++)
 80060f4:	e041      	b.n	800617a <W25qxx_IsEmptySector+0x192>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80060f6:	2200      	movs	r2, #0
 80060f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060fc:	482b      	ldr	r0, [pc, #172]	; (80061ac <W25qxx_IsEmptySector+0x1c4>)
 80060fe:	f000 fd9c 	bl	8006c3a <HAL_GPIO_WritePin>
			WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 8006102:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800610e:	4413      	add	r3, r2
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8006112:	200b      	movs	r0, #11
 8006114:	f7ff fd24 	bl	8005b60 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 8006118:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b08      	cmp	r3, #8
 800611e:	d905      	bls.n	800612c <W25qxx_IsEmptySector+0x144>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8006120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006122:	0e1b      	lsrs	r3, r3, #24
 8006124:	b2db      	uxtb	r3, r3
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fd1a 	bl	8005b60 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	b2db      	uxtb	r3, r3
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fd14 	bl	8005b60 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613a:	0a1b      	lsrs	r3, r3, #8
 800613c:	b2db      	uxtb	r3, r3
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fd0e 	bl	8005b60 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	b2db      	uxtb	r3, r3
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fd09 	bl	8005b60 <W25qxx_Spi>
			W25qxx_Spi(0);
 800614e:	2000      	movs	r0, #0
 8006150:	f7ff fd06 	bl	8005b60 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 8006154:	f107 0114 	add.w	r1, r7, #20
 8006158:	2364      	movs	r3, #100	; 0x64
 800615a:	2201      	movs	r2, #1
 800615c:	4814      	ldr	r0, [pc, #80]	; (80061b0 <W25qxx_IsEmptySector+0x1c8>)
 800615e:	f001 fb5f 	bl	8007820 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8006162:	2201      	movs	r2, #1
 8006164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006168:	4810      	ldr	r0, [pc, #64]	; (80061ac <W25qxx_IsEmptySector+0x1c4>)
 800616a:	f000 fd66 	bl	8006c3a <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 800616e:	7d3b      	ldrb	r3, [r7, #20]
 8006170:	2bff      	cmp	r3, #255	; 0xff
 8006172:	d10f      	bne.n	8006194 <W25qxx_IsEmptySector+0x1ac>
		for( ; i<w25qxx.SectorSize; i++)
 8006174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006176:	3301      	adds	r3, #1
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006180:	429a      	cmp	r2, r3
 8006182:	d3b8      	bcc.n	80060f6 <W25qxx_IsEmptySector+0x10e>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8006184:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 800618c:	2301      	movs	r3, #1
 800618e:	e007      	b.n	80061a0 <W25qxx_IsEmptySector+0x1b8>
				goto NOT_EMPTY;		
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <W25qxx_IsEmptySector+0x1ae>
				goto NOT_EMPTY;
 8006194:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8006196:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <W25qxx_IsEmptySector+0x1c0>)
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3740      	adds	r7, #64	; 0x40
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000b24 	.word	0x20000b24
 80061ac:	40011000 	.word	0x40011000
 80061b0:	20000904 	.word	0x20000904

080061b4 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80061c2:	e002      	b.n	80061ca <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80061c4:	2001      	movs	r0, #1
 80061c6:	f000 f9bb 	bl	8006540 <HAL_Delay>
	while(w25qxx.Lock==1)
 80061ca:	4b38      	ldr	r3, [pc, #224]	; (80062ac <W25qxx_WritePage+0xf8>)
 80061cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d0f7      	beq.n	80061c4 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 80061d4:	4b35      	ldr	r3, [pc, #212]	; (80062ac <W25qxx_WritePage+0xf8>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	4a32      	ldr	r2, [pc, #200]	; (80062ac <W25qxx_WritePage+0xf8>)
 80061e4:	8952      	ldrh	r2, [r2, #10]
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d802      	bhi.n	80061f0 <W25qxx_WritePage+0x3c>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 80061f0:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <W25qxx_WritePage+0xf8>)
 80061f2:	895b      	ldrh	r3, [r3, #10]
 80061f4:	461a      	mov	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	4413      	add	r3, r2
 8006202:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <W25qxx_WritePage+0xf8>)
 8006204:	8952      	ldrh	r2, [r2, #10]
 8006206:	4293      	cmp	r3, r2
 8006208:	d905      	bls.n	8006216 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800620a:	4b28      	ldr	r3, [pc, #160]	; (80062ac <W25qxx_WritePage+0xf8>)
 800620c:	895b      	ldrh	r3, [r3, #10]
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 8006216:	f7ff fd89 	bl	8005d2c <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 800621a:	f7ff fd27 	bl	8005c6c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800621e:	2200      	movs	r2, #0
 8006220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006224:	4822      	ldr	r0, [pc, #136]	; (80062b0 <W25qxx_WritePage+0xfc>)
 8006226:	f000 fd08 	bl	8006c3a <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 800622a:	2002      	movs	r0, #2
 800622c:	f7ff fc98 	bl	8005b60 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8006230:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <W25qxx_WritePage+0xf8>)
 8006232:	895b      	ldrh	r3, [r3, #10]
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	fb03 f302 	mul.w	r3, r3, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4413      	add	r3, r2
 8006240:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8006242:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <W25qxx_WritePage+0xf8>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b08      	cmp	r3, #8
 8006248:	d905      	bls.n	8006256 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	0e1b      	lsrs	r3, r3, #24
 800624e:	b2db      	uxtb	r3, r3
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fc85 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	0c1b      	lsrs	r3, r3, #16
 800625a:	b2db      	uxtb	r3, r3
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff fc7f 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	0a1b      	lsrs	r3, r3, #8
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fc79 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fc74 	bl	8005b60 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	b29a      	uxth	r2, r3
 800627c:	2364      	movs	r3, #100	; 0x64
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	480c      	ldr	r0, [pc, #48]	; (80062b4 <W25qxx_WritePage+0x100>)
 8006282:	f001 f991 	bl	80075a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006286:	2201      	movs	r2, #1
 8006288:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800628c:	4808      	ldr	r0, [pc, #32]	; (80062b0 <W25qxx_WritePage+0xfc>)
 800628e:	f000 fcd4 	bl	8006c3a <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8006292:	f7ff fd4b 	bl	8005d2c <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8006296:	2001      	movs	r0, #1
 8006298:	f000 f952 	bl	8006540 <HAL_Delay>
	w25qxx.Lock=0;
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <W25qxx_WritePage+0xf8>)
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000b24 	.word	0x20000b24
 80062b0:	40011000 	.word	0x40011000
 80062b4:	20000904 	.word	0x20000904

080062b8 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 80062c6:	4b2c      	ldr	r3, [pc, #176]	; (8006378 <W25qxx_WriteSector+0xc0>)
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d802      	bhi.n	80062d6 <W25qxx_WriteSector+0x1e>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 80062d6:	4b28      	ldr	r3, [pc, #160]	; (8006378 <W25qxx_WriteSector+0xc0>)
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 80062dc:	4b26      	ldr	r3, [pc, #152]	; (8006378 <W25qxx_WriteSector+0xc0>)
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d243      	bcs.n	800636e <W25qxx_WriteSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	441a      	add	r2, r3
 80062ec:	4b22      	ldr	r3, [pc, #136]	; (8006378 <W25qxx_WriteSector+0xc0>)
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d905      	bls.n	8006300 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 80062f4:	4b20      	ldr	r3, [pc, #128]	; (8006378 <W25qxx_WriteSector+0xc0>)
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	e001      	b.n	8006304 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8006304:	68b8      	ldr	r0, [r7, #8]
 8006306:	f7ff fe5b 	bl	8005fc0 <W25qxx_SectorToPage>
 800630a:	4602      	mov	r2, r0
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <W25qxx_WriteSector+0xc0>)
 800630e:	895b      	ldrh	r3, [r3, #10]
 8006310:	4619      	mov	r1, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	fbb3 f3f1 	udiv	r3, r3, r1
 8006318:	4413      	add	r3, r2
 800631a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 800631c:	4b16      	ldr	r3, [pc, #88]	; (8006378 <W25qxx_WriteSector+0xc0>)
 800631e:	895b      	ldrh	r3, [r3, #10]
 8006320:	461a      	mov	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	fbb3 f1f2 	udiv	r1, r3, r2
 8006328:	fb02 f201 	mul.w	r2, r2, r1
 800632c:	1a9b      	subs	r3, r3, r2
 800632e:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	69f9      	ldr	r1, [r7, #28]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff ff3c 	bl	80061b4 <W25qxx_WritePage>
		StartPage++;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <W25qxx_WriteSector+0xc0>)
 8006344:	895b      	ldrh	r3, [r3, #10]
 8006346:	461a      	mov	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	1a9a      	subs	r2, r3, r2
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	4413      	add	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <W25qxx_WriteSector+0xc0>)
 8006354:	895b      	ldrh	r3, [r3, #10]
 8006356:	461a      	mov	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	dce1      	bgt.n	8006330 <W25qxx_WriteSector+0x78>
 800636c:	e000      	b.n	8006370 <W25qxx_WriteSector+0xb8>
		return;
 800636e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000b24 	.word	0x20000b24

0800637c <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8006388:	e002      	b.n	8006390 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 800638a:	2001      	movs	r0, #1
 800638c:	f000 f8d8 	bl	8006540 <HAL_Delay>
	while(w25qxx.Lock==1)
 8006390:	4b24      	ldr	r3, [pc, #144]	; (8006424 <W25qxx_ReadBytes+0xa8>)
 8006392:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006396:	2b01      	cmp	r3, #1
 8006398:	d0f7      	beq.n	800638a <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 800639a:	4b22      	ldr	r3, [pc, #136]	; (8006424 <W25qxx_ReadBytes+0xa8>)
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80063a2:	2200      	movs	r2, #0
 80063a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063a8:	481f      	ldr	r0, [pc, #124]	; (8006428 <W25qxx_ReadBytes+0xac>)
 80063aa:	f000 fc46 	bl	8006c3a <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 80063ae:	200b      	movs	r0, #11
 80063b0:	f7ff fbd6 	bl	8005b60 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80063b4:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <W25qxx_ReadBytes+0xa8>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d905      	bls.n	80063c8 <W25qxx_ReadBytes+0x4c>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	0e1b      	lsrs	r3, r3, #24
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fbcc 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff fbc6 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	0a1b      	lsrs	r3, r3, #8
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fbc0 	bl	8005b60 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fbbb 	bl	8005b60 <W25qxx_Spi>
	W25qxx_Spi(0);
 80063ea:	2000      	movs	r0, #0
 80063ec:	f7ff fbb8 	bl	8005b60 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80063f8:	68f9      	ldr	r1, [r7, #12]
 80063fa:	480c      	ldr	r0, [pc, #48]	; (800642c <W25qxx_ReadBytes+0xb0>)
 80063fc:	f001 fa10 	bl	8007820 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006400:	2201      	movs	r2, #1
 8006402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006406:	4808      	ldr	r0, [pc, #32]	; (8006428 <W25qxx_ReadBytes+0xac>)
 8006408:	f000 fc17 	bl	8006c3a <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 800640c:	2001      	movs	r0, #1
 800640e:	f000 f897 	bl	8006540 <HAL_Delay>
	w25qxx.Lock=0;
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <W25qxx_ReadBytes+0xa8>)
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000b24 	.word	0x20000b24
 8006428:	40011000 	.word	0x40011000
 800642c:	20000904 	.word	0x20000904

08006430 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006430:	480c      	ldr	r0, [pc, #48]	; (8006464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006432:	490d      	ldr	r1, [pc, #52]	; (8006468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006434:	4a0d      	ldr	r2, [pc, #52]	; (800646c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006438:	e002      	b.n	8006440 <LoopCopyDataInit>

0800643a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800643a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800643c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800643e:	3304      	adds	r3, #4

08006440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006444:	d3f9      	bcc.n	800643a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006446:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006448:	4c0a      	ldr	r4, [pc, #40]	; (8006474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800644a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800644c:	e001      	b.n	8006452 <LoopFillZerobss>

0800644e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800644e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006450:	3204      	adds	r2, #4

08006452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006454:	d3fb      	bcc.n	800644e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006456:	f7fd fc5d 	bl	8003d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800645a:	f002 f9dd 	bl	8008818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800645e:	f7fb fa6b 	bl	8001938 <main>
  bx lr
 8006462:	4770      	bx	lr
  ldr r0, =_sdata
 8006464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006468:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800646c:	0800abc0 	.word	0x0800abc0
  ldr r2, =_sbss
 8006470:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8006474:	20000b50 	.word	0x20000b50

08006478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006478:	e7fe      	b.n	8006478 <ADC1_2_IRQHandler>
	...

0800647c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006480:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <HAL_Init+0x28>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <HAL_Init+0x28>)
 8006486:	f043 0310 	orr.w	r3, r3, #16
 800648a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800648c:	2003      	movs	r0, #3
 800648e:	f000 f947 	bl	8006720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006492:	200f      	movs	r0, #15
 8006494:	f000 f808 	bl	80064a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006498:	f7fd fb06 	bl	8003aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40022000 	.word	0x40022000

080064a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064b0:	4b12      	ldr	r3, [pc, #72]	; (80064fc <HAL_InitTick+0x54>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b12      	ldr	r3, [pc, #72]	; (8006500 <HAL_InitTick+0x58>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	4619      	mov	r1, r3
 80064ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064be:	fbb3 f3f1 	udiv	r3, r3, r1
 80064c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f95f 	bl	800678a <HAL_SYSTICK_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e00e      	b.n	80064f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b0f      	cmp	r3, #15
 80064da:	d80a      	bhi.n	80064f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064dc:	2200      	movs	r2, #0
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	f000 f927 	bl	8006736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064e8:	4a06      	ldr	r2, [pc, #24]	; (8006504 <HAL_InitTick+0x5c>)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	e000      	b.n	80064f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	2000003c 	.word	0x2000003c
 8006500:	20000044 	.word	0x20000044
 8006504:	20000040 	.word	0x20000040

08006508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_IncTick+0x1c>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_IncTick+0x20>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4413      	add	r3, r2
 8006518:	4a03      	ldr	r2, [pc, #12]	; (8006528 <HAL_IncTick+0x20>)
 800651a:	6013      	str	r3, [r2, #0]
}
 800651c:	bf00      	nop
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr
 8006524:	20000044 	.word	0x20000044
 8006528:	20000b4c 	.word	0x20000b4c

0800652c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  return uwTick;
 8006530:	4b02      	ldr	r3, [pc, #8]	; (800653c <HAL_GetTick+0x10>)
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr
 800653c:	20000b4c 	.word	0x20000b4c

08006540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006548:	f7ff fff0 	bl	800652c <HAL_GetTick>
 800654c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d005      	beq.n	8006566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <HAL_Delay+0x44>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006566:	bf00      	nop
 8006568:	f7ff ffe0 	bl	800652c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	429a      	cmp	r2, r3
 8006576:	d8f7      	bhi.n	8006568 <HAL_Delay+0x28>
  {
  }
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000044 	.word	0x20000044

08006588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <__NVIC_SetPriorityGrouping+0x44>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065a4:	4013      	ands	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065ba:	4a04      	ldr	r2, [pc, #16]	; (80065cc <__NVIC_SetPriorityGrouping+0x44>)
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	60d3      	str	r3, [r2, #12]
}
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	e000ed00 	.word	0xe000ed00

080065d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065d4:	4b04      	ldr	r3, [pc, #16]	; (80065e8 <__NVIC_GetPriorityGrouping+0x18>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	0a1b      	lsrs	r3, r3, #8
 80065da:	f003 0307 	and.w	r3, r3, #7
}
 80065de:	4618      	mov	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	e000ed00 	.word	0xe000ed00

080065ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	db0b      	blt.n	8006616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065fe:	79fb      	ldrb	r3, [r7, #7]
 8006600:	f003 021f 	and.w	r2, r3, #31
 8006604:	4906      	ldr	r1, [pc, #24]	; (8006620 <__NVIC_EnableIRQ+0x34>)
 8006606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2001      	movs	r0, #1
 800660e:	fa00 f202 	lsl.w	r2, r0, r2
 8006612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr
 8006620:	e000e100 	.word	0xe000e100

08006624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	6039      	str	r1, [r7, #0]
 800662e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006634:	2b00      	cmp	r3, #0
 8006636:	db0a      	blt.n	800664e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	490c      	ldr	r1, [pc, #48]	; (8006670 <__NVIC_SetPriority+0x4c>)
 800663e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006642:	0112      	lsls	r2, r2, #4
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	440b      	add	r3, r1
 8006648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800664c:	e00a      	b.n	8006664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4908      	ldr	r1, [pc, #32]	; (8006674 <__NVIC_SetPriority+0x50>)
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	3b04      	subs	r3, #4
 800665c:	0112      	lsls	r2, r2, #4
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	440b      	add	r3, r1
 8006662:	761a      	strb	r2, [r3, #24]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	e000e100 	.word	0xe000e100
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006678:	b480      	push	{r7}
 800667a:	b089      	sub	sp, #36	; 0x24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f1c3 0307 	rsb	r3, r3, #7
 8006692:	2b04      	cmp	r3, #4
 8006694:	bf28      	it	cs
 8006696:	2304      	movcs	r3, #4
 8006698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	3304      	adds	r3, #4
 800669e:	2b06      	cmp	r3, #6
 80066a0:	d902      	bls.n	80066a8 <NVIC_EncodePriority+0x30>
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	3b03      	subs	r3, #3
 80066a6:	e000      	b.n	80066aa <NVIC_EncodePriority+0x32>
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43da      	mvns	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	401a      	ands	r2, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066c0:	f04f 31ff 	mov.w	r1, #4294967295
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ca:	43d9      	mvns	r1, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066d0:	4313      	orrs	r3, r2
         );
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3724      	adds	r7, #36	; 0x24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066ec:	d301      	bcc.n	80066f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066ee:	2301      	movs	r3, #1
 80066f0:	e00f      	b.n	8006712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066f2:	4a0a      	ldr	r2, [pc, #40]	; (800671c <SysTick_Config+0x40>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066fa:	210f      	movs	r1, #15
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	f7ff ff90 	bl	8006624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <SysTick_Config+0x40>)
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800670a:	4b04      	ldr	r3, [pc, #16]	; (800671c <SysTick_Config+0x40>)
 800670c:	2207      	movs	r2, #7
 800670e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	e000e010 	.word	0xe000e010

08006720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff2d 	bl	8006588 <__NVIC_SetPriorityGrouping>
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006736:	b580      	push	{r7, lr}
 8006738:	b086      	sub	sp, #24
 800673a:	af00      	add	r7, sp, #0
 800673c:	4603      	mov	r3, r0
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006748:	f7ff ff42 	bl	80065d0 <__NVIC_GetPriorityGrouping>
 800674c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	6978      	ldr	r0, [r7, #20]
 8006754:	f7ff ff90 	bl	8006678 <NVIC_EncodePriority>
 8006758:	4602      	mov	r2, r0
 800675a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff ff5f 	bl	8006624 <__NVIC_SetPriority>
}
 8006766:	bf00      	nop
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	4603      	mov	r3, r0
 8006776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff ff35 	bl	80065ec <__NVIC_EnableIRQ>
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ffa2 	bl	80066dc <SysTick_Config>
 8006798:	4603      	mov	r3, r0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d008      	beq.n	80067ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2204      	movs	r2, #4
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e020      	b.n	800680c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 020e 	bic.w	r2, r2, #14
 80067d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f2:	2101      	movs	r1, #1
 80067f4:	fa01 f202 	lsl.w	r2, r1, r2
 80067f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr
	...

08006818 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800682a:	2b02      	cmp	r3, #2
 800682c:	d005      	beq.n	800683a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2204      	movs	r2, #4
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
 8006838:	e051      	b.n	80068de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 020e 	bic.w	r2, r2, #14
 8006848:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0201 	bic.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a22      	ldr	r2, [pc, #136]	; (80068e8 <HAL_DMA_Abort_IT+0xd0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d029      	beq.n	80068b8 <HAL_DMA_Abort_IT+0xa0>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a20      	ldr	r2, [pc, #128]	; (80068ec <HAL_DMA_Abort_IT+0xd4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d022      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x9c>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1f      	ldr	r2, [pc, #124]	; (80068f0 <HAL_DMA_Abort_IT+0xd8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d01a      	beq.n	80068ae <HAL_DMA_Abort_IT+0x96>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1d      	ldr	r2, [pc, #116]	; (80068f4 <HAL_DMA_Abort_IT+0xdc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d012      	beq.n	80068a8 <HAL_DMA_Abort_IT+0x90>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1c      	ldr	r2, [pc, #112]	; (80068f8 <HAL_DMA_Abort_IT+0xe0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00a      	beq.n	80068a2 <HAL_DMA_Abort_IT+0x8a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a1a      	ldr	r2, [pc, #104]	; (80068fc <HAL_DMA_Abort_IT+0xe4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d102      	bne.n	800689c <HAL_DMA_Abort_IT+0x84>
 8006896:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800689a:	e00e      	b.n	80068ba <HAL_DMA_Abort_IT+0xa2>
 800689c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068a0:	e00b      	b.n	80068ba <HAL_DMA_Abort_IT+0xa2>
 80068a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068a6:	e008      	b.n	80068ba <HAL_DMA_Abort_IT+0xa2>
 80068a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ac:	e005      	b.n	80068ba <HAL_DMA_Abort_IT+0xa2>
 80068ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b2:	e002      	b.n	80068ba <HAL_DMA_Abort_IT+0xa2>
 80068b4:	2310      	movs	r3, #16
 80068b6:	e000      	b.n	80068ba <HAL_DMA_Abort_IT+0xa2>
 80068b8:	2301      	movs	r3, #1
 80068ba:	4a11      	ldr	r2, [pc, #68]	; (8006900 <HAL_DMA_Abort_IT+0xe8>)
 80068bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
    } 
  }
  return status;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40020008 	.word	0x40020008
 80068ec:	4002001c 	.word	0x4002001c
 80068f0:	40020030 	.word	0x40020030
 80068f4:	40020044 	.word	0x40020044
 80068f8:	40020058 	.word	0x40020058
 80068fc:	4002006c 	.word	0x4002006c
 8006900:	40020000 	.word	0x40020000

08006904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006904:	b480      	push	{r7}
 8006906:	b08b      	sub	sp, #44	; 0x2c
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006912:	2300      	movs	r3, #0
 8006914:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006916:	e169      	b.n	8006bec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006918:	2201      	movs	r2, #1
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	4013      	ands	r3, r2
 800692a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	429a      	cmp	r2, r3
 8006932:	f040 8158 	bne.w	8006be6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4a9a      	ldr	r2, [pc, #616]	; (8006ba4 <HAL_GPIO_Init+0x2a0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d05e      	beq.n	80069fe <HAL_GPIO_Init+0xfa>
 8006940:	4a98      	ldr	r2, [pc, #608]	; (8006ba4 <HAL_GPIO_Init+0x2a0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d875      	bhi.n	8006a32 <HAL_GPIO_Init+0x12e>
 8006946:	4a98      	ldr	r2, [pc, #608]	; (8006ba8 <HAL_GPIO_Init+0x2a4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d058      	beq.n	80069fe <HAL_GPIO_Init+0xfa>
 800694c:	4a96      	ldr	r2, [pc, #600]	; (8006ba8 <HAL_GPIO_Init+0x2a4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d86f      	bhi.n	8006a32 <HAL_GPIO_Init+0x12e>
 8006952:	4a96      	ldr	r2, [pc, #600]	; (8006bac <HAL_GPIO_Init+0x2a8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d052      	beq.n	80069fe <HAL_GPIO_Init+0xfa>
 8006958:	4a94      	ldr	r2, [pc, #592]	; (8006bac <HAL_GPIO_Init+0x2a8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d869      	bhi.n	8006a32 <HAL_GPIO_Init+0x12e>
 800695e:	4a94      	ldr	r2, [pc, #592]	; (8006bb0 <HAL_GPIO_Init+0x2ac>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d04c      	beq.n	80069fe <HAL_GPIO_Init+0xfa>
 8006964:	4a92      	ldr	r2, [pc, #584]	; (8006bb0 <HAL_GPIO_Init+0x2ac>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d863      	bhi.n	8006a32 <HAL_GPIO_Init+0x12e>
 800696a:	4a92      	ldr	r2, [pc, #584]	; (8006bb4 <HAL_GPIO_Init+0x2b0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d046      	beq.n	80069fe <HAL_GPIO_Init+0xfa>
 8006970:	4a90      	ldr	r2, [pc, #576]	; (8006bb4 <HAL_GPIO_Init+0x2b0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d85d      	bhi.n	8006a32 <HAL_GPIO_Init+0x12e>
 8006976:	2b12      	cmp	r3, #18
 8006978:	d82a      	bhi.n	80069d0 <HAL_GPIO_Init+0xcc>
 800697a:	2b12      	cmp	r3, #18
 800697c:	d859      	bhi.n	8006a32 <HAL_GPIO_Init+0x12e>
 800697e:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <HAL_GPIO_Init+0x80>)
 8006980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006984:	080069ff 	.word	0x080069ff
 8006988:	080069d9 	.word	0x080069d9
 800698c:	080069eb 	.word	0x080069eb
 8006990:	08006a2d 	.word	0x08006a2d
 8006994:	08006a33 	.word	0x08006a33
 8006998:	08006a33 	.word	0x08006a33
 800699c:	08006a33 	.word	0x08006a33
 80069a0:	08006a33 	.word	0x08006a33
 80069a4:	08006a33 	.word	0x08006a33
 80069a8:	08006a33 	.word	0x08006a33
 80069ac:	08006a33 	.word	0x08006a33
 80069b0:	08006a33 	.word	0x08006a33
 80069b4:	08006a33 	.word	0x08006a33
 80069b8:	08006a33 	.word	0x08006a33
 80069bc:	08006a33 	.word	0x08006a33
 80069c0:	08006a33 	.word	0x08006a33
 80069c4:	08006a33 	.word	0x08006a33
 80069c8:	080069e1 	.word	0x080069e1
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	4a79      	ldr	r2, [pc, #484]	; (8006bb8 <HAL_GPIO_Init+0x2b4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d013      	beq.n	80069fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80069d6:	e02c      	b.n	8006a32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	623b      	str	r3, [r7, #32]
          break;
 80069de:	e029      	b.n	8006a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	3304      	adds	r3, #4
 80069e6:	623b      	str	r3, [r7, #32]
          break;
 80069e8:	e024      	b.n	8006a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	3308      	adds	r3, #8
 80069f0:	623b      	str	r3, [r7, #32]
          break;
 80069f2:	e01f      	b.n	8006a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	330c      	adds	r3, #12
 80069fa:	623b      	str	r3, [r7, #32]
          break;
 80069fc:	e01a      	b.n	8006a34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006a06:	2304      	movs	r3, #4
 8006a08:	623b      	str	r3, [r7, #32]
          break;
 8006a0a:	e013      	b.n	8006a34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d105      	bne.n	8006a20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006a14:	2308      	movs	r3, #8
 8006a16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	611a      	str	r2, [r3, #16]
          break;
 8006a1e:	e009      	b.n	8006a34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006a20:	2308      	movs	r3, #8
 8006a22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	615a      	str	r2, [r3, #20]
          break;
 8006a2a:	e003      	b.n	8006a34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	623b      	str	r3, [r7, #32]
          break;
 8006a30:	e000      	b.n	8006a34 <HAL_GPIO_Init+0x130>
          break;
 8006a32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	2bff      	cmp	r3, #255	; 0xff
 8006a38:	d801      	bhi.n	8006a3e <HAL_GPIO_Init+0x13a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	e001      	b.n	8006a42 <HAL_GPIO_Init+0x13e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3304      	adds	r3, #4
 8006a42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2bff      	cmp	r3, #255	; 0xff
 8006a48:	d802      	bhi.n	8006a50 <HAL_GPIO_Init+0x14c>
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	e002      	b.n	8006a56 <HAL_GPIO_Init+0x152>
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	3b08      	subs	r3, #8
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	210f      	movs	r1, #15
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	fa01 f303 	lsl.w	r3, r1, r3
 8006a64:	43db      	mvns	r3, r3
 8006a66:	401a      	ands	r2, r3
 8006a68:	6a39      	ldr	r1, [r7, #32]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	431a      	orrs	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80b1 	beq.w	8006be6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006a84:	4b4d      	ldr	r3, [pc, #308]	; (8006bbc <HAL_GPIO_Init+0x2b8>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	4a4c      	ldr	r2, [pc, #304]	; (8006bbc <HAL_GPIO_Init+0x2b8>)
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	6193      	str	r3, [r2, #24]
 8006a90:	4b4a      	ldr	r3, [pc, #296]	; (8006bbc <HAL_GPIO_Init+0x2b8>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006a9c:	4a48      	ldr	r2, [pc, #288]	; (8006bc0 <HAL_GPIO_Init+0x2bc>)
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	089b      	lsrs	r3, r3, #2
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	220f      	movs	r2, #15
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4013      	ands	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <HAL_GPIO_Init+0x2c0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <HAL_GPIO_Init+0x1ec>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a3f      	ldr	r2, [pc, #252]	; (8006bc8 <HAL_GPIO_Init+0x2c4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00d      	beq.n	8006aec <HAL_GPIO_Init+0x1e8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a3e      	ldr	r2, [pc, #248]	; (8006bcc <HAL_GPIO_Init+0x2c8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d007      	beq.n	8006ae8 <HAL_GPIO_Init+0x1e4>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a3d      	ldr	r2, [pc, #244]	; (8006bd0 <HAL_GPIO_Init+0x2cc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d101      	bne.n	8006ae4 <HAL_GPIO_Init+0x1e0>
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e006      	b.n	8006af2 <HAL_GPIO_Init+0x1ee>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	e004      	b.n	8006af2 <HAL_GPIO_Init+0x1ee>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e002      	b.n	8006af2 <HAL_GPIO_Init+0x1ee>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <HAL_GPIO_Init+0x1ee>
 8006af0:	2300      	movs	r3, #0
 8006af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af4:	f002 0203 	and.w	r2, r2, #3
 8006af8:	0092      	lsls	r2, r2, #2
 8006afa:	4093      	lsls	r3, r2
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006b02:	492f      	ldr	r1, [pc, #188]	; (8006bc0 <HAL_GPIO_Init+0x2bc>)
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	089b      	lsrs	r3, r3, #2
 8006b08:	3302      	adds	r3, #2
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d006      	beq.n	8006b2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006b1c:	4b2d      	ldr	r3, [pc, #180]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	492c      	ldr	r1, [pc, #176]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	600b      	str	r3, [r1, #0]
 8006b28:	e006      	b.n	8006b38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006b2a:	4b2a      	ldr	r3, [pc, #168]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	4928      	ldr	r1, [pc, #160]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d006      	beq.n	8006b52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006b44:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	4922      	ldr	r1, [pc, #136]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	604b      	str	r3, [r1, #4]
 8006b50:	e006      	b.n	8006b60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006b52:	4b20      	ldr	r3, [pc, #128]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	491e      	ldr	r1, [pc, #120]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006b6c:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	4918      	ldr	r1, [pc, #96]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	608b      	str	r3, [r1, #8]
 8006b78:	e006      	b.n	8006b88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006b7a:	4b16      	ldr	r3, [pc, #88]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	4914      	ldr	r1, [pc, #80]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d021      	beq.n	8006bd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006b94:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	490e      	ldr	r1, [pc, #56]	; (8006bd4 <HAL_GPIO_Init+0x2d0>)
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60cb      	str	r3, [r1, #12]
 8006ba0:	e021      	b.n	8006be6 <HAL_GPIO_Init+0x2e2>
 8006ba2:	bf00      	nop
 8006ba4:	10320000 	.word	0x10320000
 8006ba8:	10310000 	.word	0x10310000
 8006bac:	10220000 	.word	0x10220000
 8006bb0:	10210000 	.word	0x10210000
 8006bb4:	10120000 	.word	0x10120000
 8006bb8:	10110000 	.word	0x10110000
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40010800 	.word	0x40010800
 8006bc8:	40010c00 	.word	0x40010c00
 8006bcc:	40011000 	.word	0x40011000
 8006bd0:	40011400 	.word	0x40011400
 8006bd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <HAL_GPIO_Init+0x304>)
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	4909      	ldr	r1, [pc, #36]	; (8006c08 <HAL_GPIO_Init+0x304>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	3301      	adds	r3, #1
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f47f ae8e 	bne.w	8006918 <HAL_GPIO_Init+0x14>
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	372c      	adds	r7, #44	; 0x2c
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr
 8006c08:	40010400 	.word	0x40010400

08006c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
 8006c28:	e001      	b.n	8006c2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	807b      	strh	r3, [r7, #2]
 8006c46:	4613      	mov	r3, r2
 8006c48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c4a:	787b      	ldrb	r3, [r7, #1]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c50:	887a      	ldrh	r2, [r7, #2]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006c56:	e003      	b.n	8006c60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006c58:	887b      	ldrh	r3, [r7, #2]
 8006c5a:	041a      	lsls	r2, r3, #16
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	611a      	str	r2, [r3, #16]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
	...

08006c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e26c      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 8087 	beq.w	8006d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c8c:	4b92      	ldr	r3, [pc, #584]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f003 030c 	and.w	r3, r3, #12
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d00c      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c98:	4b8f      	ldr	r3, [pc, #572]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 030c 	and.w	r3, r3, #12
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d112      	bne.n	8006cca <HAL_RCC_OscConfig+0x5e>
 8006ca4:	4b8c      	ldr	r3, [pc, #560]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb0:	d10b      	bne.n	8006cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb2:	4b89      	ldr	r3, [pc, #548]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d06c      	beq.n	8006d98 <HAL_RCC_OscConfig+0x12c>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d168      	bne.n	8006d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e246      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd2:	d106      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x76>
 8006cd4:	4b80      	ldr	r3, [pc, #512]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a7f      	ldr	r2, [pc, #508]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	e02e      	b.n	8006d40 <HAL_RCC_OscConfig+0xd4>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10c      	bne.n	8006d04 <HAL_RCC_OscConfig+0x98>
 8006cea:	4b7b      	ldr	r3, [pc, #492]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a7a      	ldr	r2, [pc, #488]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	4b78      	ldr	r3, [pc, #480]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a77      	ldr	r2, [pc, #476]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	e01d      	b.n	8006d40 <HAL_RCC_OscConfig+0xd4>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d0c:	d10c      	bne.n	8006d28 <HAL_RCC_OscConfig+0xbc>
 8006d0e:	4b72      	ldr	r3, [pc, #456]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a71      	ldr	r2, [pc, #452]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	4b6f      	ldr	r3, [pc, #444]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6e      	ldr	r2, [pc, #440]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	e00b      	b.n	8006d40 <HAL_RCC_OscConfig+0xd4>
 8006d28:	4b6b      	ldr	r3, [pc, #428]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a6a      	ldr	r2, [pc, #424]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	4b68      	ldr	r3, [pc, #416]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a67      	ldr	r2, [pc, #412]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d013      	beq.n	8006d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d48:	f7ff fbf0 	bl	800652c <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d50:	f7ff fbec 	bl	800652c <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b64      	cmp	r3, #100	; 0x64
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e1fa      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d62:	4b5d      	ldr	r3, [pc, #372]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0f0      	beq.n	8006d50 <HAL_RCC_OscConfig+0xe4>
 8006d6e:	e014      	b.n	8006d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d70:	f7ff fbdc 	bl	800652c <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d78:	f7ff fbd8 	bl	800652c <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b64      	cmp	r3, #100	; 0x64
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e1e6      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d8a:	4b53      	ldr	r3, [pc, #332]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1f0      	bne.n	8006d78 <HAL_RCC_OscConfig+0x10c>
 8006d96:	e000      	b.n	8006d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d063      	beq.n	8006e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006da6:	4b4c      	ldr	r3, [pc, #304]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f003 030c 	and.w	r3, r3, #12
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006db2:	4b49      	ldr	r3, [pc, #292]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f003 030c 	and.w	r3, r3, #12
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d11c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x18c>
 8006dbe:	4b46      	ldr	r3, [pc, #280]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d116      	bne.n	8006df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dca:	4b43      	ldr	r3, [pc, #268]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <HAL_RCC_OscConfig+0x176>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d001      	beq.n	8006de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e1ba      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de2:	4b3d      	ldr	r3, [pc, #244]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4939      	ldr	r1, [pc, #228]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006df6:	e03a      	b.n	8006e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d020      	beq.n	8006e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e00:	4b36      	ldr	r3, [pc, #216]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e06:	f7ff fb91 	bl	800652c <HAL_GetTick>
 8006e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e0c:	e008      	b.n	8006e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e0e:	f7ff fb8d 	bl	800652c <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e19b      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e20:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0f0      	beq.n	8006e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2c:	4b2a      	ldr	r3, [pc, #168]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4927      	ldr	r1, [pc, #156]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	600b      	str	r3, [r1, #0]
 8006e40:	e015      	b.n	8006e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e42:	4b26      	ldr	r3, [pc, #152]	; (8006edc <HAL_RCC_OscConfig+0x270>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e48:	f7ff fb70 	bl	800652c <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e50:	f7ff fb6c 	bl	800652c <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e17a      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e62:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d03a      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d019      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e82:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <HAL_RCC_OscConfig+0x274>)
 8006e84:	2201      	movs	r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e88:	f7ff fb50 	bl	800652c <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e90:	f7ff fb4c 	bl	800652c <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e15a      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <HAL_RCC_OscConfig+0x26c>)
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0f0      	beq.n	8006e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006eae:	2001      	movs	r0, #1
 8006eb0:	f000 fad8 	bl	8007464 <RCC_Delay>
 8006eb4:	e01c      	b.n	8006ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <HAL_RCC_OscConfig+0x274>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ebc:	f7ff fb36 	bl	800652c <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec2:	e00f      	b.n	8006ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ec4:	f7ff fb32 	bl	800652c <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d908      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e140      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
 8006ed6:	bf00      	nop
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	42420000 	.word	0x42420000
 8006ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ee4:	4b9e      	ldr	r3, [pc, #632]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e9      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80a6 	beq.w	800704a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f02:	4b97      	ldr	r3, [pc, #604]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10d      	bne.n	8006f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f0e:	4b94      	ldr	r3, [pc, #592]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	4a93      	ldr	r2, [pc, #588]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f18:	61d3      	str	r3, [r2, #28]
 8006f1a:	4b91      	ldr	r3, [pc, #580]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f22:	60bb      	str	r3, [r7, #8]
 8006f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f26:	2301      	movs	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f2a:	4b8e      	ldr	r3, [pc, #568]	; (8007164 <HAL_RCC_OscConfig+0x4f8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d118      	bne.n	8006f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f36:	4b8b      	ldr	r3, [pc, #556]	; (8007164 <HAL_RCC_OscConfig+0x4f8>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a8a      	ldr	r2, [pc, #552]	; (8007164 <HAL_RCC_OscConfig+0x4f8>)
 8006f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f42:	f7ff faf3 	bl	800652c <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f4a:	f7ff faef 	bl	800652c <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b64      	cmp	r3, #100	; 0x64
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e0fd      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f5c:	4b81      	ldr	r3, [pc, #516]	; (8007164 <HAL_RCC_OscConfig+0x4f8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d106      	bne.n	8006f7e <HAL_RCC_OscConfig+0x312>
 8006f70:	4b7b      	ldr	r3, [pc, #492]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	4a7a      	ldr	r2, [pc, #488]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	6213      	str	r3, [r2, #32]
 8006f7c:	e02d      	b.n	8006fda <HAL_RCC_OscConfig+0x36e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x334>
 8006f86:	4b76      	ldr	r3, [pc, #472]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	4a75      	ldr	r2, [pc, #468]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f8c:	f023 0301 	bic.w	r3, r3, #1
 8006f90:	6213      	str	r3, [r2, #32]
 8006f92:	4b73      	ldr	r3, [pc, #460]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	4a72      	ldr	r2, [pc, #456]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006f98:	f023 0304 	bic.w	r3, r3, #4
 8006f9c:	6213      	str	r3, [r2, #32]
 8006f9e:	e01c      	b.n	8006fda <HAL_RCC_OscConfig+0x36e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	2b05      	cmp	r3, #5
 8006fa6:	d10c      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x356>
 8006fa8:	4b6d      	ldr	r3, [pc, #436]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	4a6c      	ldr	r2, [pc, #432]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006fae:	f043 0304 	orr.w	r3, r3, #4
 8006fb2:	6213      	str	r3, [r2, #32]
 8006fb4:	4b6a      	ldr	r3, [pc, #424]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	4a69      	ldr	r2, [pc, #420]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	6213      	str	r3, [r2, #32]
 8006fc0:	e00b      	b.n	8006fda <HAL_RCC_OscConfig+0x36e>
 8006fc2:	4b67      	ldr	r3, [pc, #412]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	4a66      	ldr	r2, [pc, #408]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	6213      	str	r3, [r2, #32]
 8006fce:	4b64      	ldr	r3, [pc, #400]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	4a63      	ldr	r2, [pc, #396]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8006fd4:	f023 0304 	bic.w	r3, r3, #4
 8006fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d015      	beq.n	800700e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fe2:	f7ff faa3 	bl	800652c <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe8:	e00a      	b.n	8007000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fea:	f7ff fa9f 	bl	800652c <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e0ab      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007000:	4b57      	ldr	r3, [pc, #348]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0ee      	beq.n	8006fea <HAL_RCC_OscConfig+0x37e>
 800700c:	e014      	b.n	8007038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800700e:	f7ff fa8d 	bl	800652c <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007014:	e00a      	b.n	800702c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007016:	f7ff fa89 	bl	800652c <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	f241 3288 	movw	r2, #5000	; 0x1388
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e095      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800702c:	4b4c      	ldr	r3, [pc, #304]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1ee      	bne.n	8007016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d105      	bne.n	800704a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800703e:	4b48      	ldr	r3, [pc, #288]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	4a47      	ldr	r2, [pc, #284]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8007044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8081 	beq.w	8007156 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007054:	4b42      	ldr	r3, [pc, #264]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f003 030c 	and.w	r3, r3, #12
 800705c:	2b08      	cmp	r3, #8
 800705e:	d061      	beq.n	8007124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d146      	bne.n	80070f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007068:	4b3f      	ldr	r3, [pc, #252]	; (8007168 <HAL_RCC_OscConfig+0x4fc>)
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800706e:	f7ff fa5d 	bl	800652c <HAL_GetTick>
 8007072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007074:	e008      	b.n	8007088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007076:	f7ff fa59 	bl	800652c <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d901      	bls.n	8007088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e067      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007088:	4b35      	ldr	r3, [pc, #212]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f0      	bne.n	8007076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709c:	d108      	bne.n	80070b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800709e:	4b30      	ldr	r3, [pc, #192]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	492d      	ldr	r1, [pc, #180]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070b0:	4b2b      	ldr	r3, [pc, #172]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a19      	ldr	r1, [r3, #32]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	430b      	orrs	r3, r1
 80070c2:	4927      	ldr	r1, [pc, #156]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070c8:	4b27      	ldr	r3, [pc, #156]	; (8007168 <HAL_RCC_OscConfig+0x4fc>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ce:	f7ff fa2d 	bl	800652c <HAL_GetTick>
 80070d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070d4:	e008      	b.n	80070e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070d6:	f7ff fa29 	bl	800652c <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e037      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070e8:	4b1d      	ldr	r3, [pc, #116]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0f0      	beq.n	80070d6 <HAL_RCC_OscConfig+0x46a>
 80070f4:	e02f      	b.n	8007156 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070f6:	4b1c      	ldr	r3, [pc, #112]	; (8007168 <HAL_RCC_OscConfig+0x4fc>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070fc:	f7ff fa16 	bl	800652c <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007104:	f7ff fa12 	bl	800652c <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e020      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007116:	4b12      	ldr	r3, [pc, #72]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x498>
 8007122:	e018      	b.n	8007156 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e013      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007130:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <HAL_RCC_OscConfig+0x4f4>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	429a      	cmp	r2, r3
 8007142:	d106      	bne.n	8007152 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800714e:	429a      	cmp	r2, r3
 8007150:	d001      	beq.n	8007156 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40021000 	.word	0x40021000
 8007164:	40007000 	.word	0x40007000
 8007168:	42420060 	.word	0x42420060

0800716c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e0d0      	b.n	8007322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007180:	4b6a      	ldr	r3, [pc, #424]	; (800732c <HAL_RCC_ClockConfig+0x1c0>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d910      	bls.n	80071b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718e:	4b67      	ldr	r3, [pc, #412]	; (800732c <HAL_RCC_ClockConfig+0x1c0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f023 0207 	bic.w	r2, r3, #7
 8007196:	4965      	ldr	r1, [pc, #404]	; (800732c <HAL_RCC_ClockConfig+0x1c0>)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	4313      	orrs	r3, r2
 800719c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800719e:	4b63      	ldr	r3, [pc, #396]	; (800732c <HAL_RCC_ClockConfig+0x1c0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d001      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0b8      	b.n	8007322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d020      	beq.n	80071fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071c8:	4b59      	ldr	r3, [pc, #356]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	4a58      	ldr	r2, [pc, #352]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80071ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071e0:	4b53      	ldr	r3, [pc, #332]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4a52      	ldr	r2, [pc, #328]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80071e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80071ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071ec:	4b50      	ldr	r3, [pc, #320]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	494d      	ldr	r1, [pc, #308]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d040      	beq.n	800728c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d107      	bne.n	8007222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007212:	4b47      	ldr	r3, [pc, #284]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d115      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e07f      	b.n	8007322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d107      	bne.n	800723a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722a:	4b41      	ldr	r3, [pc, #260]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e073      	b.n	8007322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723a:	4b3d      	ldr	r3, [pc, #244]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e06b      	b.n	8007322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800724a:	4b39      	ldr	r3, [pc, #228]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f023 0203 	bic.w	r2, r3, #3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	4936      	ldr	r1, [pc, #216]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 8007258:	4313      	orrs	r3, r2
 800725a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800725c:	f7ff f966 	bl	800652c <HAL_GetTick>
 8007260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007262:	e00a      	b.n	800727a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007264:	f7ff f962 	bl	800652c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e053      	b.n	8007322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727a:	4b2d      	ldr	r3, [pc, #180]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f003 020c 	and.w	r2, r3, #12
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	429a      	cmp	r2, r3
 800728a:	d1eb      	bne.n	8007264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800728c:	4b27      	ldr	r3, [pc, #156]	; (800732c <HAL_RCC_ClockConfig+0x1c0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d210      	bcs.n	80072bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b24      	ldr	r3, [pc, #144]	; (800732c <HAL_RCC_ClockConfig+0x1c0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f023 0207 	bic.w	r2, r3, #7
 80072a2:	4922      	ldr	r1, [pc, #136]	; (800732c <HAL_RCC_ClockConfig+0x1c0>)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072aa:	4b20      	ldr	r3, [pc, #128]	; (800732c <HAL_RCC_ClockConfig+0x1c0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d001      	beq.n	80072bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e032      	b.n	8007322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d008      	beq.n	80072da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072c8:	4b19      	ldr	r3, [pc, #100]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	4916      	ldr	r1, [pc, #88]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d009      	beq.n	80072fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072e6:	4b12      	ldr	r3, [pc, #72]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	490e      	ldr	r1, [pc, #56]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072fa:	f000 f821 	bl	8007340 <HAL_RCC_GetSysClockFreq>
 80072fe:	4602      	mov	r2, r0
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	490a      	ldr	r1, [pc, #40]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 800730c:	5ccb      	ldrb	r3, [r1, r3]
 800730e:	fa22 f303 	lsr.w	r3, r2, r3
 8007312:	4a09      	ldr	r2, [pc, #36]	; (8007338 <HAL_RCC_ClockConfig+0x1cc>)
 8007314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <HAL_RCC_ClockConfig+0x1d0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff f8c4 	bl	80064a8 <HAL_InitTick>

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40022000 	.word	0x40022000
 8007330:	40021000 	.word	0x40021000
 8007334:	08008bf8 	.word	0x08008bf8
 8007338:	2000003c 	.word	0x2000003c
 800733c:	20000040 	.word	0x20000040

08007340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007340:	b490      	push	{r4, r7}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007346:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007348:	1d3c      	adds	r4, r7, #4
 800734a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800734c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007350:	f240 2301 	movw	r3, #513	; 0x201
 8007354:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	2300      	movs	r3, #0
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800736a:	4b22      	ldr	r3, [pc, #136]	; (80073f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	f003 030c 	and.w	r3, r3, #12
 8007376:	2b04      	cmp	r3, #4
 8007378:	d002      	beq.n	8007380 <HAL_RCC_GetSysClockFreq+0x40>
 800737a:	2b08      	cmp	r3, #8
 800737c:	d003      	beq.n	8007386 <HAL_RCC_GetSysClockFreq+0x46>
 800737e:	e02d      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007380:	4b1d      	ldr	r3, [pc, #116]	; (80073f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007382:	623b      	str	r3, [r7, #32]
      break;
 8007384:	e02d      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	0c9b      	lsrs	r3, r3, #18
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007392:	4413      	add	r3, r2
 8007394:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007398:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d013      	beq.n	80073cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073a4:	4b13      	ldr	r3, [pc, #76]	; (80073f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	0c5b      	lsrs	r3, r3, #17
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80073b2:	4413      	add	r3, r2
 80073b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80073b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4a0e      	ldr	r2, [pc, #56]	; (80073f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073be:	fb02 f203 	mul.w	r2, r2, r3
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ca:	e004      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	4a0b      	ldr	r2, [pc, #44]	; (80073fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80073d0:	fb02 f303 	mul.w	r3, r2, r3
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	623b      	str	r3, [r7, #32]
      break;
 80073da:	e002      	b.n	80073e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073de:	623b      	str	r3, [r7, #32]
      break;
 80073e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073e2:	6a3b      	ldr	r3, [r7, #32]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3728      	adds	r7, #40	; 0x28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bc90      	pop	{r4, r7}
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	0800892c 	.word	0x0800892c
 80073f4:	40021000 	.word	0x40021000
 80073f8:	007a1200 	.word	0x007a1200
 80073fc:	003d0900 	.word	0x003d0900

08007400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007404:	4b02      	ldr	r3, [pc, #8]	; (8007410 <HAL_RCC_GetHCLKFreq+0x10>)
 8007406:	681b      	ldr	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr
 8007410:	2000003c 	.word	0x2000003c

08007414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007418:	f7ff fff2 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 800741c:	4602      	mov	r2, r0
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	4903      	ldr	r1, [pc, #12]	; (8007438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800742a:	5ccb      	ldrb	r3, [r1, r3]
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007430:	4618      	mov	r0, r3
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40021000 	.word	0x40021000
 8007438:	08008c08 	.word	0x08008c08

0800743c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007440:	f7ff ffde 	bl	8007400 <HAL_RCC_GetHCLKFreq>
 8007444:	4602      	mov	r2, r0
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	0adb      	lsrs	r3, r3, #11
 800744c:	f003 0307 	and.w	r3, r3, #7
 8007450:	4903      	ldr	r1, [pc, #12]	; (8007460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007452:	5ccb      	ldrb	r3, [r1, r3]
 8007454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007458:	4618      	mov	r0, r3
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40021000 	.word	0x40021000
 8007460:	08008c08 	.word	0x08008c08

08007464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <RCC_Delay+0x34>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a0a      	ldr	r2, [pc, #40]	; (800749c <RCC_Delay+0x38>)
 8007472:	fba2 2303 	umull	r2, r3, r2, r3
 8007476:	0a5b      	lsrs	r3, r3, #9
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007480:	bf00      	nop
  }
  while (Delay --);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1e5a      	subs	r2, r3, #1
 8007486:	60fa      	str	r2, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f9      	bne.n	8007480 <RCC_Delay+0x1c>
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr
 8007498:	2000003c 	.word	0x2000003c
 800749c:	10624dd3 	.word	0x10624dd3

080074a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e076      	b.n	80075a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d108      	bne.n	80074cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c2:	d009      	beq.n	80074d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	61da      	str	r2, [r3, #28]
 80074ca:	e005      	b.n	80074d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7fc fb0a 	bl	8003b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800750e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	ea42 0103 	orr.w	r1, r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	0c1a      	lsrs	r2, r3, #16
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f002 0204 	and.w	r2, r2, #4
 800757e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69da      	ldr	r2, [r3, #28]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800758e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d101      	bne.n	80075ca <HAL_SPI_Transmit+0x22>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e126      	b.n	8007818 <HAL_SPI_Transmit+0x270>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075d2:	f7fe ffab 	bl	800652c <HAL_GetTick>
 80075d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d002      	beq.n	80075ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075e8:	2302      	movs	r3, #2
 80075ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075ec:	e10b      	b.n	8007806 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <HAL_SPI_Transmit+0x52>
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d102      	bne.n	8007600 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075fe:	e102      	b.n	8007806 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2203      	movs	r2, #3
 8007604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	88fa      	ldrh	r2, [r7, #6]
 8007618:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	88fa      	ldrh	r2, [r7, #6]
 800761e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007646:	d10f      	bne.n	8007668 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007656:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007666:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	d007      	beq.n	8007686 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007684:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768e:	d14b      	bne.n	8007728 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <HAL_SPI_Transmit+0xf6>
 8007698:	8afb      	ldrh	r3, [r7, #22]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d13e      	bne.n	800771c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	881a      	ldrh	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	1c9a      	adds	r2, r3, #2
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076c2:	e02b      	b.n	800771c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d112      	bne.n	80076f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	881a      	ldrh	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	1c9a      	adds	r2, r3, #2
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3b01      	subs	r3, #1
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80076f6:	e011      	b.n	800771c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076f8:	f7fe ff18 	bl	800652c <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d803      	bhi.n	8007710 <HAL_SPI_Transmit+0x168>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d102      	bne.n	8007716 <HAL_SPI_Transmit+0x16e>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	77fb      	strb	r3, [r7, #31]
          goto error;
 800771a:	e074      	b.n	8007806 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007720:	b29b      	uxth	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1ce      	bne.n	80076c4 <HAL_SPI_Transmit+0x11c>
 8007726:	e04c      	b.n	80077c2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_SPI_Transmit+0x18e>
 8007730:	8afb      	ldrh	r3, [r7, #22]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d140      	bne.n	80077b8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	330c      	adds	r3, #12
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800775c:	e02c      	b.n	80077b8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b02      	cmp	r3, #2
 800776a:	d113      	bne.n	8007794 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330c      	adds	r3, #12
 8007776:	7812      	ldrb	r2, [r2, #0]
 8007778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29a      	uxth	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	86da      	strh	r2, [r3, #54]	; 0x36
 8007792:	e011      	b.n	80077b8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007794:	f7fe feca 	bl	800652c <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d803      	bhi.n	80077ac <HAL_SPI_Transmit+0x204>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077aa:	d102      	bne.n	80077b2 <HAL_SPI_Transmit+0x20a>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077b6:	e026      	b.n	8007806 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1cd      	bne.n	800775e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 fbb8 	bl	8007f3c <SPI_EndRxTxTransaction>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077e0:	2300      	movs	r3, #0
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	613b      	str	r3, [r7, #16]
 80077f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	77fb      	strb	r3, [r7, #31]
 8007802:	e000      	b.n	8007806 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007804:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007816:	7ffb      	ldrb	r3, [r7, #31]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3720      	adds	r7, #32
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800783c:	d112      	bne.n	8007864 <HAL_SPI_Receive+0x44>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10e      	bne.n	8007864 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2204      	movs	r2, #4
 800784a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800784e:	88fa      	ldrh	r2, [r7, #6]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	4613      	mov	r3, r2
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f8f1 	bl	8007a42 <HAL_SPI_TransmitReceive>
 8007860:	4603      	mov	r3, r0
 8007862:	e0ea      	b.n	8007a3a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_SPI_Receive+0x52>
 800786e:	2302      	movs	r3, #2
 8007870:	e0e3      	b.n	8007a3a <HAL_SPI_Receive+0x21a>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800787a:	f7fe fe57 	bl	800652c <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b01      	cmp	r3, #1
 800788a:	d002      	beq.n	8007892 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800788c:	2302      	movs	r3, #2
 800788e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007890:	e0ca      	b.n	8007a28 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <HAL_SPI_Receive+0x7e>
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d102      	bne.n	80078a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078a2:	e0c1      	b.n	8007a28 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2204      	movs	r2, #4
 80078a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	88fa      	ldrh	r2, [r7, #6]
 80078bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	88fa      	ldrh	r2, [r7, #6]
 80078c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ea:	d10f      	bne.n	800790c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800790a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d007      	beq.n	800792a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007928:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d162      	bne.n	80079f8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007932:	e02e      	b.n	8007992 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b01      	cmp	r3, #1
 8007940:	d115      	bne.n	800796e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f103 020c 	add.w	r2, r3, #12
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800796c:	e011      	b.n	8007992 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800796e:	f7fe fddd 	bl	800652c <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d803      	bhi.n	8007986 <HAL_SPI_Receive+0x166>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d102      	bne.n	800798c <HAL_SPI_Receive+0x16c>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d102      	bne.n	8007992 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007990:	e04a      	b.n	8007a28 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1cb      	bne.n	8007934 <HAL_SPI_Receive+0x114>
 800799c:	e031      	b.n	8007a02 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d113      	bne.n	80079d4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	b292      	uxth	r2, r2
 80079b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	1c9a      	adds	r2, r3, #2
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079d2:	e011      	b.n	80079f8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079d4:	f7fe fdaa 	bl	800652c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d803      	bhi.n	80079ec <HAL_SPI_Receive+0x1cc>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d102      	bne.n	80079f2 <HAL_SPI_Receive+0x1d2>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079f6:	e017      	b.n	8007a28 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1cd      	bne.n	800799e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 fa46 	bl	8007e98 <SPI_EndRxTransaction>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2220      	movs	r2, #32
 8007a16:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
 8007a24:	e000      	b.n	8007a28 <HAL_SPI_Receive+0x208>
  }

error :
 8007a26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b08c      	sub	sp, #48	; 0x30
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
 8007a4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a50:	2301      	movs	r3, #1
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_SPI_TransmitReceive+0x26>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e18a      	b.n	8007d7e <HAL_SPI_TransmitReceive+0x33c>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a70:	f7fe fd5c 	bl	800652c <HAL_GetTick>
 8007a74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a86:	887b      	ldrh	r3, [r7, #2]
 8007a88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d00f      	beq.n	8007ab2 <HAL_SPI_TransmitReceive+0x70>
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a98:	d107      	bne.n	8007aaa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <HAL_SPI_TransmitReceive+0x68>
 8007aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d003      	beq.n	8007ab2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ab0:	e15b      	b.n	8007d6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <HAL_SPI_TransmitReceive+0x82>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_SPI_TransmitReceive+0x82>
 8007abe:	887b      	ldrh	r3, [r7, #2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007aca:	e14e      	b.n	8007d6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d003      	beq.n	8007ae0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2205      	movs	r2, #5
 8007adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	887a      	ldrh	r2, [r7, #2]
 8007af0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	887a      	ldrh	r2, [r7, #2]
 8007af6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	887a      	ldrh	r2, [r7, #2]
 8007b02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	887a      	ldrh	r2, [r7, #2]
 8007b08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d007      	beq.n	8007b34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b3c:	d178      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <HAL_SPI_TransmitReceive+0x10a>
 8007b46:	8b7b      	ldrh	r3, [r7, #26]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d166      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	881a      	ldrh	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	1c9a      	adds	r2, r3, #2
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b70:	e053      	b.n	8007c1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d11b      	bne.n	8007bb8 <HAL_SPI_TransmitReceive+0x176>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d016      	beq.n	8007bb8 <HAL_SPI_TransmitReceive+0x176>
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d113      	bne.n	8007bb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b94:	881a      	ldrh	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba0:	1c9a      	adds	r2, r3, #2
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d119      	bne.n	8007bfa <HAL_SPI_TransmitReceive+0x1b8>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d014      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	b292      	uxth	r2, r2
 8007bdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	1c9a      	adds	r2, r3, #2
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bfa:	f7fe fc97 	bl	800652c <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d807      	bhi.n	8007c1a <HAL_SPI_TransmitReceive+0x1d8>
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d003      	beq.n	8007c1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c18:	e0a7      	b.n	8007d6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1a6      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x130>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1a1      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x130>
 8007c2e:	e07c      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x1fc>
 8007c38:	8b7b      	ldrh	r3, [r7, #26]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d16b      	bne.n	8007d16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	330c      	adds	r3, #12
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c64:	e057      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d11c      	bne.n	8007cae <HAL_SPI_TransmitReceive+0x26c>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d017      	beq.n	8007cae <HAL_SPI_TransmitReceive+0x26c>
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d114      	bne.n	8007cae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d119      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x2ae>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d014      	beq.n	8007cf0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cec:	2301      	movs	r3, #1
 8007cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cf0:	f7fe fc1c 	bl	800652c <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d803      	bhi.n	8007d08 <HAL_SPI_TransmitReceive+0x2c6>
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d102      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x2cc>
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d14:	e029      	b.n	8007d6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1a2      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x224>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d19d      	bne.n	8007c66 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f904 	bl	8007f3c <SPI_EndRxTxTransaction>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d006      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d46:	e010      	b.n	8007d6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10b      	bne.n	8007d68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	e000      	b.n	8007d6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3730      	adds	r7, #48	; 0x30
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4613      	mov	r3, r2
 8007d96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d98:	f7fe fbc8 	bl	800652c <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	4413      	add	r3, r2
 8007da6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007da8:	f7fe fbc0 	bl	800652c <HAL_GetTick>
 8007dac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dae:	4b39      	ldr	r3, [pc, #228]	; (8007e94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	015b      	lsls	r3, r3, #5
 8007db4:	0d1b      	lsrs	r3, r3, #20
 8007db6:	69fa      	ldr	r2, [r7, #28]
 8007db8:	fb02 f303 	mul.w	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dbe:	e054      	b.n	8007e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc6:	d050      	beq.n	8007e6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dc8:	f7fe fbb0 	bl	800652c <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d902      	bls.n	8007dde <SPI_WaitFlagStateUntilTimeout+0x56>
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d13d      	bne.n	8007e5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007df6:	d111      	bne.n	8007e1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e00:	d004      	beq.n	8007e0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0a:	d107      	bne.n	8007e1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e24:	d10f      	bne.n	8007e46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e017      	b.n	8007e8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4013      	ands	r3, r2
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bf0c      	ite	eq
 8007e7a:	2301      	moveq	r3, #1
 8007e7c:	2300      	movne	r3, #0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d19b      	bne.n	8007dc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	2000003c 	.word	0x2000003c

08007e98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af02      	add	r7, sp, #8
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eac:	d111      	bne.n	8007ed2 <SPI_EndRxTransaction+0x3a>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb6:	d004      	beq.n	8007ec2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec0:	d107      	bne.n	8007ed2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eda:	d117      	bne.n	8007f0c <SPI_EndRxTransaction+0x74>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee4:	d112      	bne.n	8007f0c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2200      	movs	r2, #0
 8007eee:	2101      	movs	r1, #1
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff ff49 	bl	8007d88 <SPI_WaitFlagStateUntilTimeout>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01a      	beq.n	8007f32 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f00:	f043 0220 	orr.w	r2, r3, #32
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e013      	b.n	8007f34 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2200      	movs	r2, #0
 8007f14:	2180      	movs	r1, #128	; 0x80
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7ff ff36 	bl	8007d88 <SPI_WaitFlagStateUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	f043 0220 	orr.w	r2, r3, #32
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e000      	b.n	8007f34 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2180      	movs	r1, #128	; 0x80
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7ff ff18 	bl	8007d88 <SPI_WaitFlagStateUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f62:	f043 0220 	orr.w	r2, r3, #32
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e000      	b.n	8007f70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e03f      	b.n	800800a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7fb fdfe 	bl	8003ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2224      	movs	r2, #36	; 0x24
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fb9d 	bl	80086fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	695a      	ldr	r2, [r3, #20]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e047      	b.n	80080b4 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d106      	bne.n	800803e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7fb fdb1 	bl	8003ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2224      	movs	r2, #36	; 0x24
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008054:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb50 	bl	80086fc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691a      	ldr	r2, [r3, #16]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800806a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695a      	ldr	r2, [r3, #20]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800807a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695a      	ldr	r2, [r3, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0208 	orr.w	r2, r2, #8
 800808a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800809a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80080dc:	2300      	movs	r3, #0
 80080de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10d      	bne.n	800810e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d008      	beq.n	800810e <HAL_UART_IRQHandler+0x52>
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa4f 	bl	80085aa <UART_Receive_IT>
      return;
 800810c:	e17b      	b.n	8008406 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 80b1 	beq.w	8008278 <HAL_UART_IRQHandler+0x1bc>
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d105      	bne.n	800812c <HAL_UART_IRQHandler+0x70>
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 80a6 	beq.w	8008278 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <HAL_UART_IRQHandler+0x90>
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	f043 0201 	orr.w	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <HAL_UART_IRQHandler+0xb0>
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008164:	f043 0202 	orr.w	r2, r3, #2
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <HAL_UART_IRQHandler+0xd0>
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d005      	beq.n	800818c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	f043 0204 	orr.w	r2, r3, #4
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00f      	beq.n	80081b6 <HAL_UART_IRQHandler+0xfa>
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d104      	bne.n	80081aa <HAL_UART_IRQHandler+0xee>
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	f043 0208 	orr.w	r2, r3, #8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 811e 	beq.w	80083fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d007      	beq.n	80081da <HAL_UART_IRQHandler+0x11e>
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	f003 0320 	and.w	r3, r3, #32
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f9e8 	bl	80085aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bf14      	ite	ne
 80081e8:	2301      	movne	r3, #1
 80081ea:	2300      	moveq	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	f003 0308 	and.w	r3, r3, #8
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d102      	bne.n	8008202 <HAL_UART_IRQHandler+0x146>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d031      	beq.n	8008266 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f92a 	bl	800845c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d023      	beq.n	800825e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695a      	ldr	r2, [r3, #20]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008224:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	2b00      	cmp	r3, #0
 800822c:	d013      	beq.n	8008256 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	4a76      	ldr	r2, [pc, #472]	; (800840c <HAL_UART_IRQHandler+0x350>)
 8008234:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe faec 	bl	8006818 <HAL_DMA_Abort_IT>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d016      	beq.n	8008274 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008250:	4610      	mov	r0, r2
 8008252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008254:	e00e      	b.n	8008274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f8ec 	bl	8008434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825c:	e00a      	b.n	8008274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f8e8 	bl	8008434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008264:	e006      	b.n	8008274 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f8e4 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008272:	e0c3      	b.n	80083fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008274:	bf00      	nop
    return;
 8008276:	e0c1      	b.n	80083fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	2b01      	cmp	r3, #1
 800827e:	f040 80a1 	bne.w	80083c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 809b 	beq.w	80083c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8095 	beq.w	80083c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d04e      	beq.n	800835c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80082c8:	8a3b      	ldrh	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8098 	beq.w	8008400 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082d4:	8a3a      	ldrh	r2, [r7, #16]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	f080 8092 	bcs.w	8008400 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	8a3a      	ldrh	r2, [r7, #16]
 80082e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d02b      	beq.n	8008344 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695a      	ldr	r2, [r3, #20]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0201 	bic.w	r2, r2, #1
 800830a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800831a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0210 	bic.w	r2, r2, #16
 8008338:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fa2f 	bl	80067a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800834c:	b29b      	uxth	r3, r3
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	b29b      	uxth	r3, r3
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f876 	bl	8008446 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800835a:	e051      	b.n	8008400 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008364:	b29b      	uxth	r3, r3
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d047      	beq.n	8008404 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008374:	8a7b      	ldrh	r3, [r7, #18]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d044      	beq.n	8008404 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008388:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0210 	bic.w	r2, r2, #16
 80083b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083b8:	8a7b      	ldrh	r3, [r7, #18]
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f842 	bl	8008446 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80083c2:	e01f      	b.n	8008404 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d008      	beq.n	80083e0 <HAL_UART_IRQHandler+0x324>
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f87f 	bl	80084dc <UART_Transmit_IT>
    return;
 80083de:	e012      	b.n	8008406 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00d      	beq.n	8008406 <HAL_UART_IRQHandler+0x34a>
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d008      	beq.n	8008406 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f8c0 	bl	800857a <UART_EndTransmit_IT>
    return;
 80083fa:	e004      	b.n	8008406 <HAL_UART_IRQHandler+0x34a>
    return;
 80083fc:	bf00      	nop
 80083fe:	e002      	b.n	8008406 <HAL_UART_IRQHandler+0x34a>
      return;
 8008400:	bf00      	nop
 8008402:	e000      	b.n	8008406 <HAL_UART_IRQHandler+0x34a>
      return;
 8008404:	bf00      	nop
  }
}
 8008406:	3728      	adds	r7, #40	; 0x28
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	080084b5 	.word	0x080084b5

08008410 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr

08008422 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr

08008434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr

08008446 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	bc80      	pop	{r7}
 800845a:	4770      	bx	lr

0800845c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008472:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695a      	ldr	r2, [r3, #20]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0201 	bic.w	r2, r2, #1
 8008482:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	2b01      	cmp	r3, #1
 800848a:	d107      	bne.n	800849c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0210 	bic.w	r2, r2, #16
 800849a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr

080084b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7ff ffb0 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b21      	cmp	r3, #33	; 0x21
 80084ee:	d13e      	bne.n	800856e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f8:	d114      	bne.n	8008524 <UART_Transmit_IT+0x48>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d110      	bne.n	8008524 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008516:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	1c9a      	adds	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	621a      	str	r2, [r3, #32]
 8008522:	e008      	b.n	8008536 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	1c59      	adds	r1, r3, #1
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6211      	str	r1, [r2, #32]
 800852e:	781a      	ldrb	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29b      	uxth	r3, r3
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	4619      	mov	r1, r3
 8008544:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10f      	bne.n	800856a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008558:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68da      	ldr	r2, [r3, #12]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008568:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	e000      	b.n	8008570 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800856e:	2302      	movs	r3, #2
  }
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008590:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff ff38 	bl	8008410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b086      	sub	sp, #24
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b22      	cmp	r3, #34	; 0x22
 80085bc:	f040 8099 	bne.w	80086f2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c8:	d117      	bne.n	80085fa <UART_Receive_IT+0x50>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d113      	bne.n	80085fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085da:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	1c9a      	adds	r2, r3, #2
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	629a      	str	r2, [r3, #40]	; 0x28
 80085f8:	e026      	b.n	8008648 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008600:	2300      	movs	r3, #0
 8008602:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860c:	d007      	beq.n	800861e <UART_Receive_IT+0x74>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10a      	bne.n	800862c <UART_Receive_IT+0x82>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	b2da      	uxtb	r2, r3
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	e008      	b.n	800863e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008638:	b2da      	uxtb	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800864c:	b29b      	uxth	r3, r3
 800864e:	3b01      	subs	r3, #1
 8008650:	b29b      	uxth	r3, r3
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	4619      	mov	r1, r3
 8008656:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008658:	2b00      	cmp	r3, #0
 800865a:	d148      	bne.n	80086ee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0220 	bic.w	r2, r2, #32
 800866a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800867a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695a      	ldr	r2, [r3, #20]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0201 	bic.w	r2, r2, #1
 800868a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2220      	movs	r2, #32
 8008690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008698:	2b01      	cmp	r3, #1
 800869a:	d123      	bne.n	80086e4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0210 	bic.w	r2, r2, #16
 80086b0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d10a      	bne.n	80086d6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086c0:	2300      	movs	r3, #0
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7ff feb2 	bl	8008446 <HAL_UARTEx_RxEventCallback>
 80086e2:	e002      	b.n	80086ea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff fe9c 	bl	8008422 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	e002      	b.n	80086f4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	e000      	b.n	80086f4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80086f2:	2302      	movs	r3, #2
  }
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008736:	f023 030c 	bic.w	r3, r3, #12
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	430b      	orrs	r3, r1
 8008742:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	699a      	ldr	r2, [r3, #24]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2c      	ldr	r2, [pc, #176]	; (8008810 <UART_SetConfig+0x114>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d103      	bne.n	800876c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008764:	f7fe fe6a 	bl	800743c <HAL_RCC_GetPCLK2Freq>
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	e002      	b.n	8008772 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800876c:	f7fe fe52 	bl	8007414 <HAL_RCC_GetPCLK1Freq>
 8008770:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	009a      	lsls	r2, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	fbb2 f3f3 	udiv	r3, r2, r3
 8008788:	4a22      	ldr	r2, [pc, #136]	; (8008814 <UART_SetConfig+0x118>)
 800878a:	fba2 2303 	umull	r2, r3, r2, r3
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	0119      	lsls	r1, r3, #4
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4613      	mov	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	009a      	lsls	r2, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80087a8:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <UART_SetConfig+0x118>)
 80087aa:	fba3 0302 	umull	r0, r3, r3, r2
 80087ae:	095b      	lsrs	r3, r3, #5
 80087b0:	2064      	movs	r0, #100	; 0x64
 80087b2:	fb00 f303 	mul.w	r3, r0, r3
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	3332      	adds	r3, #50	; 0x32
 80087bc:	4a15      	ldr	r2, [pc, #84]	; (8008814 <UART_SetConfig+0x118>)
 80087be:	fba2 2303 	umull	r2, r3, r2, r3
 80087c2:	095b      	lsrs	r3, r3, #5
 80087c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087c8:	4419      	add	r1, r3
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	009a      	lsls	r2, r3, #2
 80087d4:	441a      	add	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80087e0:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <UART_SetConfig+0x118>)
 80087e2:	fba3 0302 	umull	r0, r3, r3, r2
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	2064      	movs	r0, #100	; 0x64
 80087ea:	fb00 f303 	mul.w	r3, r0, r3
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	3332      	adds	r3, #50	; 0x32
 80087f4:	4a07      	ldr	r2, [pc, #28]	; (8008814 <UART_SetConfig+0x118>)
 80087f6:	fba2 2303 	umull	r2, r3, r2, r3
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	440a      	add	r2, r1
 8008806:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40013800 	.word	0x40013800
 8008814:	51eb851f 	.word	0x51eb851f

08008818 <__libc_init_array>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	2600      	movs	r6, #0
 800881c:	4d0c      	ldr	r5, [pc, #48]	; (8008850 <__libc_init_array+0x38>)
 800881e:	4c0d      	ldr	r4, [pc, #52]	; (8008854 <__libc_init_array+0x3c>)
 8008820:	1b64      	subs	r4, r4, r5
 8008822:	10a4      	asrs	r4, r4, #2
 8008824:	42a6      	cmp	r6, r4
 8008826:	d109      	bne.n	800883c <__libc_init_array+0x24>
 8008828:	f000 f822 	bl	8008870 <_init>
 800882c:	2600      	movs	r6, #0
 800882e:	4d0a      	ldr	r5, [pc, #40]	; (8008858 <__libc_init_array+0x40>)
 8008830:	4c0a      	ldr	r4, [pc, #40]	; (800885c <__libc_init_array+0x44>)
 8008832:	1b64      	subs	r4, r4, r5
 8008834:	10a4      	asrs	r4, r4, #2
 8008836:	42a6      	cmp	r6, r4
 8008838:	d105      	bne.n	8008846 <__libc_init_array+0x2e>
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008840:	4798      	blx	r3
 8008842:	3601      	adds	r6, #1
 8008844:	e7ee      	b.n	8008824 <__libc_init_array+0xc>
 8008846:	f855 3b04 	ldr.w	r3, [r5], #4
 800884a:	4798      	blx	r3
 800884c:	3601      	adds	r6, #1
 800884e:	e7f2      	b.n	8008836 <__libc_init_array+0x1e>
 8008850:	0800abb8 	.word	0x0800abb8
 8008854:	0800abb8 	.word	0x0800abb8
 8008858:	0800abb8 	.word	0x0800abb8
 800885c:	0800abbc 	.word	0x0800abbc

08008860 <memset>:
 8008860:	4603      	mov	r3, r0
 8008862:	4402      	add	r2, r0
 8008864:	4293      	cmp	r3, r2
 8008866:	d100      	bne.n	800886a <memset+0xa>
 8008868:	4770      	bx	lr
 800886a:	f803 1b01 	strb.w	r1, [r3], #1
 800886e:	e7f9      	b.n	8008864 <memset+0x4>

08008870 <_init>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	bf00      	nop
 8008874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008876:	bc08      	pop	{r3}
 8008878:	469e      	mov	lr, r3
 800887a:	4770      	bx	lr

0800887c <_fini>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	bf00      	nop
 8008880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008882:	bc08      	pop	{r3}
 8008884:	469e      	mov	lr, r3
 8008886:	4770      	bx	lr
