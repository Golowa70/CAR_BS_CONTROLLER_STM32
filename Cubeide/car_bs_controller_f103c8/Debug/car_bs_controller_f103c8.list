
car_bs_controller_f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e40  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000231c  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800926c  0800926c  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  0800926c  0800926c  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800926c  0800926c  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08009274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000044  080092b8  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  080092b8  00020ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00084d13  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f81  00000000  00000000  000a4d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d20  00000000  00000000  000a8d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002bc0  00000000  00000000  000aba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194f9  00000000  00000000  000ae5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae1f  00000000  00000000  000c7ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba62  00000000  00000000  000e2900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c52c  00000000  00000000  0017e3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000044 	.word	0x20000044
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f38 	.word	0x08006f38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000048 	.word	0x20000048
 800014c:	08006f38 	.word	0x08006f38

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__gedf2>:
 8000884:	f04f 3cff 	mov.w	ip, #4294967295
 8000888:	e006      	b.n	8000898 <__cmpdf2+0x4>
 800088a:	bf00      	nop

0800088c <__ledf2>:
 800088c:	f04f 0c01 	mov.w	ip, #1
 8000890:	e002      	b.n	8000898 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__cmpdf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	f84d cd04 	str.w	ip, [sp, #-4]!
 800089c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008ae:	d01b      	beq.n	80008e8 <__cmpdf2+0x54>
 80008b0:	b001      	add	sp, #4
 80008b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008b6:	bf0c      	ite	eq
 80008b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008bc:	ea91 0f03 	teqne	r1, r3
 80008c0:	bf02      	ittt	eq
 80008c2:	ea90 0f02 	teqeq	r0, r2
 80008c6:	2000      	moveq	r0, #0
 80008c8:	4770      	bxeq	lr
 80008ca:	f110 0f00 	cmn.w	r0, #0
 80008ce:	ea91 0f03 	teq	r1, r3
 80008d2:	bf58      	it	pl
 80008d4:	4299      	cmppl	r1, r3
 80008d6:	bf08      	it	eq
 80008d8:	4290      	cmpeq	r0, r2
 80008da:	bf2c      	ite	cs
 80008dc:	17d8      	asrcs	r0, r3, #31
 80008de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008e2:	f040 0001 	orr.w	r0, r0, #1
 80008e6:	4770      	bx	lr
 80008e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f0:	d102      	bne.n	80008f8 <__cmpdf2+0x64>
 80008f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008f6:	d107      	bne.n	8000908 <__cmpdf2+0x74>
 80008f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000900:	d1d6      	bne.n	80008b0 <__cmpdf2+0x1c>
 8000902:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000906:	d0d3      	beq.n	80008b0 <__cmpdf2+0x1c>
 8000908:	f85d 0b04 	ldr.w	r0, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <__aeabi_cdrcmple>:
 8000910:	4684      	mov	ip, r0
 8000912:	4610      	mov	r0, r2
 8000914:	4662      	mov	r2, ip
 8000916:	468c      	mov	ip, r1
 8000918:	4619      	mov	r1, r3
 800091a:	4663      	mov	r3, ip
 800091c:	e000      	b.n	8000920 <__aeabi_cdcmpeq>
 800091e:	bf00      	nop

08000920 <__aeabi_cdcmpeq>:
 8000920:	b501      	push	{r0, lr}
 8000922:	f7ff ffb7 	bl	8000894 <__cmpdf2>
 8000926:	2800      	cmp	r0, #0
 8000928:	bf48      	it	mi
 800092a:	f110 0f00 	cmnmi.w	r0, #0
 800092e:	bd01      	pop	{r0, pc}

08000930 <__aeabi_dcmpeq>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff fff4 	bl	8000920 <__aeabi_cdcmpeq>
 8000938:	bf0c      	ite	eq
 800093a:	2001      	moveq	r0, #1
 800093c:	2000      	movne	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmplt>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffea 	bl	8000920 <__aeabi_cdcmpeq>
 800094c:	bf34      	ite	cc
 800094e:	2001      	movcc	r0, #1
 8000950:	2000      	movcs	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmple>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffe0 	bl	8000920 <__aeabi_cdcmpeq>
 8000960:	bf94      	ite	ls
 8000962:	2001      	movls	r0, #1
 8000964:	2000      	movhi	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmpge>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffce 	bl	8000910 <__aeabi_cdrcmple>
 8000974:	bf94      	ite	ls
 8000976:	2001      	movls	r0, #1
 8000978:	2000      	movhi	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmpgt>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffc4 	bl	8000910 <__aeabi_cdrcmple>
 8000988:	bf34      	ite	cc
 800098a:	2001      	movcc	r0, #1
 800098c:	2000      	movcs	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_f2iz>:
 8000994:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000998:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800099c:	d30f      	bcc.n	80009be <__aeabi_f2iz+0x2a>
 800099e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009a6:	d90d      	bls.n	80009c4 <__aeabi_f2iz+0x30>
 80009a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009b4:	fa23 f002 	lsr.w	r0, r3, r2
 80009b8:	bf18      	it	ne
 80009ba:	4240      	negne	r0, r0
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr
 80009c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009c8:	d101      	bne.n	80009ce <__aeabi_f2iz+0x3a>
 80009ca:	0242      	lsls	r2, r0, #9
 80009cc:	d105      	bne.n	80009da <__aeabi_f2iz+0x46>
 80009ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009d2:	bf08      	it	eq
 80009d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d8:	4770      	bx	lr
 80009da:	f04f 0000 	mov.w	r0, #0
 80009de:	4770      	bx	lr

080009e0 <Button_Add>:
 * @param handle handle of button to be registered
 * @retval return button ID (index of button in registred list), return -1 on failure
 * @note adjust MAX_BUTTONS accordingly
 */
int32_t Button_Add(Button_Struct_t *handle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");
    BUTTON_ASSERT(Button_Count < MAX_BUTTONS, "MAX Button count reached");

    if (Button_Count < MAX_BUTTONS && handle != NULL)
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <Button_Add+0x6c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d826      	bhi.n	8000a3e <Button_Add+0x5e>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d023      	beq.n	8000a3e <Button_Add+0x5e>
    {
        BUTTON_ASSERT(handle->Button_Read, "Button_Read not defined");

        /* call init function if defined */
        if (handle->Button_Init != NULL)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <Button_Add+0x24>
        {
            handle->Button_Init();
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	4798      	blx	r3
        }
        handle->Button_Event = Button_Idle;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
        handle->Button_Clicked_Count = 0;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	731a      	strb	r2, [r3, #12]
        handle->Button_Pressed_Ticks = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
        handle->Button_Released_Ticks = 0;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]

        Button_List[Button_Count] = handle;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <Button_Add+0x6c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <Button_Add+0x70>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        Button_Count++;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <Button_Add+0x6c>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <Button_Add+0x6c>)
 8000a34:	701a      	strb	r2, [r3, #0]

        /** return button ID (index of button in registred list) */
        return Button_Count - 1;
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <Button_Add+0x6c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	e001      	b.n	8000a42 <Button_Add+0x62>
    }
    /** return error */
    return -1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000070 	.word	0x20000070
 8000a50:	20000060 	.word	0x20000060

08000a54 <Button_Loop>:
 * @brief frequently called in main loop or timer ISR. should be called at least every 20ms?
 * @param none
 * @retval none
 */
void Button_Loop(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
    static uint32_t Button_Scan_Time_Stamp = 0;

    /** execute this loop on every BUTTON_SCAN_TICK */
    if (Button_Get_Tick() - Button_Scan_Time_Stamp > BUTTON_SCAN_TICK)
 8000a5a:	f001 fded 	bl	8002638 <Button_Get_Tick>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <Button_Loop+0x15c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	f240 809d 	bls.w	8000ba6 <Button_Loop+0x152>
    {
        Button_Struct_t *handle = NULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
        Button_Scan_Time_Stamp = Button_Get_Tick();
 8000a70:	f001 fde2 	bl	8002638 <Button_Get_Tick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a4e      	ldr	r2, [pc, #312]	; (8000bb0 <Button_Loop+0x15c>)
 8000a78:	6013      	str	r3, [r2, #0]

        for (uint8_t Index = 0; Index < Button_Count; Index++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e08c      	b.n	8000b9a <Button_Loop+0x146>
        {
            /** grab button handle from list */
            handle = Button_List[Index];
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <Button_Loop+0x160>)
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	603b      	str	r3, [r7, #0]

            BUTTON_ASSERT(handle, "NULL found in list");

            if (handle != NULL)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f000 8081 	beq.w	8000b94 <Button_Loop+0x140>
            {
                /** button pressed detected */
                if (handle->Button_Read != NULL && handle->Button_Read())
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d038      	beq.n	8000b0c <Button_Loop+0xb8>
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4798      	blx	r3
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d032      	beq.n	8000b0c <Button_Loop+0xb8>
                {
                    handle->Button_Pressed_Ticks++;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	605a      	str	r2, [r3, #4]

                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b63      	cmp	r3, #99	; 0x63
 8000ab6:	d80e      	bhi.n	8000ad6 <Button_Loop+0x82>
                    {
                        /** button repressed detected */
                        if (handle->Button_Released_Ticks < BUTTON_REPRESSED_TICK)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d803      	bhi.n	8000ac8 <Button_Loop+0x74>
                        {
                            handle->Button_Event = Button_Repressed;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e002      	b.n	8000ace <Button_Loop+0x7a>
                        }
                        else
                        {
                            handle->Button_Event = Button_Pressed;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
                        }
                        handle->Button_Released_Ticks = 0;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 8000ad4:	e05d      	b.n	8000b92 <Button_Loop+0x13e>
                    }
                    else if (handle->Button_Event != Button_Long_Pressed)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d059      	beq.n	8000b92 <Button_Loop+0x13e>
                    {
                        /** button long pressed detected */
                        handle->Button_Event = Button_Long_Pressed;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	701a      	strb	r2, [r3, #0]
                        /** 0xFF for long press */
                        handle->Button_Clicked_Count = 0xFF;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	22ff      	movs	r2, #255	; 0xff
 8000ae8:	731a      	strb	r2, [r3, #12]
                        handle->Button_Count_Captured = 0xFF;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	735a      	strb	r2, [r3, #13]
                        /** if button callback is defined, call it*/
                        if (handle->Callback != NULL)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d005      	beq.n	8000b04 <Button_Loop+0xb0>
                        {
                            handle->Callback(handle->Button_Clicked_Count);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	7b12      	ldrb	r2, [r2, #12]
 8000b00:	4610      	mov	r0, r2
 8000b02:	4798      	blx	r3
                        }
                        handle->Button_Clicked_Count = 0;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2200      	movs	r2, #0
 8000b08:	731a      	strb	r2, [r3, #12]
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 8000b0a:	e042      	b.n	8000b92 <Button_Loop+0x13e>
                    }
                }
                else
                {
                    /** button released detected */
                    handle->Button_Released_Ticks++;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	609a      	str	r2, [r3, #8]

                    /** if button was pressed for BUTTON_DEBOUNCE_TICK */
                    if (handle->Button_Pressed_Ticks > BUTTON_DEBOUNCE_TICK)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	d91c      	bls.n	8000b58 <Button_Loop+0x104>
                    {
                        handle->Button_Pressed_Ticks = 0;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]

                        if (handle->Button_Event == Button_Repressed)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d106      	bne.n	8000b3a <Button_Loop+0xe6>
                        {
                            handle->Button_Clicked_Count++;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	7b1b      	ldrb	r3, [r3, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	731a      	strb	r2, [r3, #12]
 8000b38:	e00e      	b.n	8000b58 <Button_Loop+0x104>
                        }
                        else if (handle->Button_Event == Button_Pressed)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d103      	bne.n	8000b4a <Button_Loop+0xf6>
                        {
                            handle->Button_Clicked_Count = 1;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2201      	movs	r2, #1
 8000b46:	731a      	strb	r2, [r3, #12]
 8000b48:	e006      	b.n	8000b58 <Button_Loop+0x104>
                        }
                        else if (handle->Button_Event == Button_Long_Pressed)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d102      	bne.n	8000b58 <Button_Loop+0x104>
                        {
                            handle->Button_Event = Button_Idle;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /** if button released for BUTTON_CLICKED_TICK */
                    if (handle->Button_Released_Ticks > BUTTON_CLICKED_TICK)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d919      	bls.n	8000b94 <Button_Loop+0x140>
                    {
                        if (handle->Button_Event != Button_Idle)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d015      	beq.n	8000b94 <Button_Loop+0x140>
                        {
                            handle->Button_Event = Button_Idle;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
                            /** capture the button click so we can read it manually if we want */
                            handle->Button_Count_Captured = handle->Button_Clicked_Count;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	7b1a      	ldrb	r2, [r3, #12]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	735a      	strb	r2, [r3, #13]
                            /** if button callback is defined, call it */
                            if (handle->Callback != NULL)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <Button_Loop+0x136>
                            {
                                handle->Callback(handle->Button_Clicked_Count);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	7b12      	ldrb	r2, [r2, #12]
 8000b86:	4610      	mov	r0, r2
 8000b88:	4798      	blx	r3
                            }
                            /** reest click count after callback and start the scan again */
                            handle->Button_Clicked_Count = 0;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	731a      	strb	r2, [r3, #12]
 8000b90:	e000      	b.n	8000b94 <Button_Loop+0x140>
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 8000b92:	bf00      	nop
        for (uint8_t Index = 0; Index < Button_Count; Index++)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	3301      	adds	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <Button_Loop+0x164>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	79fa      	ldrb	r2, [r7, #7]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f4ff af6d 	bcc.w	8000a80 <Button_Loop+0x2c>
                    }
                }
            }
        }
    }
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000074 	.word	0x20000074
 8000bb4:	20000060 	.word	0x20000060
 8000bb8:	20000070 	.word	0x20000070

08000bbc <Button_Get_Status>:
 * @brief return the current state of button
 * @param handle handle of button
 * @retval return Button_Event
 */
Button_Event_t Button_Get_Status(Button_Struct_t *handle)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");

    if (handle != NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <Button_Get_Status+0x14>
    {
        return handle->Button_Event;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	e000      	b.n	8000bd2 <Button_Get_Status+0x16>
    }
    /** error*/
    return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <Button_Get_Clicked_Count>:
 * @brief return the clicked count of button
 * @param handle handle of button
 * @retval return clicked count
 */
uint8_t Button_Get_Clicked_Count(Button_Struct_t *handle)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");

    uint8_t count = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

    if (handle != NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00d      	beq.n	8000c0a <Button_Get_Clicked_Count+0x2e>
    {
        if (handle->Button_Event == Button_Idle || handle->Button_Event == Button_Long_Pressed)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <Button_Get_Clicked_Count+0x22>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d105      	bne.n	8000c0a <Button_Get_Clicked_Count+0x2e>
        {
            count = handle->Button_Count_Captured;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7b5b      	ldrb	r3, [r3, #13]
 8000c02:	73fb      	strb	r3, [r7, #15]
            handle->Button_Count_Captured = 0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	735a      	strb	r2, [r3, #13]
        }
    }

    return count;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
	...

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f004 fae4 	bl	80051e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f8c4 	bl	8000dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 f99c 	bl	8000f60 <MX_GPIO_Init>
  MX_CAN_Init();
 8000c28:	f000 f906 	bl	8000e38 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000c2c:	f000 f96e 	bl	8000f0c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000c30:	f000 f936 	bl	8000ea0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//FLASH INIT
  	  W25qxx_Init();
 8000c34:	f004 f990 	bl	8004f58 <W25qxx_Init>
	//W25qxx_EraseChip();
	//W25qxx_EraseBlock(0); // 65536 байт
	//W25qxx_EraseSector(0); // 4096 байт

//DISPLAY INIT
	u8g2_Setup_st7565_nhd_c12864_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi,
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <main+0x140>)
 8000c3a:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <main+0x144>)
 8000c3c:	4948      	ldr	r1, [pc, #288]	; (8000d60 <main+0x148>)
 8000c3e:	4849      	ldr	r0, [pc, #292]	; (8000d64 <main+0x14c>)
 8000c40:	f002 fbe0 	bl	8003404 <u8g2_Setup_st7565_nhd_c12864_f>
			u8g2_gpio_and_delay_stm32);
	u8g2_InitDisplay(&u8g2); 	 // send init sequence to the display, display is in sleep mode after this
 8000c44:	4847      	ldr	r0, [pc, #284]	; (8000d64 <main+0x14c>)
 8000c46:	f004 f80a 	bl	8004c5e <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4845      	ldr	r0, [pc, #276]	; (8000d64 <main+0x14c>)
 8000c4e:	f004 f815 	bl	8004c7c <u8x8_SetPowerSave>
	u8g2_SetContrast(&u8g2, 250);
 8000c52:	21fa      	movs	r1, #250	; 0xfa
 8000c54:	4843      	ldr	r0, [pc, #268]	; (8000d64 <main+0x14c>)
 8000c56:	f004 f822 	bl	8004c9e <u8x8_SetContrast>
	u8g2_ClearDisplay(&u8g2);
 8000c5a:	4842      	ldr	r0, [pc, #264]	; (8000d64 <main+0x14c>)
 8000c5c:	f002 fbac 	bl	80033b8 <u8g2_ClearDisplay>
	u8g2_SetFont(&u8g2, u8g2_font_courB18_tr);
 8000c60:	4941      	ldr	r1, [pc, #260]	; (8000d68 <main+0x150>)
 8000c62:	4840      	ldr	r0, [pc, #256]	; (8000d64 <main+0x14c>)
 8000c64:	f003 f978 	bl	8003f58 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, 20, 30, "Hello!");
 8000c68:	4b40      	ldr	r3, [pc, #256]	; (8000d6c <main+0x154>)
 8000c6a:	221e      	movs	r2, #30
 8000c6c:	2114      	movs	r1, #20
 8000c6e:	483d      	ldr	r0, [pc, #244]	; (8000d64 <main+0x14c>)
 8000c70:	f003 f8d4 	bl	8003e1c <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 8000c74:	483b      	ldr	r0, [pc, #236]	; (8000d64 <main+0x14c>)
 8000c76:	f002 fb37 	bl	80032e8 <u8g2_SendBuffer>
	HAL_Delay(1000);
 8000c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7e:	f004 fb15 	bl	80052ac <HAL_Delay>
	display_height = u8g2_GetDisplayHeight(&u8g2);
 8000c82:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <main+0x14c>)
 8000c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <main+0x158>)
 8000c8c:	701a      	strb	r2, [r3, #0]
	display_width = u8g2_GetDisplayWidth(&u8g2);
 8000c8e:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <main+0x14c>)
 8000c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <main+0x15c>)
 8000c98:	701a      	strb	r2, [r3, #0]
	display_num_lines = display_height / (LCD_FONT_HIGHT + LCD_LINE_SPACER);
 8000c9a:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <main+0x158>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4a36      	ldr	r2, [pc, #216]	; (8000d78 <main+0x160>)
 8000ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <main+0x164>)
 8000caa:	701a      	strb	r2, [r3, #0]

//BUTTONS INIT
	Button_A.Button_Init = NULL; // инициализация кнопки
 8000cac:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <main+0x168>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
	Button_A.Button_Read = Button_A_Read;
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <main+0x168>)
 8000cb4:	4a33      	ldr	r2, [pc, #204]	; (8000d84 <main+0x16c>)
 8000cb6:	615a      	str	r2, [r3, #20]
	Button_A.Callback = NULL; //    NULL; /** without callback */
 8000cb8:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <main+0x168>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_A);
 8000cbe:	4830      	ldr	r0, [pc, #192]	; (8000d80 <main+0x168>)
 8000cc0:	f7ff fe8e 	bl	80009e0 <Button_Add>

	Button_B.Button_Init = NULL;
 8000cc4:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <main+0x170>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
	Button_B.Button_Read = Button_B_Read;
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <main+0x170>)
 8000ccc:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <main+0x174>)
 8000cce:	615a      	str	r2, [r3, #20]
	Button_B.Callback = NULL; //    NULL; /** without callback */
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <main+0x170>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_B);
 8000cd6:	482c      	ldr	r0, [pc, #176]	; (8000d88 <main+0x170>)
 8000cd8:	f7ff fe82 	bl	80009e0 <Button_Add>

	Button_C.Button_Init = NULL;
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <main+0x178>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
	Button_C.Button_Read = Button_C_Read;
 8000ce2:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <main+0x178>)
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <main+0x17c>)
 8000ce6:	615a      	str	r2, [r3, #20]
	Button_C.Callback = NULL; //    NULL; /** without callback */
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <main+0x178>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_C);
 8000cee:	4828      	ldr	r0, [pc, #160]	; (8000d90 <main+0x178>)
 8000cf0:	f7ff fe76 	bl	80009e0 <Button_Add>

	Button_D.Button_Init = NULL;
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <main+0x180>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
	Button_D.Button_Read = Button_D_Read;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <main+0x180>)
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <main+0x184>)
 8000cfe:	615a      	str	r2, [r3, #20]
	Button_D.Callback = NULL; //    NULL; /** without callback */
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <main+0x180>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_D);
 8000d06:	4824      	ldr	r0, [pc, #144]	; (8000d98 <main+0x180>)
 8000d08:	f7ff fe6a 	bl	80009e0 <Button_Add>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if((HAL_GetTick() - time_b) > BLINK_INTERVAL) // интервал 500мс
 8000d0c:	f004 fac4 	bl	8005298 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <main+0x188>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d1c:	d913      	bls.n	8000d46 <main+0x12e>
	   {
		  flag_blink = !flag_blink;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <main+0x18c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf14      	ite	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	2300      	moveq	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f083 0301 	eor.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <main+0x18c>)
 8000d3a:	701a      	strb	r2, [r3, #0]
		  time_b = HAL_GetTick();
 8000d3c:	f004 faac 	bl	8005298 <HAL_GetTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <main+0x188>)
 8000d44:	6013      	str	r3, [r2, #0]
	   }


	  fnMenuProcess();
 8000d46:	f001 f9b9 	bl	80020bc <fnMenuProcess>

	  btn_state = fnGetPressKey();// опрос кнопок
 8000d4a:	f001 fbab 	bl	80024a4 <fnGetPressKey>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <main+0x190>)
 8000d54:	801a      	strh	r2, [r3, #0]
	  if((HAL_GetTick() - time_b) > BLINK_INTERVAL) // интервал 500мс
 8000d56:	e7d9      	b.n	8000d0c <main+0xf4>
 8000d58:	0800114d 	.word	0x0800114d
 8000d5c:	08001261 	.word	0x08001261
 8000d60:	08009204 	.word	0x08009204
 8000d64:	20000978 	.word	0x20000978
 8000d68:	080079dc 	.word	0x080079dc
 8000d6c:	08006f50 	.word	0x08006f50
 8000d70:	20000891 	.word	0x20000891
 8000d74:	20000a94 	.word	0x20000a94
 8000d78:	aaaaaaab 	.word	0xaaaaaaab
 8000d7c:	20000890 	.word	0x20000890
 8000d80:	2000095c 	.word	0x2000095c
 8000d84:	08002649 	.word	0x08002649
 8000d88:	20000940 	.word	0x20000940
 8000d8c:	08002669 	.word	0x08002669
 8000d90:	20000924 	.word	0x20000924
 8000d94:	08002689 	.word	0x08002689
 8000d98:	20000908 	.word	0x20000908
 8000d9c:	080026a9 	.word	0x080026a9
 8000da0:	20000084 	.word	0x20000084
 8000da4:	20000088 	.word	0x20000088
 8000da8:	2000007c 	.word	0x2000007c

08000dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b090      	sub	sp, #64	; 0x40
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 f8b4 	bl	8006f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de0:	2302      	movs	r3, #2
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fe11 	bl	8005a1c <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e00:	f001 fc62 	bl	80026c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f005 f87c 	bl	8005f1c <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e2a:	f001 fc4d 	bl	80026c8 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	; 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <MX_CAN_Init+0x64>)
 8000e40:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e44:	2210      	movs	r2, #16
 8000e46:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <MX_CAN_Init+0x60>)
 8000e86:	f004 fa35 	bl	80052f4 <HAL_CAN_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000e90:	f001 fc1a 	bl	80026c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000a6c 	.word	0x20000a6c
 8000e9c:	40006400 	.word	0x40006400

08000ea0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <MX_SPI1_Init+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000eac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000ed4:	2218      	movs	r2, #24
 8000ed6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000eec:	220a      	movs	r2, #10
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <MX_SPI1_Init+0x64>)
 8000ef2:	f005 f9ad 	bl	8006250 <HAL_SPI_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000efc:	f001 fbe4 	bl	80026c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000894 	.word	0x20000894
 8000f08:	40013000 	.word	0x40013000

08000f0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <MX_USART1_UART_Init+0x50>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_USART1_UART_Init+0x4c>)
 8000f44:	f005 fef0 	bl	8006d28 <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f4e:	f001 fbbb 	bl	80026c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000a0c 	.word	0x20000a0c
 8000f5c:	40013800 	.word	0x40013800

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b3d      	ldr	r3, [pc, #244]	; (800106c <MX_GPIO_Init+0x10c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a3c      	ldr	r2, [pc, #240]	; (800106c <MX_GPIO_Init+0x10c>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b3a      	ldr	r3, [pc, #232]	; (800106c <MX_GPIO_Init+0x10c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <MX_GPIO_Init+0x10c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a36      	ldr	r2, [pc, #216]	; (800106c <MX_GPIO_Init+0x10c>)
 8000f92:	f043 0320 	orr.w	r3, r3, #32
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <MX_GPIO_Init+0x10c>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0320 	and.w	r3, r3, #32
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <MX_GPIO_Init+0x10c>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a30      	ldr	r2, [pc, #192]	; (800106c <MX_GPIO_Init+0x10c>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MX_GPIO_Init+0x10c>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <MX_GPIO_Init+0x10c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a2a      	ldr	r2, [pc, #168]	; (800106c <MX_GPIO_Init+0x10c>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_GPIO_Init+0x10c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fda:	4825      	ldr	r0, [pc, #148]	; (8001070 <MX_GPIO_Init+0x110>)
 8000fdc:	f004 fd05 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2118      	movs	r1, #24
 8000fe4:	4823      	ldr	r0, [pc, #140]	; (8001074 <MX_GPIO_Init+0x114>)
 8000fe6:	f004 fd00 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4822      	ldr	r0, [pc, #136]	; (8001078 <MX_GPIO_Init+0x118>)
 8000ff0:	f004 fcfb 	bl	80059ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W25Q_CS_Pin */
  GPIO_InitStruct.Pin = W25Q_CS_Pin;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4619      	mov	r1, r3
 800100c:	4818      	ldr	r0, [pc, #96]	; (8001070 <MX_GPIO_Init+0x110>)
 800100e:	f004 fb51 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin;
 8001012:	2318      	movs	r3, #24
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2302      	movs	r3, #2
 8001020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4619      	mov	r1, r3
 8001028:	4812      	ldr	r0, [pc, #72]	; (8001074 <MX_GPIO_Init+0x114>)
 800102a:	f004 fb43 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800102e:	2301      	movs	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_GPIO_Init+0x118>)
 8001046:	f004 fb35 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_ENTER_Pin BUTTON_ESC_Pin BUTTON_UP_Pin BUTTON_DOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_ENTER_Pin|BUTTON_ESC_Pin|BUTTON_UP_Pin|BUTTON_DOWN_Pin;
 800104a:	2378      	movs	r3, #120	; 0x78
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_GPIO_Init+0x118>)
 800105e:	f004 fb29 	bl	80056b4 <HAL_GPIO_Init>

}
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40011000 	.word	0x40011000
 8001074:	40010800 	.word	0x40010800
 8001078:	40010c00 	.word	0x40010c00

0800107c <u8g_port_delay_ns>:


//****************************************************************************

//функции задержек для работы библиотеки дисплея
void u8g_port_delay_ns(uint8_t ns) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	// Core @72 MHZ: 14ns per instruction.
	// __NOP(); is direct "nop;" instruction to cpu.
	// Divide ns / 28 (extra instruction for jump back to beginning of the loop) for loop cycles.
	for (uint8_t i = 0; i < (ns / 28); i++) {
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e003      	b.n	8001094 <u8g_port_delay_ns+0x18>
		__NOP();
 800108c:	bf00      	nop
	for (uint8_t i = 0; i < (ns / 28); i++) {
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3301      	adds	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <u8g_port_delay_ns+0x38>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3f2      	bcc.n	800108c <u8g_port_delay_ns+0x10>
	}
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	24924925 	.word	0x24924925

080010b8 <u8g_port_delay_100ns>:

void u8g_port_delay_100ns(uint8_t ns) {
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	// Same as in u8g_hw_port_delay_ns function.
	// 100 / 28 = 3.57;
	for (uint16_t i = 0; i < (ns * 3.57); i++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	81fb      	strh	r3, [r7, #14]
 80010c6:	e003      	b.n	80010d0 <u8g_port_delay_100ns+0x18>
		__NOP();
 80010c8:	bf00      	nop
	for (uint16_t i = 0; i < (ns * 3.57); i++) {
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	3301      	adds	r3, #1
 80010ce:	81fb      	strh	r3, [r7, #14]
 80010d0:	89fb      	ldrh	r3, [r7, #14]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fb6c 	bl	80007b0 <__aeabi_i2d>
 80010d8:	4604      	mov	r4, r0
 80010da:	460d      	mov	r5, r1
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fb66 	bl	80007b0 <__aeabi_i2d>
 80010e4:	a30a      	add	r3, pc, #40	; (adr r3, 8001110 <u8g_port_delay_100ns+0x58>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff f831 	bl	8000150 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff fc25 	bl	8000944 <__aeabi_dcmplt>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e3      	bne.n	80010c8 <u8g_port_delay_100ns+0x10>
	}
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}
 800110a:	bf00      	nop
 800110c:	f3af 8000 	nop.w
 8001110:	28f5c28f 	.word	0x28f5c28f
 8001114:	400c8f5c 	.word	0x400c8f5c

08001118 <u8g_port_delay_10us>:

void u8g_port_delay_10us(uint8_t us) {
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	// Same as in u8g_hw_port_delay_ns function.
	// 3.57 * 100 ? 357;
	for (uint16_t i = 0; i < (us * 357); i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	81fb      	strh	r3, [r7, #14]
 8001126:	e003      	b.n	8001130 <u8g_port_delay_10us+0x18>
		__NOP();
 8001128:	bf00      	nop
	for (uint16_t i = 0; i < (us * 357); i++) {
 800112a:	89fb      	ldrh	r3, [r7, #14]
 800112c:	3301      	adds	r3, #1
 800112e:	81fb      	strh	r3, [r7, #14]
 8001130:	89fa      	ldrh	r2, [r7, #14]
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f240 1165 	movw	r1, #357	; 0x165
 8001138:	fb01 f303 	mul.w	r3, r1, r3
 800113c:	429a      	cmp	r2, r3
 800113e:	dbf3      	blt.n	8001128 <u8g_port_delay_10us+0x10>
	}
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <u8g2_gpio_and_delay_stm32>:
//************************************************************************

// функция обработки задержек и управления gpio для работы библиотеки дисплея
uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8,
		U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
		U8X8_UNUSED void *arg_ptr) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	72fb      	strb	r3, [r7, #11]
 800115a:	4613      	mov	r3, r2
 800115c:	72bb      	strb	r3, [r7, #10]

	switch (msg) {
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	3b28      	subs	r3, #40	; 0x28
 8001162:	2b23      	cmp	r3, #35	; 0x23
 8001164:	d873      	bhi.n	800124e <u8g2_gpio_and_delay_stm32+0x102>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <u8g2_gpio_and_delay_stm32+0x20>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	080011fd 	.word	0x080011fd
 8001170:	08001227 	.word	0x08001227
 8001174:	0800121d 	.word	0x0800121d
 8001178:	08001213 	.word	0x08001213
 800117c:	08001209 	.word	0x08001209
 8001180:	0800124f 	.word	0x0800124f
 8001184:	0800124f 	.word	0x0800124f
 8001188:	0800124f 	.word	0x0800124f
 800118c:	0800124f 	.word	0x0800124f
 8001190:	0800124f 	.word	0x0800124f
 8001194:	0800124f 	.word	0x0800124f
 8001198:	0800124f 	.word	0x0800124f
 800119c:	0800124f 	.word	0x0800124f
 80011a0:	0800124f 	.word	0x0800124f
 80011a4:	0800124f 	.word	0x0800124f
 80011a8:	0800124f 	.word	0x0800124f
 80011ac:	0800124f 	.word	0x0800124f
 80011b0:	0800124f 	.word	0x0800124f
 80011b4:	0800124f 	.word	0x0800124f
 80011b8:	0800124f 	.word	0x0800124f
 80011bc:	0800124f 	.word	0x0800124f
 80011c0:	0800124f 	.word	0x0800124f
 80011c4:	0800124f 	.word	0x0800124f
 80011c8:	0800124f 	.word	0x0800124f
 80011cc:	0800124f 	.word	0x0800124f
 80011d0:	0800124f 	.word	0x0800124f
 80011d4:	0800124f 	.word	0x0800124f
 80011d8:	0800124f 	.word	0x0800124f
 80011dc:	0800124f 	.word	0x0800124f
 80011e0:	0800124f 	.word	0x0800124f
 80011e4:	0800124f 	.word	0x0800124f
 80011e8:	0800124f 	.word	0x0800124f
 80011ec:	0800124f 	.word	0x0800124f
 80011f0:	0800124f 	.word	0x0800124f
 80011f4:	0800124f 	.word	0x0800124f
 80011f8:	08001231 	.word	0x08001231

		case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2110      	movs	r1, #16
 8001200:	4816      	ldr	r0, [pc, #88]	; (800125c <u8g2_gpio_and_delay_stm32+0x110>)
 8001202:	f004 fbf2 	bl	80059ea <HAL_GPIO_WritePin>
		break;
 8001206:	e024      	b.n	8001252 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_NANO:
		u8g_port_delay_ns(arg_int);
 8001208:	7abb      	ldrb	r3, [r7, #10]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff36 	bl	800107c <u8g_port_delay_ns>
		break;
 8001210:	e01f      	b.n	8001252 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_100NANO:
		u8g_port_delay_100ns(arg_int);
 8001212:	7abb      	ldrb	r3, [r7, #10]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff4f 	bl	80010b8 <u8g_port_delay_100ns>
		break;
 800121a:	e01a      	b.n	8001252 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_10MICRO:
		u8g_port_delay_10us(arg_int);
 800121c:	7abb      	ldrb	r3, [r7, #10]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff7a 	bl	8001118 <u8g_port_delay_10us>
		break;
 8001224:	e015      	b.n	8001252 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8001226:	7abb      	ldrb	r3, [r7, #10]
 8001228:	4618      	mov	r0, r3
 800122a:	f004 f83f 	bl	80052ac <HAL_Delay>
		break;
 800122e:	e010      	b.n	8001252 <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_GPIO_RESET:
		if (arg_int)
 8001230:	7abb      	ldrb	r3, [r7, #10]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <u8g2_gpio_and_delay_stm32+0xf6>
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2108      	movs	r1, #8
 800123a:	4808      	ldr	r0, [pc, #32]	; (800125c <u8g2_gpio_and_delay_stm32+0x110>)
 800123c:	f004 fbd5 	bl	80059ea <HAL_GPIO_WritePin>
		else
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
		break;
 8001240:	e007      	b.n	8001252 <u8g2_gpio_and_delay_stm32+0x106>
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2108      	movs	r1, #8
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <u8g2_gpio_and_delay_stm32+0x110>)
 8001248:	f004 fbcf 	bl	80059ea <HAL_GPIO_WritePin>
		break;
 800124c:	e001      	b.n	8001252 <u8g2_gpio_and_delay_stm32+0x106>
		default:
		return 0;//A message was received which is not implemented, return 0 to indicate an error
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <u8g2_gpio_and_delay_stm32+0x108>
	}

	return 1; // command processed successfully.
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40010800 	.word	0x40010800

08001260 <u8x8_byte_4wire_hw_spi>:
//***************************************************************************************************

// функция для работы библиотеки дисплея по SPI
uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	72fb      	strb	r3, [r7, #11]
 800126e:	4613      	mov	r3, r2
 8001270:	72bb      	strb	r3, [r7, #10]

	switch (msg) {
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	3b14      	subs	r3, #20
 8001276:	2b0c      	cmp	r3, #12
 8001278:	d837      	bhi.n	80012ea <u8x8_byte_4wire_hw_spi+0x8a>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <u8x8_byte_4wire_hw_spi+0x20>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	080012ef 	.word	0x080012ef
 8001284:	080012eb 	.word	0x080012eb
 8001288:	080012eb 	.word	0x080012eb
 800128c:	080012b5 	.word	0x080012b5
 8001290:	080012d3 	.word	0x080012d3
 8001294:	080012df 	.word	0x080012df
 8001298:	080012eb 	.word	0x080012eb
 800129c:	080012eb 	.word	0x080012eb
 80012a0:	080012eb 	.word	0x080012eb
 80012a4:	080012eb 	.word	0x080012eb
 80012a8:	080012eb 	.word	0x080012eb
 80012ac:	080012eb 	.word	0x080012eb
 80012b0:	080012c5 	.word	0x080012c5
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 100);
 80012b4:	7abb      	ldrb	r3, [r7, #10]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	480f      	ldr	r0, [pc, #60]	; (80012fc <u8x8_byte_4wire_hw_spi+0x9c>)
 80012be:	f005 f84b 	bl	8006358 <HAL_SPI_Transmit>
		break;
 80012c2:	e015      	b.n	80012f0 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_INIT:
		break;

	case U8X8_MSG_BYTE_SET_DC:
		 HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, arg_int);
 80012c4:	7abb      	ldrb	r3, [r7, #10]
 80012c6:	461a      	mov	r2, r3
 80012c8:	2101      	movs	r1, #1
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <u8x8_byte_4wire_hw_spi+0xa0>)
 80012cc:	f004 fb8d 	bl	80059ea <HAL_GPIO_WritePin>
		break;
 80012d0:	e00e      	b.n	80012f0 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_START_TRANSFER:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2110      	movs	r1, #16
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <u8x8_byte_4wire_hw_spi+0xa4>)
 80012d8:	f004 fb87 	bl	80059ea <HAL_GPIO_WritePin>
		break;
 80012dc:	e008      	b.n	80012f0 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2110      	movs	r1, #16
 80012e2:	4808      	ldr	r0, [pc, #32]	; (8001304 <u8x8_byte_4wire_hw_spi+0xa4>)
 80012e4:	f004 fb81 	bl	80059ea <HAL_GPIO_WritePin>
		break;
 80012e8:	e002      	b.n	80012f0 <u8x8_byte_4wire_hw_spi+0x90>

	default:
		return 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e001      	b.n	80012f2 <u8x8_byte_4wire_hw_spi+0x92>
		break;
 80012ee:	bf00      	nop
	}
	return 1;
 80012f0:	2301      	movs	r3, #1
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000894 	.word	0x20000894
 8001300:	40010c00 	.word	0x40010c00
 8001304:	40010800 	.word	0x40010800

08001308 <fnPrintMenuItemName>:
//*****************************************************************************************

//Функция печати имени пункта меню из progmem (общая для всех меню) --------------
void fnPrintMenuItemName(uint8_t _num_item, uint8_t _num_line, const char* const* _names) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	603a      	str	r2, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	460b      	mov	r3, r1
 8001316:	71bb      	strb	r3, [r7, #6]

  char buffer[32] = {0,};                            // Буфер на полную строку
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	619a      	str	r2, [r3, #24]
  uint8_t i = 0;                                     // Переменная - счетчик
 8001330:	2300      	movs	r3, #0
 8001332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  const char * ptr = _names[_num_item];			// Получаем указатель на первый символ строки
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28


  do {                                            // Начало цикла
    buffer[i] = *ptr;        					  // Прочитать в буфер один символ из PGM и подвинуть указатель на 1
 8001342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800134e:	440b      	add	r3, r1
 8001350:	f803 2c28 	strb.w	r2, [r3, #-40]
    i++;
 8001354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001358:	3301      	adds	r3, #1
 800135a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ptr++;
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	3301      	adds	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  } while (i<ITEM_MAX_CHARS);                     // Если это не конец строки - вернуться в начало цикла
 8001364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001368:	2b10      	cmp	r3, #16
 800136a:	d9ea      	bls.n	8001342 <fnPrintMenuItemName+0x3a>
      buffer[i++] = (char)(pgm_read_byte(ptr));   // выводим
      ptr++;                                      // следующий символ
    }
 */

  u8g2_SetFont(&u8g2,u8g2_font_6x12_tr);
 800136c:	490d      	ldr	r1, [pc, #52]	; (80013a4 <fnPrintMenuItemName+0x9c>)
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <fnPrintMenuItemName+0xa0>)
 8001370:	f002 fdf2 	bl	8003f58 <u8g2_SetFont>
  u8g2_DrawStr(&u8g2,3,(_num_line*12)-1,buffer); // Вывод готовой строки
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	b29b      	uxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	0052      	lsls	r2, r2, #1
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2103      	movs	r1, #3
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <fnPrintMenuItemName+0xa0>)
 800138e:	f002 fd45 	bl	8003e1c <u8g2_DrawStr>
  u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 8001392:	4906      	ldr	r1, [pc, #24]	; (80013ac <fnPrintMenuItemName+0xa4>)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <fnPrintMenuItemName+0xa0>)
 8001396:	f002 fddf 	bl	8003f58 <u8g2_SetFont>

}
 800139a:	bf00      	nop
 800139c:	3730      	adds	r7, #48	; 0x30
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	08007610 	.word	0x08007610
 80013a8:	20000978 	.word	0x20000978
 80013ac:	080082a0 	.word	0x080082a0

080013b0 <fnPrintSelectionFrame>:
//*******************************************************************************************************************

//----------- Функция печати рамки навигации по меню -------------------
void fnPrintSelectionFrame(uint8_t item_pointer) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]

  uint8_t n = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]


  if(item_pointer < display_num_lines)n = item_pointer;
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <fnPrintSelectionFrame+0xd4>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	79fa      	ldrb	r2, [r7, #7]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d202      	bcs.n	80013ce <fnPrintSelectionFrame+0x1e>
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e008      	b.n	80013e0 <fnPrintSelectionFrame+0x30>
  else n = item_pointer % display_num_lines;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <fnPrintSelectionFrame+0xd4>)
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80013d8:	fb02 f201 	mul.w	r2, r2, r1
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	73fb      	strb	r3, [r7, #15]

  if(menu_mode == MENU_SETPOINTS_EDIT_MODE){
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <fnPrintSelectionFrame+0xd8>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d135      	bne.n	8001454 <fnPrintSelectionFrame+0xa4>


    if(flag_blink)u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <fnPrintSelectionFrame+0xdc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d014      	beq.n	800141a <fnPrintSelectionFrame+0x6a>
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	0052      	lsls	r2, r2, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	3302      	adds	r3, #2
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <fnPrintSelectionFrame+0xe0>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b02      	subs	r3, #2
 800140a:	b29b      	uxth	r3, r3
 800140c:	210c      	movs	r1, #12
 800140e:	9100      	str	r1, [sp, #0]
 8001410:	2100      	movs	r1, #0
 8001412:	4820      	ldr	r0, [pc, #128]	; (8001494 <fnPrintSelectionFrame+0xe4>)
 8001414:	f001 fe98 	bl	8003148 <u8g2_DrawFrame>
  }
  else{
	  u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
  }

}
 8001418:	e030      	b.n	800147c <fnPrintSelectionFrame+0xcc>
      u8g2_SetDrawColor(&u8g2,0);
 800141a:	2100      	movs	r1, #0
 800141c:	481d      	ldr	r0, [pc, #116]	; (8001494 <fnPrintSelectionFrame+0xe4>)
 800141e:	f002 fec7 	bl	80041b0 <u8g2_SetDrawColor>
      u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	b29b      	uxth	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	0052      	lsls	r2, r2, #1
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	b29b      	uxth	r3, r3
 8001430:	3302      	adds	r3, #2
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <fnPrintSelectionFrame+0xe0>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b29b      	uxth	r3, r3
 800143a:	3b02      	subs	r3, #2
 800143c:	b29b      	uxth	r3, r3
 800143e:	210c      	movs	r1, #12
 8001440:	9100      	str	r1, [sp, #0]
 8001442:	2100      	movs	r1, #0
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <fnPrintSelectionFrame+0xe4>)
 8001446:	f001 fe7f 	bl	8003148 <u8g2_DrawFrame>
      u8g2_SetDrawColor(&u8g2,1);
 800144a:	2101      	movs	r1, #1
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <fnPrintSelectionFrame+0xe4>)
 800144e:	f002 feaf 	bl	80041b0 <u8g2_SetDrawColor>
}
 8001452:	e013      	b.n	800147c <fnPrintSelectionFrame+0xcc>
	  u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	0052      	lsls	r2, r2, #1
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	b29b      	uxth	r3, r3
 8001462:	3302      	adds	r3, #2
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <fnPrintSelectionFrame+0xe0>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	3b02      	subs	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	210c      	movs	r1, #12
 8001472:	9100      	str	r1, [sp, #0]
 8001474:	2100      	movs	r1, #0
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <fnPrintSelectionFrame+0xe4>)
 8001478:	f001 fe66 	bl	8003148 <u8g2_DrawFrame>
}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000890 	.word	0x20000890
 8001488:	2000007a 	.word	0x2000007a
 800148c:	20000088 	.word	0x20000088
 8001490:	20000a94 	.word	0x20000a94
 8001494:	20000978 	.word	0x20000978

08001498 <printMenuSetpoints>:
//********************************************************************************************************************

//--------- Функция вывода меню уставок ------------------------------------------------
void printMenuSetpoints(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

  u8g2_ClearBuffer(&u8g2);				//
 800149e:	482d      	ldr	r0, [pc, #180]	; (8001554 <printMenuSetpoints+0xbc>)
 80014a0:	f001 feaf 	bl	8003202 <u8g2_ClearBuffer>
  u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 80014a4:	492c      	ldr	r1, [pc, #176]	; (8001558 <printMenuSetpoints+0xc0>)
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <printMenuSetpoints+0xbc>)
 80014a8:	f002 fd56 	bl	8003f58 <u8g2_SetFont>

  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 80014ac:	2300      	movs	r3, #0
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	e024      	b.n	80014fc <printMenuSetpoints+0x64>

    fnPrintMenuItemName(i+(menu_current_page*display_num_lines), i+1, setpoints_menu_names); // Выводим название пункта
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <printMenuSetpoints+0xc4>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <printMenuSetpoints+0xc8>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	4413      	add	r3, r2
 80014c4:	b2d8      	uxtb	r0, r3
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4a25      	ldr	r2, [pc, #148]	; (8001564 <printMenuSetpoints+0xcc>)
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff ff1a 	bl	8001308 <fnPrintMenuItemName>
    fnPrintMenuSetpointsItemVal(i+(menu_current_page*display_num_lines), i+1); // Выводим значение пункта меню уставок
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <printMenuSetpoints+0xc4>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <printMenuSetpoints+0xc8>)
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	4413      	add	r3, r2
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	3301      	adds	r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f000 f83d 	bl	8001570 <fnPrintMenuSetpointsItemVal>
  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	3301      	adds	r3, #1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <printMenuSetpoints+0xc8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	79fa      	ldrb	r2, [r7, #7]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3d5      	bcc.n	80014b2 <printMenuSetpoints+0x1a>
  }

  //рисуем рамку
  fnPrintSelectionFrame(menu_current_item);
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <printMenuSetpoints+0xd0>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff50 	bl	80013b0 <fnPrintSelectionFrame>

  //рисуем боковой скролл бар
  uint8_t scroll_bar_height = display_height/(MENU_SETPOINTS_NUM_ITEMS/display_num_lines);
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <printMenuSetpoints+0xd4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <printMenuSetpoints+0xc8>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	2319      	movs	r3, #25
 800151e:	fb93 f3f1 	sdiv	r3, r3, r1
 8001522:	fb92 f3f3 	sdiv	r3, r2, r3
 8001526:	71bb      	strb	r3, [r7, #6]
  u8g2_DrawVLine(&u8g2,127, menu_current_page*scroll_bar_height, scroll_bar_height);
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <printMenuSetpoints+0xc4>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	79ba      	ldrb	r2, [r7, #6]
 8001530:	b292      	uxth	r2, r2
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	b29a      	uxth	r2, r3
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	b29b      	uxth	r3, r3
 800153c:	217f      	movs	r1, #127	; 0x7f
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <printMenuSetpoints+0xbc>)
 8001540:	f002 fe1d 	bl	800417e <u8g2_DrawVLine>

  u8g2_SendBuffer(&u8g2);
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <printMenuSetpoints+0xbc>)
 8001546:	f001 fecf 	bl	80032e8 <u8g2_SendBuffer>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000978 	.word	0x20000978
 8001558:	080082a0 	.word	0x080082a0
 800155c:	20000079 	.word	0x20000079
 8001560:	20000890 	.word	0x20000890
 8001564:	08007248 	.word	0x08007248
 8001568:	20000078 	.word	0x20000078
 800156c:	20000891 	.word	0x20000891

08001570 <fnPrintMenuSetpointsItemVal>:
//*************************************************************************************************************

//Функция печати значения пункта меню уставок ---------------------------------
void fnPrintMenuSetpointsItemVal(uint8_t num_item, uint8_t num_line){
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	4603      	mov	r3, r0
 8001578:	460a      	mov	r2, r1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	4613      	mov	r3, r2
 800157e:	71bb      	strb	r3, [r7, #6]

  //если все параметры одного типа то можно выводить через массив
  //snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
  //u8g2_DrawStr(&u8g2,98,(num_line*12)-2,buffer);

  char buffer[10] = {0,};
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	809a      	strh	r2, [r3, #4]
  uint8_t float_m, float_n; // переменные для разбития числа на целую и дробную часть

	switch (num_item) {
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b18      	cmp	r3, #24
 8001592:	f200 81f3 	bhi.w	800197c <fnPrintMenuSetpointsItemVal+0x40c>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <fnPrintMenuSetpointsItemVal+0x2c>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	08001601 	.word	0x08001601
 80015a0:	08001615 	.word	0x08001615
 80015a4:	08001661 	.word	0x08001661
 80015a8:	080016a1 	.word	0x080016a1
 80015ac:	080016b5 	.word	0x080016b5
 80015b0:	080016f5 	.word	0x080016f5
 80015b4:	08001709 	.word	0x08001709
 80015b8:	08001755 	.word	0x08001755
 80015bc:	08001795 	.word	0x08001795
 80015c0:	080017a9 	.word	0x080017a9
 80015c4:	080017e9 	.word	0x080017e9
 80015c8:	080017fd 	.word	0x080017fd
 80015cc:	08001811 	.word	0x08001811
 80015d0:	08001825 	.word	0x08001825
 80015d4:	08001871 	.word	0x08001871
 80015d8:	08001885 	.word	0x08001885
 80015dc:	08001899 	.word	0x08001899
 80015e0:	080018ad 	.word	0x080018ad
 80015e4:	080018f1 	.word	0x080018f1
 80015e8:	08001905 	.word	0x08001905
 80015ec:	08001919 	.word	0x08001919
 80015f0:	0800192d 	.word	0x0800192d
 80015f4:	08001941 	.word	0x08001941
 80015f8:	08001955 	.word	0x08001955
 80015fc:	08001969 	.word	0x08001969
	case 0:
		snprintf(buffer, sizeof(buffer), "%ds",
				SetpointsUnion.SetpointsArray[num_item]);
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4aaf      	ldr	r2, [pc, #700]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%ds",
 8001606:	f107 000c 	add.w	r0, r7, #12
 800160a:	4aae      	ldr	r2, [pc, #696]	; (80018c4 <fnPrintMenuSetpointsItemVal+0x354>)
 800160c:	210a      	movs	r1, #10
 800160e:	f001 fb59 	bl	8002cc4 <mini_snprintf>
		break;
 8001612:	e1b4      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 1:

		switch (SetpointsUnion.SetpointsArray[num_item]) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4aaa      	ldr	r2, [pc, #680]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d00e      	beq.n	800163c <fnPrintMenuSetpointsItemVal+0xcc>
 800161e:	2b02      	cmp	r3, #2
 8001620:	dc1c      	bgt.n	800165c <fnPrintMenuSetpointsItemVal+0xec>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <fnPrintMenuSetpointsItemVal+0xbc>
 8001626:	2b01      	cmp	r3, #1
 8001628:	d010      	beq.n	800164c <fnPrintMenuSetpointsItemVal+0xdc>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 800162a:	e017      	b.n	800165c <fnPrintMenuSetpointsItemVal+0xec>
			snprintf(buffer, sizeof(buffer), "off");
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4aa5      	ldr	r2, [pc, #660]	; (80018c8 <fnPrintMenuSetpointsItemVal+0x358>)
 8001632:	210a      	movs	r1, #10
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fb45 	bl	8002cc4 <mini_snprintf>
			break;
 800163a:	e010      	b.n	800165e <fnPrintMenuSetpointsItemVal+0xee>
			snprintf(buffer, sizeof(buffer), "on");
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4aa2      	ldr	r2, [pc, #648]	; (80018cc <fnPrintMenuSetpointsItemVal+0x35c>)
 8001642:	210a      	movs	r1, #10
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fb3d 	bl	8002cc4 <mini_snprintf>
			break;
 800164a:	e008      	b.n	800165e <fnPrintMenuSetpointsItemVal+0xee>
			snprintf(buffer, sizeof(buffer), "auto");
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4a9f      	ldr	r2, [pc, #636]	; (80018d0 <fnPrintMenuSetpointsItemVal+0x360>)
 8001652:	210a      	movs	r1, #10
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fb35 	bl	8002cc4 <mini_snprintf>
			break;
 800165a:	e000      	b.n	800165e <fnPrintMenuSetpointsItemVal+0xee>
			break;
 800165c:	bf00      	nop
		}

		break;
 800165e:	e18e      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 2:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4a97      	ldr	r2, [pc, #604]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 8001668:	7dfa      	ldrb	r2, [r7, #23]
 800166a:	4b9a      	ldr	r3, [pc, #616]	; (80018d4 <fnPrintMenuSetpointsItemVal+0x364>)
 800166c:	fba3 1302 	umull	r1, r3, r3, r2
 8001670:	08d9      	lsrs	r1, r3, #3
 8001672:	460b      	mov	r3, r1
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	4a94      	ldr	r2, [pc, #592]	; (80018d4 <fnPrintMenuSetpointsItemVal+0x364>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 800168a:	7dfa      	ldrb	r2, [r7, #23]
 800168c:	7dbb      	ldrb	r3, [r7, #22]
 800168e:	f107 000c 	add.w	r0, r7, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	4a90      	ldr	r2, [pc, #576]	; (80018d8 <fnPrintMenuSetpointsItemVal+0x368>)
 8001698:	210a      	movs	r1, #10
 800169a:	f001 fb13 	bl	8002cc4 <mini_snprintf>
		break;
 800169e:	e16e      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 3:
		snprintf(buffer, sizeof(buffer), "%ds",
				SetpointsUnion.SetpointsArray[num_item]);
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4a87      	ldr	r2, [pc, #540]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%ds",
 80016a6:	f107 000c 	add.w	r0, r7, #12
 80016aa:	4a86      	ldr	r2, [pc, #536]	; (80018c4 <fnPrintMenuSetpointsItemVal+0x354>)
 80016ac:	210a      	movs	r1, #10
 80016ae:	f001 fb09 	bl	8002cc4 <mini_snprintf>
		break;
 80016b2:	e164      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 4:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4a82      	ldr	r2, [pc, #520]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 80016bc:	7dfa      	ldrb	r2, [r7, #23]
 80016be:	4b85      	ldr	r3, [pc, #532]	; (80018d4 <fnPrintMenuSetpointsItemVal+0x364>)
 80016c0:	fba3 1302 	umull	r1, r3, r3, r2
 80016c4:	08d9      	lsrs	r1, r3, #3
 80016c6:	460b      	mov	r3, r1
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
 80016d4:	4a7f      	ldr	r2, [pc, #508]	; (80018d4 <fnPrintMenuSetpointsItemVal+0x364>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	08db      	lsrs	r3, r3, #3
 80016dc:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 80016de:	7dfa      	ldrb	r2, [r7, #23]
 80016e0:	7dbb      	ldrb	r3, [r7, #22]
 80016e2:	f107 000c 	add.w	r0, r7, #12
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	4a7b      	ldr	r2, [pc, #492]	; (80018d8 <fnPrintMenuSetpointsItemVal+0x368>)
 80016ec:	210a      	movs	r1, #10
 80016ee:	f001 fae9 	bl	8002cc4 <mini_snprintf>
		break;
 80016f2:	e144      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 5:
		snprintf(buffer, sizeof(buffer), "%dm",
				SetpointsUnion.SetpointsArray[num_item]);
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4a72      	ldr	r2, [pc, #456]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%dm",
 80016fa:	f107 000c 	add.w	r0, r7, #12
 80016fe:	4a77      	ldr	r2, [pc, #476]	; (80018dc <fnPrintMenuSetpointsItemVal+0x36c>)
 8001700:	210a      	movs	r1, #10
 8001702:	f001 fadf 	bl	8002cc4 <mini_snprintf>
		break;
 8001706:	e13a      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 6:
		switch (SetpointsUnion.SetpointsArray[num_item]) {
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4a6d      	ldr	r2, [pc, #436]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d00e      	beq.n	8001730 <fnPrintMenuSetpointsItemVal+0x1c0>
 8001712:	2b02      	cmp	r3, #2
 8001714:	dc1c      	bgt.n	8001750 <fnPrintMenuSetpointsItemVal+0x1e0>
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <fnPrintMenuSetpointsItemVal+0x1b0>
 800171a:	2b01      	cmp	r3, #1
 800171c:	d010      	beq.n	8001740 <fnPrintMenuSetpointsItemVal+0x1d0>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 800171e:	e017      	b.n	8001750 <fnPrintMenuSetpointsItemVal+0x1e0>
			snprintf(buffer, sizeof(buffer), "off");
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4a68      	ldr	r2, [pc, #416]	; (80018c8 <fnPrintMenuSetpointsItemVal+0x358>)
 8001726:	210a      	movs	r1, #10
 8001728:	4618      	mov	r0, r3
 800172a:	f001 facb 	bl	8002cc4 <mini_snprintf>
			break;
 800172e:	e010      	b.n	8001752 <fnPrintMenuSetpointsItemVal+0x1e2>
			snprintf(buffer, sizeof(buffer), "on");
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4a65      	ldr	r2, [pc, #404]	; (80018cc <fnPrintMenuSetpointsItemVal+0x35c>)
 8001736:	210a      	movs	r1, #10
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fac3 	bl	8002cc4 <mini_snprintf>
			break;
 800173e:	e008      	b.n	8001752 <fnPrintMenuSetpointsItemVal+0x1e2>
			snprintf(buffer, sizeof(buffer), "auto");
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4a62      	ldr	r2, [pc, #392]	; (80018d0 <fnPrintMenuSetpointsItemVal+0x360>)
 8001746:	210a      	movs	r1, #10
 8001748:	4618      	mov	r0, r3
 800174a:	f001 fabb 	bl	8002cc4 <mini_snprintf>
			break;
 800174e:	e000      	b.n	8001752 <fnPrintMenuSetpointsItemVal+0x1e2>
			break;
 8001750:	bf00      	nop
		}
		break;
 8001752:	e114      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 7:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4a5a      	ldr	r2, [pc, #360]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 800175c:	7dfa      	ldrb	r2, [r7, #23]
 800175e:	4b5d      	ldr	r3, [pc, #372]	; (80018d4 <fnPrintMenuSetpointsItemVal+0x364>)
 8001760:	fba3 1302 	umull	r1, r3, r3, r2
 8001764:	08d9      	lsrs	r1, r3, #3
 8001766:	460b      	mov	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <fnPrintMenuSetpointsItemVal+0x364>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 800177e:	7dfa      	ldrb	r2, [r7, #23]
 8001780:	7dbb      	ldrb	r3, [r7, #22]
 8001782:	f107 000c 	add.w	r0, r7, #12
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	4a53      	ldr	r2, [pc, #332]	; (80018d8 <fnPrintMenuSetpointsItemVal+0x368>)
 800178c:	210a      	movs	r1, #10
 800178e:	f001 fa99 	bl	8002cc4 <mini_snprintf>
		break;
 8001792:	e0f4      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 8:
	  	snprintf(buffer,sizeof(buffer), "%ds", SetpointsUnion.SetpointsArray[num_item]);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4a4a      	ldr	r2, [pc, #296]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	f107 000c 	add.w	r0, r7, #12
 800179e:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <fnPrintMenuSetpointsItemVal+0x354>)
 80017a0:	210a      	movs	r1, #10
 80017a2:	f001 fa8f 	bl	8002cc4 <mini_snprintf>
	  	break;
 80017a6:	e0ea      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 9:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	4a45      	ldr	r2, [pc, #276]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 80017b0:	7dfa      	ldrb	r2, [r7, #23]
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <fnPrintMenuSetpointsItemVal+0x364>)
 80017b4:	fba3 1302 	umull	r1, r3, r3, r2
 80017b8:	08d9      	lsrs	r1, r3, #3
 80017ba:	460b      	mov	r3, r1
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	4a42      	ldr	r2, [pc, #264]	; (80018d4 <fnPrintMenuSetpointsItemVal+0x364>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 80017d2:	7dfa      	ldrb	r2, [r7, #23]
 80017d4:	7dbb      	ldrb	r3, [r7, #22]
 80017d6:	f107 000c 	add.w	r0, r7, #12
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	4a3e      	ldr	r2, [pc, #248]	; (80018d8 <fnPrintMenuSetpointsItemVal+0x368>)
 80017e0:	210a      	movs	r1, #10
 80017e2:	f001 fa6f 	bl	8002cc4 <mini_snprintf>
		break;
 80017e6:	e0ca      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 10:
	  	snprintf(buffer,sizeof(buffer), "%ds", SetpointsUnion.SetpointsArray[num_item]);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4a35      	ldr	r2, [pc, #212]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	f107 000c 	add.w	r0, r7, #12
 80017f2:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <fnPrintMenuSetpointsItemVal+0x354>)
 80017f4:	210a      	movs	r1, #10
 80017f6:	f001 fa65 	bl	8002cc4 <mini_snprintf>
	      break;
 80017fa:	e0c0      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 11:
	  	snprintf(buffer,sizeof(buffer), "%dC", SetpointsUnion.SetpointsArray[num_item]);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001800:	5cd3      	ldrb	r3, [r2, r3]
 8001802:	f107 000c 	add.w	r0, r7, #12
 8001806:	4a36      	ldr	r2, [pc, #216]	; (80018e0 <fnPrintMenuSetpointsItemVal+0x370>)
 8001808:	210a      	movs	r1, #10
 800180a:	f001 fa5b 	bl	8002cc4 <mini_snprintf>
	    break;
 800180e:	e0b6      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 12:
	  	snprintf(buffer,sizeof(buffer), "%dC", SetpointsUnion.SetpointsArray[num_item]);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	f107 000c 	add.w	r0, r7, #12
 800181a:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <fnPrintMenuSetpointsItemVal+0x370>)
 800181c:	210a      	movs	r1, #10
 800181e:	f001 fa51 	bl	8002cc4 <mini_snprintf>
	    break;
 8001822:	e0ac      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 13:
		switch (SetpointsUnion.SetpointsArray[num_item]) {
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d00e      	beq.n	800184c <fnPrintMenuSetpointsItemVal+0x2dc>
 800182e:	2b02      	cmp	r3, #2
 8001830:	dc1c      	bgt.n	800186c <fnPrintMenuSetpointsItemVal+0x2fc>
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <fnPrintMenuSetpointsItemVal+0x2cc>
 8001836:	2b01      	cmp	r3, #1
 8001838:	d010      	beq.n	800185c <fnPrintMenuSetpointsItemVal+0x2ec>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 800183a:	e017      	b.n	800186c <fnPrintMenuSetpointsItemVal+0x2fc>
			snprintf(buffer, sizeof(buffer), "off");
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <fnPrintMenuSetpointsItemVal+0x358>)
 8001842:	210a      	movs	r1, #10
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fa3d 	bl	8002cc4 <mini_snprintf>
			break;
 800184a:	e010      	b.n	800186e <fnPrintMenuSetpointsItemVal+0x2fe>
			snprintf(buffer, sizeof(buffer), "on");
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <fnPrintMenuSetpointsItemVal+0x35c>)
 8001852:	210a      	movs	r1, #10
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fa35 	bl	8002cc4 <mini_snprintf>
			break;
 800185a:	e008      	b.n	800186e <fnPrintMenuSetpointsItemVal+0x2fe>
			snprintf(buffer, sizeof(buffer), "auto");
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <fnPrintMenuSetpointsItemVal+0x360>)
 8001862:	210a      	movs	r1, #10
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fa2d 	bl	8002cc4 <mini_snprintf>
			break;
 800186a:	e000      	b.n	800186e <fnPrintMenuSetpointsItemVal+0x2fe>
			break;
 800186c:	bf00      	nop
		}
	    break;
 800186e:	e086      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 14:
		snprintf(buffer,sizeof(buffer), "%dR", SetpointsUnion.SetpointsArray[num_item]);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	f107 000c 	add.w	r0, r7, #12
 800187a:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <fnPrintMenuSetpointsItemVal+0x374>)
 800187c:	210a      	movs	r1, #10
 800187e:	f001 fa21 	bl	8002cc4 <mini_snprintf>
		break;
 8001882:	e07c      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 15:
	  	snprintf(buffer,sizeof(buffer), "%dR", SetpointsUnion.SetpointsArray[num_item]);
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	f107 000c 	add.w	r0, r7, #12
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <fnPrintMenuSetpointsItemVal+0x374>)
 8001890:	210a      	movs	r1, #10
 8001892:	f001 fa17 	bl	8002cc4 <mini_snprintf>
	    break;
 8001896:	e072      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 16:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 800189c:	5cd3      	ldrb	r3, [r2, r3]
 800189e:	f107 000c 	add.w	r0, r7, #12
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <fnPrintMenuSetpointsItemVal+0x378>)
 80018a4:	210a      	movs	r1, #10
 80018a6:	f001 fa0d 	bl	8002cc4 <mini_snprintf>
	    break;
 80018aa:	e068      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 17:
	  	snprintf(buffer,sizeof(buffer), "%dL", SetpointsUnion.SetpointsArray[num_item]);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <fnPrintMenuSetpointsItemVal+0x350>)
 80018b0:	5cd3      	ldrb	r3, [r2, r3]
 80018b2:	f107 000c 	add.w	r0, r7, #12
 80018b6:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <fnPrintMenuSetpointsItemVal+0x37c>)
 80018b8:	210a      	movs	r1, #10
 80018ba:	f001 fa03 	bl	8002cc4 <mini_snprintf>
	    break;
 80018be:	e05e      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>
 80018c0:	20000a50 	.word	0x20000a50
 80018c4:	08006f58 	.word	0x08006f58
 80018c8:	08006f5c 	.word	0x08006f5c
 80018cc:	08006f60 	.word	0x08006f60
 80018d0:	08006f64 	.word	0x08006f64
 80018d4:	cccccccd 	.word	0xcccccccd
 80018d8:	08006f6c 	.word	0x08006f6c
 80018dc:	08006f74 	.word	0x08006f74
 80018e0:	08006f78 	.word	0x08006f78
 80018e4:	08006f7c 	.word	0x08006f7c
 80018e8:	08006f80 	.word	0x08006f80
 80018ec:	08006f84 	.word	0x08006f84

	case 18:
	  	snprintf(buffer,sizeof(buffer), "%dh", SetpointsUnion.SetpointsArray[num_item]);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <fnPrintMenuSetpointsItemVal+0x430>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	f107 000c 	add.w	r0, r7, #12
 80018fa:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <fnPrintMenuSetpointsItemVal+0x434>)
 80018fc:	210a      	movs	r1, #10
 80018fe:	f001 f9e1 	bl	8002cc4 <mini_snprintf>
	    break;
 8001902:	e03c      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 19:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <fnPrintMenuSetpointsItemVal+0x430>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	f107 000c 	add.w	r0, r7, #12
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <fnPrintMenuSetpointsItemVal+0x438>)
 8001910:	210a      	movs	r1, #10
 8001912:	f001 f9d7 	bl	8002cc4 <mini_snprintf>
	    break;
 8001916:	e032      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 20:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <fnPrintMenuSetpointsItemVal+0x430>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	f107 000c 	add.w	r0, r7, #12
 8001922:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <fnPrintMenuSetpointsItemVal+0x438>)
 8001924:	210a      	movs	r1, #10
 8001926:	f001 f9cd 	bl	8002cc4 <mini_snprintf>
	    break;
 800192a:	e028      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 21:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <fnPrintMenuSetpointsItemVal+0x430>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	f107 000c 	add.w	r0, r7, #12
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <fnPrintMenuSetpointsItemVal+0x438>)
 8001938:	210a      	movs	r1, #10
 800193a:	f001 f9c3 	bl	8002cc4 <mini_snprintf>
	    break;
 800193e:	e01e      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 22:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <fnPrintMenuSetpointsItemVal+0x430>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	f107 000c 	add.w	r0, r7, #12
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <fnPrintMenuSetpointsItemVal+0x438>)
 800194c:	210a      	movs	r1, #10
 800194e:	f001 f9b9 	bl	8002cc4 <mini_snprintf>
	    break;
 8001952:	e014      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 23:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <fnPrintMenuSetpointsItemVal+0x430>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	f107 000c 	add.w	r0, r7, #12
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <fnPrintMenuSetpointsItemVal+0x438>)
 8001960:	210a      	movs	r1, #10
 8001962:	f001 f9af 	bl	8002cc4 <mini_snprintf>
	    break;
 8001966:	e00a      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	case 24:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <fnPrintMenuSetpointsItemVal+0x430>)
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	f107 000c 	add.w	r0, r7, #12
 8001972:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <fnPrintMenuSetpointsItemVal+0x438>)
 8001974:	210a      	movs	r1, #10
 8001976:	f001 f9a5 	bl	8002cc4 <mini_snprintf>
	    break;
 800197a:	e000      	b.n	800197e <fnPrintMenuSetpointsItemVal+0x40e>

	default:
		break;
 800197c:	bf00      	nop
	}

   u8g2_DrawStr(&u8g2,102,(num_line*12),buffer);
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	b29b      	uxth	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	0052      	lsls	r2, r2, #1
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	b29a      	uxth	r2, r3
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2166      	movs	r1, #102	; 0x66
 8001992:	4806      	ldr	r0, [pc, #24]	; (80019ac <fnPrintMenuSetpointsItemVal+0x43c>)
 8001994:	f002 fa42 	bl	8003e1c <u8g2_DrawStr>

 }
 8001998:	bf00      	nop
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000a50 	.word	0x20000a50
 80019a4:	08006f88 	.word	0x08006f88
 80019a8:	08006f80 	.word	0x08006f80
 80019ac:	20000978 	.word	0x20000978

080019b0 <fnPrintMenuParamItemVal>:
//*********************************************************************************************************************


//Функция печати значения пункта меню просмотра параметров ------------------------------
void fnPrintMenuParamItemVal(uint8_t num_item, uint8_t num_line){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4613      	mov	r3, r2
 80019be:	71bb      	strb	r3, [r7, #6]

  char buffer[10] = {0,};
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	809a      	strh	r2, [r3, #4]
  int float_m, float_n; // переменные для разбития числа на целую и дробную часть

  switch (num_item)
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b0e      	cmp	r3, #14
 80019d2:	f200 814d 	bhi.w	8001c70 <fnPrintMenuParamItemVal+0x2c0>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <fnPrintMenuParamItemVal+0x2c>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	08001a19 	.word	0x08001a19
 80019e0:	08001a67 	.word	0x08001a67
 80019e4:	08001a79 	.word	0x08001a79
 80019e8:	08001acf 	.word	0x08001acf
 80019ec:	08001b25 	.word	0x08001b25
 80019f0:	08001b7b 	.word	0x08001b7b
 80019f4:	08001bc9 	.word	0x08001bc9
 80019f8:	08001bf3 	.word	0x08001bf3
 80019fc:	08001c05 	.word	0x08001c05
 8001a00:	08001c17 	.word	0x08001c17
 8001a04:	08001c29 	.word	0x08001c29
 8001a08:	08001c3b 	.word	0x08001c3b
 8001a0c:	08001c4d 	.word	0x08001c4d
 8001a10:	08001c5f 	.word	0x08001c5f
 8001a14:	08001c71 	.word	0x08001c71
  {
  case 0:
    float_m = (int)(main_data.battery_voltage * 10);
 8001a18:	4b9e      	ldr	r3, [pc, #632]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001a1a:	7b9b      	ldrb	r3, [r3, #14]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	4b9b      	ldr	r3, [pc, #620]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001a2c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a30:	1099      	asrs	r1, r3, #2
 8001a32:	17d3      	asrs	r3, r2, #31
 8001a34:	1ac9      	subs	r1, r1, r3
 8001a36:	460b      	mov	r3, r1
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4a94      	ldr	r2, [pc, #592]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001a46:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4a:	1092      	asrs	r2, r2, #2
 8001a4c:	17db      	asrs	r3, r3, #31
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 8001a52:	f107 000c 	add.w	r0, r7, #12
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4a8f      	ldr	r2, [pc, #572]	; (8001c9c <fnPrintMenuParamItemVal+0x2ec>)
 8001a5e:	210a      	movs	r1, #10
 8001a60:	f001 f930 	bl	8002cc4 <mini_snprintf>
    break;
 8001a64:	e105      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 1:
    snprintf(buffer,sizeof(buffer),"%uL", main_data.water_level_liter);
 8001a66:	4b8b      	ldr	r3, [pc, #556]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001a68:	7c1b      	ldrb	r3, [r3, #16]
 8001a6a:	f107 000c 	add.w	r0, r7, #12
 8001a6e:	4a8c      	ldr	r2, [pc, #560]	; (8001ca0 <fnPrintMenuParamItemVal+0x2f0>)
 8001a70:	210a      	movs	r1, #10
 8001a72:	f001 f927 	bl	8002cc4 <mini_snprintf>
    break;
 8001a76:	e0fc      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 2:
    float_m = (int)(main_data.outside_temperature * 10);
 8001a78:	4b86      	ldr	r3, [pc, #536]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4989      	ldr	r1, [pc, #548]	; (8001ca4 <fnPrintMenuParamItemVal+0x2f4>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fc90 	bl	80003a4 <__aeabi_fmul>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe ff84 	bl	8000994 <__aeabi_f2iz>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001a94:	fb83 1302 	smull	r1, r3, r3, r2
 8001a98:	1099      	asrs	r1, r3, #2
 8001a9a:	17d3      	asrs	r3, r2, #31
 8001a9c:	1ac9      	subs	r1, r1, r3
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4a7a      	ldr	r2, [pc, #488]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001aae:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab2:	1092      	asrs	r2, r2, #2
 8001ab4:	17db      	asrs	r3, r3, #31
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 8001aba:	f107 000c 	add.w	r0, r7, #12
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4a78      	ldr	r2, [pc, #480]	; (8001ca8 <fnPrintMenuParamItemVal+0x2f8>)
 8001ac6:	210a      	movs	r1, #10
 8001ac8:	f001 f8fc 	bl	8002cc4 <mini_snprintf>
    break;
 8001acc:	e0d1      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 3:
    float_m = (int)(main_data.inside_temperature * 10);
 8001ace:	4b71      	ldr	r3, [pc, #452]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4974      	ldr	r1, [pc, #464]	; (8001ca4 <fnPrintMenuParamItemVal+0x2f4>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fc65 	bl	80003a4 <__aeabi_fmul>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe ff59 	bl	8000994 <__aeabi_f2iz>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001aea:	fb83 1302 	smull	r1, r3, r3, r2
 8001aee:	1099      	asrs	r1, r3, #2
 8001af0:	17d3      	asrs	r3, r2, #31
 8001af2:	1ac9      	subs	r1, r1, r3
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	4a65      	ldr	r2, [pc, #404]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001b04:	fb82 1203 	smull	r1, r2, r2, r3
 8001b08:	1092      	asrs	r2, r2, #2
 8001b0a:	17db      	asrs	r3, r3, #31
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 8001b10:	f107 000c 	add.w	r0, r7, #12
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	4a63      	ldr	r2, [pc, #396]	; (8001ca8 <fnPrintMenuParamItemVal+0x2f8>)
 8001b1c:	210a      	movs	r1, #10
 8001b1e:	f001 f8d1 	bl	8002cc4 <mini_snprintf>
    break;
 8001b22:	e0a6      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 4:
    float_m = (int)(main_data.fridge_temperature * 10);
 8001b24:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	495e      	ldr	r1, [pc, #376]	; (8001ca4 <fnPrintMenuParamItemVal+0x2f4>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fc3a 	bl	80003a4 <__aeabi_fmul>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe ff2e 	bl	8000994 <__aeabi_f2iz>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	4b56      	ldr	r3, [pc, #344]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001b40:	fb83 1302 	smull	r1, r3, r3, r2
 8001b44:	1099      	asrs	r1, r3, #2
 8001b46:	17d3      	asrs	r3, r2, #31
 8001b48:	1ac9      	subs	r1, r1, r3
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5e:	1092      	asrs	r2, r2, #2
 8001b60:	17db      	asrs	r3, r3, #31
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 8001b66:	f107 000c 	add.w	r0, r7, #12
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	4a4d      	ldr	r2, [pc, #308]	; (8001ca8 <fnPrintMenuParamItemVal+0x2f8>)
 8001b72:	210a      	movs	r1, #10
 8001b74:	f001 f8a6 	bl	8002cc4 <mini_snprintf>
    break;
 8001b78:	e07b      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 5:
    float_m = (int)(main_data.sensors_supply_voltage * 10);
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001b7c:	7bdb      	ldrb	r3, [r3, #15]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001b8e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b92:	1099      	asrs	r1, r3, #2
 8001b94:	17d3      	asrs	r3, r2, #31
 8001b96:	1ac9      	subs	r1, r1, r3
 8001b98:	460b      	mov	r3, r1
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4a3c      	ldr	r2, [pc, #240]	; (8001c98 <fnPrintMenuParamItemVal+0x2e8>)
 8001ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bac:	1092      	asrs	r2, r2, #2
 8001bae:	17db      	asrs	r3, r3, #31
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 8001bb4:	f107 000c 	add.w	r0, r7, #12
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4a37      	ldr	r2, [pc, #220]	; (8001c9c <fnPrintMenuParamItemVal+0x2ec>)
 8001bc0:	210a      	movs	r1, #10
 8001bc2:	f001 f87f 	bl	8002cc4 <mini_snprintf>
    break;
 8001bc6:	e054      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 6:
    if(main_data.res_sensor_resistance <= MAX_RESISTANCE)snprintf(buffer,sizeof(buffer),"%d",main_data.res_sensor_resistance);
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001bca:	899b      	ldrh	r3, [r3, #12]
 8001bcc:	2bf0      	cmp	r3, #240	; 0xf0
 8001bce:	d808      	bhi.n	8001be2 <fnPrintMenuParamItemVal+0x232>
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001bd2:	899b      	ldrh	r3, [r3, #12]
 8001bd4:	f107 000c 	add.w	r0, r7, #12
 8001bd8:	4a34      	ldr	r2, [pc, #208]	; (8001cac <fnPrintMenuParamItemVal+0x2fc>)
 8001bda:	210a      	movs	r1, #10
 8001bdc:	f001 f872 	bl	8002cc4 <mini_snprintf>
    else snprintf(buffer,sizeof(buffer),"xxx");
    break;
 8001be0:	e047      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>
    else snprintf(buffer,sizeof(buffer),"xxx");
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <fnPrintMenuParamItemVal+0x300>)
 8001be8:	210a      	movs	r1, #10
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 f86a 	bl	8002cc4 <mini_snprintf>
    break;
 8001bf0:	e03f      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 7:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.door_switch_state);
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001bf4:	7c9b      	ldrb	r3, [r3, #18]
 8001bf6:	f107 000c 	add.w	r0, r7, #12
 8001bfa:	4a2e      	ldr	r2, [pc, #184]	; (8001cb4 <fnPrintMenuParamItemVal+0x304>)
 8001bfc:	210a      	movs	r1, #10
 8001bfe:	f001 f861 	bl	8002cc4 <mini_snprintf>

    break;
 8001c02:	e036      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 8:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.proximity_sensor_state);
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001c06:	7cdb      	ldrb	r3, [r3, #19]
 8001c08:	f107 000c 	add.w	r0, r7, #12
 8001c0c:	4a29      	ldr	r2, [pc, #164]	; (8001cb4 <fnPrintMenuParamItemVal+0x304>)
 8001c0e:	210a      	movs	r1, #10
 8001c10:	f001 f858 	bl	8002cc4 <mini_snprintf>
    break;
 8001c14:	e02d      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>
  case 9:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.ignition_switch_state);
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001c18:	7d1b      	ldrb	r3, [r3, #20]
 8001c1a:	f107 000c 	add.w	r0, r7, #12
 8001c1e:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <fnPrintMenuParamItemVal+0x304>)
 8001c20:	210a      	movs	r1, #10
 8001c22:	f001 f84f 	bl	8002cc4 <mini_snprintf>
    break;
 8001c26:	e024      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 10:
	snprintf(buffer,sizeof(buffer),"%1u", main_data.converter_output_state);
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001c2a:	7d5b      	ldrb	r3, [r3, #21]
 8001c2c:	f107 000c 	add.w	r0, r7, #12
 8001c30:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <fnPrintMenuParamItemVal+0x304>)
 8001c32:	210a      	movs	r1, #10
 8001c34:	f001 f846 	bl	8002cc4 <mini_snprintf>
    break;
 8001c38:	e01b      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 11:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.fridge_output_state);
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001c3c:	7d9b      	ldrb	r3, [r3, #22]
 8001c3e:	f107 000c 	add.w	r0, r7, #12
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <fnPrintMenuParamItemVal+0x304>)
 8001c44:	210a      	movs	r1, #10
 8001c46:	f001 f83d 	bl	8002cc4 <mini_snprintf>
    break;
 8001c4a:	e012      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 12:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.pump_output_state);
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001c4e:	7ddb      	ldrb	r3, [r3, #23]
 8001c50:	f107 000c 	add.w	r0, r7, #12
 8001c54:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <fnPrintMenuParamItemVal+0x304>)
 8001c56:	210a      	movs	r1, #10
 8001c58:	f001 f834 	bl	8002cc4 <mini_snprintf>
    break;
 8001c5c:	e009      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>

  case 13:
	snprintf(buffer,sizeof(buffer),"%1u", main_data.error_code);
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <fnPrintMenuParamItemVal+0x2e4>)
 8001c60:	7c5b      	ldrb	r3, [r3, #17]
 8001c62:	f107 000c 	add.w	r0, r7, #12
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <fnPrintMenuParamItemVal+0x304>)
 8001c68:	210a      	movs	r1, #10
 8001c6a:	f001 f82b 	bl	8002cc4 <mini_snprintf>
    break;
 8001c6e:	e000      	b.n	8001c72 <fnPrintMenuParamItemVal+0x2c2>
  case 14:

    break;

  default:
    break;
 8001c70:	bf00      	nop
  }

  u8g2_DrawStr(&u8g2,98,(num_line*12),buffer);
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	0052      	lsls	r2, r2, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	2162      	movs	r1, #98	; 0x62
 8001c86:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <fnPrintMenuParamItemVal+0x308>)
 8001c88:	f002 f8c8 	bl	8003e1c <u8g2_DrawStr>
}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200008ec 	.word	0x200008ec
 8001c98:	66666667 	.word	0x66666667
 8001c9c:	08006f8c 	.word	0x08006f8c
 8001ca0:	08006f94 	.word	0x08006f94
 8001ca4:	41200000 	.word	0x41200000
 8001ca8:	08006f98 	.word	0x08006f98
 8001cac:	08006f80 	.word	0x08006f80
 8001cb0:	08006fa0 	.word	0x08006fa0
 8001cb4:	08006fa4 	.word	0x08006fa4
 8001cb8:	20000978 	.word	0x20000978

08001cbc <fnPrintMenuParamView>:
//*************************************************************************************************************

//Функция вывода меню параметров  ---------------------------------------------
void fnPrintMenuParamView(void){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

	u8g2_ClearBuffer(&u8g2);				//
 8001cc2:	482a      	ldr	r0, [pc, #168]	; (8001d6c <fnPrintMenuParamView+0xb0>)
 8001cc4:	f001 fa9d 	bl	8003202 <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 8001cc8:	4929      	ldr	r1, [pc, #164]	; (8001d70 <fnPrintMenuParamView+0xb4>)
 8001cca:	4828      	ldr	r0, [pc, #160]	; (8001d6c <fnPrintMenuParamView+0xb0>)
 8001ccc:	f002 f944 	bl	8003f58 <u8g2_SetFont>

  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	e024      	b.n	8001d20 <fnPrintMenuParamView+0x64>

    fnPrintMenuItemName(i+(menu_current_page*display_num_lines), i+1, parameters_names); // Выводим название пункта
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <fnPrintMenuParamView+0xb8>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <fnPrintMenuParamView+0xbc>)
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2d8      	uxtb	r0, r3
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <fnPrintMenuParamView+0xc0>)
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7ff fb08 	bl	8001308 <fnPrintMenuItemName>
    fnPrintMenuParamItemVal(i+(menu_current_page*display_num_lines), i+1); // Выводим значение пункта меню уставок
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <fnPrintMenuParamView+0xb8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <fnPrintMenuParamView+0xbc>)
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4413      	add	r3, r2
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f7ff fe4b 	bl	80019b0 <fnPrintMenuParamItemVal>
  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <fnPrintMenuParamView+0xbc>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3d5      	bcc.n	8001cd6 <fnPrintMenuParamView+0x1a>
  }

  //рисуем боковой скролл бар
    uint8_t scroll_bar_height = display_height/(MENU_PARAM_VIEW_NUM_ITEMS/display_num_lines);
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <fnPrintMenuParamView+0xc4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <fnPrintMenuParamView+0xbc>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	230f      	movs	r3, #15
 8001d38:	fb93 f3f1 	sdiv	r3, r3, r1
 8001d3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d40:	71bb      	strb	r3, [r7, #6]
    u8g2_DrawVLine(&u8g2,127, menu_current_page*scroll_bar_height, scroll_bar_height);
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <fnPrintMenuParamView+0xb8>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	79ba      	ldrb	r2, [r7, #6]
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	217f      	movs	r1, #127	; 0x7f
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <fnPrintMenuParamView+0xb0>)
 8001d5a:	f002 fa10 	bl	800417e <u8g2_DrawVLine>

    u8g2_SendBuffer(&u8g2);
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <fnPrintMenuParamView+0xb0>)
 8001d60:	f001 fac2 	bl	80032e8 <u8g2_SendBuffer>

}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000978 	.word	0x20000978
 8001d70:	080082a0 	.word	0x080082a0
 8001d74:	20000079 	.word	0x20000079
 8001d78:	20000890 	.word	0x20000890
 8001d7c:	080070a0 	.word	0x080070a0
 8001d80:	20000891 	.word	0x20000891

08001d84 <fnPrintMainView>:
//*******************************************************************************************************************

//Функция вывода главного экрана -----------------------------------------------
void fnPrintMainView(void){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af02      	add	r7, sp, #8

  char buffer[20] = {0,};
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
  uint8_t float_m, float_n; // переменные для разбития числа на целую и дробную часть

  u8g2_ClearBuffer(&u8g2);					//
 8001d9a:	48b8      	ldr	r0, [pc, #736]	; (800207c <fnPrintMainView+0x2f8>)
 8001d9c:	f001 fa31 	bl	8003202 <u8g2_ClearBuffer>


  u8g2_SetFont(&u8g2,u8g2_font_5x7_tr);
 8001da0:	49b7      	ldr	r1, [pc, #732]	; (8002080 <fnPrintMainView+0x2fc>)
 8001da2:	48b6      	ldr	r0, [pc, #728]	; (800207c <fnPrintMainView+0x2f8>)
 8001da4:	f002 f8d8 	bl	8003f58 <u8g2_SetFont>

  u8g2_DrawBox(&u8g2,98,1,31,8);
 8001da8:	2308      	movs	r3, #8
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	231f      	movs	r3, #31
 8001dae:	2201      	movs	r2, #1
 8001db0:	2162      	movs	r1, #98	; 0x62
 8001db2:	48b2      	ldr	r0, [pc, #712]	; (800207c <fnPrintMainView+0x2f8>)
 8001db4:	f001 f992 	bl	80030dc <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,98,11,31,8);
 8001db8:	2308      	movs	r3, #8
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	231f      	movs	r3, #31
 8001dbe:	220b      	movs	r2, #11
 8001dc0:	2162      	movs	r1, #98	; 0x62
 8001dc2:	48ae      	ldr	r0, [pc, #696]	; (800207c <fnPrintMainView+0x2f8>)
 8001dc4:	f001 f98a 	bl	80030dc <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,98,21,31,8);
 8001dc8:	2308      	movs	r3, #8
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	231f      	movs	r3, #31
 8001dce:	2215      	movs	r2, #21
 8001dd0:	2162      	movs	r1, #98	; 0x62
 8001dd2:	48aa      	ldr	r0, [pc, #680]	; (800207c <fnPrintMainView+0x2f8>)
 8001dd4:	f001 f982 	bl	80030dc <u8g2_DrawBox>

  u8g2_SetDrawColor(&u8g2,0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	48a8      	ldr	r0, [pc, #672]	; (800207c <fnPrintMainView+0x2f8>)
 8001ddc:	f002 f9e8 	bl	80041b0 <u8g2_SetDrawColor>

  float_m = (uint8_t)(main_data.battery_voltage * 10);
 8001de0:	4ba8      	ldr	r3, [pc, #672]	; (8002084 <fnPrintMainView+0x300>)
 8001de2:	7b9b      	ldrb	r3, [r3, #14]
 8001de4:	461a      	mov	r2, r3
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
  float_n = float_m%10;
 8001dee:	7dfa      	ldrb	r2, [r7, #23]
 8001df0:	4ba5      	ldr	r3, [pc, #660]	; (8002088 <fnPrintMainView+0x304>)
 8001df2:	fba3 1302 	umull	r1, r3, r3, r2
 8001df6:	08d9      	lsrs	r1, r3, #3
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	75bb      	strb	r3, [r7, #22]
  float_m = float_m/10;
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	4aa0      	ldr	r2, [pc, #640]	; (8002088 <fnPrintMainView+0x304>)
 8001e08:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	75fb      	strb	r3, [r7, #23]
  snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 8001e10:	7dfa      	ldrb	r2, [r7, #23]
 8001e12:	7dbb      	ldrb	r3, [r7, #22]
 8001e14:	4638      	mov	r0, r7
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	4a9c      	ldr	r2, [pc, #624]	; (800208c <fnPrintMainView+0x308>)
 8001e1c:	2114      	movs	r1, #20
 8001e1e:	f000 ff51 	bl	8002cc4 <mini_snprintf>
  u8g2_DrawStr(&u8g2,102, 8, buffer);
 8001e22:	463b      	mov	r3, r7
 8001e24:	2208      	movs	r2, #8
 8001e26:	2166      	movs	r1, #102	; 0x66
 8001e28:	4894      	ldr	r0, [pc, #592]	; (800207c <fnPrintMainView+0x2f8>)
 8001e2a:	f001 fff7 	bl	8003e1c <u8g2_DrawStr>

  snprintf(buffer,sizeof(buffer),"> %dC", (int)main_data.inside_temperature);
 8001e2e:	4b95      	ldr	r3, [pc, #596]	; (8002084 <fnPrintMainView+0x300>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fdae 	bl	8000994 <__aeabi_f2iz>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4638      	mov	r0, r7
 8001e3c:	4a94      	ldr	r2, [pc, #592]	; (8002090 <fnPrintMainView+0x30c>)
 8001e3e:	2114      	movs	r1, #20
 8001e40:	f000 ff40 	bl	8002cc4 <mini_snprintf>
  u8g2_DrawStr(&u8g2, 98, 18, buffer);
 8001e44:	463b      	mov	r3, r7
 8001e46:	2212      	movs	r2, #18
 8001e48:	2162      	movs	r1, #98	; 0x62
 8001e4a:	488c      	ldr	r0, [pc, #560]	; (800207c <fnPrintMainView+0x2f8>)
 8001e4c:	f001 ffe6 	bl	8003e1c <u8g2_DrawStr>

  snprintf(buffer,sizeof(buffer),"< %dC", (int)main_data.outside_temperature);
 8001e50:	4b8c      	ldr	r3, [pc, #560]	; (8002084 <fnPrintMainView+0x300>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fd9d 	bl	8000994 <__aeabi_f2iz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	4a8d      	ldr	r2, [pc, #564]	; (8002094 <fnPrintMainView+0x310>)
 8001e60:	2114      	movs	r1, #20
 8001e62:	f000 ff2f 	bl	8002cc4 <mini_snprintf>
  u8g2_DrawStr(&u8g2, 98, 28, buffer);
 8001e66:	463b      	mov	r3, r7
 8001e68:	221c      	movs	r2, #28
 8001e6a:	2162      	movs	r1, #98	; 0x62
 8001e6c:	4883      	ldr	r0, [pc, #524]	; (800207c <fnPrintMainView+0x2f8>)
 8001e6e:	f001 ffd5 	bl	8003e1c <u8g2_DrawStr>

  u8g2_SetDrawColor(&u8g2,1);
 8001e72:	2101      	movs	r1, #1
 8001e74:	4881      	ldr	r0, [pc, #516]	; (800207c <fnPrintMainView+0x2f8>)
 8001e76:	f002 f99b 	bl	80041b0 <u8g2_SetDrawColor>

  if(main_data.pump_output_state){
 8001e7a:	4b82      	ldr	r3, [pc, #520]	; (8002084 <fnPrintMainView+0x300>)
 8001e7c:	7ddb      	ldrb	r3, [r3, #23]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d016      	beq.n	8001eb0 <fnPrintMainView+0x12c>
	u8g2_DrawBox(&u8g2,64,1,21,8);
 8001e82:	2308      	movs	r3, #8
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2315      	movs	r3, #21
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2140      	movs	r1, #64	; 0x40
 8001e8c:	487b      	ldr	r0, [pc, #492]	; (800207c <fnPrintMainView+0x2f8>)
 8001e8e:	f001 f925 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8001e92:	2100      	movs	r1, #0
 8001e94:	4879      	ldr	r0, [pc, #484]	; (800207c <fnPrintMainView+0x2f8>)
 8001e96:	f002 f98b 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 8, "PUMP");
 8001e9a:	4b7f      	ldr	r3, [pc, #508]	; (8002098 <fnPrintMainView+0x314>)
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	2141      	movs	r1, #65	; 0x41
 8001ea0:	4876      	ldr	r0, [pc, #472]	; (800207c <fnPrintMainView+0x2f8>)
 8001ea2:	f001 ffbb 	bl	8003e1c <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4874      	ldr	r0, [pc, #464]	; (800207c <fnPrintMainView+0x2f8>)
 8001eaa:	f002 f981 	bl	80041b0 <u8g2_SetDrawColor>
 8001eae:	e00f      	b.n	8001ed0 <fnPrintMainView+0x14c>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4872      	ldr	r0, [pc, #456]	; (800207c <fnPrintMainView+0x2f8>)
 8001eb4:	f002 f97c 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,1,21,8);
 8001eb8:	2308      	movs	r3, #8
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2315      	movs	r3, #21
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2140      	movs	r1, #64	; 0x40
 8001ec2:	486e      	ldr	r0, [pc, #440]	; (800207c <fnPrintMainView+0x2f8>)
 8001ec4:	f001 f90a 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	486c      	ldr	r0, [pc, #432]	; (800207c <fnPrintMainView+0x2f8>)
 8001ecc:	f002 f970 	bl	80041b0 <u8g2_SetDrawColor>
  }

  if(main_data.converter_output_state){
 8001ed0:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <fnPrintMainView+0x300>)
 8001ed2:	7d5b      	ldrb	r3, [r3, #21]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d016      	beq.n	8001f06 <fnPrintMainView+0x182>
	u8g2_DrawBox(&u8g2,64,11,21,8);
 8001ed8:	2308      	movs	r3, #8
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2315      	movs	r3, #21
 8001ede:	220b      	movs	r2, #11
 8001ee0:	2140      	movs	r1, #64	; 0x40
 8001ee2:	4866      	ldr	r0, [pc, #408]	; (800207c <fnPrintMainView+0x2f8>)
 8001ee4:	f001 f8fa 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4864      	ldr	r0, [pc, #400]	; (800207c <fnPrintMainView+0x2f8>)
 8001eec:	f002 f960 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 18, "CONV");
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	; (800209c <fnPrintMainView+0x318>)
 8001ef2:	2212      	movs	r2, #18
 8001ef4:	2141      	movs	r1, #65	; 0x41
 8001ef6:	4861      	ldr	r0, [pc, #388]	; (800207c <fnPrintMainView+0x2f8>)
 8001ef8:	f001 ff90 	bl	8003e1c <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8001efc:	2101      	movs	r1, #1
 8001efe:	485f      	ldr	r0, [pc, #380]	; (800207c <fnPrintMainView+0x2f8>)
 8001f00:	f002 f956 	bl	80041b0 <u8g2_SetDrawColor>
 8001f04:	e00f      	b.n	8001f26 <fnPrintMainView+0x1a2>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8001f06:	2100      	movs	r1, #0
 8001f08:	485c      	ldr	r0, [pc, #368]	; (800207c <fnPrintMainView+0x2f8>)
 8001f0a:	f002 f951 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,11,21,8);
 8001f0e:	2308      	movs	r3, #8
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2315      	movs	r3, #21
 8001f14:	220b      	movs	r2, #11
 8001f16:	2140      	movs	r1, #64	; 0x40
 8001f18:	4858      	ldr	r0, [pc, #352]	; (800207c <fnPrintMainView+0x2f8>)
 8001f1a:	f001 f8df 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4856      	ldr	r0, [pc, #344]	; (800207c <fnPrintMainView+0x2f8>)
 8001f22:	f002 f945 	bl	80041b0 <u8g2_SetDrawColor>
  }

  if(main_data.fridge_output_state){
 8001f26:	4b57      	ldr	r3, [pc, #348]	; (8002084 <fnPrintMainView+0x300>)
 8001f28:	7d9b      	ldrb	r3, [r3, #22]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <fnPrintMainView+0x1d8>
	u8g2_DrawBox(&u8g2,64,21,21,8);
 8001f2e:	2308      	movs	r3, #8
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2315      	movs	r3, #21
 8001f34:	2215      	movs	r2, #21
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	4850      	ldr	r0, [pc, #320]	; (800207c <fnPrintMainView+0x2f8>)
 8001f3a:	f001 f8cf 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	484e      	ldr	r0, [pc, #312]	; (800207c <fnPrintMainView+0x2f8>)
 8001f42:	f002 f935 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 28, "FRDG");
 8001f46:	4b56      	ldr	r3, [pc, #344]	; (80020a0 <fnPrintMainView+0x31c>)
 8001f48:	221c      	movs	r2, #28
 8001f4a:	2141      	movs	r1, #65	; 0x41
 8001f4c:	484b      	ldr	r0, [pc, #300]	; (800207c <fnPrintMainView+0x2f8>)
 8001f4e:	f001 ff65 	bl	8003e1c <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8001f52:	2101      	movs	r1, #1
 8001f54:	4849      	ldr	r0, [pc, #292]	; (800207c <fnPrintMainView+0x2f8>)
 8001f56:	f002 f92b 	bl	80041b0 <u8g2_SetDrawColor>
 8001f5a:	e00f      	b.n	8001f7c <fnPrintMainView+0x1f8>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4847      	ldr	r0, [pc, #284]	; (800207c <fnPrintMainView+0x2f8>)
 8001f60:	f002 f926 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,21,21,8);
 8001f64:	2308      	movs	r3, #8
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2315      	movs	r3, #21
 8001f6a:	2215      	movs	r2, #21
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	4843      	ldr	r0, [pc, #268]	; (800207c <fnPrintMainView+0x2f8>)
 8001f70:	f001 f8b4 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 8001f74:	2101      	movs	r1, #1
 8001f76:	4841      	ldr	r0, [pc, #260]	; (800207c <fnPrintMainView+0x2f8>)
 8001f78:	f002 f91a 	bl	80041b0 <u8g2_SetDrawColor>
  }

  if(main_data.error_code){
 8001f7c:	4b41      	ldr	r3, [pc, #260]	; (8002084 <fnPrintMainView+0x300>)
 8001f7e:	7c5b      	ldrb	r3, [r3, #17]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d016      	beq.n	8001fb2 <fnPrintMainView+0x22e>
	u8g2_DrawBox(&u8g2,1,1,16,8);
 8001f84:	2308      	movs	r3, #8
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2310      	movs	r3, #16
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	483b      	ldr	r0, [pc, #236]	; (800207c <fnPrintMainView+0x2f8>)
 8001f90:	f001 f8a4 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8001f94:	2100      	movs	r1, #0
 8001f96:	4839      	ldr	r0, [pc, #228]	; (800207c <fnPrintMainView+0x2f8>)
 8001f98:	f002 f90a 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,2, 8, "ERR");
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <fnPrintMainView+0x320>)
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	4836      	ldr	r0, [pc, #216]	; (800207c <fnPrintMainView+0x2f8>)
 8001fa4:	f001 ff3a 	bl	8003e1c <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4834      	ldr	r0, [pc, #208]	; (800207c <fnPrintMainView+0x2f8>)
 8001fac:	f002 f900 	bl	80041b0 <u8g2_SetDrawColor>
 8001fb0:	e00f      	b.n	8001fd2 <fnPrintMainView+0x24e>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4831      	ldr	r0, [pc, #196]	; (800207c <fnPrintMainView+0x2f8>)
 8001fb6:	f002 f8fb 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,1,1,16,8);
 8001fba:	2308      	movs	r3, #8
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	482d      	ldr	r0, [pc, #180]	; (800207c <fnPrintMainView+0x2f8>)
 8001fc6:	f001 f889 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 8001fca:	2101      	movs	r1, #1
 8001fcc:	482b      	ldr	r0, [pc, #172]	; (800207c <fnPrintMainView+0x2f8>)
 8001fce:	f002 f8ef 	bl	80041b0 <u8g2_SetDrawColor>
  }

  if(flag_mb_connected){
 8001fd2:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <fnPrintMainView+0x324>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d016      	beq.n	8002008 <fnPrintMainView+0x284>
	u8g2_DrawBox(&u8g2,19,1,11,8);
 8001fda:	2308      	movs	r3, #8
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	230b      	movs	r3, #11
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2113      	movs	r1, #19
 8001fe4:	4825      	ldr	r0, [pc, #148]	; (800207c <fnPrintMainView+0x2f8>)
 8001fe6:	f001 f879 	bl	80030dc <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8001fea:	2100      	movs	r1, #0
 8001fec:	4823      	ldr	r0, [pc, #140]	; (800207c <fnPrintMainView+0x2f8>)
 8001fee:	f002 f8df 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,20, 8, "MB");
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <fnPrintMainView+0x328>)
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	2114      	movs	r1, #20
 8001ff8:	4820      	ldr	r0, [pc, #128]	; (800207c <fnPrintMainView+0x2f8>)
 8001ffa:	f001 ff0f 	bl	8003e1c <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8001ffe:	2101      	movs	r1, #1
 8002000:	481e      	ldr	r0, [pc, #120]	; (800207c <fnPrintMainView+0x2f8>)
 8002002:	f002 f8d5 	bl	80041b0 <u8g2_SetDrawColor>
 8002006:	e00f      	b.n	8002028 <fnPrintMainView+0x2a4>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8002008:	2100      	movs	r1, #0
 800200a:	481c      	ldr	r0, [pc, #112]	; (800207c <fnPrintMainView+0x2f8>)
 800200c:	f002 f8d0 	bl	80041b0 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,19,1,16,8);
 8002010:	2308      	movs	r3, #8
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2310      	movs	r3, #16
 8002016:	2201      	movs	r2, #1
 8002018:	2113      	movs	r1, #19
 800201a:	4818      	ldr	r0, [pc, #96]	; (800207c <fnPrintMainView+0x2f8>)
 800201c:	f001 f85e 	bl	80030dc <u8g2_DrawBox>
    u8g2_SetDrawColor(&u8g2,1);
 8002020:	2101      	movs	r1, #1
 8002022:	4816      	ldr	r0, [pc, #88]	; (800207c <fnPrintMainView+0x2f8>)
 8002024:	f002 f8c4 	bl	80041b0 <u8g2_SetDrawColor>
  }

  snprintf(buffer,sizeof(buffer),"%d L",main_data.water_level_liter);
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <fnPrintMainView+0x300>)
 800202a:	7c1b      	ldrb	r3, [r3, #16]
 800202c:	4638      	mov	r0, r7
 800202e:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <fnPrintMainView+0x32c>)
 8002030:	2114      	movs	r1, #20
 8002032:	f000 fe47 	bl	8002cc4 <mini_snprintf>
  u8g2_SetFont(&u8g2, u8g2_font_ncenB18_tr);	//
 8002036:	491f      	ldr	r1, [pc, #124]	; (80020b4 <fnPrintMainView+0x330>)
 8002038:	4810      	ldr	r0, [pc, #64]	; (800207c <fnPrintMainView+0x2f8>)
 800203a:	f001 ff8d 	bl	8003f58 <u8g2_SetFont>
  u8g2_DrawStr(&u8g2,55, 55, buffer);
 800203e:	463b      	mov	r3, r7
 8002040:	2237      	movs	r2, #55	; 0x37
 8002042:	2137      	movs	r1, #55	; 0x37
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <fnPrintMainView+0x2f8>)
 8002046:	f001 fee9 	bl	8003e1c <u8g2_DrawStr>

  W25qxx_ReadBytes(imageBuff, (FLASH_SECTOR_SIZE*2), 1024);
 800204a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002052:	4819      	ldr	r0, [pc, #100]	; (80020b8 <fnPrintMainView+0x334>)
 8002054:	f003 f848 	bl	80050e8 <W25qxx_ReadBytes>
  u8g2_DrawXBM(&u8g2,5, 12, 64, 55, imageBuff);
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <fnPrintMainView+0x334>)
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	2337      	movs	r3, #55	; 0x37
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2340      	movs	r3, #64	; 0x40
 8002062:	220c      	movs	r2, #12
 8002064:	2105      	movs	r1, #5
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <fnPrintMainView+0x2f8>)
 8002068:	f000 fff5 	bl	8003056 <u8g2_DrawXBM>

  u8g2_SendBuffer(&u8g2);
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <fnPrintMainView+0x2f8>)
 800206e:	f001 f93b 	bl	80032e8 <u8g2_SendBuffer>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000978 	.word	0x20000978
 8002080:	080072c4 	.word	0x080072c4
 8002084:	200008ec 	.word	0x200008ec
 8002088:	cccccccd 	.word	0xcccccccd
 800208c:	08006f8c 	.word	0x08006f8c
 8002090:	08006fa8 	.word	0x08006fa8
 8002094:	08006fb0 	.word	0x08006fb0
 8002098:	08006fb8 	.word	0x08006fb8
 800209c:	08006fc0 	.word	0x08006fc0
 80020a0:	08006fc8 	.word	0x08006fc8
 80020a4:	08006fd0 	.word	0x08006fd0
 80020a8:	2000048c 	.word	0x2000048c
 80020ac:	08006fd4 	.word	0x08006fd4
 80020b0:	08006fd8 	.word	0x08006fd8
 80020b4:	08008748 	.word	0x08008748
 80020b8:	2000008c 	.word	0x2000008c

080020bc <fnMenuProcess>:
//***********************************************************************************************************

//Menu -----------------
void fnMenuProcess(void){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af02      	add	r7, sp, #8

    //определение текущей страницы меню
    if(menu_current_item < display_num_lines) menu_current_page = 0;
 80020c2:	4b9b      	ldr	r3, [pc, #620]	; (8002330 <fnMenuProcess+0x274>)
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	4b9b      	ldr	r3, [pc, #620]	; (8002334 <fnMenuProcess+0x278>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d203      	bcs.n	80020d6 <fnMenuProcess+0x1a>
 80020ce:	4b9a      	ldr	r3, [pc, #616]	; (8002338 <fnMenuProcess+0x27c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e053      	b.n	800217e <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*2)menu_current_page = 1 ;
 80020d6:	4b96      	ldr	r3, [pc, #600]	; (8002330 <fnMenuProcess+0x274>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	4b95      	ldr	r3, [pc, #596]	; (8002334 <fnMenuProcess+0x278>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	429a      	cmp	r2, r3
 80020e4:	da03      	bge.n	80020ee <fnMenuProcess+0x32>
 80020e6:	4b94      	ldr	r3, [pc, #592]	; (8002338 <fnMenuProcess+0x27c>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	e047      	b.n	800217e <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*3)menu_current_page = 2 ;
 80020ee:	4b90      	ldr	r3, [pc, #576]	; (8002330 <fnMenuProcess+0x274>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4619      	mov	r1, r3
 80020f4:	4b8f      	ldr	r3, [pc, #572]	; (8002334 <fnMenuProcess+0x278>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	4299      	cmp	r1, r3
 8002102:	da03      	bge.n	800210c <fnMenuProcess+0x50>
 8002104:	4b8c      	ldr	r3, [pc, #560]	; (8002338 <fnMenuProcess+0x27c>)
 8002106:	2202      	movs	r2, #2
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e038      	b.n	800217e <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*4)menu_current_page = 3 ;
 800210c:	4b88      	ldr	r3, [pc, #544]	; (8002330 <fnMenuProcess+0x274>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b88      	ldr	r3, [pc, #544]	; (8002334 <fnMenuProcess+0x278>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	429a      	cmp	r2, r3
 800211a:	da03      	bge.n	8002124 <fnMenuProcess+0x68>
 800211c:	4b86      	ldr	r3, [pc, #536]	; (8002338 <fnMenuProcess+0x27c>)
 800211e:	2203      	movs	r2, #3
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e02c      	b.n	800217e <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*5)menu_current_page = 4 ;
 8002124:	4b82      	ldr	r3, [pc, #520]	; (8002330 <fnMenuProcess+0x274>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	4b82      	ldr	r3, [pc, #520]	; (8002334 <fnMenuProcess+0x278>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	4299      	cmp	r1, r3
 8002138:	da03      	bge.n	8002142 <fnMenuProcess+0x86>
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <fnMenuProcess+0x27c>)
 800213c:	2204      	movs	r2, #4
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e01d      	b.n	800217e <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*6)menu_current_page = 5 ;
 8002142:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <fnMenuProcess+0x274>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <fnMenuProcess+0x278>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4299      	cmp	r1, r3
 8002158:	da03      	bge.n	8002162 <fnMenuProcess+0xa6>
 800215a:	4b77      	ldr	r3, [pc, #476]	; (8002338 <fnMenuProcess+0x27c>)
 800215c:	2205      	movs	r2, #5
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e00d      	b.n	800217e <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*7)menu_current_page = 6 ;
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <fnMenuProcess+0x274>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4619      	mov	r1, r3
 8002168:	4b72      	ldr	r3, [pc, #456]	; (8002334 <fnMenuProcess+0x278>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	4299      	cmp	r1, r3
 8002176:	da02      	bge.n	800217e <fnMenuProcess+0xc2>
 8002178:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <fnMenuProcess+0x27c>)
 800217a:	2206      	movs	r2, #6
 800217c:	701a      	strb	r2, [r3, #0]

    switch (menu_mode)
 800217e:	4b6f      	ldr	r3, [pc, #444]	; (800233c <fnMenuProcess+0x280>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b04      	cmp	r3, #4
 8002184:	f200 8170 	bhi.w	8002468 <fnMenuProcess+0x3ac>
 8002188:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <fnMenuProcess+0xd4>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021a5 	.word	0x080021a5
 8002194:	080021d5 	.word	0x080021d5
 8002198:	08002255 	.word	0x08002255
 800219c:	080022d3 	.word	0x080022d3
 80021a0:	080023e3 	.word	0x080023e3
    {
      case MENU_MAIN_VIEW:

        fnPrintMainView();
 80021a4:	f7ff fdee 	bl	8001d84 <fnPrintMainView>

        if(btn_state == BTN_ENTER_LONG_PRESS){
 80021a8:	4b65      	ldr	r3, [pc, #404]	; (8002340 <fnMenuProcess+0x284>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	d105      	bne.n	80021bc <fnMenuProcess+0x100>
          menu_mode = MENU_SETPOINTS;
 80021b0:	4b62      	ldr	r3, [pc, #392]	; (800233c <fnMenuProcess+0x280>)
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 80021b6:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <fnMenuProcess+0x274>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
         // tone(BUZZER,500,200);
        }

        if(btn_state == BTN_ENTER){
 80021bc:	4b60      	ldr	r3, [pc, #384]	; (8002340 <fnMenuProcess+0x284>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	f040 8153 	bne.w	800246c <fnMenuProcess+0x3b0>
          menu_mode = MENU_PARAM_VIEW;
 80021c6:	4b5d      	ldr	r3, [pc, #372]	; (800233c <fnMenuProcess+0x280>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 80021cc:	4b58      	ldr	r3, [pc, #352]	; (8002330 <fnMenuProcess+0x274>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80021d2:	e14b      	b.n	800246c <fnMenuProcess+0x3b0>

      case MENU_PARAM_VIEW:

        fnPrintMenuParamView();
 80021d4:	f7ff fd72 	bl	8001cbc <fnPrintMenuParamView>

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)) {         // Если кнопку нажали или удерживают
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <fnMenuProcess+0x284>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d003      	beq.n	80021e8 <fnMenuProcess+0x12c>
 80021e0:	4b57      	ldr	r3, [pc, #348]	; (8002340 <fnMenuProcess+0x284>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d115      	bne.n	8002214 <fnMenuProcess+0x158>
          menu_current_item = constrain(menu_current_item - display_num_lines , 0, MENU_PARAM_VIEW_NUM_ITEMS - 1); // Двигаем указатель в пределах дисплея
 80021e8:	4b51      	ldr	r3, [pc, #324]	; (8002330 <fnMenuProcess+0x274>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b51      	ldr	r3, [pc, #324]	; (8002334 <fnMenuProcess+0x278>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <fnMenuProcess+0x152>
 80021f8:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <fnMenuProcess+0x274>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b4d      	ldr	r3, [pc, #308]	; (8002334 <fnMenuProcess+0x278>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b0e      	cmp	r3, #14
 8002206:	bfa8      	it	ge
 8002208:	230e      	movge	r3, #14
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e000      	b.n	8002210 <fnMenuProcess+0x154>
 800220e:	2300      	movs	r3, #0
 8002210:	4a47      	ldr	r2, [pc, #284]	; (8002330 <fnMenuProcess+0x274>)
 8002212:	7013      	strb	r3, [r2, #0]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)) {
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <fnMenuProcess+0x284>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d003      	beq.n	8002224 <fnMenuProcess+0x168>
 800221c:	4b48      	ldr	r3, [pc, #288]	; (8002340 <fnMenuProcess+0x284>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d10b      	bne.n	800223c <fnMenuProcess+0x180>
          menu_current_item = constrain(menu_current_item + display_num_lines, 0, MENU_PARAM_VIEW_NUM_ITEMS - 1);
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <fnMenuProcess+0x274>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b42      	ldr	r3, [pc, #264]	; (8002334 <fnMenuProcess+0x278>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	2b0e      	cmp	r3, #14
 8002232:	bfa8      	it	ge
 8002234:	230e      	movge	r3, #14
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <fnMenuProcess+0x274>)
 800223a:	701a      	strb	r2, [r3, #0]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if(btn_state == BTN_ENTER){
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <fnMenuProcess+0x284>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	2b10      	cmp	r3, #16
 8002242:	f040 8115 	bne.w	8002470 <fnMenuProcess+0x3b4>
          menu_mode = MENU_LOGO_VIEW;
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <fnMenuProcess+0x280>)
 8002248:	2204      	movs	r2, #4
 800224a:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 800224c:	4b38      	ldr	r3, [pc, #224]	; (8002330 <fnMenuProcess+0x274>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
        }

        break;
 8002252:	e10d      	b.n	8002470 <fnMenuProcess+0x3b4>

      case MENU_SETPOINTS:

        printMenuSetpoints();
 8002254:	f7ff f920 	bl	8001498 <printMenuSetpoints>

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)) {         // Если кнопку нажали или удерживают
 8002258:	4b39      	ldr	r3, [pc, #228]	; (8002340 <fnMenuProcess+0x284>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d003      	beq.n	8002268 <fnMenuProcess+0x1ac>
 8002260:	4b37      	ldr	r3, [pc, #220]	; (8002340 <fnMenuProcess+0x284>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2b08      	cmp	r3, #8
 8002266:	d109      	bne.n	800227c <fnMenuProcess+0x1c0>
          menu_current_item = constrain(menu_current_item + 1, 0, MENU_SETPOINTS_NUM_ITEMS - 1); // Двигаем указатель в пределах дисплея
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <fnMenuProcess+0x274>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b17      	cmp	r3, #23
 800226e:	bf28      	it	cs
 8002270:	2317      	movcs	r3, #23
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <fnMenuProcess+0x274>)
 800227a:	701a      	strb	r2, [r3, #0]
          //Serial.println(menu_current_item);
        }

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)) {
 800227c:	4b30      	ldr	r3, [pc, #192]	; (8002340 <fnMenuProcess+0x284>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d003      	beq.n	800228c <fnMenuProcess+0x1d0>
 8002284:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <fnMenuProcess+0x284>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d10f      	bne.n	80022ac <fnMenuProcess+0x1f0>
          menu_current_item = constrain(menu_current_item - 1, 0, MENU_SETPOINTS_NUM_ITEMS - 1);
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <fnMenuProcess+0x274>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <fnMenuProcess+0x1ea>
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <fnMenuProcess+0x274>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b19      	cmp	r3, #25
 800229a:	bf28      	it	cs
 800229c:	2319      	movcs	r3, #25
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	e000      	b.n	80022a8 <fnMenuProcess+0x1ec>
 80022a6:	2300      	movs	r3, #0
 80022a8:	4a21      	ldr	r2, [pc, #132]	; (8002330 <fnMenuProcess+0x274>)
 80022aa:	7013      	strb	r3, [r2, #0]
          //if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if(btn_state == BTN_ENTER)menu_mode = MENU_SETPOINTS_EDIT_MODE;
 80022ac:	4b24      	ldr	r3, [pc, #144]	; (8002340 <fnMenuProcess+0x284>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d102      	bne.n	80022ba <fnMenuProcess+0x1fe>
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <fnMenuProcess+0x280>)
 80022b6:	2203      	movs	r2, #3
 80022b8:	701a      	strb	r2, [r3, #0]

        if(btn_state == BTN_ESC){
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <fnMenuProcess+0x284>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	2b20      	cmp	r3, #32
 80022c0:	f040 80d8 	bne.w	8002474 <fnMenuProcess+0x3b8>
          menu_mode = MENU_MAIN_VIEW;
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <fnMenuProcess+0x280>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <fnMenuProcess+0x274>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
          //tone(BUZZER,500,200);
        }

        break;
 80022d0:	e0d0      	b.n	8002474 <fnMenuProcess+0x3b8>

      case MENU_SETPOINTS_EDIT_MODE:

        printMenuSetpoints();
 80022d2:	f7ff f8e1 	bl	8001498 <printMenuSetpoints>

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)){
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <fnMenuProcess+0x284>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d003      	beq.n	80022e6 <fnMenuProcess+0x22a>
 80022de:	4b18      	ldr	r3, [pc, #96]	; (8002340 <fnMenuProcess+0x284>)
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d140      	bne.n	8002368 <fnMenuProcess+0x2ac>
          SetpointsUnion.SetpointsArray[menu_current_item] = constrain(SetpointsUnion.SetpointsArray[menu_current_item]+1,param_range_min[menu_current_item],param_range_max[menu_current_item]);
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <fnMenuProcess+0x274>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <fnMenuProcess+0x288>)
 80022ee:	5c9b      	ldrb	r3, [r3, r2]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <fnMenuProcess+0x274>)
 80022f4:	7812      	ldrb	r2, [r2, #0]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4a13      	ldr	r2, [pc, #76]	; (8002348 <fnMenuProcess+0x28c>)
 80022fa:	5c52      	ldrb	r2, [r2, r1]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	da05      	bge.n	800230c <fnMenuProcess+0x250>
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <fnMenuProcess+0x274>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <fnMenuProcess+0x28c>)
 8002308:	5c9b      	ldrb	r3, [r3, r2]
 800230a:	e028      	b.n	800235e <fnMenuProcess+0x2a2>
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <fnMenuProcess+0x274>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <fnMenuProcess+0x288>)
 8002314:	5c9a      	ldrb	r2, [r3, r2]
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <fnMenuProcess+0x274>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <fnMenuProcess+0x290>)
 800231e:	5c5b      	ldrb	r3, [r3, r1]
 8002320:	429a      	cmp	r2, r3
 8002322:	d315      	bcc.n	8002350 <fnMenuProcess+0x294>
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <fnMenuProcess+0x274>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <fnMenuProcess+0x290>)
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	e016      	b.n	800235e <fnMenuProcess+0x2a2>
 8002330:	20000078 	.word	0x20000078
 8002334:	20000890 	.word	0x20000890
 8002338:	20000079 	.word	0x20000079
 800233c:	2000007a 	.word	0x2000007a
 8002340:	2000007c 	.word	0x2000007c
 8002344:	20000a50 	.word	0x20000a50
 8002348:	20000000 	.word	0x20000000
 800234c:	2000001c 	.word	0x2000001c
 8002350:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <fnMenuProcess+0x3c8>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <fnMenuProcess+0x3cc>)
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	3301      	adds	r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4a49      	ldr	r2, [pc, #292]	; (8002484 <fnMenuProcess+0x3c8>)
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	4611      	mov	r1, r2
 8002364:	4a48      	ldr	r2, [pc, #288]	; (8002488 <fnMenuProcess+0x3cc>)
 8002366:	5453      	strb	r3, [r2, r1]
         // Serial.println(SetpointsUnion.SetpointsArray[menu_current_item]);
        }

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)){
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <fnMenuProcess+0x3d0>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d003      	beq.n	8002378 <fnMenuProcess+0x2bc>
 8002370:	4b46      	ldr	r3, [pc, #280]	; (800248c <fnMenuProcess+0x3d0>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	2b08      	cmp	r3, #8
 8002376:	d125      	bne.n	80023c4 <fnMenuProcess+0x308>
          SetpointsUnion.SetpointsArray[menu_current_item] = constrain(SetpointsUnion.SetpointsArray[menu_current_item]-1,param_range_min[menu_current_item],param_range_max[menu_current_item]);
 8002378:	4b42      	ldr	r3, [pc, #264]	; (8002484 <fnMenuProcess+0x3c8>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b42      	ldr	r3, [pc, #264]	; (8002488 <fnMenuProcess+0x3cc>)
 8002380:	5c9a      	ldrb	r2, [r3, r2]
 8002382:	4b40      	ldr	r3, [pc, #256]	; (8002484 <fnMenuProcess+0x3c8>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <fnMenuProcess+0x3d4>)
 800238a:	5c5b      	ldrb	r3, [r3, r1]
 800238c:	429a      	cmp	r2, r3
 800238e:	d805      	bhi.n	800239c <fnMenuProcess+0x2e0>
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <fnMenuProcess+0x3c8>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <fnMenuProcess+0x3d4>)
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	e00e      	b.n	80023ba <fnMenuProcess+0x2fe>
 800239c:	4b39      	ldr	r3, [pc, #228]	; (8002484 <fnMenuProcess+0x3c8>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <fnMenuProcess+0x3cc>)
 80023a4:	5c9b      	ldrb	r3, [r3, r2]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	4a36      	ldr	r2, [pc, #216]	; (8002484 <fnMenuProcess+0x3c8>)
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4a39      	ldr	r2, [pc, #228]	; (8002494 <fnMenuProcess+0x3d8>)
 80023b0:	5c52      	ldrb	r2, [r2, r1]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	bfa8      	it	ge
 80023b6:	4613      	movge	r3, r2
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4a32      	ldr	r2, [pc, #200]	; (8002484 <fnMenuProcess+0x3c8>)
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	4611      	mov	r1, r2
 80023c0:	4a31      	ldr	r2, [pc, #196]	; (8002488 <fnMenuProcess+0x3cc>)
 80023c2:	5453      	strb	r3, [r2, r1]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(SetpointsUnion.SetpointsArray[menu_current_item]);
        }

        if(btn_state == BTN_ENTER){
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <fnMenuProcess+0x3d0>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d102      	bne.n	80023d2 <fnMenuProcess+0x316>
          //выход с сохранением в flash
          //tone(BUZZER,500,200);
          menu_mode = MENU_SETPOINTS;
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <fnMenuProcess+0x3dc>)
 80023ce:	2202      	movs	r2, #2
 80023d0:	701a      	strb	r2, [r3, #0]
        }

        if(btn_state == BTN_ESC){
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <fnMenuProcess+0x3d0>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d14e      	bne.n	8002478 <fnMenuProcess+0x3bc>
		  //выход без сохранения
		  menu_mode = MENU_SETPOINTS;
 80023da:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <fnMenuProcess+0x3dc>)
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]
		}

        break;
 80023e0:	e04a      	b.n	8002478 <fnMenuProcess+0x3bc>

      case MENU_LOGO_VIEW:

        switch (SetpointsUnion.setpoints_data.logo)
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <fnMenuProcess+0x3cc>)
 80023e4:	7d5b      	ldrb	r3, [r3, #21]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d025      	beq.n	8002436 <fnMenuProcess+0x37a>
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	dc2a      	bgt.n	8002444 <fnMenuProcess+0x388>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <fnMenuProcess+0x33c>
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d018      	beq.n	8002428 <fnMenuProcess+0x36c>
 80023f6:	e025      	b.n	8002444 <fnMenuProcess+0x388>
        {
        case 0:
          u8g2_ClearBuffer(&u8g2);
 80023f8:	4828      	ldr	r0, [pc, #160]	; (800249c <fnMenuProcess+0x3e0>)
 80023fa:	f000 ff02 	bl	8003202 <u8g2_ClearBuffer>
          W25qxx_ReadBytes(imageBuff, IMAGE_LOGO_FK, 1024);
 80023fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002406:	4826      	ldr	r0, [pc, #152]	; (80024a0 <fnMenuProcess+0x3e4>)
 8002408:	f002 fe6e 	bl	80050e8 <W25qxx_ReadBytes>
          u8g2_DrawXBM(&u8g2,33,5, 64, 55, imageBuff);
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <fnMenuProcess+0x3e4>)
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2337      	movs	r3, #55	; 0x37
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2340      	movs	r3, #64	; 0x40
 8002416:	2205      	movs	r2, #5
 8002418:	2121      	movs	r1, #33	; 0x21
 800241a:	4820      	ldr	r0, [pc, #128]	; (800249c <fnMenuProcess+0x3e0>)
 800241c:	f000 fe1b 	bl	8003056 <u8g2_DrawXBM>
          u8g2_SendBuffer(&u8g2);
 8002420:	481e      	ldr	r0, [pc, #120]	; (800249c <fnMenuProcess+0x3e0>)
 8002422:	f000 ff61 	bl	80032e8 <u8g2_SendBuffer>
          break;
 8002426:	e014      	b.n	8002452 <fnMenuProcess+0x396>

        case 1:
          u8g2_ClearBuffer(&u8g2);
 8002428:	481c      	ldr	r0, [pc, #112]	; (800249c <fnMenuProcess+0x3e0>)
 800242a:	f000 feea 	bl	8003202 <u8g2_ClearBuffer>
          //
          u8g2_SendBuffer(&u8g2);
 800242e:	481b      	ldr	r0, [pc, #108]	; (800249c <fnMenuProcess+0x3e0>)
 8002430:	f000 ff5a 	bl	80032e8 <u8g2_SendBuffer>
          break;
 8002434:	e00d      	b.n	8002452 <fnMenuProcess+0x396>

        case 2:
          u8g2_ClearBuffer(&u8g2);
 8002436:	4819      	ldr	r0, [pc, #100]	; (800249c <fnMenuProcess+0x3e0>)
 8002438:	f000 fee3 	bl	8003202 <u8g2_ClearBuffer>
          //
          u8g2_SendBuffer(&u8g2);
 800243c:	4817      	ldr	r0, [pc, #92]	; (800249c <fnMenuProcess+0x3e0>)
 800243e:	f000 ff53 	bl	80032e8 <u8g2_SendBuffer>
          break;
 8002442:	e006      	b.n	8002452 <fnMenuProcess+0x396>

		default:
			u8g2_ClearBuffer(&u8g2);
 8002444:	4815      	ldr	r0, [pc, #84]	; (800249c <fnMenuProcess+0x3e0>)
 8002446:	f000 fedc 	bl	8003202 <u8g2_ClearBuffer>
			//пусто
			u8g2_SendBuffer(&u8g2);
 800244a:	4814      	ldr	r0, [pc, #80]	; (800249c <fnMenuProcess+0x3e0>)
 800244c:	f000 ff4c 	bl	80032e8 <u8g2_SendBuffer>
			break;
 8002450:	bf00      	nop
        }


        if(btn_state == BTN_ENTER){
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <fnMenuProcess+0x3d0>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	2b10      	cmp	r3, #16
 8002458:	d110      	bne.n	800247c <fnMenuProcess+0x3c0>
          menu_mode = MENU_MAIN_VIEW;
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <fnMenuProcess+0x3dc>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <fnMenuProcess+0x3c8>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
        }

        break;
 8002466:	e009      	b.n	800247c <fnMenuProcess+0x3c0>

      default:

      break;
 8002468:	bf00      	nop
 800246a:	e008      	b.n	800247e <fnMenuProcess+0x3c2>
        break;
 800246c:	bf00      	nop
 800246e:	e006      	b.n	800247e <fnMenuProcess+0x3c2>
        break;
 8002470:	bf00      	nop
 8002472:	e004      	b.n	800247e <fnMenuProcess+0x3c2>
        break;
 8002474:	bf00      	nop
 8002476:	e002      	b.n	800247e <fnMenuProcess+0x3c2>
        break;
 8002478:	bf00      	nop
 800247a:	e000      	b.n	800247e <fnMenuProcess+0x3c2>
        break;
 800247c:	bf00      	nop

    }
  //end menu
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000078 	.word	0x20000078
 8002488:	20000a50 	.word	0x20000a50
 800248c:	2000007c 	.word	0x2000007c
 8002490:	20000000 	.word	0x20000000
 8002494:	2000001c 	.word	0x2000001c
 8002498:	2000007a 	.word	0x2000007a
 800249c:	20000978 	.word	0x20000978
 80024a0:	2000008c 	.word	0x2000008c

080024a4 <fnGetPressKey>:

//***************************************************************************************************************

//
static uint16_t fnGetPressKey(void){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0

 	static uint16_t key_pressed;

 	 //считываем состояние кнопок и заносим в массив
 		  btnStatesArray[BUTTON_UP] = Button_Get_Clicked_Count(&Button_A);  //
 80024a8:	485d      	ldr	r0, [pc, #372]	; (8002620 <fnGetPressKey+0x17c>)
 80024aa:	f7fe fb97 	bl	8000bdc <Button_Get_Clicked_Count>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <fnGetPressKey+0x180>)
 80024b4:	701a      	strb	r2, [r3, #0]
 		  btnStatesArray[BUTTON_DOWN] = Button_Get_Clicked_Count(&Button_B);
 80024b6:	485c      	ldr	r0, [pc, #368]	; (8002628 <fnGetPressKey+0x184>)
 80024b8:	f7fe fb90 	bl	8000bdc <Button_Get_Clicked_Count>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b58      	ldr	r3, [pc, #352]	; (8002624 <fnGetPressKey+0x180>)
 80024c2:	705a      	strb	r2, [r3, #1]
 		  btnStatesArray[BUTTON_ENTER] = Button_Get_Clicked_Count(&Button_C);
 80024c4:	4859      	ldr	r0, [pc, #356]	; (800262c <fnGetPressKey+0x188>)
 80024c6:	f7fe fb89 	bl	8000bdc <Button_Get_Clicked_Count>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b55      	ldr	r3, [pc, #340]	; (8002624 <fnGetPressKey+0x180>)
 80024d0:	709a      	strb	r2, [r3, #2]
 		  btnStatesArray[BUTTON_ESC] = Button_Get_Clicked_Count(&Button_D);
 80024d2:	4857      	ldr	r0, [pc, #348]	; (8002630 <fnGetPressKey+0x18c>)
 80024d4:	f7fe fb82 	bl	8000bdc <Button_Get_Clicked_Count>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	4b51      	ldr	r3, [pc, #324]	; (8002624 <fnGetPressKey+0x180>)
 80024de:	70da      	strb	r2, [r3, #3]


 	if(btnStatesArray[BUTTON_UP] == 1)key_pressed |= BTN_UP;
 80024e0:	4b50      	ldr	r3, [pc, #320]	; (8002624 <fnGetPressKey+0x180>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <fnGetPressKey+0x54>
 80024e8:	4b52      	ldr	r3, [pc, #328]	; (8002634 <fnGetPressKey+0x190>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b50      	ldr	r3, [pc, #320]	; (8002634 <fnGetPressKey+0x190>)
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	e006      	b.n	8002506 <fnGetPressKey+0x62>
 		else key_pressed &= ~BTN_UP;
 80024f8:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <fnGetPressKey+0x190>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f023 0301 	bic.w	r3, r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <fnGetPressKey+0x190>)
 8002504:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_DOWN] == 1) key_pressed |= BTN_DOWN;    //
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <fnGetPressKey+0x180>)
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <fnGetPressKey+0x7a>
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <fnGetPressKey+0x190>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <fnGetPressKey+0x190>)
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	e006      	b.n	800252c <fnGetPressKey+0x88>
 		else key_pressed &= ~BTN_DOWN;
 800251e:	4b45      	ldr	r3, [pc, #276]	; (8002634 <fnGetPressKey+0x190>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	f023 0302 	bic.w	r3, r3, #2
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b42      	ldr	r3, [pc, #264]	; (8002634 <fnGetPressKey+0x190>)
 800252a:	801a      	strh	r2, [r3, #0]

 	if(Button_Get_Status(&Button_A) == Button_Long_Pressed)key_pressed |= BTN_UP_LONG_PRESS;
 800252c:	483c      	ldr	r0, [pc, #240]	; (8002620 <fnGetPressKey+0x17c>)
 800252e:	f7fe fb45 	bl	8000bbc <Button_Get_Status>
 8002532:	4603      	mov	r3, r0
 8002534:	2b03      	cmp	r3, #3
 8002536:	d107      	bne.n	8002548 <fnGetPressKey+0xa4>
 8002538:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <fnGetPressKey+0x190>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <fnGetPressKey+0x190>)
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	e006      	b.n	8002556 <fnGetPressKey+0xb2>
 	 	else key_pressed &= ~BTN_UP_LONG_PRESS;
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <fnGetPressKey+0x190>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <fnGetPressKey+0x190>)
 8002554:	801a      	strh	r2, [r3, #0]

	if(Button_Get_Status(&Button_B) == Button_Long_Pressed)key_pressed |= BTN_DOWN_LONG_PRESS; //
 8002556:	4834      	ldr	r0, [pc, #208]	; (8002628 <fnGetPressKey+0x184>)
 8002558:	f7fe fb30 	bl	8000bbc <Button_Get_Status>
 800255c:	4603      	mov	r3, r0
 800255e:	2b03      	cmp	r3, #3
 8002560:	d107      	bne.n	8002572 <fnGetPressKey+0xce>
 8002562:	4b34      	ldr	r3, [pc, #208]	; (8002634 <fnGetPressKey+0x190>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	f043 0308 	orr.w	r3, r3, #8
 800256a:	b29a      	uxth	r2, r3
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <fnGetPressKey+0x190>)
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	e006      	b.n	8002580 <fnGetPressKey+0xdc>
		else key_pressed &= ~BTN_DOWN_LONG_PRESS;
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <fnGetPressKey+0x190>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f023 0308 	bic.w	r3, r3, #8
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <fnGetPressKey+0x190>)
 800257e:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ENTER] == 1) key_pressed |= BTN_ENTER;    //
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <fnGetPressKey+0x180>)
 8002582:	789b      	ldrb	r3, [r3, #2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <fnGetPressKey+0xf4>
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <fnGetPressKey+0x190>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	f043 0310 	orr.w	r3, r3, #16
 8002590:	b29a      	uxth	r2, r3
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <fnGetPressKey+0x190>)
 8002594:	801a      	strh	r2, [r3, #0]
 8002596:	e006      	b.n	80025a6 <fnGetPressKey+0x102>
 		else key_pressed &= ~BTN_ENTER;
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <fnGetPressKey+0x190>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	f023 0310 	bic.w	r3, r3, #16
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <fnGetPressKey+0x190>)
 80025a4:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ESC] == 1) key_pressed |= BTN_ESC;  //
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <fnGetPressKey+0x180>)
 80025a8:	78db      	ldrb	r3, [r3, #3]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <fnGetPressKey+0x11a>
 80025ae:	4b21      	ldr	r3, [pc, #132]	; (8002634 <fnGetPressKey+0x190>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	f043 0320 	orr.w	r3, r3, #32
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <fnGetPressKey+0x190>)
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	e006      	b.n	80025cc <fnGetPressKey+0x128>
 		else key_pressed &= ~BTN_ESC;
 80025be:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <fnGetPressKey+0x190>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	f023 0320 	bic.w	r3, r3, #32
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <fnGetPressKey+0x190>)
 80025ca:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ENTER] == 255) key_pressed |= BTN_ENTER_LONG_PRESS;  //
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <fnGetPressKey+0x180>)
 80025ce:	789b      	ldrb	r3, [r3, #2]
 80025d0:	2bff      	cmp	r3, #255	; 0xff
 80025d2:	d107      	bne.n	80025e4 <fnGetPressKey+0x140>
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <fnGetPressKey+0x190>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <fnGetPressKey+0x190>)
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	e006      	b.n	80025f2 <fnGetPressKey+0x14e>
 		else key_pressed &= ~BTN_ENTER_LONG_PRESS;
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <fnGetPressKey+0x190>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <fnGetPressKey+0x190>)
 80025f0:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ESC] == 255) key_pressed |= BTN_ESC_LONG_PRESS;  //
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <fnGetPressKey+0x180>)
 80025f4:	78db      	ldrb	r3, [r3, #3]
 80025f6:	2bff      	cmp	r3, #255	; 0xff
 80025f8:	d107      	bne.n	800260a <fnGetPressKey+0x166>
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <fnGetPressKey+0x190>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <fnGetPressKey+0x190>)
 8002606:	801a      	strh	r2, [r3, #0]
 8002608:	e006      	b.n	8002618 <fnGetPressKey+0x174>
 		else key_pressed &= ~BTN_ESC_LONG_PRESS;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <fnGetPressKey+0x190>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002612:	b29a      	uxth	r2, r3
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <fnGetPressKey+0x190>)
 8002616:	801a      	strh	r2, [r3, #0]

 	return key_pressed;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <fnGetPressKey+0x190>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 }
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	2000095c 	.word	0x2000095c
 8002624:	20000080 	.word	0x20000080
 8002628:	20000940 	.word	0x20000940
 800262c:	20000924 	.word	0x20000924
 8002630:	20000908 	.word	0x20000908
 8002634:	2000048e 	.word	0x2000048e

08002638 <Button_Get_Tick>:

//*********************************************************************************

//
uint32_t Button_Get_Tick(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800263c:	f002 fe2c 	bl	8005298 <HAL_GetTick>
 8002640:	4603      	mov	r3, r0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <Button_A_Read>:
//**********************************************************************************

//
uint8_t Button_A_Read(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) ? 0 : 1;
 800264c:	2120      	movs	r1, #32
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <Button_A_Read+0x1c>)
 8002650:	f003 f9b4 	bl	80059bc <HAL_GPIO_ReadPin>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40010c00 	.word	0x40010c00

08002668 <Button_B_Read>:
//**********************************************************************************

//
uint8_t Button_B_Read(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin) ? 0 : 1;
 800266c:	2140      	movs	r1, #64	; 0x40
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <Button_B_Read+0x1c>)
 8002670:	f003 f9a4 	bl	80059bc <HAL_GPIO_ReadPin>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010c00 	.word	0x40010c00

08002688 <Button_C_Read>:
//*********************************************************************************

//
uint8_t Button_C_Read(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_ENTER_GPIO_Port, BUTTON_ENTER_Pin) ? 0 : 1;
 800268c:	2108      	movs	r1, #8
 800268e:	4805      	ldr	r0, [pc, #20]	; (80026a4 <Button_C_Read+0x1c>)
 8002690:	f003 f994 	bl	80059bc <HAL_GPIO_ReadPin>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40010c00 	.word	0x40010c00

080026a8 <Button_D_Read>:
//****************************************************************************************

//
uint8_t Button_D_Read(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_ESC_GPIO_Port, BUTTON_ESC_Pin) ? 0 : 1;
 80026ac:	2110      	movs	r1, #16
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <Button_D_Read+0x1c>)
 80026b0:	f003 f984 	bl	80059bc <HAL_GPIO_ReadPin>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40010c00 	.word	0x40010c00

080026c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026cc:	b672      	cpsid	i
}
 80026ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <Error_Handler+0x8>

080026d2 <mini_strlen>:

#include "mini-printf.h"

static int
mini_strlen(const char *s)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
	int len = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
	while (s[len] != '\0') len++;
 80026de:	e002      	b.n	80026e6 <mini_strlen+0x14>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3301      	adds	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f6      	bne.n	80026e0 <mini_strlen+0xe>
	return len;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <mini_itoa>:

static int
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
	 char *buffer)
{
 80026fe:	b480      	push	{r7}
 8002700:	b08b      	sub	sp, #44	; 0x2c
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
	char	*pbuffer = buffer;
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
	int	negative = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	623b      	str	r3, [r7, #32]
	int	i, len;

	/* No support for unusual radixes. */
	if (radix > 16)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b10      	cmp	r3, #16
 8002718:	d901      	bls.n	800271e <mini_itoa+0x20>
		return 0;
 800271a:	2300      	movs	r3, #0
 800271c:	e069      	b.n	80027f2 <mini_itoa+0xf4>

	if (value < 0 && !unsig) {
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	da07      	bge.n	8002734 <mini_itoa+0x36>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <mini_itoa+0x36>
		negative = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	623b      	str	r3, [r7, #32]
		value = -value;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	425b      	negs	r3, r3
 8002732:	60fb      	str	r3, [r7, #12]
	}

	/* This builds the string back to front ... */
	do {
		int digit = value % radix;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	fbb3 f2f2 	udiv	r2, r3, r2
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	fb01 f202 	mul.w	r2, r1, r2
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b09      	cmp	r3, #9
 800274a:	dc04      	bgt.n	8002756 <mini_itoa+0x58>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3330      	adds	r3, #48	; 0x30
 8002752:	b2da      	uxtb	r2, r3
 8002754:	e00b      	b.n	800276e <mini_itoa+0x70>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <mini_itoa+0x62>
 800275c:	2241      	movs	r2, #65	; 0x41
 800275e:	e000      	b.n	8002762 <mini_itoa+0x64>
 8002760:	2261      	movs	r2, #97	; 0x61
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4413      	add	r3, r2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3b0a      	subs	r3, #10
 800276c:	b2da      	uxtb	r2, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	1c59      	adds	r1, r3, #1
 8002772:	6279      	str	r1, [r7, #36]	; 0x24
 8002774:	701a      	strb	r2, [r3, #0]
		value /= radix;
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]
	} while (value > 0);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	dcd6      	bgt.n	8002734 <mini_itoa+0x36>

	if (negative)
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <mini_itoa+0x98>
		*(pbuffer++) = '-';
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	627a      	str	r2, [r7, #36]	; 0x24
 8002792:	222d      	movs	r2, #45	; 0x2d
 8002794:	701a      	strb	r2, [r3, #0]

	*(pbuffer) = '\0';
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]

	/* ... now we reverse it (could do it recursively but will
	 * conserve the stack space) */
	len = (pbuffer - buffer);
 800279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len / 2; i++) {
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	e01a      	b.n	80027e0 <mini_itoa+0xe2>
		char j = buffer[i];
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ae:	4413      	add	r3, r2
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	74fb      	strb	r3, [r7, #19]
		buffer[i] = buffer[len-i-1];
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027be:	441a      	add	r2, r3
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027c4:	440b      	add	r3, r1
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	701a      	strb	r2, [r3, #0]
		buffer[len-i-1] = j;
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d4:	4413      	add	r3, r2
 80027d6:	7cfa      	ldrb	r2, [r7, #19]
 80027d8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len / 2; i++) {
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	0fda      	lsrs	r2, r3, #31
 80027e4:	4413      	add	r3, r2
 80027e6:	105b      	asrs	r3, r3, #1
 80027e8:	461a      	mov	r2, r3
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	dbdc      	blt.n	80027aa <mini_itoa+0xac>
	}

	return len;
 80027f0:	697b      	ldr	r3, [r7, #20]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	372c      	adds	r7, #44	; 0x2c
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <mini_pad>:

static int
mini_pad(char* ptr, int len, char pad_char, int pad_to, char *buffer)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	4613      	mov	r3, r2
 800280a:	71fb      	strb	r3, [r7, #7]
	int i;
	int overflow = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
	char * pbuffer = buffer;
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	617b      	str	r3, [r7, #20]
	if(pad_to == 0) pad_to = len;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <mini_pad+0x22>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	603b      	str	r3, [r7, #0]
	if(len > pad_to) {
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	dd03      	ble.n	800282e <mini_pad+0x32>
		len = pad_to;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	60bb      	str	r3, [r7, #8]
		overflow = 1;
 800282a:	2301      	movs	r3, #1
 800282c:	61bb      	str	r3, [r7, #24]
	}
	for(i = pad_to - len; i > 0; i --) {
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e007      	b.n	8002848 <mini_pad+0x4c>
		*(pbuffer++) = pad_char;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	617a      	str	r2, [r7, #20]
 800283e:	79fa      	ldrb	r2, [r7, #7]
 8002840:	701a      	strb	r2, [r3, #0]
	for(i = pad_to - len; i > 0; i --) {
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b01      	subs	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	dcf4      	bgt.n	8002838 <mini_pad+0x3c>
	}
	for(i = len; i > 0; i --) {
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e00a      	b.n	800286a <mini_pad+0x6e>
		*(pbuffer++) = *(ptr++);
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	1c53      	adds	r3, r2, #1
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	1c59      	adds	r1, r3, #1
 800285e:	6179      	str	r1, [r7, #20]
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	701a      	strb	r2, [r3, #0]
	for(i = len; i > 0; i --) {
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3b01      	subs	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	dcf1      	bgt.n	8002854 <mini_pad+0x58>
	}
	len = pbuffer - buffer;
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	60bb      	str	r3, [r7, #8]
	if(overflow) {
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d012      	beq.n	80028a4 <mini_pad+0xa8>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e008      	b.n	8002896 <mini_pad+0x9a>
			*(pbuffer-- - 1) = '*';
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	1e5a      	subs	r2, r3, #1
 8002888:	617a      	str	r2, [r7, #20]
 800288a:	3b01      	subs	r3, #1
 800288c:	222a      	movs	r2, #42	; 0x2a
 800288e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	2b02      	cmp	r3, #2
 800289a:	dc03      	bgt.n	80028a4 <mini_pad+0xa8>
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8ef      	bhi.n	8002884 <mini_pad+0x88>
		}
	}
	return len;
 80028a4:	68bb      	ldr	r3, [r7, #8]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	; 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <_puts>:
	unsigned int buffer_len;
};

static int
_puts(char *s, int len, void *buf)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
	if(!buf) return len;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <_puts+0x16>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	e02c      	b.n	8002920 <_puts+0x70>
	struct mini_buff *b = buf;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	61bb      	str	r3, [r7, #24]
	char * p0 = b->buffer;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	617b      	str	r3, [r7, #20]
	int i;
	/* Copy to buffer */
	for (i = 0; i < len; i++) {
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	e016      	b.n	8002904 <_puts+0x54>
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	440b      	add	r3, r1
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d011      	beq.n	800290e <_puts+0x5e>
			break;
		}
		*(b->pbuffer ++) = s[i];
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	441a      	add	r2, r3
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	1c58      	adds	r0, r3, #1
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	6048      	str	r0, [r1, #4]
 80028fa:	7812      	ldrb	r2, [r2, #0]
 80028fc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	dbe4      	blt.n	80028d6 <_puts+0x26>
 800290c:	e000      	b.n	8002910 <_puts+0x60>
			break;
 800290e:	bf00      	nop
	}
	*(b->pbuffer) = 0;
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
	return b->pbuffer - p0;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	1ad3      	subs	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	3724      	adds	r7, #36	; 0x24
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <mini_vsnprintf>:
}
#endif

int
mini_vsnprintf(char *buffer, unsigned int buffer_len, const char *fmt, va_list va)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
	struct mini_buff b;
	b.buffer = buffer;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	613b      	str	r3, [r7, #16]
	b.pbuffer = buffer;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	617b      	str	r3, [r7, #20]
	b.buffer_len = buffer_len;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	61bb      	str	r3, [r7, #24]
	if(buffer_len == 0) buffer = (void*) 0;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <mini_vsnprintf+0x24>
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <mini_vsnprintf+0x30>
 8002956:	f107 0110 	add.w	r1, r7, #16
 800295a:	e000      	b.n	800295e <mini_vsnprintf+0x32>
 800295c:	2100      	movs	r1, #0
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4808      	ldr	r0, [pc, #32]	; (8002984 <mini_vsnprintf+0x58>)
 8002964:	f000 f810 	bl	8002988 <mini_vpprintf>
 8002968:	61f8      	str	r0, [r7, #28]
	if(buffer == (void*) 0) {
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <mini_vsnprintf+0x48>
		return n;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	e002      	b.n	800297a <mini_vsnprintf+0x4e>
	}
	return b.pbuffer - b.buffer;
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	080028b1 	.word	0x080028b1

08002988 <mini_vpprintf>:

int
mini_vpprintf(int (*puts)(char* s, int len, void* buf), void* buf, const char *fmt, va_list va)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b09a      	sub	sp, #104	; 0x68
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
	char bf2[24];
	char ch;
#ifdef MINI_PRINTF_ENABLE_OBJECTS
	void* obj;
#endif
	if(puts == (void*)0) {
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d103      	bne.n	80029a4 <mini_vpprintf+0x1c>
		/* run puts in counting mode. */
		puts = _puts; buf = (void*)0;
 800299c:	4bb5      	ldr	r3, [pc, #724]	; (8002c74 <mini_vpprintf+0x2ec>)
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
	}
	int n = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	while ((ch=*(fmt++))) {
 80029a8:	e17b      	b.n	8002ca2 <mini_vpprintf+0x31a>
		int len;
		if (ch!='%') {
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	2b25      	cmp	r3, #37	; 0x25
 80029ae:	d009      	beq.n	80029c4 <mini_vpprintf+0x3c>
			len = 1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	65bb      	str	r3, [r7, #88]	; 0x58
			len = puts(&ch, len, buf);
 80029b4:	f107 0017 	add.w	r0, r7, #23
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029be:	4798      	blx	r3
 80029c0:	65b8      	str	r0, [r7, #88]	; 0x58
 80029c2:	e16a      	b.n	8002c9a <mini_vpprintf+0x312>
		} else {
			char pad_char = ' ';
 80029c4:	2320      	movs	r3, #32
 80029c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			int pad_to = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	653b      	str	r3, [r7, #80]	; 0x50
			char l = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			char *ptr;

			ch=*(fmt++);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	75fb      	strb	r3, [r7, #23]

			/* Zero padding requested */
			if (ch == '0') pad_char = '0';
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b30      	cmp	r3, #48	; 0x30
 80029e2:	d112      	bne.n	8002a0a <mini_vpprintf+0x82>
 80029e4:	2330      	movs	r3, #48	; 0x30
 80029e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			while (ch >= '0' && ch <= '9') {
 80029ea:	e00e      	b.n	8002a0a <mini_vpprintf+0x82>
				pad_to = pad_to * 10 + (ch - '0');
 80029ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	461a      	mov	r2, r3
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	3b30      	subs	r3, #48	; 0x30
 80029fc:	4413      	add	r3, r2
 80029fe:	653b      	str	r3, [r7, #80]	; 0x50
				ch=*(fmt++);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	75fb      	strb	r3, [r7, #23]
			while (ch >= '0' && ch <= '9') {
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a0e:	d902      	bls.n	8002a16 <mini_vpprintf+0x8e>
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b39      	cmp	r3, #57	; 0x39
 8002a14:	d9ea      	bls.n	80029ec <mini_vpprintf+0x64>
			}
			if(pad_to > (signed int) sizeof(bf)) {
 8002a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a18:	2b18      	cmp	r3, #24
 8002a1a:	dd01      	ble.n	8002a20 <mini_vpprintf+0x98>
				pad_to = sizeof(bf);
 8002a1c:	2318      	movs	r3, #24
 8002a1e:	653b      	str	r3, [r7, #80]	; 0x50
			}
			if (ch == 'l') {
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	2b6c      	cmp	r3, #108	; 0x6c
 8002a24:	d107      	bne.n	8002a36 <mini_vpprintf+0xae>
				l = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				ch=*(fmt++);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	75fb      	strb	r3, [r7, #23]
			}

			switch (ch) {
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 813c 	beq.w	8002cb6 <mini_vpprintf+0x32e>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f2c0 8121 	blt.w	8002c86 <mini_vpprintf+0x2fe>
 8002a44:	2b78      	cmp	r3, #120	; 0x78
 8002a46:	f300 811e 	bgt.w	8002c86 <mini_vpprintf+0x2fe>
 8002a4a:	2b58      	cmp	r3, #88	; 0x58
 8002a4c:	f2c0 811b 	blt.w	8002c86 <mini_vpprintf+0x2fe>
 8002a50:	3b58      	subs	r3, #88	; 0x58
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	f200 8117 	bhi.w	8002c86 <mini_vpprintf+0x2fe>
 8002a58:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <mini_vpprintf+0xd8>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002b7f 	.word	0x08002b7f
 8002a64:	08002c87 	.word	0x08002c87
 8002a68:	08002c87 	.word	0x08002c87
 8002a6c:	08002c87 	.word	0x08002c87
 8002a70:	08002c87 	.word	0x08002c87
 8002a74:	08002c87 	.word	0x08002c87
 8002a78:	08002c87 	.word	0x08002c87
 8002a7c:	08002c87 	.word	0x08002c87
 8002a80:	08002c87 	.word	0x08002c87
 8002a84:	08002c87 	.word	0x08002c87
 8002a88:	08002c87 	.word	0x08002c87
 8002a8c:	08002c01 	.word	0x08002c01
 8002a90:	08002ae5 	.word	0x08002ae5
 8002a94:	08002c87 	.word	0x08002c87
 8002a98:	08002c87 	.word	0x08002c87
 8002a9c:	08002c87 	.word	0x08002c87
 8002aa0:	08002c87 	.word	0x08002c87
 8002aa4:	08002c87 	.word	0x08002c87
 8002aa8:	08002c87 	.word	0x08002c87
 8002aac:	08002c87 	.word	0x08002c87
 8002ab0:	08002c87 	.word	0x08002c87
 8002ab4:	08002c87 	.word	0x08002c87
 8002ab8:	08002c87 	.word	0x08002c87
 8002abc:	08002c87 	.word	0x08002c87
 8002ac0:	08002c87 	.word	0x08002c87
 8002ac4:	08002c87 	.word	0x08002c87
 8002ac8:	08002c87 	.word	0x08002c87
 8002acc:	08002c35 	.word	0x08002c35
 8002ad0:	08002c87 	.word	0x08002c87
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002c87 	.word	0x08002c87
 8002adc:	08002c87 	.word	0x08002c87
 8002ae0:	08002b7f 	.word	0x08002b7f
				case 0:
					goto end;
				case 'u':
				case 'd':
					if(l) {
 8002ae4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <mini_vpprintf+0x190>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	603a      	str	r2, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b75      	cmp	r3, #117	; 0x75
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	f107 0318 	add.w	r3, r7, #24
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	210a      	movs	r1, #10
 8002b10:	f7ff fdf5 	bl	80026fe <mini_itoa>
 8002b14:	65b8      	str	r0, [r7, #88]	; 0x58
 8002b16:	e01e      	b.n	8002b56 <mini_vpprintf+0x1ce>
					} else {
						if(ch == 'u') {
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b75      	cmp	r3, #117	; 0x75
 8002b1c:	d10e      	bne.n	8002b3c <mini_vpprintf+0x1b4>
							len = mini_itoa((unsigned long) va_arg(va, unsigned int), 10, 0, 1, bf2);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	1d1a      	adds	r2, r3, #4
 8002b22:	603a      	str	r2, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f107 0318 	add.w	r3, r7, #24
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	2200      	movs	r2, #0
 8002b32:	210a      	movs	r1, #10
 8002b34:	f7ff fde3 	bl	80026fe <mini_itoa>
 8002b38:	65b8      	str	r0, [r7, #88]	; 0x58
 8002b3a:	e00c      	b.n	8002b56 <mini_vpprintf+0x1ce>
						} else {
							len = mini_itoa((long) va_arg(va, int), 10, 0, 0, bf2);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	1d1a      	adds	r2, r3, #4
 8002b40:	603a      	str	r2, [r7, #0]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	f107 0318 	add.w	r3, r7, #24
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	210a      	movs	r1, #10
 8002b50:	f7ff fdd5 	bl	80026fe <mini_itoa>
 8002b54:	65b8      	str	r0, [r7, #88]	; 0x58
						}
					}
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 8002b56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b5a:	f107 0018 	add.w	r0, r7, #24
 8002b5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b68:	f7ff fe48 	bl	80027fc <mini_pad>
 8002b6c:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 8002b6e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b78:	4798      	blx	r3
 8002b7a:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8002b7c:	e08d      	b.n	8002c9a <mini_vpprintf+0x312>

				case 'x':
				case 'X':
					if(l) {
 8002b7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d014      	beq.n	8002bb0 <mini_vpprintf+0x228>
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	1d1a      	adds	r2, r3, #4
 8002b8a:	603a      	str	r2, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b58      	cmp	r3, #88	; 0x58
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f107 0318 	add.w	r3, r7, #24
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	2110      	movs	r1, #16
 8002ba8:	f7ff fda9 	bl	80026fe <mini_itoa>
 8002bac:	65b8      	str	r0, [r7, #88]	; 0x58
 8002bae:	e013      	b.n	8002bd8 <mini_vpprintf+0x250>
					} else {
						len = mini_itoa((unsigned long) va_arg(va, unsigned int), 16, (ch=='X'), 1, bf2);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	1d1a      	adds	r2, r3, #4
 8002bb4:	603a      	str	r2, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	7dfb      	ldrb	r3, [r7, #23]
 8002bbc:	2b58      	cmp	r3, #88	; 0x58
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f107 0318 	add.w	r3, r7, #24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2301      	movs	r3, #1
 8002bd0:	2110      	movs	r1, #16
 8002bd2:	f7ff fd94 	bl	80026fe <mini_itoa>
 8002bd6:	65b8      	str	r0, [r7, #88]	; 0x58
					}
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 8002bd8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002bdc:	f107 0018 	add.w	r0, r7, #24
 8002be0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bea:	f7ff fe07 	bl	80027fc <mini_pad>
 8002bee:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 8002bf0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bfa:	4798      	blx	r3
 8002bfc:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8002bfe:	e04c      	b.n	8002c9a <mini_vpprintf+0x312>

				case 'c' :
					ch = (char)(va_arg(va, int));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	1d1a      	adds	r2, r3, #4
 8002c04:	603a      	str	r2, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	75fb      	strb	r3, [r7, #23]
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 8002c0c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002c10:	f107 0017 	add.w	r0, r7, #23
 8002c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	f7ff fded 	bl	80027fc <mini_pad>
 8002c22:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 8002c24:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c2e:	4798      	blx	r3
 8002c30:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8002c32:	e032      	b.n	8002c9a <mini_vpprintf+0x312>

				case 's' :
					ptr = va_arg(va, char*);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	1d1a      	adds	r2, r3, #4
 8002c38:	603a      	str	r2, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	64bb      	str	r3, [r7, #72]	; 0x48
					len = mini_strlen(ptr);
 8002c3e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c40:	f7ff fd47 	bl	80026d2 <mini_strlen>
 8002c44:	65b8      	str	r0, [r7, #88]	; 0x58
					if (pad_to > 0) {
 8002c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dd15      	ble.n	8002c78 <mini_vpprintf+0x2f0>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
 8002c4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c5c:	f7ff fdce 	bl	80027fc <mini_pad>
 8002c60:	65b8      	str	r0, [r7, #88]	; 0x58
						len = puts(bf, len, buf);
 8002c62:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c6c:	4798      	blx	r3
 8002c6e:	65b8      	str	r0, [r7, #88]	; 0x58
					} else {
						len = puts(ptr, len, buf);
					}
					break;
 8002c70:	e013      	b.n	8002c9a <mini_vpprintf+0x312>
 8002c72:	bf00      	nop
 8002c74:	080028b1 	.word	0x080028b1
						len = puts(ptr, len, buf);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c80:	4798      	blx	r3
 8002c82:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8002c84:	e009      	b.n	8002c9a <mini_vpprintf+0x312>
					}
					mini_handler_freeor(mini_handler_data, ptr);
					break;
#endif
				default:
					len = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	65bb      	str	r3, [r7, #88]	; 0x58
					len = puts(&ch, len, buf);
 8002c8a:	f107 0017 	add.w	r0, r7, #23
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c94:	4798      	blx	r3
 8002c96:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8002c98:	bf00      	nop
			}
		}
		n = n + len;
 8002c9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c9e:	4413      	add	r3, r2
 8002ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
	while ((ch=*(fmt++))) {
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	75fb      	strb	r3, [r7, #23]
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f ae7b 	bne.w	80029aa <mini_vpprintf+0x22>
	}
end:
 8002cb4:	e000      	b.n	8002cb8 <mini_vpprintf+0x330>
					goto end;
 8002cb6:	bf00      	nop
	return n;
 8002cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3760      	adds	r7, #96	; 0x60
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop

08002cc4 <mini_snprintf>:


int
mini_snprintf(char* buffer, unsigned int buffer_len, const char *fmt, ...)
{
 8002cc4:	b40c      	push	{r2, r3}
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
	int ret;
	va_list va;
	va_start(va, fmt);
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	60bb      	str	r3, [r7, #8]
	ret = mini_vsnprintf(buffer, buffer_len, fmt, va);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fe25 	bl	800292c <mini_vsnprintf>
 8002ce2:	60f8      	str	r0, [r7, #12]
	va_end(va);

	return ret;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cf0:	b002      	add	sp, #8
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_MspInit+0x5c>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <HAL_MspInit+0x5c>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6193      	str	r3, [r2, #24]
 8002d06:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_MspInit+0x5c>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <HAL_MspInit+0x5c>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <HAL_MspInit+0x5c>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_MspInit+0x5c>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_MspInit+0x60>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_MspInit+0x60>)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010000 	.word	0x40010000

08002d58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	f107 0310 	add.w	r3, r7, #16
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HAL_CAN_MspInit+0x8c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d131      	bne.n	8002ddc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_CAN_MspInit+0x90>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_CAN_MspInit+0x90>)
 8002d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d82:	61d3      	str	r3, [r2, #28]
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_CAN_MspInit+0x90>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d90:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_CAN_MspInit+0x90>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <HAL_CAN_MspInit+0x90>)
 8002d96:	f043 0304 	orr.w	r3, r3, #4
 8002d9a:	6193      	str	r3, [r2, #24]
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_CAN_MspInit+0x90>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480b      	ldr	r0, [pc, #44]	; (8002dec <HAL_CAN_MspInit+0x94>)
 8002dbe:	f002 fc79 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <HAL_CAN_MspInit+0x94>)
 8002dd8:	f002 fc6c 	bl	80056b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002ddc:	bf00      	nop
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40006400 	.word	0x40006400
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40010800 	.word	0x40010800

08002df0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 0310 	add.w	r3, r7, #16
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <HAL_SPI_MspInit+0x88>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d12f      	bne.n	8002e70 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_SPI_MspInit+0x8c>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_SPI_MspInit+0x8c>)
 8002e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_SPI_MspInit+0x8c>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_SPI_MspInit+0x8c>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <HAL_SPI_MspInit+0x8c>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_SPI_MspInit+0x8c>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e40:	23a0      	movs	r3, #160	; 0xa0
 8002e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	f107 0310 	add.w	r3, r7, #16
 8002e50:	4619      	mov	r1, r3
 8002e52:	480b      	ldr	r0, [pc, #44]	; (8002e80 <HAL_SPI_MspInit+0x90>)
 8002e54:	f002 fc2e 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e58:	2340      	movs	r3, #64	; 0x40
 8002e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <HAL_SPI_MspInit+0x90>)
 8002e6c:	f002 fc22 	bl	80056b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013000 	.word	0x40013000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40010800 	.word	0x40010800

08002e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <HAL_UART_MspInit+0x8c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d131      	bne.n	8002f08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_UART_MspInit+0x90>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <HAL_UART_MspInit+0x90>)
 8002eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_UART_MspInit+0x90>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_UART_MspInit+0x90>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_UART_MspInit+0x90>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6193      	str	r3, [r2, #24]
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_UART_MspInit+0x90>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	f107 0310 	add.w	r3, r7, #16
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	480b      	ldr	r0, [pc, #44]	; (8002f18 <HAL_UART_MspInit+0x94>)
 8002eea:	f002 fbe3 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	4619      	mov	r1, r3
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <HAL_UART_MspInit+0x94>)
 8002f04:	f002 fbd6 	bl	80056b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f08:	bf00      	nop
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40013800 	.word	0x40013800
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40010800 	.word	0x40010800

08002f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f20:	e7fe      	b.n	8002f20 <NMI_Handler+0x4>

08002f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f26:	e7fe      	b.n	8002f26 <HardFault_Handler+0x4>

08002f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <MemManage_Handler+0x4>

08002f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <BusFault_Handler+0x4>

08002f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <UsageFault_Handler+0x4>

08002f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f62:	f002 f987 	bl	8005274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Button_Loop();
 8002f66:	f7fd fd75 	bl	8000a54 <Button_Loop>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af02      	add	r7, sp, #8
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	4608      	mov	r0, r1
 8002f84:	4611      	mov	r1, r2
 8002f86:	461a      	mov	r2, r3
 8002f88:	4603      	mov	r3, r0
 8002f8a:	817b      	strh	r3, [r7, #10]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	813b      	strh	r3, [r7, #8]
 8002f90:	4613      	mov	r3, r2
 8002f92:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002f9a:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8002f9c:	7dbb      	ldrb	r3, [r7, #22]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8002faa:	897a      	ldrh	r2, [r7, #10]
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	4413      	add	r3, r2
 8002fb0:	b298      	uxth	r0, r3
 8002fb2:	893b      	ldrh	r3, [r7, #8]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	893a      	ldrh	r2, [r7, #8]
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f001 f93e 	bl	8004242 <u8g2_IsIntersection>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d040      	beq.n	800304e <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8002fd0:	e035      	b.n	800303e <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00c      	beq.n	8002ffa <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	7dba      	ldrb	r2, [r7, #22]
 8002fe4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002fe8:	893a      	ldrh	r2, [r7, #8]
 8002fea:	8979      	ldrh	r1, [r7, #10]
 8002fec:	2300      	movs	r3, #0
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 f838 	bl	8004068 <u8g2_DrawHVLine>
 8002ff8:	e010      	b.n	800301c <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	7d7a      	ldrb	r2, [r7, #21]
 8003008:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800300c:	893a      	ldrh	r2, [r7, #8]
 800300e:	8979      	ldrh	r1, [r7, #10]
 8003010:	2300      	movs	r3, #0
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2301      	movs	r3, #1
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f001 f826 	bl	8004068 <u8g2_DrawHVLine>
    }
    x++;
 800301c:	897b      	ldrh	r3, [r7, #10]
 800301e:	3301      	adds	r3, #1
 8003020:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8003028:	7dfb      	ldrb	r3, [r7, #23]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
      b++;
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	3301      	adds	r3, #1
 8003036:	623b      	str	r3, [r7, #32]
    }
    len--;
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	3b01      	subs	r3, #1
 800303c:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1c6      	bne.n	8002fd2 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	7dba      	ldrb	r2, [r7, #22]
 8003048:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800304c:	e000      	b.n	8003050 <u8g2_DrawHXBM+0xd6>
    return;
 800304e:	bf00      	nop
}
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b088      	sub	sp, #32
 800305a:	af02      	add	r7, sp, #8
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	4608      	mov	r0, r1
 8003060:	4611      	mov	r1, r2
 8003062:	461a      	mov	r2, r3
 8003064:	4603      	mov	r3, r0
 8003066:	817b      	strh	r3, [r7, #10]
 8003068:	460b      	mov	r3, r1
 800306a:	813b      	strh	r3, [r7, #8]
 800306c:	4613      	mov	r3, r2
 800306e:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8003074:	8afb      	ldrh	r3, [r7, #22]
 8003076:	3307      	adds	r3, #7
 8003078:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 800307a:	8afb      	ldrh	r3, [r7, #22]
 800307c:	08db      	lsrs	r3, r3, #3
 800307e:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003080:	897a      	ldrh	r2, [r7, #10]
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	4413      	add	r3, r2
 8003086:	b298      	uxth	r0, r3
 8003088:	893a      	ldrh	r2, [r7, #8]
 800308a:	8c3b      	ldrh	r3, [r7, #32]
 800308c:	4413      	add	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	893a      	ldrh	r2, [r7, #8]
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4603      	mov	r3, r0
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f001 f8d2 	bl	8004242 <u8g2_IsIntersection>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80030a4:	e012      	b.n	80030cc <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80030a6:	88f8      	ldrh	r0, [r7, #6]
 80030a8:	893a      	ldrh	r2, [r7, #8]
 80030aa:	8979      	ldrh	r1, [r7, #10]
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4603      	mov	r3, r0
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff ff61 	bl	8002f7a <u8g2_DrawHXBM>
    bitmap += blen;
 80030b8:	8afb      	ldrh	r3, [r7, #22]
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	4413      	add	r3, r2
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	3301      	adds	r3, #1
 80030c4:	813b      	strh	r3, [r7, #8]
    h--;
 80030c6:	8c3b      	ldrh	r3, [r7, #32]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 80030cc:	8c3b      	ldrh	r3, [r7, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e9      	bne.n	80030a6 <u8g2_DrawXBM+0x50>
 80030d2:	e000      	b.n	80030d6 <u8g2_DrawXBM+0x80>
    return;
 80030d4:	bf00      	nop
  }
}
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	817b      	strh	r3, [r7, #10]
 80030ee:	460b      	mov	r3, r1
 80030f0:	813b      	strh	r3, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80030f6:	897a      	ldrh	r2, [r7, #10]
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	4413      	add	r3, r2
 80030fc:	b298      	uxth	r0, r3
 80030fe:	893a      	ldrh	r2, [r7, #8]
 8003100:	8b3b      	ldrh	r3, [r7, #24]
 8003102:	4413      	add	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	893a      	ldrh	r2, [r7, #8]
 8003108:	8979      	ldrh	r1, [r7, #10]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f001 f897 	bl	8004242 <u8g2_IsIntersection>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d012      	beq.n	8003140 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800311a:	e00d      	b.n	8003138 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	893a      	ldrh	r2, [r7, #8]
 8003120:	8979      	ldrh	r1, [r7, #10]
 8003122:	2000      	movs	r0, #0
 8003124:	9000      	str	r0, [sp, #0]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 ff9e 	bl	8004068 <u8g2_DrawHVLine>
    y++;    
 800312c:	893b      	ldrh	r3, [r7, #8]
 800312e:	3301      	adds	r3, #1
 8003130:	813b      	strh	r3, [r7, #8]
    h--;
 8003132:	8b3b      	ldrh	r3, [r7, #24]
 8003134:	3b01      	subs	r3, #1
 8003136:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8003138:	8b3b      	ldrh	r3, [r7, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1ee      	bne.n	800311c <u8g2_DrawBox+0x40>
 800313e:	e000      	b.n	8003142 <u8g2_DrawBox+0x66>
    return;
 8003140:	bf00      	nop
  }
}
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	4608      	mov	r0, r1
 8003152:	4611      	mov	r1, r2
 8003154:	461a      	mov	r2, r3
 8003156:	4603      	mov	r3, r0
 8003158:	817b      	strh	r3, [r7, #10]
 800315a:	460b      	mov	r3, r1
 800315c:	813b      	strh	r3, [r7, #8]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003166:	897a      	ldrh	r2, [r7, #10]
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	4413      	add	r3, r2
 800316c:	b298      	uxth	r0, r3
 800316e:	893a      	ldrh	r2, [r7, #8]
 8003170:	8c3b      	ldrh	r3, [r7, #32]
 8003172:	4413      	add	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	893a      	ldrh	r2, [r7, #8]
 8003178:	8979      	ldrh	r1, [r7, #10]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4603      	mov	r3, r0
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f001 f85f 	bl	8004242 <u8g2_IsIntersection>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d037      	beq.n	80031fa <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	893a      	ldrh	r2, [r7, #8]
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	2000      	movs	r0, #0
 8003192:	9000      	str	r0, [sp, #0]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 ff67 	bl	8004068 <u8g2_DrawHVLine>
  if (h >= 2) {
 800319a:	8c3b      	ldrh	r3, [r7, #32]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d92d      	bls.n	80031fc <u8g2_DrawFrame+0xb4>
    h-=2;
 80031a0:	8c3b      	ldrh	r3, [r7, #32]
 80031a2:	3b02      	subs	r3, #2
 80031a4:	843b      	strh	r3, [r7, #32]
    y++;
 80031a6:	893b      	ldrh	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 80031ac:	8c3b      	ldrh	r3, [r7, #32]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01a      	beq.n	80031e8 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80031b2:	8c3b      	ldrh	r3, [r7, #32]
 80031b4:	893a      	ldrh	r2, [r7, #8]
 80031b6:	8979      	ldrh	r1, [r7, #10]
 80031b8:	2001      	movs	r0, #1
 80031ba:	9000      	str	r0, [sp, #0]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 ff53 	bl	8004068 <u8g2_DrawHVLine>
      x+=w;
 80031c2:	897a      	ldrh	r2, [r7, #10]
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	4413      	add	r3, r2
 80031c8:	817b      	strh	r3, [r7, #10]
      x--;
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80031d0:	8c3b      	ldrh	r3, [r7, #32]
 80031d2:	893a      	ldrh	r2, [r7, #8]
 80031d4:	8979      	ldrh	r1, [r7, #10]
 80031d6:	2001      	movs	r0, #1
 80031d8:	9000      	str	r0, [sp, #0]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 ff44 	bl	8004068 <u8g2_DrawHVLine>
      y+=h;
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	8c3b      	ldrh	r3, [r7, #32]
 80031e4:	4413      	add	r3, r2
 80031e6:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	893a      	ldrh	r2, [r7, #8]
 80031ec:	8af9      	ldrh	r1, [r7, #22]
 80031ee:	2000      	movs	r0, #0
 80031f0:	9000      	str	r0, [sp, #0]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 ff38 	bl	8004068 <u8g2_DrawHVLine>
 80031f8:	e000      	b.n	80031fc <u8g2_DrawFrame+0xb4>
    return;
 80031fa:	bf00      	nop
  }
}
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	7c1b      	ldrb	r3, [r3, #16]
 8003210:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003218:	461a      	mov	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f003 fe79 	bl	8006f28 <memset>
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af02      	add	r7, sp, #8
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	70fb      	strb	r3, [r7, #3]
 800324a:	4613      	mov	r3, r2
 800324c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	7c1b      	ldrb	r3, [r3, #16]
 8003254:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	b29b      	uxth	r3, r3
 8003264:	89ba      	ldrh	r2, [r7, #12]
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800326c:	89bb      	ldrh	r3, [r7, #12]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003272:	89bb      	ldrh	r3, [r7, #12]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	4413      	add	r3, r2
 8003278:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800327a:	7bf9      	ldrb	r1, [r7, #15]
 800327c:	78ba      	ldrb	r2, [r7, #2]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	460b      	mov	r3, r1
 8003284:	2100      	movs	r1, #0
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f001 fcb8 	bl	8004bfc <u8x8_DrawTile>
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032a6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032ae:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	7c5b      	ldrb	r3, [r3, #17]
 80032b6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80032b8:	7bba      	ldrb	r2, [r7, #14]
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ffbd 	bl	800323e <u8g2_send_tile_row>
    src_row++;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	3301      	adds	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80032ca:	7bbb      	ldrb	r3, [r7, #14]
 80032cc:	3301      	adds	r3, #1
 80032ce:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	7b7b      	ldrb	r3, [r7, #13]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d203      	bcs.n	80032e0 <u8g2_send_buffer+0x4c>
 80032d8:	7bba      	ldrb	r2, [r7, #14]
 80032da:	7b3b      	ldrb	r3, [r7, #12]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d3eb      	bcc.n	80032b8 <u8g2_send_buffer+0x24>
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ffcf 	bl	8003294 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f001 fce2 	bl	8004cc0 <u8x8_RefreshDisplay>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff5b 	bl	8003202 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800334c:	2100      	movs	r1, #0
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ffd8 	bl	8003304 <u8g2_SetBufferCurrTileRow>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff95 	bl	8003294 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003370:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	4413      	add	r3, r2
 800337c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	7c5b      	ldrb	r3, [r3, #17]
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	429a      	cmp	r2, r3
 8003388:	d304      	bcc.n	8003394 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f001 fc98 	bl	8004cc0 <u8x8_RefreshDisplay>
    return 0;
 8003390:	2300      	movs	r3, #0
 8003392:	e00d      	b.n	80033b0 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ff2f 	bl	8003202 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	4619      	mov	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ffab 	bl	8003304 <u8g2_SetBufferCurrTileRow>
  return 1;
 80033ae:	2301      	movs	r3, #1
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ffb7 	bl	8003334 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ffc8 	bl	800335c <u8g2_NextPage>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f9      	bne.n	80033c6 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80033d2:	2100      	movs	r1, #0
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff95 	bl	8003304 <u8g2_SetBufferCurrTileRow>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2208      	movs	r2, #8
 80033f0:	701a      	strb	r2, [r3, #0]
  return buf;
 80033f2:	4b03      	ldr	r3, [pc, #12]	; (8003400 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000490 	.word	0x20000490

08003404 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 800341a:	490c      	ldr	r1, [pc, #48]	; (800344c <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f001 fcaf 	bl	8004d80 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003422:	f107 0313 	add.w	r3, r7, #19
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ffdc 	bl	80033e4 <u8g2_m_16_8_f>
 800342c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800342e:	7cfa      	ldrb	r2, [r7, #19]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 8003436:	6979      	ldr	r1, [r7, #20]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 ffeb 	bl	8004414 <u8g2_SetupBuffer>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	08004919 	.word	0x08004919
 800344c:	08004ab9 	.word	0x08004ab9
 8003450:	08004299 	.word	0x08004299

08003454 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	781b      	ldrb	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	81fb      	strh	r3, [r7, #14]
    font++;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3301      	adds	r3, #1
 8003494:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003496:	89fb      	ldrh	r3, [r7, #14]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	89fb      	ldrh	r3, [r7, #14]
 80034a4:	4413      	add	r3, r2
 80034a6:	81fb      	strh	r3, [r7, #14]
    return pos;
 80034a8:	89fb      	ldrh	r3, [r7, #14]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80034be:	2100      	movs	r1, #0
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f7ff ffc7 	bl	8003454 <u8g2_font_get_byte>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80034ce:	2101      	movs	r1, #1
 80034d0:	6838      	ldr	r0, [r7, #0]
 80034d2:	f7ff ffbf 	bl	8003454 <u8g2_font_get_byte>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80034de:	2102      	movs	r1, #2
 80034e0:	6838      	ldr	r0, [r7, #0]
 80034e2:	f7ff ffb7 	bl	8003454 <u8g2_font_get_byte>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80034ee:	2103      	movs	r1, #3
 80034f0:	6838      	ldr	r0, [r7, #0]
 80034f2:	f7ff ffaf 	bl	8003454 <u8g2_font_get_byte>
 80034f6:	4603      	mov	r3, r0
 80034f8:	461a      	mov	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80034fe:	2104      	movs	r1, #4
 8003500:	6838      	ldr	r0, [r7, #0]
 8003502:	f7ff ffa7 	bl	8003454 <u8g2_font_get_byte>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800350e:	2105      	movs	r1, #5
 8003510:	6838      	ldr	r0, [r7, #0]
 8003512:	f7ff ff9f 	bl	8003454 <u8g2_font_get_byte>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800351e:	2106      	movs	r1, #6
 8003520:	6838      	ldr	r0, [r7, #0]
 8003522:	f7ff ff97 	bl	8003454 <u8g2_font_get_byte>
 8003526:	4603      	mov	r3, r0
 8003528:	461a      	mov	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800352e:	2107      	movs	r1, #7
 8003530:	6838      	ldr	r0, [r7, #0]
 8003532:	f7ff ff8f 	bl	8003454 <u8g2_font_get_byte>
 8003536:	4603      	mov	r3, r0
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800353e:	2108      	movs	r1, #8
 8003540:	6838      	ldr	r0, [r7, #0]
 8003542:	f7ff ff87 	bl	8003454 <u8g2_font_get_byte>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800354e:	2109      	movs	r1, #9
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	f7ff ff7f 	bl	8003454 <u8g2_font_get_byte>
 8003556:	4603      	mov	r3, r0
 8003558:	b25a      	sxtb	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800355e:	210a      	movs	r1, #10
 8003560:	6838      	ldr	r0, [r7, #0]
 8003562:	f7ff ff77 	bl	8003454 <u8g2_font_get_byte>
 8003566:	4603      	mov	r3, r0
 8003568:	b25a      	sxtb	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800356e:	210b      	movs	r1, #11
 8003570:	6838      	ldr	r0, [r7, #0]
 8003572:	f7ff ff6f 	bl	8003454 <u8g2_font_get_byte>
 8003576:	4603      	mov	r3, r0
 8003578:	b25a      	sxtb	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800357e:	210c      	movs	r1, #12
 8003580:	6838      	ldr	r0, [r7, #0]
 8003582:	f7ff ff67 	bl	8003454 <u8g2_font_get_byte>
 8003586:	4603      	mov	r3, r0
 8003588:	b25a      	sxtb	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800358e:	210d      	movs	r1, #13
 8003590:	6838      	ldr	r0, [r7, #0]
 8003592:	f7ff ff5f 	bl	8003454 <u8g2_font_get_byte>
 8003596:	4603      	mov	r3, r0
 8003598:	b25a      	sxtb	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800359e:	210e      	movs	r1, #14
 80035a0:	6838      	ldr	r0, [r7, #0]
 80035a2:	f7ff ff57 	bl	8003454 <u8g2_font_get_byte>
 80035a6:	4603      	mov	r3, r0
 80035a8:	b25a      	sxtb	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80035ae:	210f      	movs	r1, #15
 80035b0:	6838      	ldr	r0, [r7, #0]
 80035b2:	f7ff ff4f 	bl	8003454 <u8g2_font_get_byte>
 80035b6:	4603      	mov	r3, r0
 80035b8:	b25a      	sxtb	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80035be:	2110      	movs	r1, #16
 80035c0:	6838      	ldr	r0, [r7, #0]
 80035c2:	f7ff ff47 	bl	8003454 <u8g2_font_get_byte>
 80035c6:	4603      	mov	r3, r0
 80035c8:	b25a      	sxtb	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80035ce:	2111      	movs	r1, #17
 80035d0:	6838      	ldr	r0, [r7, #0]
 80035d2:	f7ff ff50 	bl	8003476 <u8g2_font_get_word>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80035de:	2113      	movs	r1, #19
 80035e0:	6838      	ldr	r0, [r7, #0]
 80035e2:	f7ff ff48 	bl	8003476 <u8g2_font_get_word>
 80035e6:	4603      	mov	r3, r0
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80035ee:	2115      	movs	r1, #21
 80035f0:	6838      	ldr	r0, [r7, #0]
 80035f2:	f7ff ff40 	bl	8003476 <u8g2_font_get_word>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	82da      	strh	r2, [r3, #22]
#endif
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7b1b      	ldrb	r3, [r3, #12]
 8003616:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	7b7b      	ldrb	r3, [r7, #13]
 8003624:	fa42 f303 	asr.w	r3, r2, r3
 8003628:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800362a:	7b7b      	ldrb	r3, [r7, #13]
 800362c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800362e:	7bba      	ldrb	r2, [r7, #14]
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	4413      	add	r3, r2
 8003634:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003636:	7bbb      	ldrb	r3, [r7, #14]
 8003638:	2b07      	cmp	r3, #7
 800363a:	d91a      	bls.n	8003672 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800363c:	2308      	movs	r3, #8
 800363e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003640:	7b3a      	ldrb	r2, [r7, #12]
 8003642:	7b7b      	ldrb	r3, [r7, #13]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	7b3b      	ldrb	r3, [r7, #12]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	b25a      	sxtb	r2, r3
 8003662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003666:	4313      	orrs	r3, r2
 8003668:	b25b      	sxtb	r3, r3
 800366a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800366c:	7bbb      	ldrb	r3, [r7, #14]
 800366e:	3b08      	subs	r3, #8
 8003670:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f04f 32ff 	mov.w	r2, #4294967295
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	b2da      	uxtb	r2, r3
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	4013      	ands	r3, r2
 8003686:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	7bba      	ldrb	r2, [r7, #14]
 800368c:	731a      	strb	r2, [r3, #12]
  return val;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ffab 	bl	8003606 <u8g2_font_decode_get_unsigned_bits>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80036be:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	7bbb      	ldrb	r3, [r7, #14]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	73fb      	strb	r3, [r7, #15]
  return v;
 80036d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80036e0:	b490      	push	{r4, r7}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	4623      	mov	r3, r4
 80036f0:	80fb      	strh	r3, [r7, #6]
 80036f2:	4603      	mov	r3, r0
 80036f4:	717b      	strb	r3, [r7, #5]
 80036f6:	460b      	mov	r3, r1
 80036f8:	713b      	strb	r3, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d014      	beq.n	800372e <u8g2_add_vector_y+0x4e>
 8003704:	2b02      	cmp	r3, #2
 8003706:	dc19      	bgt.n	800373c <u8g2_add_vector_y+0x5c>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <u8g2_add_vector_y+0x32>
 800370c:	2b01      	cmp	r3, #1
 800370e:	d007      	beq.n	8003720 <u8g2_add_vector_y+0x40>
 8003710:	e014      	b.n	800373c <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8003712:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003716:	b29a      	uxth	r2, r3
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	4413      	add	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
      break;
 800371e:	e014      	b.n	800374a <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8003720:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003724:	b29a      	uxth	r2, r3
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	4413      	add	r3, r2
 800372a:	80fb      	strh	r3, [r7, #6]
      break;
 800372c:	e00d      	b.n	800374a <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800372e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003732:	b29b      	uxth	r3, r3
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	80fb      	strh	r3, [r7, #6]
      break;
 800373a:	e006      	b.n	800374a <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800373c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003740:	b29b      	uxth	r3, r3
 8003742:	88fa      	ldrh	r2, [r7, #6]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	80fb      	strh	r3, [r7, #6]
      break;      
 8003748:	bf00      	nop
  }
  return dy;
 800374a:	88fb      	ldrh	r3, [r7, #6]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bc90      	pop	{r4, r7}
 8003754:	4770      	bx	lr

08003756 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003756:	b490      	push	{r4, r7}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	4604      	mov	r4, r0
 800375e:	4608      	mov	r0, r1
 8003760:	4611      	mov	r1, r2
 8003762:	461a      	mov	r2, r3
 8003764:	4623      	mov	r3, r4
 8003766:	80fb      	strh	r3, [r7, #6]
 8003768:	4603      	mov	r3, r0
 800376a:	717b      	strb	r3, [r7, #5]
 800376c:	460b      	mov	r3, r1
 800376e:	713b      	strb	r3, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d014      	beq.n	80037a4 <u8g2_add_vector_x+0x4e>
 800377a:	2b02      	cmp	r3, #2
 800377c:	dc19      	bgt.n	80037b2 <u8g2_add_vector_x+0x5c>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <u8g2_add_vector_x+0x32>
 8003782:	2b01      	cmp	r3, #1
 8003784:	d007      	beq.n	8003796 <u8g2_add_vector_x+0x40>
 8003786:	e014      	b.n	80037b2 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8003788:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800378c:	b29a      	uxth	r2, r3
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	4413      	add	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
      break;
 8003794:	e014      	b.n	80037c0 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8003796:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800379a:	b29b      	uxth	r3, r3
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	80fb      	strh	r3, [r7, #6]
      break;
 80037a2:	e00d      	b.n	80037c0 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80037a4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	80fb      	strh	r3, [r7, #6]
      break;
 80037b0:	e006      	b.n	80037c0 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80037b2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	4413      	add	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
      break;      
 80037be:	bf00      	nop
  }
  return dx;
 80037c0:	88fb      	ldrh	r3, [r7, #6]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc90      	pop	{r4, r7}
 80037ca:	4770      	bx	lr

080037cc <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
 80037d8:	4613      	mov	r3, r2
 80037da:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3360      	adds	r3, #96	; 0x60
 80037e0:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80037ec:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80037f4:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80037fc:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	7d7b      	ldrb	r3, [r7, #21]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800380a:	7dfa      	ldrb	r2, [r7, #23]
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	429a      	cmp	r2, r3
 8003810:	d201      	bcs.n	8003816 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	889b      	ldrh	r3, [r3, #4]
 800381a:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	88db      	ldrh	r3, [r3, #6]
 8003820:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003822:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003826:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	7c1b      	ldrb	r3, [r3, #16]
 800382e:	89b8      	ldrh	r0, [r7, #12]
 8003830:	f7ff ff91 	bl	8003756 <u8g2_add_vector_x>
 8003834:	4603      	mov	r3, r0
 8003836:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8003838:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800383c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	7c1b      	ldrb	r3, [r3, #16]
 8003844:	8978      	ldrh	r0, [r7, #10]
 8003846:	f7ff ff4b 	bl	80036e0 <u8g2_add_vector_y>
 800384a:	4603      	mov	r3, r0
 800384c:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800384e:	78bb      	ldrb	r3, [r7, #2]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d010      	beq.n	8003876 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	7b9a      	ldrb	r2, [r3, #14]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800385e:	7dbb      	ldrb	r3, [r7, #22]
 8003860:	b298      	uxth	r0, r3
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	7c1b      	ldrb	r3, [r3, #16]
 8003866:	897a      	ldrh	r2, [r7, #10]
 8003868:	89b9      	ldrh	r1, [r7, #12]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fbfa 	bl	8004068 <u8g2_DrawHVLine>
 8003874:	e013      	b.n	800389e <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	7b5b      	ldrb	r3, [r3, #13]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	7bda      	ldrb	r2, [r3, #15]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003888:	7dbb      	ldrb	r3, [r7, #22]
 800388a:	b298      	uxth	r0, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	7c1b      	ldrb	r3, [r3, #16]
 8003890:	897a      	ldrh	r2, [r7, #10]
 8003892:	89b9      	ldrh	r1, [r7, #12]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4603      	mov	r3, r0
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fbe5 	bl	8004068 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800389e:	7dfa      	ldrb	r2, [r7, #23]
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d309      	bcc.n	80038ba <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80038a6:	7dfa      	ldrb	r2, [r7, #23]
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	757b      	strb	r3, [r7, #21]
    ly++;
 80038b2:	7d3b      	ldrb	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80038b8:	e79d      	b.n	80037f6 <u8g2_font_decode_len+0x2a>
      break;
 80038ba:	bf00      	nop
  }
  lx += cnt;
 80038bc:	7d7a      	ldrb	r2, [r7, #21]
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	4413      	add	r3, r2
 80038c2:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80038c4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 80038cc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	725a      	strb	r2, [r3, #9]
  
}
 80038d4:	bf00      	nop
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3360      	adds	r3, #96	; 0x60
 80038ea:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80038fe:	4619      	mov	r1, r3
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fe80 	bl	8003606 <u8g2_font_decode_get_unsigned_bits>
 8003906:	4603      	mov	r3, r0
 8003908:	b25a      	sxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003914:	4619      	mov	r1, r3
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff fe75 	bl	8003606 <u8g2_font_decode_get_unsigned_bits>
 800391c:	4603      	mov	r3, r0
 800391e:	b25a      	sxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	7b9b      	ldrb	r3, [r3, #14]
 8003932:	2b00      	cmp	r3, #0
 8003934:	bf0c      	ite	eq
 8003936:	2301      	moveq	r3, #1
 8003938:	2300      	movne	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	73da      	strb	r2, [r3, #15]
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af02      	add	r7, sp, #8
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3360      	adds	r3, #96	; 0x60
 800395a:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 800395c:	6839      	ldr	r1, [r7, #0]
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffbc 	bl	80038dc <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800396a:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003972:	4619      	mov	r1, r3
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7ff fe90 	bl	800369a <u8g2_font_decode_get_signed_bits>
 800397a:	4603      	mov	r3, r0
 800397c:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003984:	4619      	mov	r1, r3
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7ff fe87 	bl	800369a <u8g2_font_decode_get_signed_bits>
 800398c:	4603      	mov	r3, r0
 800398e:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003996:	4619      	mov	r1, r3
 8003998:	6978      	ldr	r0, [r7, #20]
 800399a:	f7ff fe7e 	bl	800369a <u8g2_font_decode_get_signed_bits>
 800399e:	4603      	mov	r3, r0
 80039a0:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f340 80d7 	ble.w	8003b5c <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	8898      	ldrh	r0, [r3, #4]
 80039b2:	7cfa      	ldrb	r2, [r7, #19]
 80039b4:	7c7b      	ldrb	r3, [r7, #17]
 80039b6:	4413      	add	r3, r2
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	425b      	negs	r3, r3
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	b25a      	sxtb	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	7c1b      	ldrb	r3, [r3, #16]
 80039c4:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80039c8:	f7ff fec5 	bl	8003756 <u8g2_add_vector_x>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	88d8      	ldrh	r0, [r3, #6]
 80039d8:	7cfa      	ldrb	r2, [r7, #19]
 80039da:	7c7b      	ldrb	r3, [r7, #17]
 80039dc:	4413      	add	r3, r2
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	425b      	negs	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	b25a      	sxtb	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	7c1b      	ldrb	r3, [r3, #16]
 80039ea:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80039ee:	f7ff fe77 	bl	80036e0 <u8g2_add_vector_y>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	889b      	ldrh	r3, [r3, #4]
 80039fe:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	88db      	ldrh	r3, [r3, #6]
 8003a04:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8003a06:	8bfb      	ldrh	r3, [r7, #30]
 8003a08:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8003a0a:	8b7b      	ldrh	r3, [r7, #26]
 8003a0c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	7c1b      	ldrb	r3, [r3, #16]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d85a      	bhi.n	8003acc <u8g2_font_decode_glyph+0x180>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <u8g2_font_decode_glyph+0xd0>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a49 	.word	0x08003a49
 8003a24:	08003a71 	.word	0x08003a71
 8003a28:	08003aa5 	.word	0x08003aa5
      {
	case 0:
	    x1 += decode->glyph_width;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	8bbb      	ldrh	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8003a3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	8b3b      	ldrh	r3, [r7, #24]
 8003a42:	4413      	add	r3, r2
 8003a44:	833b      	strh	r3, [r7, #24]
	    break;
 8003a46:	e041      	b.n	8003acc <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8003a48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8bfa      	ldrh	r2, [r7, #30]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003a54:	8bfb      	ldrh	r3, [r7, #30]
 8003a56:	3301      	adds	r3, #1
 8003a58:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003a5a:	8bbb      	ldrh	r3, [r7, #28]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	8b3b      	ldrh	r3, [r7, #24]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	833b      	strh	r3, [r7, #24]
	    break;
 8003a6e:	e02d      	b.n	8003acc <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8bfa      	ldrh	r2, [r7, #30]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003a7e:	8bfb      	ldrh	r3, [r7, #30]
 8003a80:	3301      	adds	r3, #1
 8003a82:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003a84:	8bbb      	ldrh	r3, [r7, #28]
 8003a86:	3301      	adds	r3, #1
 8003a88:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8003a8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	8b7a      	ldrh	r2, [r7, #26]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003a96:	8b7b      	ldrh	r3, [r7, #26]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003a9c:	8b3b      	ldrh	r3, [r7, #24]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003aa2:	e013      	b.n	8003acc <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8003aa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	8bbb      	ldrh	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	8b7a      	ldrh	r2, [r7, #26]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003abe:	8b7b      	ldrh	r3, [r7, #26]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003ac4:	8b3b      	ldrh	r3, [r7, #24]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003aca:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003acc:	8bb8      	ldrh	r0, [r7, #28]
 8003ace:	8b7a      	ldrh	r2, [r7, #26]
 8003ad0:	8bf9      	ldrh	r1, [r7, #30]
 8003ad2:	8b3b      	ldrh	r3, [r7, #24]
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fbb2 	bl	8004242 <u8g2_IsIntersection>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <u8g2_font_decode_glyph+0x19e>
	return d;
 8003ae4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003ae8:	e03a      	b.n	8003b60 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003afc:	4619      	mov	r1, r3
 8003afe:	6978      	ldr	r0, [r7, #20]
 8003b00:	f7ff fd81 	bl	8003606 <u8g2_font_decode_get_unsigned_bits>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f7ff fd78 	bl	8003606 <u8g2_font_decode_get_unsigned_bits>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff fe53 	bl	80037cc <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003b26:	7bbb      	ldrb	r3, [r7, #14]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fe4d 	bl	80037cc <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003b32:	2101      	movs	r1, #1
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f7ff fd66 	bl	8003606 <u8g2_font_decode_get_unsigned_bits>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ec      	bne.n	8003b1a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003b46:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	dd00      	ble.n	8003b50 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003b4e:	e7d2      	b.n	8003af6 <u8g2_font_decode_glyph+0x1aa>
	break;
 8003b50:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	7b9a      	ldrb	r2, [r3, #14]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8003b5c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3317      	adds	r3, #23
 8003b7e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	2bff      	cmp	r3, #255	; 0xff
 8003b84:	d82a      	bhi.n	8003bdc <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	2b60      	cmp	r3, #96	; 0x60
 8003b8a:	d907      	bls.n	8003b9c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b92:	461a      	mov	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4413      	add	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	e009      	b.n	8003bb0 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d906      	bls.n	8003bb0 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003ba8:	461a      	mov	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4413      	add	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d04e      	beq.n	8003c58 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	887a      	ldrh	r2, [r7, #2]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d102      	bne.n	8003bcc <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3302      	adds	r3, #2
 8003bca:	e049      	b.n	8003c60 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003bda:	e7e9      	b.n	8003bb0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003be2:	461a      	mov	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4413      	add	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	6938      	ldr	r0, [r7, #16]
 8003bf2:	f7ff fc40 	bl	8003476 <u8g2_font_get_word>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003c00:	2102      	movs	r1, #2
 8003c02:	6938      	ldr	r0, [r7, #16]
 8003c04:	f7ff fc37 	bl	8003476 <u8g2_font_get_word>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003c12:	89fa      	ldrh	r2, [r7, #14]
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d3e9      	bcc.n	8003bee <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003c20:	89fb      	ldrh	r3, [r7, #14]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003c34:	89fb      	ldrh	r3, [r7, #14]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d010      	beq.n	8003c5c <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003c3a:	89fa      	ldrh	r2, [r7, #14]
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d102      	bne.n	8003c48 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3303      	adds	r3, #3
 8003c46:	e00b      	b.n	8003c60 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003c56:	e7e0      	b.n	8003c1a <u8g2_font_get_glyph_data+0xb2>
	break;
 8003c58:	bf00      	nop
 8003c5a:	e000      	b.n	8003c5e <u8g2_font_get_glyph_data+0xf6>
	break;
 8003c5c:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	817b      	strh	r3, [r7, #10]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	813b      	strh	r3, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	897a      	ldrh	r2, [r7, #10]
 8003c8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	893a      	ldrh	r2, [r7, #8]
 8003c92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff ff64 	bl	8003b68 <u8g2_font_get_glyph_data>
 8003ca0:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003ca8:	6939      	ldr	r1, [r7, #16]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff fe4e 	bl	800394c <u8g2_font_decode_glyph>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003cb4:	8afb      	ldrh	r3, [r7, #22]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	4608      	mov	r0, r1
 8003cca:	4611      	mov	r1, r2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	817b      	strh	r3, [r7, #10]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	813b      	strh	r3, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d833      	bhi.n	8003d4c <u8g2_DrawGlyph+0x8c>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <u8g2_DrawGlyph+0x2c>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d11 	.word	0x08003d11
 8003cf4:	08003d25 	.word	0x08003d25
 8003cf8:	08003d39 	.word	0x08003d39
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	4798      	blx	r3
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	893b      	ldrh	r3, [r7, #8]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	813b      	strh	r3, [r7, #8]
      break;
 8003d0e:	e01d      	b.n	8003d4c <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	4798      	blx	r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	897b      	ldrh	r3, [r7, #10]
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	817b      	strh	r3, [r7, #10]
      break;
 8003d22:	e013      	b.n	8003d4c <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	4798      	blx	r3
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461a      	mov	r2, r3
 8003d30:	893b      	ldrh	r3, [r7, #8]
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	813b      	strh	r3, [r7, #8]
      break;
 8003d36:	e009      	b.n	8003d4c <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	4798      	blx	r3
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	897b      	ldrh	r3, [r7, #10]
 8003d46:	4413      	add	r3, r2
 8003d48:	817b      	strh	r3, [r7, #10]
      break;
 8003d4a:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	893a      	ldrh	r2, [r7, #8]
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff ff88 	bl	8003c68 <u8g2_font_draw_glyph>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop

08003d64 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	817b      	strh	r3, [r7, #10]
 8003d72:	4613      	mov	r3, r2
 8003d74:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fccc 	bl	8004714 <u8x8_utf8_init>
  sum = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	7812      	ldrb	r2, [r2, #0]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	4798      	blx	r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003d92:	8abb      	ldrh	r3, [r7, #20]
 8003d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d038      	beq.n	8003e0e <u8g2_draw_string+0xaa>
      break;
    str++;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003da2:	8abb      	ldrh	r3, [r7, #20]
 8003da4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d0e9      	beq.n	8003d80 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003dac:	8abb      	ldrh	r3, [r7, #20]
 8003dae:	893a      	ldrh	r2, [r7, #8]
 8003db0:	8979      	ldrh	r1, [r7, #10]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff ff84 	bl	8003cc0 <u8g2_DrawGlyph>
 8003db8:	4603      	mov	r3, r0
 8003dba:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d81e      	bhi.n	8003e04 <u8g2_draw_string+0xa0>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <u8g2_draw_string+0x68>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003de7 	.word	0x08003de7
 8003dd4:	08003df1 	.word	0x08003df1
 8003dd8:	08003dfb 	.word	0x08003dfb
      {
	case 0:
	  x += delta;
 8003ddc:	897a      	ldrh	r2, [r7, #10]
 8003dde:	8a7b      	ldrh	r3, [r7, #18]
 8003de0:	4413      	add	r3, r2
 8003de2:	817b      	strh	r3, [r7, #10]
	  break;
 8003de4:	e00e      	b.n	8003e04 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8003de6:	893a      	ldrh	r2, [r7, #8]
 8003de8:	8a7b      	ldrh	r3, [r7, #18]
 8003dea:	4413      	add	r3, r2
 8003dec:	813b      	strh	r3, [r7, #8]
	  break;
 8003dee:	e009      	b.n	8003e04 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8003df0:	897a      	ldrh	r2, [r7, #10]
 8003df2:	8a7b      	ldrh	r3, [r7, #18]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	817b      	strh	r3, [r7, #10]
	  break;
 8003df8:	e004      	b.n	8003e04 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8003dfa:	893a      	ldrh	r2, [r7, #8]
 8003dfc:	8a7b      	ldrh	r3, [r7, #18]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	813b      	strh	r3, [r7, #8]
	  break;
 8003e02:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8003e04:	8afa      	ldrh	r2, [r7, #22]
 8003e06:	8a7b      	ldrh	r3, [r7, #18]
 8003e08:	4413      	add	r3, r2
 8003e0a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003e0c:	e7b8      	b.n	8003d80 <u8g2_draw_string+0x1c>
      break;
 8003e0e:	bf00      	nop
    }
  }
  return sum;
 8003e10:	8afb      	ldrh	r3, [r7, #22]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop

08003e1c <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	817b      	strh	r3, [r7, #10]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <u8g2_DrawStr+0x30>)
 8003e32:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8003e34:	893a      	ldrh	r2, [r7, #8]
 8003e36:	8979      	ldrh	r1, [r7, #10]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff ff92 	bl	8003d64 <u8g2_draw_string>
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	0800472f 	.word	0x0800472f

08003e50 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d05d      	beq.n	8003f1c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04d      	beq.n	8003f1e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d11c      	bne.n	8003ec6 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	da05      	bge.n	8003ea8 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	dd32      	ble.n	8003f1e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003ec4:	e02b      	b.n	8003f1e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003edc:	440b      	add	r3, r1
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	da0d      	bge.n	8003efe <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	b25a      	sxtb	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	dd07      	ble.n	8003f1e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003f1a:	e000      	b.n	8003f1e <u8g2_UpdateRefHeight+0xce>
    return;
 8003f1c:	bf00      	nop
  }  
}
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  return 0;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
	...

08003f3c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a03      	ldr	r2, [pc, #12]	; (8003f54 <u8g2_SetFontPosBaseline+0x18>)
 8003f48:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	08003f27 	.word	0x08003f27

08003f58 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d00b      	beq.n	8003f84 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3374      	adds	r3, #116	; 0x74
 8003f76:	6839      	ldr	r1, [r7, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fa9b 	bl	80034b4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ff66 	bl	8003e50 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	4611      	mov	r1, r2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	80fb      	strh	r3, [r7, #6]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003fa8:	8afb      	ldrh	r3, [r7, #22]
 8003faa:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	8abb      	ldrh	r3, [r7, #20]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003fb6:	8afa      	ldrh	r2, [r7, #22]
 8003fb8:	8abb      	ldrh	r3, [r7, #20]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d90b      	bls.n	8003fd6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003fbe:	8afa      	ldrh	r2, [r7, #22]
 8003fc0:	88bb      	ldrh	r3, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d205      	bcs.n	8003fd2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003fc6:	88bb      	ldrh	r3, [r7, #4]
 8003fc8:	82bb      	strh	r3, [r7, #20]
      b--;
 8003fca:	8abb      	ldrh	r3, [r7, #20]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	82bb      	strh	r3, [r7, #20]
 8003fd0:	e001      	b.n	8003fd6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003fd6:	8afa      	ldrh	r2, [r7, #22]
 8003fd8:	88bb      	ldrh	r3, [r7, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d301      	bcc.n	8003fe2 <u8g2_clip_intersection2+0x56>
    return 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e01c      	b.n	800401c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003fe2:	8aba      	ldrh	r2, [r7, #20]
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d801      	bhi.n	8003fee <u8g2_clip_intersection2+0x62>
    return 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e016      	b.n	800401c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8003fee:	8afa      	ldrh	r2, [r7, #22]
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d201      	bcs.n	8003ffa <u8g2_clip_intersection2+0x6e>
    a = c;
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8003ffa:	8aba      	ldrh	r2, [r7, #20]
 8003ffc:	88bb      	ldrh	r3, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d901      	bls.n	8004006 <u8g2_clip_intersection2+0x7a>
    b = d;
 8004002:	88bb      	ldrh	r3, [r7, #4]
 8004004:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8afa      	ldrh	r2, [r7, #22]
 800400a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800400c:	8aba      	ldrh	r2, [r7, #20]
 800400e:	8afb      	ldrh	r3, [r7, #22]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	8aba      	ldrh	r2, [r7, #20]
 8004018:	801a      	strh	r2, [r3, #0]
  return 1;
 800401a:	2301      	movs	r3, #1
}
 800401c:	4618      	mov	r0, r3
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004026:	b590      	push	{r4, r7, lr}
 8004028:	b087      	sub	sp, #28
 800402a:	af02      	add	r7, sp, #8
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	4608      	mov	r0, r1
 8004030:	4611      	mov	r1, r2
 8004032:	461a      	mov	r2, r3
 8004034:	4603      	mov	r3, r0
 8004036:	817b      	strh	r3, [r7, #10]
 8004038:	460b      	mov	r3, r1
 800403a:	813b      	strh	r3, [r7, #8]
 800403c:	4613      	mov	r3, r2
 800403e:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004044:	893a      	ldrh	r2, [r7, #8]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800404e:	88f8      	ldrh	r0, [r7, #6]
 8004050:	893a      	ldrh	r2, [r7, #8]
 8004052:	8979      	ldrh	r1, [r7, #10]
 8004054:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	4603      	mov	r3, r0
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	47a0      	blx	r4
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	bd90      	pop	{r4, r7, pc}

08004068 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b087      	sub	sp, #28
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4603      	mov	r3, r0
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	460b      	mov	r3, r1
 800407c:	813b      	strh	r3, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004088:	2b00      	cmp	r3, #0
 800408a:	d075      	beq.n	8004178 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d072      	beq.n	8004178 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d91a      	bls.n	80040ce <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004098:	f897 3020 	ldrb.w	r3, [r7, #32]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d109      	bne.n	80040b4 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80040a0:	897a      	ldrh	r2, [r7, #10]
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	817b      	strh	r3, [r7, #10]
	  x++;
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	3301      	adds	r3, #1
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	817b      	strh	r3, [r7, #10]
 80040b2:	e00c      	b.n	80040ce <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80040b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d108      	bne.n	80040ce <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80040bc:	893a      	ldrh	r2, [r7, #8]
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	813b      	strh	r3, [r7, #8]
	  y++;
 80040c6:	893b      	ldrh	r3, [r7, #8]
 80040c8:	3301      	adds	r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80040ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80040da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11a      	bne.n	8004118 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80040e8:	893b      	ldrh	r3, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d83b      	bhi.n	8004166 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80040f4:	893b      	ldrh	r3, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d937      	bls.n	800416a <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004106:	1db9      	adds	r1, r7, #6
 8004108:	f107 000a 	add.w	r0, r7, #10
 800410c:	f7ff ff3e 	bl	8003f8c <u8g2_clip_intersection2>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11a      	bne.n	800414c <u8g2_DrawHVLine+0xe4>
	  return;
 8004116:	e02f      	b.n	8004178 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800411e:	897b      	ldrh	r3, [r7, #10]
 8004120:	429a      	cmp	r2, r3
 8004122:	d824      	bhi.n	800416e <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800412a:	897b      	ldrh	r3, [r7, #10]
 800412c:	429a      	cmp	r2, r3
 800412e:	d920      	bls.n	8004172 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800413c:	1db9      	adds	r1, r7, #6
 800413e:	f107 0008 	add.w	r0, r7, #8
 8004142:	f7ff ff23 	bl	8003f8c <u8g2_clip_intersection2>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d014      	beq.n	8004176 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	689c      	ldr	r4, [r3, #8]
 8004152:	8979      	ldrh	r1, [r7, #10]
 8004154:	893a      	ldrh	r2, [r7, #8]
 8004156:	88f8      	ldrh	r0, [r7, #6]
 8004158:	f897 3020 	ldrb.w	r3, [r7, #32]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	4603      	mov	r3, r0
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	47a0      	blx	r4
 8004164:	e008      	b.n	8004178 <u8g2_DrawHVLine+0x110>
	  return;
 8004166:	bf00      	nop
 8004168:	e006      	b.n	8004178 <u8g2_DrawHVLine+0x110>
	  return;
 800416a:	bf00      	nop
 800416c:	e004      	b.n	8004178 <u8g2_DrawHVLine+0x110>
	  return;
 800416e:	bf00      	nop
 8004170:	e002      	b.n	8004178 <u8g2_DrawHVLine+0x110>
	  return;
 8004172:	bf00      	nop
 8004174:	e000      	b.n	8004178 <u8g2_DrawHVLine+0x110>
	  return;
 8004176:	bf00      	nop
    }
}
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bd90      	pop	{r4, r7, pc}

0800417e <u8g2_DrawVLine>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
}

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af02      	add	r7, sp, #8
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	4608      	mov	r0, r1
 8004188:	4611      	mov	r1, r2
 800418a:	461a      	mov	r2, r3
 800418c:	4603      	mov	r3, r0
 800418e:	817b      	strh	r3, [r7, #10]
 8004190:	460b      	mov	r3, r1
 8004192:	813b      	strh	r3, [r7, #8]
 8004194:	4613      	mov	r3, r2
 8004196:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	893a      	ldrh	r2, [r7, #8]
 800419c:	8979      	ldrh	r1, [r7, #10]
 800419e:	2001      	movs	r0, #1
 80041a0:	9000      	str	r0, [sp, #0]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff ff60 	bl	8004068 <u8g2_DrawHVLine>
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d903      	bls.n	80041d2 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80041dc:	b490      	push	{r4, r7}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4623      	mov	r3, r4
 80041ec:	80fb      	strh	r3, [r7, #6]
 80041ee:	4603      	mov	r3, r0
 80041f0:	80bb      	strh	r3, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	807b      	strh	r3, [r7, #2]
 80041f6:	4613      	mov	r3, r2
 80041f8:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	88bb      	ldrh	r3, [r7, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d20d      	bcs.n	800421e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004202:	883a      	ldrh	r2, [r7, #0]
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	429a      	cmp	r2, r3
 8004208:	d901      	bls.n	800420e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800420a:	2301      	movs	r3, #1
 800420c:	e014      	b.n	8004238 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	883b      	ldrh	r3, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d901      	bls.n	800421a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004216:	2301      	movs	r3, #1
 8004218:	e00e      	b.n	8004238 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800421a:	2300      	movs	r3, #0
 800421c:	e00c      	b.n	8004238 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800421e:	883a      	ldrh	r2, [r7, #0]
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	429a      	cmp	r2, r3
 8004224:	d907      	bls.n	8004236 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004226:	887a      	ldrh	r2, [r7, #2]
 8004228:	883b      	ldrh	r3, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d901      	bls.n	8004232 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800422e:	2301      	movs	r3, #1
 8004230:	e002      	b.n	8004238 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004236:	2300      	movs	r3, #0
    }
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bc90      	pop	{r4, r7}
 8004240:	4770      	bx	lr

08004242 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	4608      	mov	r0, r1
 800424c:	4611      	mov	r1, r2
 800424e:	461a      	mov	r2, r3
 8004250:	4603      	mov	r3, r0
 8004252:	817b      	strh	r3, [r7, #10]
 8004254:	460b      	mov	r3, r1
 8004256:	813b      	strh	r3, [r7, #8]
 8004258:	4613      	mov	r3, r2
 800425a:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8004268:	8b3b      	ldrh	r3, [r7, #24]
 800426a:	893a      	ldrh	r2, [r7, #8]
 800426c:	f7ff ffb6 	bl	80041dc <u8g2_is_intersection_decision_tree>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <u8g2_IsIntersection+0x38>
    return 0; 
 8004276:	2300      	movs	r3, #0
 8004278:	e00a      	b.n	8004290 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	897a      	ldrh	r2, [r7, #10]
 800428a:	f7ff ffa7 	bl	80041dc <u8g2_is_intersection_decision_tree>
 800428e:	4603      	mov	r3, r0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	817b      	strh	r3, [r7, #10]
 80042aa:	460b      	mov	r3, r1
 80042ac:	813b      	strh	r3, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80042b2:	893b      	ldrh	r3, [r7, #8]
 80042b4:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80042b6:	7efb      	ldrb	r3, [r7, #27]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80042be:	2301      	movs	r3, #1
 80042c0:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80042c2:	7e3a      	ldrb	r2, [r7, #24]
 80042c4:	7efb      	ldrb	r3, [r7, #27]
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d801      	bhi.n	80042e2 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80042de:	7e3b      	ldrb	r3, [r7, #24]
 80042e0:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d001      	beq.n	80042f0 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80042ec:	7e3b      	ldrb	r3, [r7, #24]
 80042ee:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80042f0:	893b      	ldrh	r3, [r7, #8]
 80042f2:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80042f4:	8afb      	ldrh	r3, [r7, #22]
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	7c1b      	ldrb	r3, [r3, #16]
 8004302:	b29b      	uxth	r3, r3
 8004304:	8afa      	ldrh	r2, [r7, #22]
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004312:	8afb      	ldrh	r3, [r7, #22]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800431a:	897b      	ldrh	r3, [r7, #10]
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	4413      	add	r3, r2
 8004320:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004326:	2b00      	cmp	r3, #0
 8004328:	d117      	bne.n	800435a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	7ebb      	ldrb	r3, [r7, #26]
 8004330:	4313      	orrs	r3, r2
 8004332:	b2da      	uxtb	r2, r3
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	7e7b      	ldrb	r3, [r7, #25]
 800433e:	4053      	eors	r3, r2
 8004340:	b2da      	uxtb	r2, r3
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
	len--;
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	3b01      	subs	r3, #1
 8004350:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e8      	bne.n	800432a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004358:	e038      	b.n	80043cc <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	7ebb      	ldrb	r3, [r7, #26]
 8004360:	4313      	orrs	r3, r2
 8004362:	b2da      	uxtb	r2, r3
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	781a      	ldrb	r2, [r3, #0]
 800436c:	7e7b      	ldrb	r3, [r7, #25]
 800436e:	4053      	eors	r3, r2
 8004370:	b2da      	uxtb	r2, r3
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004376:	7efb      	ldrb	r3, [r7, #27]
 8004378:	3301      	adds	r3, #1
 800437a:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800437c:	7efb      	ldrb	r3, [r7, #27]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	76fb      	strb	r3, [r7, #27]
      len--;
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	3b01      	subs	r3, #1
 8004388:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800438a:	7efb      	ldrb	r3, [r7, #27]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d114      	bne.n	80043ba <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004394:	461a      	mov	r2, r3
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d801      	bhi.n	80043aa <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d008      	beq.n	80043c6 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	767b      	strb	r3, [r7, #25]
 80043b8:	e005      	b.n	80043c6 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80043ba:	7ebb      	ldrb	r3, [r7, #26]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80043c0:	7e7b      	ldrb	r3, [r7, #25]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1c6      	bne.n	800435a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80043cc:	bf00      	nop
 80043ce:	3724      	adds	r7, #36	; 0x24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	79fa      	ldrb	r2, [r7, #7]
 800443a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff ffad 	bl	80043d6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff fd5d 	bl	8003f3c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044a6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80044a8:	89fb      	ldrh	r3, [r7, #14]
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	89fa      	ldrh	r2, [r7, #14]
 80044b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	7c1b      	ldrb	r3, [r3, #16]
 80044b8:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80044ba:	89fb      	ldrh	r3, [r7, #14]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	89fa      	ldrh	r2, [r7, #14]
 80044c4:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044cc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80044ce:	89fb      	ldrh	r3, [r7, #14]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	89fa      	ldrh	r2, [r7, #14]
 80044d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044e0:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80044e2:	89fb      	ldrh	r3, [r7, #14]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80044ea:	4413      	add	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	7c52      	ldrb	r2, [r2, #17]
 80044f0:	4293      	cmp	r3, r2
 80044f2:	dd08      	ble.n	8004506 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	7c5b      	ldrb	r3, [r3, #17]
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004500:	b29b      	uxth	r3, r3
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004506:	89fb      	ldrh	r3, [r7, #14]
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004528:	89fb      	ldrh	r3, [r7, #14]
 800452a:	4413      	add	r3, r2
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	8a9a      	ldrh	r2, [r3, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	8ada      	ldrh	r2, [r3, #22]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af02      	add	r7, sp, #8
 8004558:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4603      	mov	r3, r0
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fe63 	bl	8004242 <u8g2_IsIntersection>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800458a:	e03b      	b.n	8004604 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d205      	bcs.n	80045b0 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045bc:	429a      	cmp	r2, r3
 80045be:	d905      	bls.n	80045cc <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80045d8:	429a      	cmp	r2, r3
 80045da:	d205      	bcs.n	80045e8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d905      	bls.n	8004604 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff3c 	bl	8004492 <u8g2_update_dimension_common>
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004652:	429a      	cmp	r2, r3
 8004654:	d30a      	bcc.n	800466c <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ff65 	bl	8004552 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	4608      	mov	r0, r1
 800469a:	4611      	mov	r1, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	460b      	mov	r3, r1
 80046a4:	813b      	strh	r3, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046b0:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 80046b2:	8aba      	ldrh	r2, [r7, #20]
 80046b4:	893b      	ldrh	r3, [r7, #8]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046c0:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 80046c2:	8afa      	ldrh	r2, [r7, #22]
 80046c4:	897b      	ldrh	r3, [r7, #10]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 80046ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d107      	bne.n	80046e2 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80046d2:	8abb      	ldrh	r3, [r7, #20]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 80046d8:	8afa      	ldrh	r2, [r7, #22]
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	82fb      	strh	r3, [r7, #22]
 80046e0:	e00a      	b.n	80046f8 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 80046e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d106      	bne.n	80046f8 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 80046ea:	8afb      	ldrh	r3, [r7, #22]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 80046f0:	8aba      	ldrh	r2, [r7, #20]
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80046f8:	88f8      	ldrh	r0, [r7, #6]
 80046fa:	8aba      	ldrh	r2, [r7, #20]
 80046fc:	8af9      	ldrh	r1, [r7, #22]
 80046fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	4603      	mov	r3, r0
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fc8d 	bl	8004026 <u8g2_draw_hv_line_2dir>
}
 800470c:	bf00      	nop
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr

0800472e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <u8x8_ascii_next+0x18>
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	2b0a      	cmp	r3, #10
 8004744:	d102      	bne.n	800474c <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800474a:	e001      	b.n	8004750 <u8x8_ascii_next+0x22>
  return b;
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	b29b      	uxth	r3, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800475a:	b590      	push	{r4, r7, lr}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	460b      	mov	r3, r1
 8004764:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691c      	ldr	r4, [r3, #16]
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	2300      	movs	r3, #0
 800476e:	2120      	movs	r1, #32
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	47a0      	blx	r4
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	bd90      	pop	{r4, r7, pc}

0800477e <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800477e:	b590      	push	{r4, r7, lr}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	460b      	mov	r3, r1
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	691c      	ldr	r4, [r3, #16]
 8004790:	7afa      	ldrb	r2, [r7, #11]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2117      	movs	r1, #23
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	47a0      	blx	r4
 800479a:	4603      	mov	r3, r0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd90      	pop	{r4, r7, pc}

080047a4 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80047b0:	1cfb      	adds	r3, r7, #3
 80047b2:	461a      	mov	r2, r3
 80047b4:	2101      	movs	r1, #1
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff ffe1 	bl	800477e <u8x8_byte_SendBytes>
 80047bc:	4603      	mov	r3, r0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80047c6:	b590      	push	{r4, r7, lr}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68dc      	ldr	r4, [r3, #12]
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	2300      	movs	r3, #0
 80047da:	2115      	movs	r1, #21
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	47a0      	blx	r4
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}

080047ea <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80047ea:	b590      	push	{r4, r7, lr}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68dc      	ldr	r4, [r3, #12]
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	2300      	movs	r3, #0
 80047fe:	2116      	movs	r1, #22
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	47a0      	blx	r4
 8004804:	4603      	mov	r3, r0
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bd90      	pop	{r4, r7, pc}

0800480e <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800480e:	b590      	push	{r4, r7, lr}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	460b      	mov	r3, r1
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68dc      	ldr	r4, [r3, #12]
 8004820:	7afa      	ldrb	r2, [r7, #11]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2117      	movs	r1, #23
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	47a0      	blx	r4
 800482a:	4603      	mov	r3, r0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	bd90      	pop	{r4, r7, pc}

08004834 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68dc      	ldr	r4, [r3, #12]
 8004840:	2300      	movs	r3, #0
 8004842:	2200      	movs	r2, #0
 8004844:	2118      	movs	r1, #24
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	47a0      	blx	r4
 800484a:	4603      	mov	r3, r0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bd90      	pop	{r4, r7, pc}

08004854 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68dc      	ldr	r4, [r3, #12]
 8004860:	2300      	movs	r3, #0
 8004862:	2200      	movs	r2, #0
 8004864:	2119      	movs	r1, #25
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	47a0      	blx	r4
 800486a:	4603      	mov	r3, r0
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}

08004874 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	73fb      	strb	r3, [r7, #15]
    data++;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	3301      	adds	r3, #1
 8004888:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2bfe      	cmp	r3, #254	; 0xfe
 800488e:	d031      	beq.n	80048f4 <u8x8_cad_SendSequence+0x80>
 8004890:	2bfe      	cmp	r3, #254	; 0xfe
 8004892:	dc3d      	bgt.n	8004910 <u8x8_cad_SendSequence+0x9c>
 8004894:	2b19      	cmp	r3, #25
 8004896:	dc3b      	bgt.n	8004910 <u8x8_cad_SendSequence+0x9c>
 8004898:	2b18      	cmp	r3, #24
 800489a:	da23      	bge.n	80048e4 <u8x8_cad_SendSequence+0x70>
 800489c:	2b16      	cmp	r3, #22
 800489e:	dc02      	bgt.n	80048a6 <u8x8_cad_SendSequence+0x32>
 80048a0:	2b15      	cmp	r3, #21
 80048a2:	da03      	bge.n	80048ac <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80048a4:	e034      	b.n	8004910 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80048a6:	2b17      	cmp	r3, #23
 80048a8:	d00e      	beq.n	80048c8 <u8x8_cad_SendSequence+0x54>
	return;
 80048aa:	e031      	b.n	8004910 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68dc      	ldr	r4, [r3, #12]
 80048b6:	7bba      	ldrb	r2, [r7, #14]
 80048b8:	7bf9      	ldrb	r1, [r7, #15]
 80048ba:	2300      	movs	r3, #0
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	47a0      	blx	r4
	  data++;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	603b      	str	r3, [r7, #0]
	  break;
 80048c6:	e022      	b.n	800490e <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80048ce:	f107 030e 	add.w	r3, r7, #14
 80048d2:	461a      	mov	r2, r3
 80048d4:	2101      	movs	r1, #1
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff ff99 	bl	800480e <u8x8_cad_SendData>
	  data++;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	603b      	str	r3, [r7, #0]
	  break;
 80048e2:	e014      	b.n	800490e <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68dc      	ldr	r4, [r3, #12]
 80048e8:	7bf9      	ldrb	r1, [r7, #15]
 80048ea:	2300      	movs	r3, #0
 80048ec:	2200      	movs	r2, #0
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	47a0      	blx	r4
	  break;
 80048f2:	e00c      	b.n	800490e <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
 80048fc:	461a      	mov	r2, r3
 80048fe:	2129      	movs	r1, #41	; 0x29
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f9ec 	bl	8004cde <u8x8_gpio_call>
	  data++;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	603b      	str	r3, [r7, #0]
	  break;
 800490c:	bf00      	nop
    cmd = *data;
 800490e:	e7b6      	b.n	800487e <u8x8_cad_SendSequence+0xa>
	return;
 8004910:	bf00      	nop
    }
  }
}
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bd90      	pop	{r4, r7, pc}

08004918 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	72fb      	strb	r3, [r7, #11]
 8004926:	4613      	mov	r3, r2
 8004928:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800492a:	7afb      	ldrb	r3, [r7, #11]
 800492c:	3b14      	subs	r3, #20
 800492e:	2b05      	cmp	r3, #5
 8004930:	d82f      	bhi.n	8004992 <u8x8_cad_001+0x7a>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <u8x8_cad_001+0x20>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004981 	.word	0x08004981
 800493c:	08004951 	.word	0x08004951
 8004940:	08004965 	.word	0x08004965
 8004944:	08004979 	.word	0x08004979
 8004948:	08004981 	.word	0x08004981
 800494c:	08004981 	.word	0x08004981
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8004950:	2100      	movs	r1, #0
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff ff01 	bl	800475a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004958:	7abb      	ldrb	r3, [r7, #10]
 800495a:	4619      	mov	r1, r3
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff ff21 	bl	80047a4 <u8x8_byte_SendByte>
      break;
 8004962:	e018      	b.n	8004996 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004964:	2100      	movs	r1, #0
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff fef7 	bl	800475a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800496c:	7abb      	ldrb	r3, [r7, #10]
 800496e:	4619      	mov	r1, r3
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff ff17 	bl	80047a4 <u8x8_byte_SendByte>
      break;
 8004976:	e00e      	b.n	8004996 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8004978:	2101      	movs	r1, #1
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff feed 	bl	800475a <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	691c      	ldr	r4, [r3, #16]
 8004984:	7aba      	ldrb	r2, [r7, #10]
 8004986:	7af9      	ldrb	r1, [r7, #11]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	47a0      	blx	r4
 800498e:	4603      	mov	r3, r0
 8004990:	e002      	b.n	8004998 <u8x8_cad_001+0x80>
    default:
      return 0;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <u8x8_cad_001+0x80>
  }
  return 1;
 8004996:	2301      	movs	r3, #1
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	bd90      	pop	{r4, r7, pc}

080049a0 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	72fb      	strb	r3, [r7, #11]
 80049ae:	4613      	mov	r3, r2
 80049b0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80049b2:	7afb      	ldrb	r3, [r7, #11]
 80049b4:	2b0f      	cmp	r3, #15
 80049b6:	d006      	beq.n	80049c6 <u8x8_d_st7565_common+0x26>
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	dc71      	bgt.n	8004aa0 <u8x8_d_st7565_common+0x100>
 80049bc:	2b0b      	cmp	r3, #11
 80049be:	d050      	beq.n	8004a62 <u8x8_d_st7565_common+0xc2>
 80049c0:	2b0e      	cmp	r3, #14
 80049c2:	d05b      	beq.n	8004a7c <u8x8_d_st7565_common+0xdc>
 80049c4:	e06c      	b.n	8004aa0 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff ff34 	bl	8004834 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	795b      	ldrb	r3, [r3, #5]
 80049d0:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 80049d2:	7dbb      	ldrb	r3, [r7, #22]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80049de:	7dbb      	ldrb	r3, [r7, #22]
 80049e0:	4413      	add	r3, r2
 80049e2:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80049e4:	7dbb      	ldrb	r3, [r7, #22]
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f043 0310 	orr.w	r3, r3, #16
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	4619      	mov	r1, r3
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff fee7 	bl	80047c6 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80049f8:	7dbb      	ldrb	r3, [r7, #22]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	4619      	mov	r1, r3
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff fedf 	bl	80047c6 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	799b      	ldrb	r3, [r3, #6]
 8004a0c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	4619      	mov	r1, r3
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff fed6 	bl	80047c6 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	791b      	ldrb	r3, [r3, #4]
 8004a1e:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 8004a2c:	7dfa      	ldrb	r2, [r7, #23]
 8004a2e:	7dbb      	ldrb	r3, [r7, #22]
 8004a30:	4413      	add	r3, r2
 8004a32:	2b84      	cmp	r3, #132	; 0x84
 8004a34:	d905      	bls.n	8004a42 <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 8004a36:	2384      	movs	r3, #132	; 0x84
 8004a38:	75fb      	strb	r3, [r7, #23]
	c -= x;
 8004a3a:	7dfa      	ldrb	r2, [r7, #23]
 8004a3c:	7dbb      	ldrb	r3, [r7, #22]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4619      	mov	r1, r3
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fee0 	bl	800480e <u8x8_cad_SendData>
	arg_int--;
 8004a4e:	7abb      	ldrb	r3, [r7, #10]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004a54:	7abb      	ldrb	r3, [r7, #10]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f3      	bne.n	8004a42 <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f7ff fefa 	bl	8004854 <u8x8_cad_EndTransfer>
      break;
 8004a60:	e020      	b.n	8004aa4 <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004a62:	7abb      	ldrb	r3, [r7, #10]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 8004a68:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <u8x8_d_st7565_common+0x110>)
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff ff02 	bl	8004874 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 8004a70:	e018      	b.n	8004aa4 <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 8004a72:	4910      	ldr	r1, [pc, #64]	; (8004ab4 <u8x8_d_st7565_common+0x114>)
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fefd 	bl	8004874 <u8x8_cad_SendSequence>
      break;
 8004a7a:	e013      	b.n	8004aa4 <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff fed9 	bl	8004834 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004a82:	2181      	movs	r1, #129	; 0x81
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff fe9e 	bl	80047c6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8004a8a:	7abb      	ldrb	r3, [r7, #10]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff fea9 	bl	80047ea <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fedb 	bl	8004854 <u8x8_cad_EndTransfer>
      break;
 8004a9e:	e001      	b.n	8004aa4 <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <u8x8_d_st7565_common+0x106>
  }
  return 1;
 8004aa4:	2301      	movs	r3, #1
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	08009210 	.word	0x08009210
 8004ab4:	08009218 	.word	0x08009218

08004ab8 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	72fb      	strb	r3, [r7, #11]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8004aca:	7aba      	ldrb	r2, [r7, #10]
 8004acc:	7af9      	ldrb	r1, [r7, #11]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff ff65 	bl	80049a0 <u8x8_d_st7565_common>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d131      	bne.n	8004b40 <u8x8_d_st7565_nhd_c12864+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8004adc:	7afb      	ldrb	r3, [r7, #11]
 8004ade:	2b0d      	cmp	r3, #13
 8004ae0:	d013      	beq.n	8004b0a <u8x8_d_st7565_nhd_c12864+0x52>
 8004ae2:	2b0d      	cmp	r3, #13
 8004ae4:	dc2a      	bgt.n	8004b3c <u8x8_d_st7565_nhd_c12864+0x84>
 8004ae6:	2b09      	cmp	r3, #9
 8004ae8:	d002      	beq.n	8004af0 <u8x8_d_st7565_nhd_c12864+0x38>
 8004aea:	2b0a      	cmp	r3, #10
 8004aec:	d005      	beq.n	8004afa <u8x8_d_st7565_nhd_c12864+0x42>
 8004aee:	e025      	b.n	8004b3c <u8x8_d_st7565_nhd_c12864+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8004af0:	4916      	ldr	r1, [pc, #88]	; (8004b4c <u8x8_d_st7565_nhd_c12864+0x94>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f832 	bl	8004b5c <u8x8_d_helper_display_setup_memory>
	break;
 8004af8:	e023      	b.n	8004b42 <u8x8_d_st7565_nhd_c12864+0x8a>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f841 	bl	8004b82 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8004b00:	4913      	ldr	r1, [pc, #76]	; (8004b50 <u8x8_d_st7565_nhd_c12864+0x98>)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff feb6 	bl	8004874 <u8x8_cad_SendSequence>
	break;
 8004b08:	e01b      	b.n	8004b42 <u8x8_d_st7565_nhd_c12864+0x8a>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8004b0a:	7abb      	ldrb	r3, [r7, #10]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <u8x8_d_st7565_nhd_c12864+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8004b10:	4910      	ldr	r1, [pc, #64]	; (8004b54 <u8x8_d_st7565_nhd_c12864+0x9c>)
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff feae 	bl	8004874 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	7c9a      	ldrb	r2, [r3, #18]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 8004b24:	e00d      	b.n	8004b42 <u8x8_d_st7565_nhd_c12864+0x8a>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 8004b26:	490c      	ldr	r1, [pc, #48]	; (8004b58 <u8x8_d_st7565_nhd_c12864+0xa0>)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f7ff fea3 	bl	8004874 <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	7cda      	ldrb	r2, [r3, #19]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 8004b3a:	e002      	b.n	8004b42 <u8x8_d_st7565_nhd_c12864+0x8a>
      default:
	return 0;		/* msg unknown */
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e001      	b.n	8004b44 <u8x8_d_st7565_nhd_c12864+0x8c>
    }
  }
 8004b40:	bf00      	nop
  return 1;
 8004b42:	2301      	movs	r3, #1
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	08009230 	.word	0x08009230
 8004b50:	08009248 	.word	0x08009248
 8004b54:	08009220 	.word	0x08009220
 8004b58:	08009228 	.word	0x08009228

08004b5c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	7c9a      	ldrb	r2, [r3, #18]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004b82:	b590      	push	{r4, r7, lr}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695c      	ldr	r4, [r3, #20]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2200      	movs	r2, #0
 8004b92:	2128      	movs	r1, #40	; 0x28
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68dc      	ldr	r4, [r3, #12]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2114      	movs	r1, #20
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	214b      	movs	r1, #75	; 0x4b
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f897 	bl	8004cde <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	791b      	ldrb	r3, [r3, #4]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2129      	movs	r1, #41	; 0x29
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f88f 	bl	8004cde <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	214b      	movs	r1, #75	; 0x4b
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f88a 	bl	8004cde <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	791b      	ldrb	r3, [r3, #4]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2129      	movs	r1, #41	; 0x29
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f882 	bl	8004cde <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004bda:	2201      	movs	r2, #1
 8004bdc:	214b      	movs	r1, #75	; 0x4b
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f87d 	bl	8004cde <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	795b      	ldrb	r3, [r3, #5]
 8004bea:	461a      	mov	r2, r3
 8004bec:	2129      	movs	r1, #41	; 0x29
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f875 	bl	8004cde <u8x8_gpio_call>
}    
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd90      	pop	{r4, r7, pc}

08004bfc <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	70fb      	strb	r3, [r7, #3]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70bb      	strb	r3, [r7, #2]
 8004c12:	4613      	mov	r3, r2
 8004c14:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004c1a:	78bb      	ldrb	r3, [r7, #2]
 8004c1c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004c1e:	787b      	ldrb	r3, [r7, #1]
 8004c20:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689c      	ldr	r4, [r3, #8]
 8004c2a:	f107 0308 	add.w	r3, r7, #8
 8004c2e:	2201      	movs	r2, #1
 8004c30:	210f      	movs	r1, #15
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	47a0      	blx	r4
 8004c36:	4603      	mov	r3, r0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd90      	pop	{r4, r7, pc}

08004c40 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689c      	ldr	r4, [r3, #8]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2109      	movs	r1, #9
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	47a0      	blx	r4
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd90      	pop	{r4, r7, pc}

08004c5e <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004c5e:	b590      	push	{r4, r7, lr}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689c      	ldr	r4, [r3, #8]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	210a      	movs	r1, #10
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	47a0      	blx	r4
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd90      	pop	{r4, r7, pc}

08004c7c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004c7c:	b590      	push	{r4, r7, lr}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689c      	ldr	r4, [r3, #8]
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	210b      	movs	r1, #11
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	47a0      	blx	r4
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}

08004c9e <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8004c9e:	b590      	push	{r4, r7, lr}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689c      	ldr	r4, [r3, #8]
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	210e      	movs	r1, #14
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	47a0      	blx	r4
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd90      	pop	{r4, r7, pc}

08004cc0 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689c      	ldr	r4, [r3, #8]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2110      	movs	r1, #16
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	47a0      	blx	r4
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd90      	pop	{r4, r7, pc}

08004cde <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004cde:	b590      	push	{r4, r7, lr}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	70fb      	strb	r3, [r7, #3]
 8004cea:	4613      	mov	r3, r2
 8004cec:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695c      	ldr	r4, [r3, #20]
 8004cf2:	78ba      	ldrb	r2, [r7, #2]
 8004cf4:	78f9      	ldrb	r1, [r7, #3]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	47a0      	blx	r4
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd90      	pop	{r4, r7, pc}

08004d04 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	72fb      	strb	r3, [r7, #11]
 8004d12:	4613      	mov	r3, r2
 8004d14:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
	...

08004d24 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <u8x8_SetupDefaults+0x58>)
 8004d36:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <u8x8_SetupDefaults+0x58>)
 8004d3c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <u8x8_SetupDefaults+0x58>)
 8004d42:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <u8x8_SetupDefaults+0x58>)
 8004d48:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	08004d05 	.word	0x08004d05

08004d80 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff ffc8 	bl	8004d24 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff ff47 	bl	8004c40 <u8x8_SetupMemory>
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8004dc6:	f107 020f 	add.w	r2, r7, #15
 8004dca:	1df9      	adds	r1, r7, #7
 8004dcc:	2364      	movs	r3, #100	; 0x64
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4804      	ldr	r0, [pc, #16]	; (8004de4 <W25qxx_Spi+0x28>)
 8004dd4:	f001 fd0d 	bl	80067f2 <HAL_SPI_TransmitReceive>
	return ret;	
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000894 	.word	0x20000894

08004de8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e04:	4813      	ldr	r0, [pc, #76]	; (8004e54 <W25qxx_ReadID+0x6c>)
 8004e06:	f000 fdf0 	bl	80059ea <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8004e0a:	209f      	movs	r0, #159	; 0x9f
 8004e0c:	f7ff ffd6 	bl	8004dbc <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004e10:	20a5      	movs	r0, #165	; 0xa5
 8004e12:	f7ff ffd3 	bl	8004dbc <W25qxx_Spi>
 8004e16:	4603      	mov	r3, r0
 8004e18:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004e1a:	20a5      	movs	r0, #165	; 0xa5
 8004e1c:	f7ff ffce 	bl	8004dbc <W25qxx_Spi>
 8004e20:	4603      	mov	r3, r0
 8004e22:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004e24:	20a5      	movs	r0, #165	; 0xa5
 8004e26:	f7ff ffc9 	bl	8004dbc <W25qxx_Spi>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e34:	4807      	ldr	r0, [pc, #28]	; (8004e54 <W25qxx_ReadID+0x6c>)
 8004e36:	f000 fdd8 	bl	80059ea <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	041a      	lsls	r2, r3, #16
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	4313      	orrs	r3, r2
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  return Temp;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40011000 	.word	0x40011000

08004e58 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e64:	4816      	ldr	r0, [pc, #88]	; (8004ec0 <W25qxx_ReadUniqID+0x68>)
 8004e66:	f000 fdc0 	bl	80059ea <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8004e6a:	204b      	movs	r0, #75	; 0x4b
 8004e6c:	f7ff ffa6 	bl	8004dbc <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8004e70:	2300      	movs	r3, #0
 8004e72:	71fb      	strb	r3, [r7, #7]
 8004e74:	e005      	b.n	8004e82 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004e76:	20a5      	movs	r0, #165	; 0xa5
 8004e78:	f7ff ffa0 	bl	8004dbc <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	71fb      	strb	r3, [r7, #7]
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d9f6      	bls.n	8004e76 <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	71bb      	strb	r3, [r7, #6]
 8004e8c:	e00b      	b.n	8004ea6 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004e8e:	79bc      	ldrb	r4, [r7, #6]
 8004e90:	20a5      	movs	r0, #165	; 0xa5
 8004e92:	f7ff ff93 	bl	8004dbc <W25qxx_Spi>
 8004e96:	4603      	mov	r3, r0
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <W25qxx_ReadUniqID+0x6c>)
 8004e9c:	4423      	add	r3, r4
 8004e9e:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8004ea0:	79bb      	ldrb	r3, [r7, #6]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	71bb      	strb	r3, [r7, #6]
 8004ea6:	79bb      	ldrb	r3, [r7, #6]
 8004ea8:	2b07      	cmp	r3, #7
 8004eaa:	d9f0      	bls.n	8004e8e <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8004eac:	2201      	movs	r2, #1
 8004eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004eb2:	4803      	ldr	r0, [pc, #12]	; (8004ec0 <W25qxx_ReadUniqID+0x68>)
 8004eb4:	f000 fd99 	bl	80059ea <HAL_GPIO_WritePin>
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}
 8004ec0:	40011000 	.word	0x40011000
 8004ec4:	20000a98 	.word	0x20000a98

08004ec8 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004edc:	481c      	ldr	r0, [pc, #112]	; (8004f50 <W25qxx_ReadStatusRegister+0x88>)
 8004ede:	f000 fd84 	bl	80059ea <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10c      	bne.n	8004f02 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8004ee8:	2005      	movs	r0, #5
 8004eea:	f7ff ff67 	bl	8004dbc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8004eee:	20a5      	movs	r0, #165	; 0xa5
 8004ef0:	f7ff ff64 	bl	8004dbc <W25qxx_Spi>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004ef8:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <W25qxx_ReadStatusRegister+0x8c>)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004f00:	e01b      	b.n	8004f3a <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d10c      	bne.n	8004f22 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8004f08:	2035      	movs	r0, #53	; 0x35
 8004f0a:	f7ff ff57 	bl	8004dbc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8004f0e:	20a5      	movs	r0, #165	; 0xa5
 8004f10:	f7ff ff54 	bl	8004dbc <W25qxx_Spi>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004f18:	4a0e      	ldr	r2, [pc, #56]	; (8004f54 <W25qxx_ReadStatusRegister+0x8c>)
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004f20:	e00b      	b.n	8004f3a <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004f22:	2015      	movs	r0, #21
 8004f24:	f7ff ff4a 	bl	8004dbc <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8004f28:	20a5      	movs	r0, #165	; 0xa5
 8004f2a:	f7ff ff47 	bl	8004dbc <W25qxx_Spi>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004f32:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <W25qxx_ReadStatusRegister+0x8c>)
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f40:	4803      	ldr	r0, [pc, #12]	; (8004f50 <W25qxx_ReadStatusRegister+0x88>)
 8004f42:	f000 fd52 	bl	80059ea <HAL_GPIO_WritePin>
	return status;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40011000 	.word	0x40011000
 8004f54:	20000a98 	.word	0x20000a98

08004f58 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8004f5e:	4b60      	ldr	r3, [pc, #384]	; (80050e0 <W25qxx_Init+0x188>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8004f66:	e002      	b.n	8004f6e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004f68:	2001      	movs	r0, #1
 8004f6a:	f000 f99f 	bl	80052ac <HAL_Delay>
	while(HAL_GetTick()<100)
 8004f6e:	f000 f993 	bl	8005298 <HAL_GetTick>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b63      	cmp	r3, #99	; 0x63
 8004f76:	d9f7      	bls.n	8004f68 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f7e:	4859      	ldr	r0, [pc, #356]	; (80050e4 <W25qxx_Init+0x18c>)
 8004f80:	f000 fd33 	bl	80059ea <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8004f84:	2064      	movs	r0, #100	; 0x64
 8004f86:	f000 f991 	bl	80052ac <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8004f8a:	f7ff ff2d 	bl	8004de8 <W25qxx_ReadID>
 8004f8e:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004f98:	3b11      	subs	r3, #17
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d85f      	bhi.n	800505e <W25qxx_Init+0x106>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <W25qxx_Init+0x4c>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08005051 	.word	0x08005051
 8004fa8:	08005043 	.word	0x08005043
 8004fac:	08005035 	.word	0x08005035
 8004fb0:	08005027 	.word	0x08005027
 8004fb4:	08005019 	.word	0x08005019
 8004fb8:	0800500b 	.word	0x0800500b
 8004fbc:	08004ffd 	.word	0x08004ffd
 8004fc0:	08004fed 	.word	0x08004fed
 8004fc4:	08004fdd 	.word	0x08004fdd
 8004fc8:	08004fcd 	.word	0x08004fcd
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8004fcc:	4b44      	ldr	r3, [pc, #272]	; (80050e0 <W25qxx_Init+0x188>)
 8004fce:	220a      	movs	r2, #10
 8004fd0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8004fd2:	4b43      	ldr	r3, [pc, #268]	; (80050e0 <W25qxx_Init+0x188>)
 8004fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fd8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8004fda:	e046      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8004fdc:	4b40      	ldr	r3, [pc, #256]	; (80050e0 <W25qxx_Init+0x188>)
 8004fde:	2209      	movs	r2, #9
 8004fe0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8004fe2:	4b3f      	ldr	r3, [pc, #252]	; (80050e0 <W25qxx_Init+0x188>)
 8004fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8004fea:	e03e      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8004fec:	4b3c      	ldr	r3, [pc, #240]	; (80050e0 <W25qxx_Init+0x188>)
 8004fee:	2208      	movs	r2, #8
 8004ff0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8004ff2:	4b3b      	ldr	r3, [pc, #236]	; (80050e0 <W25qxx_Init+0x188>)
 8004ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ff8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8004ffa:	e036      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8004ffc:	4b38      	ldr	r3, [pc, #224]	; (80050e0 <W25qxx_Init+0x188>)
 8004ffe:	2207      	movs	r2, #7
 8005000:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <W25qxx_Init+0x188>)
 8005004:	2280      	movs	r2, #128	; 0x80
 8005006:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8005008:	e02f      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 800500a:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <W25qxx_Init+0x188>)
 800500c:	2206      	movs	r2, #6
 800500e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8005010:	4b33      	ldr	r3, [pc, #204]	; (80050e0 <W25qxx_Init+0x188>)
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8005016:	e028      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8005018:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <W25qxx_Init+0x188>)
 800501a:	2205      	movs	r2, #5
 800501c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 800501e:	4b30      	ldr	r3, [pc, #192]	; (80050e0 <W25qxx_Init+0x188>)
 8005020:	2220      	movs	r2, #32
 8005022:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8005024:	e021      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <W25qxx_Init+0x188>)
 8005028:	2204      	movs	r2, #4
 800502a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 800502c:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <W25qxx_Init+0x188>)
 800502e:	2210      	movs	r2, #16
 8005030:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8005032:	e01a      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8005034:	4b2a      	ldr	r3, [pc, #168]	; (80050e0 <W25qxx_Init+0x188>)
 8005036:	2203      	movs	r2, #3
 8005038:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800503a:	4b29      	ldr	r3, [pc, #164]	; (80050e0 <W25qxx_Init+0x188>)
 800503c:	2208      	movs	r2, #8
 800503e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8005040:	e013      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8005042:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <W25qxx_Init+0x188>)
 8005044:	2202      	movs	r2, #2
 8005046:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <W25qxx_Init+0x188>)
 800504a:	2204      	movs	r2, #4
 800504c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 800504e:	e00c      	b.n	800506a <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8005050:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <W25qxx_Init+0x188>)
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8005056:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <W25qxx_Init+0x188>)
 8005058:	2202      	movs	r2, #2
 800505a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 800505c:	e005      	b.n	800506a <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <W25qxx_Init+0x188>)
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8005066:	2300      	movs	r3, #0
 8005068:	e036      	b.n	80050d8 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 800506a:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <W25qxx_Init+0x188>)
 800506c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005070:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <W25qxx_Init+0x188>)
 8005074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005078:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800507a:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <W25qxx_Init+0x188>)
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <W25qxx_Init+0x188>)
 8005082:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8005084:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <W25qxx_Init+0x188>)
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <W25qxx_Init+0x188>)
 800508a:	6912      	ldr	r2, [r2, #16]
 800508c:	fb02 f303 	mul.w	r3, r2, r3
 8005090:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <W25qxx_Init+0x188>)
 8005092:	8952      	ldrh	r2, [r2, #10]
 8005094:	fbb3 f3f2 	udiv	r3, r3, r2
 8005098:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <W25qxx_Init+0x188>)
 800509a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <W25qxx_Init+0x188>)
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	4a0f      	ldr	r2, [pc, #60]	; (80050e0 <W25qxx_Init+0x188>)
 80050a4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80050a6:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <W25qxx_Init+0x188>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	4a0d      	ldr	r2, [pc, #52]	; (80050e0 <W25qxx_Init+0x188>)
 80050ac:	6912      	ldr	r2, [r2, #16]
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
 80050b2:	0a9b      	lsrs	r3, r3, #10
 80050b4:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <W25qxx_Init+0x188>)
 80050b6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80050b8:	f7ff fece 	bl	8004e58 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80050bc:	2001      	movs	r0, #1
 80050be:	f7ff ff03 	bl	8004ec8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80050c2:	2002      	movs	r0, #2
 80050c4:	f7ff ff00 	bl	8004ec8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80050c8:	2003      	movs	r0, #3
 80050ca:	f7ff fefd 	bl	8004ec8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <W25qxx_Init+0x188>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80050d6:	2301      	movs	r3, #1
}	
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000a98 	.word	0x20000a98
 80050e4:	40011000 	.word	0x40011000

080050e8 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80050f4:	e002      	b.n	80050fc <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 80050f6:	2001      	movs	r0, #1
 80050f8:	f000 f8d8 	bl	80052ac <HAL_Delay>
	while(w25qxx.Lock==1)
 80050fc:	4b24      	ldr	r3, [pc, #144]	; (8005190 <W25qxx_ReadBytes+0xa8>)
 80050fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005102:	2b01      	cmp	r3, #1
 8005104:	d0f7      	beq.n	80050f6 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8005106:	4b22      	ldr	r3, [pc, #136]	; (8005190 <W25qxx_ReadBytes+0xa8>)
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800510e:	2200      	movs	r2, #0
 8005110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005114:	481f      	ldr	r0, [pc, #124]	; (8005194 <W25qxx_ReadBytes+0xac>)
 8005116:	f000 fc68 	bl	80059ea <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 800511a:	200b      	movs	r0, #11
 800511c:	f7ff fe4e 	bl	8004dbc <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8005120:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <W25qxx_ReadBytes+0xa8>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d905      	bls.n	8005134 <W25qxx_ReadBytes+0x4c>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	0e1b      	lsrs	r3, r3, #24
 800512c:	b2db      	uxtb	r3, r3
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fe44 	bl	8004dbc <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	0c1b      	lsrs	r3, r3, #16
 8005138:	b2db      	uxtb	r3, r3
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff fe3e 	bl	8004dbc <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	b2db      	uxtb	r3, r3
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fe38 	bl	8004dbc <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fe33 	bl	8004dbc <W25qxx_Spi>
	W25qxx_Spi(0);
 8005156:	2000      	movs	r0, #0
 8005158:	f7ff fe30 	bl	8004dbc <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	b29a      	uxth	r2, r3
 8005160:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005164:	68f9      	ldr	r1, [r7, #12]
 8005166:	480c      	ldr	r0, [pc, #48]	; (8005198 <W25qxx_ReadBytes+0xb0>)
 8005168:	f001 fa32 	bl	80065d0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800516c:	2201      	movs	r2, #1
 800516e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005172:	4808      	ldr	r0, [pc, #32]	; (8005194 <W25qxx_ReadBytes+0xac>)
 8005174:	f000 fc39 	bl	80059ea <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8005178:	2001      	movs	r0, #1
 800517a:	f000 f897 	bl	80052ac <HAL_Delay>
	w25qxx.Lock=0;
 800517e:	4b04      	ldr	r3, [pc, #16]	; (8005190 <W25qxx_ReadBytes+0xa8>)
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000a98 	.word	0x20000a98
 8005194:	40011000 	.word	0x40011000
 8005198:	20000894 	.word	0x20000894

0800519c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800519c:	480c      	ldr	r0, [pc, #48]	; (80051d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800519e:	490d      	ldr	r1, [pc, #52]	; (80051d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80051a0:	4a0d      	ldr	r2, [pc, #52]	; (80051d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80051a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051a4:	e002      	b.n	80051ac <LoopCopyDataInit>

080051a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051aa:	3304      	adds	r3, #4

080051ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051b0:	d3f9      	bcc.n	80051a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051b2:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80051b4:	4c0a      	ldr	r4, [pc, #40]	; (80051e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80051b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051b8:	e001      	b.n	80051be <LoopFillZerobss>

080051ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051bc:	3204      	adds	r2, #4

080051be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051c0:	d3fb      	bcc.n	80051ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80051c2:	f7fd fed4 	bl	8002f6e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051c6:	f001 fe8b 	bl	8006ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80051ca:	f7fb fd25 	bl	8000c18 <main>
  bx lr
 80051ce:	4770      	bx	lr
  ldr r0, =_sdata
 80051d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051d4:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80051d8:	08009274 	.word	0x08009274
  ldr r2, =_sbss
 80051dc:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80051e0:	20000ac4 	.word	0x20000ac4

080051e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051e4:	e7fe      	b.n	80051e4 <ADC1_2_IRQHandler>
	...

080051e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <HAL_Init+0x28>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a07      	ldr	r2, [pc, #28]	; (8005210 <HAL_Init+0x28>)
 80051f2:	f043 0310 	orr.w	r3, r3, #16
 80051f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051f8:	2003      	movs	r0, #3
 80051fa:	f000 fa27 	bl	800564c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051fe:	200f      	movs	r0, #15
 8005200:	f000 f808 	bl	8005214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005204:	f7fd fd76 	bl	8002cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40022000 	.word	0x40022000

08005214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <HAL_InitTick+0x54>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b12      	ldr	r3, [pc, #72]	; (800526c <HAL_InitTick+0x58>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	4619      	mov	r1, r3
 8005226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800522a:	fbb3 f3f1 	udiv	r3, r3, r1
 800522e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fa31 	bl	800569a <HAL_SYSTICK_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e00e      	b.n	8005260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b0f      	cmp	r3, #15
 8005246:	d80a      	bhi.n	800525e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005248:	2200      	movs	r2, #0
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	f000 fa07 	bl	8005662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005254:	4a06      	ldr	r2, [pc, #24]	; (8005270 <HAL_InitTick+0x5c>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000038 	.word	0x20000038
 800526c:	20000040 	.word	0x20000040
 8005270:	2000003c 	.word	0x2000003c

08005274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_IncTick+0x1c>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_IncTick+0x20>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4413      	add	r3, r2
 8005284:	4a03      	ldr	r2, [pc, #12]	; (8005294 <HAL_IncTick+0x20>)
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	20000040 	.word	0x20000040
 8005294:	20000ac0 	.word	0x20000ac0

08005298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  return uwTick;
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <HAL_GetTick+0x10>)
 800529e:	681b      	ldr	r3, [r3, #0]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	20000ac0 	.word	0x20000ac0

080052ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052b4:	f7ff fff0 	bl	8005298 <HAL_GetTick>
 80052b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d005      	beq.n	80052d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_Delay+0x44>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052d2:	bf00      	nop
 80052d4:	f7ff ffe0 	bl	8005298 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d8f7      	bhi.n	80052d4 <HAL_Delay+0x28>
  {
  }
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000040 	.word	0x20000040

080052f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0ed      	b.n	80054e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fd fd20 	bl	8002d58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005328:	f7ff ffb6 	bl	8005298 <HAL_GetTick>
 800532c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800532e:	e012      	b.n	8005356 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005330:	f7ff ffb2 	bl	8005298 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b0a      	cmp	r3, #10
 800533c:	d90b      	bls.n	8005356 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2205      	movs	r2, #5
 800534e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0c5      	b.n	80054e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0e5      	beq.n	8005330 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0202 	bic.w	r2, r2, #2
 8005372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005374:	f7ff ff90 	bl	8005298 <HAL_GetTick>
 8005378:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800537a:	e012      	b.n	80053a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800537c:	f7ff ff8c 	bl	8005298 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b0a      	cmp	r3, #10
 8005388:	d90b      	bls.n	80053a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2205      	movs	r2, #5
 800539a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e09f      	b.n	80054e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	7e1b      	ldrb	r3, [r3, #24]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d108      	bne.n	80053ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e007      	b.n	80053da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7e5b      	ldrb	r3, [r3, #25]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d108      	bne.n	80053f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e007      	b.n	8005404 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	7e9b      	ldrb	r3, [r3, #26]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d108      	bne.n	800541e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0220 	orr.w	r2, r2, #32
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e007      	b.n	800542e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0220 	bic.w	r2, r2, #32
 800542c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	7edb      	ldrb	r3, [r3, #27]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d108      	bne.n	8005448 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0210 	bic.w	r2, r2, #16
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e007      	b.n	8005458 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0210 	orr.w	r2, r2, #16
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	7f1b      	ldrb	r3, [r3, #28]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d108      	bne.n	8005472 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0208 	orr.w	r2, r2, #8
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e007      	b.n	8005482 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0208 	bic.w	r2, r2, #8
 8005480:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	7f5b      	ldrb	r3, [r3, #29]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d108      	bne.n	800549c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0204 	orr.w	r2, r2, #4
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e007      	b.n	80054ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0204 	bic.w	r2, r2, #4
 80054aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	ea42 0103 	orr.w	r1, r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <__NVIC_SetPriorityGrouping+0x44>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005508:	4013      	ands	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800551e:	4a04      	ldr	r2, [pc, #16]	; (8005530 <__NVIC_SetPriorityGrouping+0x44>)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	60d3      	str	r3, [r2, #12]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	e000ed00 	.word	0xe000ed00

08005534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005538:	4b04      	ldr	r3, [pc, #16]	; (800554c <__NVIC_GetPriorityGrouping+0x18>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	f003 0307 	and.w	r3, r3, #7
}
 8005542:	4618      	mov	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	e000ed00 	.word	0xe000ed00

08005550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	6039      	str	r1, [r7, #0]
 800555a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800555c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005560:	2b00      	cmp	r3, #0
 8005562:	db0a      	blt.n	800557a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	490c      	ldr	r1, [pc, #48]	; (800559c <__NVIC_SetPriority+0x4c>)
 800556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556e:	0112      	lsls	r2, r2, #4
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	440b      	add	r3, r1
 8005574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005578:	e00a      	b.n	8005590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	4908      	ldr	r1, [pc, #32]	; (80055a0 <__NVIC_SetPriority+0x50>)
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	3b04      	subs	r3, #4
 8005588:	0112      	lsls	r2, r2, #4
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	440b      	add	r3, r1
 800558e:	761a      	strb	r2, [r3, #24]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	e000e100 	.word	0xe000e100
 80055a0:	e000ed00 	.word	0xe000ed00

080055a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f1c3 0307 	rsb	r3, r3, #7
 80055be:	2b04      	cmp	r3, #4
 80055c0:	bf28      	it	cs
 80055c2:	2304      	movcs	r3, #4
 80055c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3304      	adds	r3, #4
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d902      	bls.n	80055d4 <NVIC_EncodePriority+0x30>
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	3b03      	subs	r3, #3
 80055d2:	e000      	b.n	80055d6 <NVIC_EncodePriority+0x32>
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43da      	mvns	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	401a      	ands	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055ec:	f04f 31ff 	mov.w	r1, #4294967295
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	43d9      	mvns	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055fc:	4313      	orrs	r3, r2
         );
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3724      	adds	r7, #36	; 0x24
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr

08005608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3b01      	subs	r3, #1
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005618:	d301      	bcc.n	800561e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800561a:	2301      	movs	r3, #1
 800561c:	e00f      	b.n	800563e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800561e:	4a0a      	ldr	r2, [pc, #40]	; (8005648 <SysTick_Config+0x40>)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3b01      	subs	r3, #1
 8005624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005626:	210f      	movs	r1, #15
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	f7ff ff90 	bl	8005550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <SysTick_Config+0x40>)
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005636:	4b04      	ldr	r3, [pc, #16]	; (8005648 <SysTick_Config+0x40>)
 8005638:	2207      	movs	r2, #7
 800563a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	e000e010 	.word	0xe000e010

0800564c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff ff49 	bl	80054ec <__NVIC_SetPriorityGrouping>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	4603      	mov	r3, r0
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005674:	f7ff ff5e 	bl	8005534 <__NVIC_GetPriorityGrouping>
 8005678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	6978      	ldr	r0, [r7, #20]
 8005680:	f7ff ff90 	bl	80055a4 <NVIC_EncodePriority>
 8005684:	4602      	mov	r2, r0
 8005686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ff5f 	bl	8005550 <__NVIC_SetPriority>
}
 8005692:	bf00      	nop
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ffb0 	bl	8005608 <SysTick_Config>
 80056a8:	4603      	mov	r3, r0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b08b      	sub	sp, #44	; 0x2c
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056be:	2300      	movs	r3, #0
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80056c2:	2300      	movs	r3, #0
 80056c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056c6:	e169      	b.n	800599c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80056c8:	2201      	movs	r2, #1
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	f040 8158 	bne.w	8005996 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	4a9a      	ldr	r2, [pc, #616]	; (8005954 <HAL_GPIO_Init+0x2a0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d05e      	beq.n	80057ae <HAL_GPIO_Init+0xfa>
 80056f0:	4a98      	ldr	r2, [pc, #608]	; (8005954 <HAL_GPIO_Init+0x2a0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d875      	bhi.n	80057e2 <HAL_GPIO_Init+0x12e>
 80056f6:	4a98      	ldr	r2, [pc, #608]	; (8005958 <HAL_GPIO_Init+0x2a4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d058      	beq.n	80057ae <HAL_GPIO_Init+0xfa>
 80056fc:	4a96      	ldr	r2, [pc, #600]	; (8005958 <HAL_GPIO_Init+0x2a4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d86f      	bhi.n	80057e2 <HAL_GPIO_Init+0x12e>
 8005702:	4a96      	ldr	r2, [pc, #600]	; (800595c <HAL_GPIO_Init+0x2a8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d052      	beq.n	80057ae <HAL_GPIO_Init+0xfa>
 8005708:	4a94      	ldr	r2, [pc, #592]	; (800595c <HAL_GPIO_Init+0x2a8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d869      	bhi.n	80057e2 <HAL_GPIO_Init+0x12e>
 800570e:	4a94      	ldr	r2, [pc, #592]	; (8005960 <HAL_GPIO_Init+0x2ac>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d04c      	beq.n	80057ae <HAL_GPIO_Init+0xfa>
 8005714:	4a92      	ldr	r2, [pc, #584]	; (8005960 <HAL_GPIO_Init+0x2ac>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d863      	bhi.n	80057e2 <HAL_GPIO_Init+0x12e>
 800571a:	4a92      	ldr	r2, [pc, #584]	; (8005964 <HAL_GPIO_Init+0x2b0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d046      	beq.n	80057ae <HAL_GPIO_Init+0xfa>
 8005720:	4a90      	ldr	r2, [pc, #576]	; (8005964 <HAL_GPIO_Init+0x2b0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d85d      	bhi.n	80057e2 <HAL_GPIO_Init+0x12e>
 8005726:	2b12      	cmp	r3, #18
 8005728:	d82a      	bhi.n	8005780 <HAL_GPIO_Init+0xcc>
 800572a:	2b12      	cmp	r3, #18
 800572c:	d859      	bhi.n	80057e2 <HAL_GPIO_Init+0x12e>
 800572e:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <HAL_GPIO_Init+0x80>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	080057af 	.word	0x080057af
 8005738:	08005789 	.word	0x08005789
 800573c:	0800579b 	.word	0x0800579b
 8005740:	080057dd 	.word	0x080057dd
 8005744:	080057e3 	.word	0x080057e3
 8005748:	080057e3 	.word	0x080057e3
 800574c:	080057e3 	.word	0x080057e3
 8005750:	080057e3 	.word	0x080057e3
 8005754:	080057e3 	.word	0x080057e3
 8005758:	080057e3 	.word	0x080057e3
 800575c:	080057e3 	.word	0x080057e3
 8005760:	080057e3 	.word	0x080057e3
 8005764:	080057e3 	.word	0x080057e3
 8005768:	080057e3 	.word	0x080057e3
 800576c:	080057e3 	.word	0x080057e3
 8005770:	080057e3 	.word	0x080057e3
 8005774:	080057e3 	.word	0x080057e3
 8005778:	08005791 	.word	0x08005791
 800577c:	080057a5 	.word	0x080057a5
 8005780:	4a79      	ldr	r2, [pc, #484]	; (8005968 <HAL_GPIO_Init+0x2b4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005786:	e02c      	b.n	80057e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	623b      	str	r3, [r7, #32]
          break;
 800578e:	e029      	b.n	80057e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	3304      	adds	r3, #4
 8005796:	623b      	str	r3, [r7, #32]
          break;
 8005798:	e024      	b.n	80057e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	3308      	adds	r3, #8
 80057a0:	623b      	str	r3, [r7, #32]
          break;
 80057a2:	e01f      	b.n	80057e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	330c      	adds	r3, #12
 80057aa:	623b      	str	r3, [r7, #32]
          break;
 80057ac:	e01a      	b.n	80057e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80057b6:	2304      	movs	r3, #4
 80057b8:	623b      	str	r3, [r7, #32]
          break;
 80057ba:	e013      	b.n	80057e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d105      	bne.n	80057d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057c4:	2308      	movs	r3, #8
 80057c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	611a      	str	r2, [r3, #16]
          break;
 80057ce:	e009      	b.n	80057e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057d0:	2308      	movs	r3, #8
 80057d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	615a      	str	r2, [r3, #20]
          break;
 80057da:	e003      	b.n	80057e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057dc:	2300      	movs	r3, #0
 80057de:	623b      	str	r3, [r7, #32]
          break;
 80057e0:	e000      	b.n	80057e4 <HAL_GPIO_Init+0x130>
          break;
 80057e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2bff      	cmp	r3, #255	; 0xff
 80057e8:	d801      	bhi.n	80057ee <HAL_GPIO_Init+0x13a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	e001      	b.n	80057f2 <HAL_GPIO_Init+0x13e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2bff      	cmp	r3, #255	; 0xff
 80057f8:	d802      	bhi.n	8005800 <HAL_GPIO_Init+0x14c>
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	e002      	b.n	8005806 <HAL_GPIO_Init+0x152>
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	3b08      	subs	r3, #8
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	210f      	movs	r1, #15
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	fa01 f303 	lsl.w	r3, r1, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	401a      	ands	r2, r3
 8005818:	6a39      	ldr	r1, [r7, #32]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	431a      	orrs	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80b1 	beq.w	8005996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005834:	4b4d      	ldr	r3, [pc, #308]	; (800596c <HAL_GPIO_Init+0x2b8>)
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	4a4c      	ldr	r2, [pc, #304]	; (800596c <HAL_GPIO_Init+0x2b8>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6193      	str	r3, [r2, #24]
 8005840:	4b4a      	ldr	r3, [pc, #296]	; (800596c <HAL_GPIO_Init+0x2b8>)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800584c:	4a48      	ldr	r2, [pc, #288]	; (8005970 <HAL_GPIO_Init+0x2bc>)
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	089b      	lsrs	r3, r3, #2
 8005852:	3302      	adds	r3, #2
 8005854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005858:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	220f      	movs	r2, #15
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	43db      	mvns	r3, r3
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4013      	ands	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a40      	ldr	r2, [pc, #256]	; (8005974 <HAL_GPIO_Init+0x2c0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <HAL_GPIO_Init+0x1ec>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3f      	ldr	r2, [pc, #252]	; (8005978 <HAL_GPIO_Init+0x2c4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00d      	beq.n	800589c <HAL_GPIO_Init+0x1e8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3e      	ldr	r2, [pc, #248]	; (800597c <HAL_GPIO_Init+0x2c8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <HAL_GPIO_Init+0x1e4>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3d      	ldr	r2, [pc, #244]	; (8005980 <HAL_GPIO_Init+0x2cc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d101      	bne.n	8005894 <HAL_GPIO_Init+0x1e0>
 8005890:	2303      	movs	r3, #3
 8005892:	e006      	b.n	80058a2 <HAL_GPIO_Init+0x1ee>
 8005894:	2304      	movs	r3, #4
 8005896:	e004      	b.n	80058a2 <HAL_GPIO_Init+0x1ee>
 8005898:	2302      	movs	r3, #2
 800589a:	e002      	b.n	80058a2 <HAL_GPIO_Init+0x1ee>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <HAL_GPIO_Init+0x1ee>
 80058a0:	2300      	movs	r3, #0
 80058a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a4:	f002 0203 	and.w	r2, r2, #3
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	4093      	lsls	r3, r2
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80058b2:	492f      	ldr	r1, [pc, #188]	; (8005970 <HAL_GPIO_Init+0x2bc>)
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	089b      	lsrs	r3, r3, #2
 80058b8:	3302      	adds	r3, #2
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d006      	beq.n	80058da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80058cc:	4b2d      	ldr	r3, [pc, #180]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	492c      	ldr	r1, [pc, #176]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]
 80058d8:	e006      	b.n	80058e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80058da:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	4928      	ldr	r1, [pc, #160]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d006      	beq.n	8005902 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80058f4:	4b23      	ldr	r3, [pc, #140]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	4922      	ldr	r1, [pc, #136]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	604b      	str	r3, [r1, #4]
 8005900:	e006      	b.n	8005910 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005902:	4b20      	ldr	r3, [pc, #128]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	43db      	mvns	r3, r3
 800590a:	491e      	ldr	r1, [pc, #120]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 800590c:	4013      	ands	r3, r2
 800590e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d006      	beq.n	800592a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	4918      	ldr	r1, [pc, #96]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	4313      	orrs	r3, r2
 8005926:	608b      	str	r3, [r1, #8]
 8005928:	e006      	b.n	8005938 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800592a:	4b16      	ldr	r3, [pc, #88]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	43db      	mvns	r3, r3
 8005932:	4914      	ldr	r1, [pc, #80]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 8005934:	4013      	ands	r3, r2
 8005936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d021      	beq.n	8005988 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005944:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	490e      	ldr	r1, [pc, #56]	; (8005984 <HAL_GPIO_Init+0x2d0>)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	4313      	orrs	r3, r2
 800594e:	60cb      	str	r3, [r1, #12]
 8005950:	e021      	b.n	8005996 <HAL_GPIO_Init+0x2e2>
 8005952:	bf00      	nop
 8005954:	10320000 	.word	0x10320000
 8005958:	10310000 	.word	0x10310000
 800595c:	10220000 	.word	0x10220000
 8005960:	10210000 	.word	0x10210000
 8005964:	10120000 	.word	0x10120000
 8005968:	10110000 	.word	0x10110000
 800596c:	40021000 	.word	0x40021000
 8005970:	40010000 	.word	0x40010000
 8005974:	40010800 	.word	0x40010800
 8005978:	40010c00 	.word	0x40010c00
 800597c:	40011000 	.word	0x40011000
 8005980:	40011400 	.word	0x40011400
 8005984:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_GPIO_Init+0x304>)
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	43db      	mvns	r3, r3
 8005990:	4909      	ldr	r1, [pc, #36]	; (80059b8 <HAL_GPIO_Init+0x304>)
 8005992:	4013      	ands	r3, r2
 8005994:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	3301      	adds	r3, #1
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	fa22 f303 	lsr.w	r3, r2, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f47f ae8e 	bne.w	80056c8 <HAL_GPIO_Init+0x14>
  }
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	372c      	adds	r7, #44	; 0x2c
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr
 80059b8:	40010400 	.word	0x40010400

080059bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e001      	b.n	80059de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	807b      	strh	r3, [r7, #2]
 80059f6:	4613      	mov	r3, r2
 80059f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059fa:	787b      	ldrb	r3, [r7, #1]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a00:	887a      	ldrh	r2, [r7, #2]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005a06:	e003      	b.n	8005a10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005a08:	887b      	ldrh	r3, [r7, #2]
 8005a0a:	041a      	lsls	r2, r3, #16
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	611a      	str	r2, [r3, #16]
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e26c      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 8087 	beq.w	8005b4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a3c:	4b92      	ldr	r3, [pc, #584]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 030c 	and.w	r3, r3, #12
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d00c      	beq.n	8005a62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a48:	4b8f      	ldr	r3, [pc, #572]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d112      	bne.n	8005a7a <HAL_RCC_OscConfig+0x5e>
 8005a54:	4b8c      	ldr	r3, [pc, #560]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d10b      	bne.n	8005a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a62:	4b89      	ldr	r3, [pc, #548]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d06c      	beq.n	8005b48 <HAL_RCC_OscConfig+0x12c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d168      	bne.n	8005b48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e246      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a82:	d106      	bne.n	8005a92 <HAL_RCC_OscConfig+0x76>
 8005a84:	4b80      	ldr	r3, [pc, #512]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7f      	ldr	r2, [pc, #508]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e02e      	b.n	8005af0 <HAL_RCC_OscConfig+0xd4>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x98>
 8005a9a:	4b7b      	ldr	r3, [pc, #492]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a7a      	ldr	r2, [pc, #488]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b78      	ldr	r3, [pc, #480]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a77      	ldr	r2, [pc, #476]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e01d      	b.n	8005af0 <HAL_RCC_OscConfig+0xd4>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0xbc>
 8005abe:	4b72      	ldr	r3, [pc, #456]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a71      	ldr	r2, [pc, #452]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	4b6f      	ldr	r3, [pc, #444]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a6e      	ldr	r2, [pc, #440]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCC_OscConfig+0xd4>
 8005ad8:	4b6b      	ldr	r3, [pc, #428]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a6a      	ldr	r2, [pc, #424]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	4b68      	ldr	r3, [pc, #416]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a67      	ldr	r2, [pc, #412]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d013      	beq.n	8005b20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af8:	f7ff fbce 	bl	8005298 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b00:	f7ff fbca 	bl	8005298 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	; 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e1fa      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	4b5d      	ldr	r3, [pc, #372]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0xe4>
 8005b1e:	e014      	b.n	8005b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b20:	f7ff fbba 	bl	8005298 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b28:	f7ff fbb6 	bl	8005298 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	; 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e1e6      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3a:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x10c>
 8005b46:	e000      	b.n	8005b4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d063      	beq.n	8005c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b56:	4b4c      	ldr	r3, [pc, #304]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b62:	4b49      	ldr	r3, [pc, #292]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d11c      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x18c>
 8005b6e:	4b46      	ldr	r3, [pc, #280]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d116      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7a:	4b43      	ldr	r3, [pc, #268]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_RCC_OscConfig+0x176>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e1ba      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b92:	4b3d      	ldr	r3, [pc, #244]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4939      	ldr	r1, [pc, #228]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba6:	e03a      	b.n	8005c1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d020      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb0:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb6:	f7ff fb6f 	bl	8005298 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bbe:	f7ff fb6b 	bl	8005298 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e19b      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd0:	4b2d      	ldr	r3, [pc, #180]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bdc:	4b2a      	ldr	r3, [pc, #168]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4927      	ldr	r1, [pc, #156]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	600b      	str	r3, [r1, #0]
 8005bf0:	e015      	b.n	8005c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf2:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf8:	f7ff fb4e 	bl	8005298 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c00:	f7ff fb4a 	bl	8005298 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e17a      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c12:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d03a      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d019      	beq.n	8005c66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c32:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <HAL_RCC_OscConfig+0x274>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c38:	f7ff fb2e 	bl	8005298 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c40:	f7ff fb2a 	bl	8005298 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e15a      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f000 fad8 	bl	8006214 <RCC_Delay>
 8005c64:	e01c      	b.n	8005ca0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <HAL_RCC_OscConfig+0x274>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6c:	f7ff fb14 	bl	8005298 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c72:	e00f      	b.n	8005c94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c74:	f7ff fb10 	bl	8005298 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d908      	bls.n	8005c94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e140      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
 8005c86:	bf00      	nop
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	42420000 	.word	0x42420000
 8005c90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c94:	4b9e      	ldr	r3, [pc, #632]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e9      	bne.n	8005c74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80a6 	beq.w	8005dfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb2:	4b97      	ldr	r3, [pc, #604]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cbe:	4b94      	ldr	r3, [pc, #592]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	4a93      	ldr	r2, [pc, #588]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	61d3      	str	r3, [r2, #28]
 8005cca:	4b91      	ldr	r3, [pc, #580]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cda:	4b8e      	ldr	r3, [pc, #568]	; (8005f14 <HAL_RCC_OscConfig+0x4f8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d118      	bne.n	8005d18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ce6:	4b8b      	ldr	r3, [pc, #556]	; (8005f14 <HAL_RCC_OscConfig+0x4f8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a8a      	ldr	r2, [pc, #552]	; (8005f14 <HAL_RCC_OscConfig+0x4f8>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cf2:	f7ff fad1 	bl	8005298 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cfa:	f7ff facd 	bl	8005298 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b64      	cmp	r3, #100	; 0x64
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e0fd      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0c:	4b81      	ldr	r3, [pc, #516]	; (8005f14 <HAL_RCC_OscConfig+0x4f8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f0      	beq.n	8005cfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d106      	bne.n	8005d2e <HAL_RCC_OscConfig+0x312>
 8005d20:	4b7b      	ldr	r3, [pc, #492]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	4a7a      	ldr	r2, [pc, #488]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6213      	str	r3, [r2, #32]
 8005d2c:	e02d      	b.n	8005d8a <HAL_RCC_OscConfig+0x36e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <HAL_RCC_OscConfig+0x334>
 8005d36:	4b76      	ldr	r3, [pc, #472]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	4a75      	ldr	r2, [pc, #468]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	6213      	str	r3, [r2, #32]
 8005d42:	4b73      	ldr	r3, [pc, #460]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	4a72      	ldr	r2, [pc, #456]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d48:	f023 0304 	bic.w	r3, r3, #4
 8005d4c:	6213      	str	r3, [r2, #32]
 8005d4e:	e01c      	b.n	8005d8a <HAL_RCC_OscConfig+0x36e>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d10c      	bne.n	8005d72 <HAL_RCC_OscConfig+0x356>
 8005d58:	4b6d      	ldr	r3, [pc, #436]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	4a6c      	ldr	r2, [pc, #432]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d5e:	f043 0304 	orr.w	r3, r3, #4
 8005d62:	6213      	str	r3, [r2, #32]
 8005d64:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	4a69      	ldr	r2, [pc, #420]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6213      	str	r3, [r2, #32]
 8005d70:	e00b      	b.n	8005d8a <HAL_RCC_OscConfig+0x36e>
 8005d72:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4a66      	ldr	r2, [pc, #408]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	6213      	str	r3, [r2, #32]
 8005d7e:	4b64      	ldr	r3, [pc, #400]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4a63      	ldr	r2, [pc, #396]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d92:	f7ff fa81 	bl	8005298 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7ff fa7d 	bl	8005298 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e0ab      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	4b57      	ldr	r3, [pc, #348]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ee      	beq.n	8005d9a <HAL_RCC_OscConfig+0x37e>
 8005dbc:	e014      	b.n	8005de8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dbe:	f7ff fa6b 	bl	8005298 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc4:	e00a      	b.n	8005ddc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc6:	f7ff fa67 	bl	8005298 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e095      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ddc:	4b4c      	ldr	r3, [pc, #304]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ee      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dee:	4b48      	ldr	r3, [pc, #288]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	4a47      	ldr	r2, [pc, #284]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8081 	beq.w	8005f06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e04:	4b42      	ldr	r3, [pc, #264]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 030c 	and.w	r3, r3, #12
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d061      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d146      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e18:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <HAL_RCC_OscConfig+0x4fc>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7ff fa3b 	bl	8005298 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e26:	f7ff fa37 	bl	8005298 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e067      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e38:	4b35      	ldr	r3, [pc, #212]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f0      	bne.n	8005e26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d108      	bne.n	8005e60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e4e:	4b30      	ldr	r3, [pc, #192]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	492d      	ldr	r1, [pc, #180]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e60:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a19      	ldr	r1, [r3, #32]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	430b      	orrs	r3, r1
 8005e72:	4927      	ldr	r1, [pc, #156]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e78:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <HAL_RCC_OscConfig+0x4fc>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7e:	f7ff fa0b 	bl	8005298 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e86:	f7ff fa07 	bl	8005298 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e037      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e98:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCC_OscConfig+0x46a>
 8005ea4:	e02f      	b.n	8005f06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <HAL_RCC_OscConfig+0x4fc>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eac:	f7ff f9f4 	bl	8005298 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb4:	f7ff f9f0 	bl	8005298 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e020      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x498>
 8005ed2:	e018      	b.n	8005f06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e013      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_RCC_OscConfig+0x4f4>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d106      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40007000 	.word	0x40007000
 8005f18:	42420060 	.word	0x42420060

08005f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0d0      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f30:	4b6a      	ldr	r3, [pc, #424]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d910      	bls.n	8005f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b67      	ldr	r3, [pc, #412]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f023 0207 	bic.w	r2, r3, #7
 8005f46:	4965      	ldr	r1, [pc, #404]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4e:	4b63      	ldr	r3, [pc, #396]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0b8      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d020      	beq.n	8005fae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f78:	4b59      	ldr	r3, [pc, #356]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4a58      	ldr	r2, [pc, #352]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f90:	4b53      	ldr	r3, [pc, #332]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4a52      	ldr	r2, [pc, #328]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f9c:	4b50      	ldr	r3, [pc, #320]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	494d      	ldr	r1, [pc, #308]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d040      	beq.n	800603c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	4b47      	ldr	r3, [pc, #284]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d115      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e07f      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d107      	bne.n	8005fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fda:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e073      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fea:	4b3d      	ldr	r3, [pc, #244]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e06b      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ffa:	4b39      	ldr	r3, [pc, #228]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f023 0203 	bic.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4936      	ldr	r1, [pc, #216]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006008:	4313      	orrs	r3, r2
 800600a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800600c:	f7ff f944 	bl	8005298 <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006012:	e00a      	b.n	800602a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006014:	f7ff f940 	bl	8005298 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e053      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602a:	4b2d      	ldr	r3, [pc, #180]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f003 020c 	and.w	r2, r3, #12
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	429a      	cmp	r2, r3
 800603a:	d1eb      	bne.n	8006014 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800603c:	4b27      	ldr	r3, [pc, #156]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d210      	bcs.n	800606c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 0207 	bic.w	r2, r3, #7
 8006052:	4922      	ldr	r1, [pc, #136]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	4313      	orrs	r3, r2
 8006058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605a:	4b20      	ldr	r3, [pc, #128]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d001      	beq.n	800606c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e032      	b.n	80060d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006078:	4b19      	ldr	r3, [pc, #100]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4916      	ldr	r1, [pc, #88]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006086:	4313      	orrs	r3, r2
 8006088:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	490e      	ldr	r1, [pc, #56]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060aa:	f000 f821 	bl	80060f0 <HAL_RCC_GetSysClockFreq>
 80060ae:	4602      	mov	r2, r0
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	490a      	ldr	r1, [pc, #40]	; (80060e4 <HAL_RCC_ClockConfig+0x1c8>)
 80060bc:	5ccb      	ldrb	r3, [r1, r3]
 80060be:	fa22 f303 	lsr.w	r3, r2, r3
 80060c2:	4a09      	ldr	r2, [pc, #36]	; (80060e8 <HAL_RCC_ClockConfig+0x1cc>)
 80060c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <HAL_RCC_ClockConfig+0x1d0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff f8a2 	bl	8005214 <HAL_InitTick>

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40022000 	.word	0x40022000
 80060e0:	40021000 	.word	0x40021000
 80060e4:	080072ac 	.word	0x080072ac
 80060e8:	20000038 	.word	0x20000038
 80060ec:	2000003c 	.word	0x2000003c

080060f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f0:	b490      	push	{r4, r7}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060f6:	4b2a      	ldr	r3, [pc, #168]	; (80061a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80060f8:	1d3c      	adds	r4, r7, #4
 80060fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006100:	f240 2301 	movw	r3, #513	; 0x201
 8006104:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	2300      	movs	r3, #0
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800611a:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b04      	cmp	r3, #4
 8006128:	d002      	beq.n	8006130 <HAL_RCC_GetSysClockFreq+0x40>
 800612a:	2b08      	cmp	r3, #8
 800612c:	d003      	beq.n	8006136 <HAL_RCC_GetSysClockFreq+0x46>
 800612e:	e02d      	b.n	800618c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006130:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006132:	623b      	str	r3, [r7, #32]
      break;
 8006134:	e02d      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	0c9b      	lsrs	r3, r3, #18
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006142:	4413      	add	r3, r2
 8006144:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006148:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d013      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006154:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	0c5b      	lsrs	r3, r3, #17
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006162:	4413      	add	r3, r2
 8006164:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006168:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	4a0e      	ldr	r2, [pc, #56]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800616e:	fb02 f203 	mul.w	r2, r2, r3
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
 800617a:	e004      	b.n	8006186 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4a0b      	ldr	r2, [pc, #44]	; (80061ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006180:	fb02 f303 	mul.w	r3, r2, r3
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	623b      	str	r3, [r7, #32]
      break;
 800618a:	e002      	b.n	8006192 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800618e:	623b      	str	r3, [r7, #32]
      break;
 8006190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006192:	6a3b      	ldr	r3, [r7, #32]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3728      	adds	r7, #40	; 0x28
 8006198:	46bd      	mov	sp, r7
 800619a:	bc90      	pop	{r4, r7}
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	08006fe0 	.word	0x08006fe0
 80061a4:	40021000 	.word	0x40021000
 80061a8:	007a1200 	.word	0x007a1200
 80061ac:	003d0900 	.word	0x003d0900

080061b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061b4:	4b02      	ldr	r3, [pc, #8]	; (80061c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80061b6:	681b      	ldr	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	20000038 	.word	0x20000038

080061c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061c8:	f7ff fff2 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80061cc:	4602      	mov	r2, r0
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	4903      	ldr	r1, [pc, #12]	; (80061e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061da:	5ccb      	ldrb	r3, [r1, r3]
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40021000 	.word	0x40021000
 80061e8:	080072bc 	.word	0x080072bc

080061ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061f0:	f7ff ffde 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80061f4:	4602      	mov	r2, r0
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <HAL_RCC_GetPCLK2Freq+0x20>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	0adb      	lsrs	r3, r3, #11
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	4903      	ldr	r1, [pc, #12]	; (8006210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006202:	5ccb      	ldrb	r3, [r1, r3]
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006208:	4618      	mov	r0, r3
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40021000 	.word	0x40021000
 8006210:	080072bc 	.word	0x080072bc

08006214 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <RCC_Delay+0x34>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a0a      	ldr	r2, [pc, #40]	; (800624c <RCC_Delay+0x38>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	0a5b      	lsrs	r3, r3, #9
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006230:	bf00      	nop
  }
  while (Delay --);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1e5a      	subs	r2, r3, #1
 8006236:	60fa      	str	r2, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f9      	bne.n	8006230 <RCC_Delay+0x1c>
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr
 8006248:	20000038 	.word	0x20000038
 800624c:	10624dd3 	.word	0x10624dd3

08006250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e076      	b.n	8006350 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006272:	d009      	beq.n	8006288 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	61da      	str	r2, [r3, #28]
 800627a:	e005      	b.n	8006288 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fc fda4 	bl	8002df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	ea42 0103 	orr.w	r1, r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	0c1a      	lsrs	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f002 0204 	and.w	r2, r2, #4
 800632e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800633e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_SPI_Transmit+0x22>
 8006376:	2302      	movs	r3, #2
 8006378:	e126      	b.n	80065c8 <HAL_SPI_Transmit+0x270>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006382:	f7fe ff89 	bl	8005298 <HAL_GetTick>
 8006386:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d002      	beq.n	800639e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006398:	2302      	movs	r3, #2
 800639a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800639c:	e10b      	b.n	80065b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_SPI_Transmit+0x52>
 80063a4:	88fb      	ldrh	r3, [r7, #6]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ae:	e102      	b.n	80065b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2203      	movs	r2, #3
 80063b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88fa      	ldrh	r2, [r7, #6]
 80063c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	88fa      	ldrh	r2, [r7, #6]
 80063ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f6:	d10f      	bne.n	8006418 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d007      	beq.n	8006436 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643e:	d14b      	bne.n	80064d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_SPI_Transmit+0xf6>
 8006448:	8afb      	ldrh	r3, [r7, #22]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d13e      	bne.n	80064cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	881a      	ldrh	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	1c9a      	adds	r2, r3, #2
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006472:	e02b      	b.n	80064cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b02      	cmp	r3, #2
 8006480:	d112      	bne.n	80064a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	881a      	ldrh	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	1c9a      	adds	r2, r3, #2
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80064a6:	e011      	b.n	80064cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064a8:	f7fe fef6 	bl	8005298 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d803      	bhi.n	80064c0 <HAL_SPI_Transmit+0x168>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064be:	d102      	bne.n	80064c6 <HAL_SPI_Transmit+0x16e>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064ca:	e074      	b.n	80065b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ce      	bne.n	8006474 <HAL_SPI_Transmit+0x11c>
 80064d6:	e04c      	b.n	8006572 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_SPI_Transmit+0x18e>
 80064e0:	8afb      	ldrh	r3, [r7, #22]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d140      	bne.n	8006568 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800650c:	e02c      	b.n	8006568 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b02      	cmp	r3, #2
 800651a:	d113      	bne.n	8006544 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	86da      	strh	r2, [r3, #54]	; 0x36
 8006542:	e011      	b.n	8006568 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006544:	f7fe fea8 	bl	8005298 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d803      	bhi.n	800655c <HAL_SPI_Transmit+0x204>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d102      	bne.n	8006562 <HAL_SPI_Transmit+0x20a>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006566:	e026      	b.n	80065b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1cd      	bne.n	800650e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fbb8 	bl	8006cec <SPI_EndRxTxTransaction>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	77fb      	strb	r3, [r7, #31]
 80065b2:	e000      	b.n	80065b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ec:	d112      	bne.n	8006614 <HAL_SPI_Receive+0x44>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10e      	bne.n	8006614 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2204      	movs	r2, #4
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f8f1 	bl	80067f2 <HAL_SPI_TransmitReceive>
 8006610:	4603      	mov	r3, r0
 8006612:	e0ea      	b.n	80067ea <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_SPI_Receive+0x52>
 800661e:	2302      	movs	r3, #2
 8006620:	e0e3      	b.n	80067ea <HAL_SPI_Receive+0x21a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800662a:	f7fe fe35 	bl	8005298 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d002      	beq.n	8006642 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800663c:	2302      	movs	r3, #2
 800663e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006640:	e0ca      	b.n	80067d8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_SPI_Receive+0x7e>
 8006648:	88fb      	ldrh	r3, [r7, #6]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006652:	e0c1      	b.n	80067d8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2204      	movs	r2, #4
 8006658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669a:	d10f      	bne.n	80066bc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d007      	beq.n	80066da <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d162      	bne.n	80067a8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066e2:	e02e      	b.n	8006742 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d115      	bne.n	800671e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f103 020c 	add.w	r2, r3, #12
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	7812      	ldrb	r2, [r2, #0]
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800671c:	e011      	b.n	8006742 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800671e:	f7fe fdbb 	bl	8005298 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d803      	bhi.n	8006736 <HAL_SPI_Receive+0x166>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d102      	bne.n	800673c <HAL_SPI_Receive+0x16c>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006740:	e04a      	b.n	80067d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1cb      	bne.n	80066e4 <HAL_SPI_Receive+0x114>
 800674c:	e031      	b.n	80067b2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d113      	bne.n	8006784 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	b292      	uxth	r2, r2
 8006768:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	1c9a      	adds	r2, r3, #2
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006782:	e011      	b.n	80067a8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006784:	f7fe fd88 	bl	8005298 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d803      	bhi.n	800679c <HAL_SPI_Receive+0x1cc>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d102      	bne.n	80067a2 <HAL_SPI_Receive+0x1d2>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067a6:	e017      	b.n	80067d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1cd      	bne.n	800674e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fa46 	bl	8006c48 <SPI_EndRxTransaction>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
 80067d4:	e000      	b.n	80067d8 <HAL_SPI_Receive+0x208>
  }

error :
 80067d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b08c      	sub	sp, #48	; 0x30
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_SPI_TransmitReceive+0x26>
 8006814:	2302      	movs	r3, #2
 8006816:	e18a      	b.n	8006b2e <HAL_SPI_TransmitReceive+0x33c>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006820:	f7fe fd3a 	bl	8005298 <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800682c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006836:	887b      	ldrh	r3, [r7, #2]
 8006838:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800683a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800683e:	2b01      	cmp	r3, #1
 8006840:	d00f      	beq.n	8006862 <HAL_SPI_TransmitReceive+0x70>
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006848:	d107      	bne.n	800685a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <HAL_SPI_TransmitReceive+0x68>
 8006852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006856:	2b04      	cmp	r3, #4
 8006858:	d003      	beq.n	8006862 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800685a:	2302      	movs	r3, #2
 800685c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006860:	e15b      	b.n	8006b1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <HAL_SPI_TransmitReceive+0x82>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_SPI_TransmitReceive+0x82>
 800686e:	887b      	ldrh	r3, [r7, #2]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800687a:	e14e      	b.n	8006b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b04      	cmp	r3, #4
 8006886:	d003      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2205      	movs	r2, #5
 800688c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	887a      	ldrh	r2, [r7, #2]
 80068a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	887a      	ldrh	r2, [r7, #2]
 80068a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	887a      	ldrh	r2, [r7, #2]
 80068b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	887a      	ldrh	r2, [r7, #2]
 80068b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d007      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ec:	d178      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_SPI_TransmitReceive+0x10a>
 80068f6:	8b7b      	ldrh	r3, [r7, #26]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d166      	bne.n	80069ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006900:	881a      	ldrh	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	1c9a      	adds	r2, r3, #2
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006920:	e053      	b.n	80069ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b02      	cmp	r3, #2
 800692e:	d11b      	bne.n	8006968 <HAL_SPI_TransmitReceive+0x176>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d016      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x176>
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d113      	bne.n	8006968 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	881a      	ldrh	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	1c9a      	adds	r2, r3, #2
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b01      	cmp	r3, #1
 8006974:	d119      	bne.n	80069aa <HAL_SPI_TransmitReceive+0x1b8>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d014      	beq.n	80069aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	b292      	uxth	r2, r2
 800698c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	1c9a      	adds	r2, r3, #2
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069a6:	2301      	movs	r3, #1
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069aa:	f7fe fc75 	bl	8005298 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d807      	bhi.n	80069ca <HAL_SPI_TransmitReceive+0x1d8>
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d003      	beq.n	80069ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069c8:	e0a7      	b.n	8006b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1a6      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x130>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1a1      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x130>
 80069de:	e07c      	b.n	8006ada <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_SPI_TransmitReceive+0x1fc>
 80069e8:	8b7b      	ldrh	r3, [r7, #26]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d16b      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	7812      	ldrb	r2, [r2, #0]
 80069fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a14:	e057      	b.n	8006ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d11c      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x26c>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d017      	beq.n	8006a5e <HAL_SPI_TransmitReceive+0x26c>
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d114      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	7812      	ldrb	r2, [r2, #0]
 8006a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d119      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x2ae>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d014      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aa0:	f7fe fbfa 	bl	8005298 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d803      	bhi.n	8006ab8 <HAL_SPI_TransmitReceive+0x2c6>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d102      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x2cc>
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ac4:	e029      	b.n	8006b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1a2      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x224>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d19d      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f904 	bl	8006cec <SPI_EndRxTxTransaction>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d006      	beq.n	8006af8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006af6:	e010      	b.n	8006b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	e000      	b.n	8006b1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3730      	adds	r7, #48	; 0x30
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	4613      	mov	r3, r2
 8006b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b48:	f7fe fba6 	bl	8005298 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	4413      	add	r3, r2
 8006b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b58:	f7fe fb9e 	bl	8005298 <HAL_GetTick>
 8006b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b5e:	4b39      	ldr	r3, [pc, #228]	; (8006c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	015b      	lsls	r3, r3, #5
 8006b64:	0d1b      	lsrs	r3, r3, #20
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	fb02 f303 	mul.w	r3, r2, r3
 8006b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b6e:	e054      	b.n	8006c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d050      	beq.n	8006c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b78:	f7fe fb8e 	bl	8005298 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d902      	bls.n	8006b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d13d      	bne.n	8006c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ba6:	d111      	bne.n	8006bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb0:	d004      	beq.n	8006bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bba:	d107      	bne.n	8006bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd4:	d10f      	bne.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e017      	b.n	8006c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4013      	ands	r3, r2
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d19b      	bne.n	8006b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000038 	.word	0x20000038

08006c48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c5c:	d111      	bne.n	8006c82 <SPI_EndRxTransaction+0x3a>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c66:	d004      	beq.n	8006c72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c70:	d107      	bne.n	8006c82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c80:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c8a:	d117      	bne.n	8006cbc <SPI_EndRxTransaction+0x74>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c94:	d112      	bne.n	8006cbc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7ff ff49 	bl	8006b38 <SPI_WaitFlagStateUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01a      	beq.n	8006ce2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	f043 0220 	orr.w	r2, r3, #32
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e013      	b.n	8006ce4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2180      	movs	r1, #128	; 0x80
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff ff36 	bl	8006b38 <SPI_WaitFlagStateUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd6:	f043 0220 	orr.w	r2, r3, #32
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e000      	b.n	8006ce4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2180      	movs	r1, #128	; 0x80
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff ff18 	bl	8006b38 <SPI_WaitFlagStateUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e000      	b.n	8006d20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e03f      	b.n	8006dba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fc f898 	bl	8002e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2224      	movs	r2, #36	; 0x24
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f829 	bl	8006dc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006dfe:	f023 030c 	bic.w	r3, r3, #12
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6812      	ldr	r2, [r2, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2c      	ldr	r2, [pc, #176]	; (8006ed8 <UART_SetConfig+0x114>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d103      	bne.n	8006e34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e2c:	f7ff f9de 	bl	80061ec <HAL_RCC_GetPCLK2Freq>
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	e002      	b.n	8006e3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7ff f9c6 	bl	80061c4 <HAL_RCC_GetPCLK1Freq>
 8006e38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	009a      	lsls	r2, r3, #2
 8006e44:	441a      	add	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	4a22      	ldr	r2, [pc, #136]	; (8006edc <UART_SetConfig+0x118>)
 8006e52:	fba2 2303 	umull	r2, r3, r2, r3
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	0119      	lsls	r1, r3, #4
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	009a      	lsls	r2, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e70:	4b1a      	ldr	r3, [pc, #104]	; (8006edc <UART_SetConfig+0x118>)
 8006e72:	fba3 0302 	umull	r0, r3, r3, r2
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	2064      	movs	r0, #100	; 0x64
 8006e7a:	fb00 f303 	mul.w	r3, r0, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	3332      	adds	r3, #50	; 0x32
 8006e84:	4a15      	ldr	r2, [pc, #84]	; (8006edc <UART_SetConfig+0x118>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e90:	4419      	add	r1, r3
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009a      	lsls	r2, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <UART_SetConfig+0x118>)
 8006eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	2064      	movs	r0, #100	; 0x64
 8006eb2:	fb00 f303 	mul.w	r3, r0, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	3332      	adds	r3, #50	; 0x32
 8006ebc:	4a07      	ldr	r2, [pc, #28]	; (8006edc <UART_SetConfig+0x118>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	f003 020f 	and.w	r2, r3, #15
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	440a      	add	r2, r1
 8006ece:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40013800 	.word	0x40013800
 8006edc:	51eb851f 	.word	0x51eb851f

08006ee0 <__libc_init_array>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	4d0c      	ldr	r5, [pc, #48]	; (8006f18 <__libc_init_array+0x38>)
 8006ee6:	4c0d      	ldr	r4, [pc, #52]	; (8006f1c <__libc_init_array+0x3c>)
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	42a6      	cmp	r6, r4
 8006eee:	d109      	bne.n	8006f04 <__libc_init_array+0x24>
 8006ef0:	f000 f822 	bl	8006f38 <_init>
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4d0a      	ldr	r5, [pc, #40]	; (8006f20 <__libc_init_array+0x40>)
 8006ef8:	4c0a      	ldr	r4, [pc, #40]	; (8006f24 <__libc_init_array+0x44>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	42a6      	cmp	r6, r4
 8006f00:	d105      	bne.n	8006f0e <__libc_init_array+0x2e>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f08:	4798      	blx	r3
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7ee      	b.n	8006eec <__libc_init_array+0xc>
 8006f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f12:	4798      	blx	r3
 8006f14:	3601      	adds	r6, #1
 8006f16:	e7f2      	b.n	8006efe <__libc_init_array+0x1e>
 8006f18:	0800926c 	.word	0x0800926c
 8006f1c:	0800926c 	.word	0x0800926c
 8006f20:	0800926c 	.word	0x0800926c
 8006f24:	08009270 	.word	0x08009270

08006f28 <memset>:
 8006f28:	4603      	mov	r3, r0
 8006f2a:	4402      	add	r2, r0
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <memset+0xa>
 8006f30:	4770      	bx	lr
 8006f32:	f803 1b01 	strb.w	r1, [r3], #1
 8006f36:	e7f9      	b.n	8006f2c <memset+0x4>

08006f38 <_init>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	bf00      	nop
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr

08006f44 <_fini>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr
