
car_bs_controller_f103c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a800  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000117c  0800a910  0800a910  0001a910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba8c  0800ba8c  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba8c  0800ba8c  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba8c  0800ba8c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba8c  0800ba8c  0001ba8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800ba94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c28  20000058  0800baec  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  0800baec  00020c80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008666f  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d9b  00000000  00000000  000a66f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000034f0  00000000  00000000  000ab490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003318  00000000  00000000  000ae980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b79a  00000000  00000000  000b1c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023340  00000000  00000000  000cd432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a867f  00000000  00000000  000f0772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00198df1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e850  00000000  00000000  00198e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000058 	.word	0x20000058
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a8f8 	.word	0x0800a8f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000005c 	.word	0x2000005c
 800014c:	0800a8f8 	.word	0x0800a8f8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_dmul>:
 8000164:	b570      	push	{r4, r5, r6, lr}
 8000166:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800016a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000172:	bf1d      	ittte	ne
 8000174:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000178:	ea94 0f0c 	teqne	r4, ip
 800017c:	ea95 0f0c 	teqne	r5, ip
 8000180:	f000 f8de 	bleq	8000340 <__aeabi_dmul+0x1dc>
 8000184:	442c      	add	r4, r5
 8000186:	ea81 0603 	eor.w	r6, r1, r3
 800018a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000192:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000196:	bf18      	it	ne
 8000198:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800019c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a4:	d038      	beq.n	8000218 <__aeabi_dmul+0xb4>
 80001a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001aa:	f04f 0500 	mov.w	r5, #0
 80001ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ba:	f04f 0600 	mov.w	r6, #0
 80001be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001c2:	f09c 0f00 	teq	ip, #0
 80001c6:	bf18      	it	ne
 80001c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d8:	d204      	bcs.n	80001e4 <__aeabi_dmul+0x80>
 80001da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001de:	416d      	adcs	r5, r5
 80001e0:	eb46 0606 	adc.w	r6, r6, r6
 80001e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001fc:	bf88      	it	hi
 80001fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000202:	d81e      	bhi.n	8000242 <__aeabi_dmul+0xde>
 8000204:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000208:	bf08      	it	eq
 800020a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020e:	f150 0000 	adcs.w	r0, r0, #0
 8000212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000216:	bd70      	pop	{r4, r5, r6, pc}
 8000218:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800021c:	ea46 0101 	orr.w	r1, r6, r1
 8000220:	ea40 0002 	orr.w	r0, r0, r2
 8000224:	ea81 0103 	eor.w	r1, r1, r3
 8000228:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800022c:	bfc2      	ittt	gt
 800022e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000232:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000236:	bd70      	popgt	{r4, r5, r6, pc}
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f04f 0e00 	mov.w	lr, #0
 8000240:	3c01      	subs	r4, #1
 8000242:	f300 80ab 	bgt.w	800039c <__aeabi_dmul+0x238>
 8000246:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800024a:	bfde      	ittt	le
 800024c:	2000      	movle	r0, #0
 800024e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000252:	bd70      	pople	{r4, r5, r6, pc}
 8000254:	f1c4 0400 	rsb	r4, r4, #0
 8000258:	3c20      	subs	r4, #32
 800025a:	da35      	bge.n	80002c8 <__aeabi_dmul+0x164>
 800025c:	340c      	adds	r4, #12
 800025e:	dc1b      	bgt.n	8000298 <__aeabi_dmul+0x134>
 8000260:	f104 0414 	add.w	r4, r4, #20
 8000264:	f1c4 0520 	rsb	r5, r4, #32
 8000268:	fa00 f305 	lsl.w	r3, r0, r5
 800026c:	fa20 f004 	lsr.w	r0, r0, r4
 8000270:	fa01 f205 	lsl.w	r2, r1, r5
 8000274:	ea40 0002 	orr.w	r0, r0, r2
 8000278:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800027c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000280:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000284:	fa21 f604 	lsr.w	r6, r1, r4
 8000288:	eb42 0106 	adc.w	r1, r2, r6
 800028c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000290:	bf08      	it	eq
 8000292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	f1c4 040c 	rsb	r4, r4, #12
 800029c:	f1c4 0520 	rsb	r5, r4, #32
 80002a0:	fa00 f304 	lsl.w	r3, r0, r4
 80002a4:	fa20 f005 	lsr.w	r0, r0, r5
 80002a8:	fa01 f204 	lsl.w	r2, r1, r4
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b8:	f141 0100 	adc.w	r1, r1, #0
 80002bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002c0:	bf08      	it	eq
 80002c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f205 	lsl.w	r2, r0, r5
 80002d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d4:	fa20 f304 	lsr.w	r3, r0, r4
 80002d8:	fa01 f205 	lsl.w	r2, r1, r5
 80002dc:	ea43 0302 	orr.w	r3, r3, r2
 80002e0:	fa21 f004 	lsr.w	r0, r1, r4
 80002e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	fa21 f204 	lsr.w	r2, r1, r4
 80002ec:	ea20 0002 	bic.w	r0, r0, r2
 80002f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f8:	bf08      	it	eq
 80002fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f094 0f00 	teq	r4, #0
 8000304:	d10f      	bne.n	8000326 <__aeabi_dmul+0x1c2>
 8000306:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800030a:	0040      	lsls	r0, r0, #1
 800030c:	eb41 0101 	adc.w	r1, r1, r1
 8000310:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000314:	bf08      	it	eq
 8000316:	3c01      	subeq	r4, #1
 8000318:	d0f7      	beq.n	800030a <__aeabi_dmul+0x1a6>
 800031a:	ea41 0106 	orr.w	r1, r1, r6
 800031e:	f095 0f00 	teq	r5, #0
 8000322:	bf18      	it	ne
 8000324:	4770      	bxne	lr
 8000326:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	eb43 0303 	adc.w	r3, r3, r3
 8000330:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000334:	bf08      	it	eq
 8000336:	3d01      	subeq	r5, #1
 8000338:	d0f7      	beq.n	800032a <__aeabi_dmul+0x1c6>
 800033a:	ea43 0306 	orr.w	r3, r3, r6
 800033e:	4770      	bx	lr
 8000340:	ea94 0f0c 	teq	r4, ip
 8000344:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000348:	bf18      	it	ne
 800034a:	ea95 0f0c 	teqne	r5, ip
 800034e:	d00c      	beq.n	800036a <__aeabi_dmul+0x206>
 8000350:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000354:	bf18      	it	ne
 8000356:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800035a:	d1d1      	bne.n	8000300 <__aeabi_dmul+0x19c>
 800035c:	ea81 0103 	eor.w	r1, r1, r3
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd70      	pop	{r4, r5, r6, pc}
 800036a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036e:	bf06      	itte	eq
 8000370:	4610      	moveq	r0, r2
 8000372:	4619      	moveq	r1, r3
 8000374:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000378:	d019      	beq.n	80003ae <__aeabi_dmul+0x24a>
 800037a:	ea94 0f0c 	teq	r4, ip
 800037e:	d102      	bne.n	8000386 <__aeabi_dmul+0x222>
 8000380:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000384:	d113      	bne.n	80003ae <__aeabi_dmul+0x24a>
 8000386:	ea95 0f0c 	teq	r5, ip
 800038a:	d105      	bne.n	8000398 <__aeabi_dmul+0x234>
 800038c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000390:	bf1c      	itt	ne
 8000392:	4610      	movne	r0, r2
 8000394:	4619      	movne	r1, r3
 8000396:	d10a      	bne.n	80003ae <__aeabi_dmul+0x24a>
 8000398:	ea81 0103 	eor.w	r1, r1, r3
 800039c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a8:	f04f 0000 	mov.w	r0, #0
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
 80003ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b6:	bd70      	pop	{r4, r5, r6, pc}

080003b8 <__aeabi_drsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	e002      	b.n	80003c4 <__adddf3>
 80003be:	bf00      	nop

080003c0 <__aeabi_dsub>:
 80003c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c4 <__adddf3>:
 80003c4:	b530      	push	{r4, r5, lr}
 80003c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	bf1f      	itttt	ne
 80003da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ea:	f000 80e2 	beq.w	80005b2 <__adddf3+0x1ee>
 80003ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f6:	bfb8      	it	lt
 80003f8:	426d      	neglt	r5, r5
 80003fa:	dd0c      	ble.n	8000416 <__adddf3+0x52>
 80003fc:	442c      	add	r4, r5
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	ea82 0000 	eor.w	r0, r2, r0
 800040a:	ea83 0101 	eor.w	r1, r3, r1
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	2d36      	cmp	r5, #54	; 0x36
 8000418:	bf88      	it	hi
 800041a:	bd30      	pophi	{r4, r5, pc}
 800041c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000420:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000424:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000428:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x70>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000438:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800043c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000440:	d002      	beq.n	8000448 <__adddf3+0x84>
 8000442:	4252      	negs	r2, r2
 8000444:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000448:	ea94 0f05 	teq	r4, r5
 800044c:	f000 80a7 	beq.w	800059e <__adddf3+0x1da>
 8000450:	f1a4 0401 	sub.w	r4, r4, #1
 8000454:	f1d5 0e20 	rsbs	lr, r5, #32
 8000458:	db0d      	blt.n	8000476 <__adddf3+0xb2>
 800045a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045e:	fa22 f205 	lsr.w	r2, r2, r5
 8000462:	1880      	adds	r0, r0, r2
 8000464:	f141 0100 	adc.w	r1, r1, #0
 8000468:	fa03 f20e 	lsl.w	r2, r3, lr
 800046c:	1880      	adds	r0, r0, r2
 800046e:	fa43 f305 	asr.w	r3, r3, r5
 8000472:	4159      	adcs	r1, r3
 8000474:	e00e      	b.n	8000494 <__adddf3+0xd0>
 8000476:	f1a5 0520 	sub.w	r5, r5, #32
 800047a:	f10e 0e20 	add.w	lr, lr, #32
 800047e:	2a01      	cmp	r2, #1
 8000480:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000484:	bf28      	it	cs
 8000486:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	18c0      	adds	r0, r0, r3
 8000490:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	d507      	bpl.n	80004aa <__adddf3+0xe6>
 800049a:	f04f 0e00 	mov.w	lr, #0
 800049e:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ae:	d31b      	bcc.n	80004e8 <__adddf3+0x124>
 80004b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b4:	d30c      	bcc.n	80004d0 <__adddf3+0x10c>
 80004b6:	0849      	lsrs	r1, r1, #1
 80004b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c0:	f104 0401 	add.w	r4, r4, #1
 80004c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004cc:	f080 809a 	bcs.w	8000604 <__adddf3+0x240>
 80004d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d4:	bf08      	it	eq
 80004d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004da:	f150 0000 	adcs.w	r0, r0, #0
 80004de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e2:	ea41 0105 	orr.w	r1, r1, r5
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004ec:	4140      	adcs	r0, r0
 80004ee:	eb41 0101 	adc.w	r1, r1, r1
 80004f2:	3c01      	subs	r4, #1
 80004f4:	bf28      	it	cs
 80004f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004fa:	d2e9      	bcs.n	80004d0 <__adddf3+0x10c>
 80004fc:	f091 0f00 	teq	r1, #0
 8000500:	bf04      	itt	eq
 8000502:	4601      	moveq	r1, r0
 8000504:	2000      	moveq	r0, #0
 8000506:	fab1 f381 	clz	r3, r1
 800050a:	bf08      	it	eq
 800050c:	3320      	addeq	r3, #32
 800050e:	f1a3 030b 	sub.w	r3, r3, #11
 8000512:	f1b3 0220 	subs.w	r2, r3, #32
 8000516:	da0c      	bge.n	8000532 <__adddf3+0x16e>
 8000518:	320c      	adds	r2, #12
 800051a:	dd08      	ble.n	800052e <__adddf3+0x16a>
 800051c:	f102 0c14 	add.w	ip, r2, #20
 8000520:	f1c2 020c 	rsb	r2, r2, #12
 8000524:	fa01 f00c 	lsl.w	r0, r1, ip
 8000528:	fa21 f102 	lsr.w	r1, r1, r2
 800052c:	e00c      	b.n	8000548 <__adddf3+0x184>
 800052e:	f102 0214 	add.w	r2, r2, #20
 8000532:	bfd8      	it	le
 8000534:	f1c2 0c20 	rsble	ip, r2, #32
 8000538:	fa01 f102 	lsl.w	r1, r1, r2
 800053c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000540:	bfdc      	itt	le
 8000542:	ea41 010c 	orrle.w	r1, r1, ip
 8000546:	4090      	lslle	r0, r2
 8000548:	1ae4      	subs	r4, r4, r3
 800054a:	bfa2      	ittt	ge
 800054c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000550:	4329      	orrge	r1, r5
 8000552:	bd30      	popge	{r4, r5, pc}
 8000554:	ea6f 0404 	mvn.w	r4, r4
 8000558:	3c1f      	subs	r4, #31
 800055a:	da1c      	bge.n	8000596 <__adddf3+0x1d2>
 800055c:	340c      	adds	r4, #12
 800055e:	dc0e      	bgt.n	800057e <__adddf3+0x1ba>
 8000560:	f104 0414 	add.w	r4, r4, #20
 8000564:	f1c4 0220 	rsb	r2, r4, #32
 8000568:	fa20 f004 	lsr.w	r0, r0, r4
 800056c:	fa01 f302 	lsl.w	r3, r1, r2
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	fa21 f304 	lsr.w	r3, r1, r4
 8000578:	ea45 0103 	orr.w	r1, r5, r3
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f1c4 040c 	rsb	r4, r4, #12
 8000582:	f1c4 0220 	rsb	r2, r4, #32
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 f304 	lsl.w	r3, r1, r4
 800058e:	ea40 0003 	orr.w	r0, r0, r3
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	fa21 f004 	lsr.w	r0, r1, r4
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	f094 0f00 	teq	r4, #0
 80005a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a6:	bf06      	itte	eq
 80005a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ac:	3401      	addeq	r4, #1
 80005ae:	3d01      	subne	r5, #1
 80005b0:	e74e      	b.n	8000450 <__adddf3+0x8c>
 80005b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b6:	bf18      	it	ne
 80005b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005bc:	d029      	beq.n	8000612 <__adddf3+0x24e>
 80005be:	ea94 0f05 	teq	r4, r5
 80005c2:	bf08      	it	eq
 80005c4:	ea90 0f02 	teqeq	r0, r2
 80005c8:	d005      	beq.n	80005d6 <__adddf3+0x212>
 80005ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ce:	bf04      	itt	eq
 80005d0:	4619      	moveq	r1, r3
 80005d2:	4610      	moveq	r0, r2
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	ea91 0f03 	teq	r1, r3
 80005da:	bf1e      	ittt	ne
 80005dc:	2100      	movne	r1, #0
 80005de:	2000      	movne	r0, #0
 80005e0:	bd30      	popne	{r4, r5, pc}
 80005e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e6:	d105      	bne.n	80005f4 <__adddf3+0x230>
 80005e8:	0040      	lsls	r0, r0, #1
 80005ea:	4149      	adcs	r1, r1
 80005ec:	bf28      	it	cs
 80005ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f8:	bf3c      	itt	cc
 80005fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fe:	bd30      	popcc	{r4, r5, pc}
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800060c:	f04f 0000 	mov.w	r0, #0
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000616:	bf1a      	itte	ne
 8000618:	4619      	movne	r1, r3
 800061a:	4610      	movne	r0, r2
 800061c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000620:	bf1c      	itt	ne
 8000622:	460b      	movne	r3, r1
 8000624:	4602      	movne	r2, r0
 8000626:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062a:	bf06      	itte	eq
 800062c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000630:	ea91 0f03 	teqeq	r1, r3
 8000634:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop

0800063c <__aeabi_ui2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f04f 0500 	mov.w	r5, #0
 8000654:	f04f 0100 	mov.w	r1, #0
 8000658:	e750      	b.n	80004fc <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_i2d>:
 800065c:	f090 0f00 	teq	r0, #0
 8000660:	bf04      	itt	eq
 8000662:	2100      	moveq	r1, #0
 8000664:	4770      	bxeq	lr
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000670:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000674:	bf48      	it	mi
 8000676:	4240      	negmi	r0, r0
 8000678:	f04f 0100 	mov.w	r1, #0
 800067c:	e73e      	b.n	80004fc <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_f2d>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000686:	ea4f 0131 	mov.w	r1, r1, rrx
 800068a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068e:	bf1f      	itttt	ne
 8000690:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000694:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000698:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800069c:	4770      	bxne	lr
 800069e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006a2:	bf08      	it	eq
 80006a4:	4770      	bxeq	lr
 80006a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006aa:	bf04      	itt	eq
 80006ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	e71c      	b.n	80004fc <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_ul2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	e00a      	b.n	80006ea <__aeabi_l2d+0x16>

080006d4 <__aeabi_l2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006e2:	d502      	bpl.n	80006ea <__aeabi_l2d+0x16>
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f6:	f43f aed8 	beq.w	80004aa <__adddf3+0xe6>
 80006fa:	f04f 0203 	mov.w	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000712:	f1c2 0320 	rsb	r3, r2, #32
 8000716:	fa00 fc03 	lsl.w	ip, r0, r3
 800071a:	fa20 f002 	lsr.w	r0, r0, r2
 800071e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000722:	ea40 000e 	orr.w	r0, r0, lr
 8000726:	fa21 f102 	lsr.w	r1, r1, r2
 800072a:	4414      	add	r4, r2
 800072c:	e6bd      	b.n	80004aa <__adddf3+0xe6>
 800072e:	bf00      	nop

08000730 <__gedf2>:
 8000730:	f04f 3cff 	mov.w	ip, #4294967295
 8000734:	e006      	b.n	8000744 <__cmpdf2+0x4>
 8000736:	bf00      	nop

08000738 <__ledf2>:
 8000738:	f04f 0c01 	mov.w	ip, #1
 800073c:	e002      	b.n	8000744 <__cmpdf2+0x4>
 800073e:	bf00      	nop

08000740 <__cmpdf2>:
 8000740:	f04f 0c01 	mov.w	ip, #1
 8000744:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000748:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800074c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000750:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800075a:	d01b      	beq.n	8000794 <__cmpdf2+0x54>
 800075c:	b001      	add	sp, #4
 800075e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000762:	bf0c      	ite	eq
 8000764:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000768:	ea91 0f03 	teqne	r1, r3
 800076c:	bf02      	ittt	eq
 800076e:	ea90 0f02 	teqeq	r0, r2
 8000772:	2000      	moveq	r0, #0
 8000774:	4770      	bxeq	lr
 8000776:	f110 0f00 	cmn.w	r0, #0
 800077a:	ea91 0f03 	teq	r1, r3
 800077e:	bf58      	it	pl
 8000780:	4299      	cmppl	r1, r3
 8000782:	bf08      	it	eq
 8000784:	4290      	cmpeq	r0, r2
 8000786:	bf2c      	ite	cs
 8000788:	17d8      	asrcs	r0, r3, #31
 800078a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800078e:	f040 0001 	orr.w	r0, r0, #1
 8000792:	4770      	bx	lr
 8000794:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000798:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800079c:	d102      	bne.n	80007a4 <__cmpdf2+0x64>
 800079e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007a2:	d107      	bne.n	80007b4 <__cmpdf2+0x74>
 80007a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007ac:	d1d6      	bne.n	800075c <__cmpdf2+0x1c>
 80007ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007b2:	d0d3      	beq.n	800075c <__cmpdf2+0x1c>
 80007b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_cdrcmple>:
 80007bc:	4684      	mov	ip, r0
 80007be:	4610      	mov	r0, r2
 80007c0:	4662      	mov	r2, ip
 80007c2:	468c      	mov	ip, r1
 80007c4:	4619      	mov	r1, r3
 80007c6:	4663      	mov	r3, ip
 80007c8:	e000      	b.n	80007cc <__aeabi_cdcmpeq>
 80007ca:	bf00      	nop

080007cc <__aeabi_cdcmpeq>:
 80007cc:	b501      	push	{r0, lr}
 80007ce:	f7ff ffb7 	bl	8000740 <__cmpdf2>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	bf48      	it	mi
 80007d6:	f110 0f00 	cmnmi.w	r0, #0
 80007da:	bd01      	pop	{r0, pc}

080007dc <__aeabi_dcmpeq>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff fff4 	bl	80007cc <__aeabi_cdcmpeq>
 80007e4:	bf0c      	ite	eq
 80007e6:	2001      	moveq	r0, #1
 80007e8:	2000      	movne	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmplt>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffea 	bl	80007cc <__aeabi_cdcmpeq>
 80007f8:	bf34      	ite	cc
 80007fa:	2001      	movcc	r0, #1
 80007fc:	2000      	movcs	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmple>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffe0 	bl	80007cc <__aeabi_cdcmpeq>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpge>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffce 	bl	80007bc <__aeabi_cdrcmple>
 8000820:	bf94      	ite	ls
 8000822:	2001      	movls	r0, #1
 8000824:	2000      	movhi	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_dcmpgt>:
 800082c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000830:	f7ff ffc4 	bl	80007bc <__aeabi_cdrcmple>
 8000834:	bf34      	ite	cc
 8000836:	2001      	movcc	r0, #1
 8000838:	2000      	movcs	r0, #0
 800083a:	f85d fb08 	ldr.w	pc, [sp], #8
 800083e:	bf00      	nop

08000840 <__aeabi_d2f>:
 8000840:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000844:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000848:	bf24      	itt	cs
 800084a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000852:	d90d      	bls.n	8000870 <__aeabi_d2f+0x30>
 8000854:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000858:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800085c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000860:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000864:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000868:	bf08      	it	eq
 800086a:	f020 0001 	biceq.w	r0, r0, #1
 800086e:	4770      	bx	lr
 8000870:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000874:	d121      	bne.n	80008ba <__aeabi_d2f+0x7a>
 8000876:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800087a:	bfbc      	itt	lt
 800087c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000880:	4770      	bxlt	lr
 8000882:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000886:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800088a:	f1c2 0218 	rsb	r2, r2, #24
 800088e:	f1c2 0c20 	rsb	ip, r2, #32
 8000892:	fa10 f30c 	lsls.w	r3, r0, ip
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	bf18      	it	ne
 800089c:	f040 0001 	orrne.w	r0, r0, #1
 80008a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008ac:	ea40 000c 	orr.w	r0, r0, ip
 80008b0:	fa23 f302 	lsr.w	r3, r3, r2
 80008b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b8:	e7cc      	b.n	8000854 <__aeabi_d2f+0x14>
 80008ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008be:	d107      	bne.n	80008d0 <__aeabi_d2f+0x90>
 80008c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c4:	bf1e      	ittt	ne
 80008c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ce:	4770      	bxne	lr
 80008d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <__aeabi_frsub>:
 80008e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008e4:	e002      	b.n	80008ec <__addsf3>
 80008e6:	bf00      	nop

080008e8 <__aeabi_fsub>:
 80008e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008ec <__addsf3>:
 80008ec:	0042      	lsls	r2, r0, #1
 80008ee:	bf1f      	itttt	ne
 80008f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008f4:	ea92 0f03 	teqne	r2, r3
 80008f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000900:	d06a      	beq.n	80009d8 <__addsf3+0xec>
 8000902:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000906:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800090a:	bfc1      	itttt	gt
 800090c:	18d2      	addgt	r2, r2, r3
 800090e:	4041      	eorgt	r1, r0
 8000910:	4048      	eorgt	r0, r1
 8000912:	4041      	eorgt	r1, r0
 8000914:	bfb8      	it	lt
 8000916:	425b      	neglt	r3, r3
 8000918:	2b19      	cmp	r3, #25
 800091a:	bf88      	it	hi
 800091c:	4770      	bxhi	lr
 800091e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000922:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000926:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800092a:	bf18      	it	ne
 800092c:	4240      	negne	r0, r0
 800092e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000932:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000936:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800093a:	bf18      	it	ne
 800093c:	4249      	negne	r1, r1
 800093e:	ea92 0f03 	teq	r2, r3
 8000942:	d03f      	beq.n	80009c4 <__addsf3+0xd8>
 8000944:	f1a2 0201 	sub.w	r2, r2, #1
 8000948:	fa41 fc03 	asr.w	ip, r1, r3
 800094c:	eb10 000c 	adds.w	r0, r0, ip
 8000950:	f1c3 0320 	rsb	r3, r3, #32
 8000954:	fa01 f103 	lsl.w	r1, r1, r3
 8000958:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800095c:	d502      	bpl.n	8000964 <__addsf3+0x78>
 800095e:	4249      	negs	r1, r1
 8000960:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000964:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000968:	d313      	bcc.n	8000992 <__addsf3+0xa6>
 800096a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800096e:	d306      	bcc.n	800097e <__addsf3+0x92>
 8000970:	0840      	lsrs	r0, r0, #1
 8000972:	ea4f 0131 	mov.w	r1, r1, rrx
 8000976:	f102 0201 	add.w	r2, r2, #1
 800097a:	2afe      	cmp	r2, #254	; 0xfe
 800097c:	d251      	bcs.n	8000a22 <__addsf3+0x136>
 800097e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000982:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000986:	bf08      	it	eq
 8000988:	f020 0001 	biceq.w	r0, r0, #1
 800098c:	ea40 0003 	orr.w	r0, r0, r3
 8000990:	4770      	bx	lr
 8000992:	0049      	lsls	r1, r1, #1
 8000994:	eb40 0000 	adc.w	r0, r0, r0
 8000998:	3a01      	subs	r2, #1
 800099a:	bf28      	it	cs
 800099c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009a0:	d2ed      	bcs.n	800097e <__addsf3+0x92>
 80009a2:	fab0 fc80 	clz	ip, r0
 80009a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80009aa:	ebb2 020c 	subs.w	r2, r2, ip
 80009ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80009b2:	bfaa      	itet	ge
 80009b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009b8:	4252      	neglt	r2, r2
 80009ba:	4318      	orrge	r0, r3
 80009bc:	bfbc      	itt	lt
 80009be:	40d0      	lsrlt	r0, r2
 80009c0:	4318      	orrlt	r0, r3
 80009c2:	4770      	bx	lr
 80009c4:	f092 0f00 	teq	r2, #0
 80009c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009cc:	bf06      	itte	eq
 80009ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009d2:	3201      	addeq	r2, #1
 80009d4:	3b01      	subne	r3, #1
 80009d6:	e7b5      	b.n	8000944 <__addsf3+0x58>
 80009d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009e6:	d021      	beq.n	8000a2c <__addsf3+0x140>
 80009e8:	ea92 0f03 	teq	r2, r3
 80009ec:	d004      	beq.n	80009f8 <__addsf3+0x10c>
 80009ee:	f092 0f00 	teq	r2, #0
 80009f2:	bf08      	it	eq
 80009f4:	4608      	moveq	r0, r1
 80009f6:	4770      	bx	lr
 80009f8:	ea90 0f01 	teq	r0, r1
 80009fc:	bf1c      	itt	ne
 80009fe:	2000      	movne	r0, #0
 8000a00:	4770      	bxne	lr
 8000a02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a06:	d104      	bne.n	8000a12 <__addsf3+0x126>
 8000a08:	0040      	lsls	r0, r0, #1
 8000a0a:	bf28      	it	cs
 8000a0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a10:	4770      	bx	lr
 8000a12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a16:	bf3c      	itt	cc
 8000a18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a1c:	4770      	bxcc	lr
 8000a1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a2a:	4770      	bx	lr
 8000a2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a30:	bf16      	itet	ne
 8000a32:	4608      	movne	r0, r1
 8000a34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a38:	4601      	movne	r1, r0
 8000a3a:	0242      	lsls	r2, r0, #9
 8000a3c:	bf06      	itte	eq
 8000a3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a42:	ea90 0f01 	teqeq	r0, r1
 8000a46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_ui2f>:
 8000a4c:	f04f 0300 	mov.w	r3, #0
 8000a50:	e004      	b.n	8000a5c <__aeabi_i2f+0x8>
 8000a52:	bf00      	nop

08000a54 <__aeabi_i2f>:
 8000a54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	bf48      	it	mi
 8000a5a:	4240      	negmi	r0, r0
 8000a5c:	ea5f 0c00 	movs.w	ip, r0
 8000a60:	bf08      	it	eq
 8000a62:	4770      	bxeq	lr
 8000a64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a68:	4601      	mov	r1, r0
 8000a6a:	f04f 0000 	mov.w	r0, #0
 8000a6e:	e01c      	b.n	8000aaa <__aeabi_l2f+0x2a>

08000a70 <__aeabi_ul2f>:
 8000a70:	ea50 0201 	orrs.w	r2, r0, r1
 8000a74:	bf08      	it	eq
 8000a76:	4770      	bxeq	lr
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	e00a      	b.n	8000a94 <__aeabi_l2f+0x14>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_l2f>:
 8000a80:	ea50 0201 	orrs.w	r2, r0, r1
 8000a84:	bf08      	it	eq
 8000a86:	4770      	bxeq	lr
 8000a88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a8c:	d502      	bpl.n	8000a94 <__aeabi_l2f+0x14>
 8000a8e:	4240      	negs	r0, r0
 8000a90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a94:	ea5f 0c01 	movs.w	ip, r1
 8000a98:	bf02      	ittt	eq
 8000a9a:	4684      	moveq	ip, r0
 8000a9c:	4601      	moveq	r1, r0
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000aa4:	bf08      	it	eq
 8000aa6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aae:	fabc f28c 	clz	r2, ip
 8000ab2:	3a08      	subs	r2, #8
 8000ab4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ab8:	db10      	blt.n	8000adc <__aeabi_l2f+0x5c>
 8000aba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000abe:	4463      	add	r3, ip
 8000ac0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ac4:	f1c2 0220 	rsb	r2, r2, #32
 8000ac8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000acc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad0:	eb43 0002 	adc.w	r0, r3, r2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f102 0220 	add.w	r2, r2, #32
 8000ae0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ae4:	f1c2 0220 	rsb	r2, r2, #32
 8000ae8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000aec:	fa21 f202 	lsr.w	r2, r1, r2
 8000af0:	eb43 0002 	adc.w	r0, r3, r2
 8000af4:	bf08      	it	eq
 8000af6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000afa:	4770      	bx	lr

08000afc <__aeabi_fmul>:
 8000afc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b04:	bf1e      	ittt	ne
 8000b06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b0a:	ea92 0f0c 	teqne	r2, ip
 8000b0e:	ea93 0f0c 	teqne	r3, ip
 8000b12:	d06f      	beq.n	8000bf4 <__aeabi_fmul+0xf8>
 8000b14:	441a      	add	r2, r3
 8000b16:	ea80 0c01 	eor.w	ip, r0, r1
 8000b1a:	0240      	lsls	r0, r0, #9
 8000b1c:	bf18      	it	ne
 8000b1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b22:	d01e      	beq.n	8000b62 <__aeabi_fmul+0x66>
 8000b24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b30:	fba0 3101 	umull	r3, r1, r0, r1
 8000b34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b3c:	bf3e      	ittt	cc
 8000b3e:	0049      	lslcc	r1, r1, #1
 8000b40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b44:	005b      	lslcc	r3, r3, #1
 8000b46:	ea40 0001 	orr.w	r0, r0, r1
 8000b4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b4e:	2afd      	cmp	r2, #253	; 0xfd
 8000b50:	d81d      	bhi.n	8000b8e <__aeabi_fmul+0x92>
 8000b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5a:	bf08      	it	eq
 8000b5c:	f020 0001 	biceq.w	r0, r0, #1
 8000b60:	4770      	bx	lr
 8000b62:	f090 0f00 	teq	r0, #0
 8000b66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b6a:	bf08      	it	eq
 8000b6c:	0249      	lsleq	r1, r1, #9
 8000b6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b76:	3a7f      	subs	r2, #127	; 0x7f
 8000b78:	bfc2      	ittt	gt
 8000b7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b82:	4770      	bxgt	lr
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	3a01      	subs	r2, #1
 8000b8e:	dc5d      	bgt.n	8000c4c <__aeabi_fmul+0x150>
 8000b90:	f112 0f19 	cmn.w	r2, #25
 8000b94:	bfdc      	itt	le
 8000b96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b9a:	4770      	bxle	lr
 8000b9c:	f1c2 0200 	rsb	r2, r2, #0
 8000ba0:	0041      	lsls	r1, r0, #1
 8000ba2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ba6:	f1c2 0220 	rsb	r2, r2, #32
 8000baa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bb2:	f140 0000 	adc.w	r0, r0, #0
 8000bb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bba:	bf08      	it	eq
 8000bbc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc0:	4770      	bx	lr
 8000bc2:	f092 0f00 	teq	r2, #0
 8000bc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bca:	bf02      	ittt	eq
 8000bcc:	0040      	lsleq	r0, r0, #1
 8000bce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bd2:	3a01      	subeq	r2, #1
 8000bd4:	d0f9      	beq.n	8000bca <__aeabi_fmul+0xce>
 8000bd6:	ea40 000c 	orr.w	r0, r0, ip
 8000bda:	f093 0f00 	teq	r3, #0
 8000bde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be2:	bf02      	ittt	eq
 8000be4:	0049      	lsleq	r1, r1, #1
 8000be6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bea:	3b01      	subeq	r3, #1
 8000bec:	d0f9      	beq.n	8000be2 <__aeabi_fmul+0xe6>
 8000bee:	ea41 010c 	orr.w	r1, r1, ip
 8000bf2:	e78f      	b.n	8000b14 <__aeabi_fmul+0x18>
 8000bf4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bf8:	ea92 0f0c 	teq	r2, ip
 8000bfc:	bf18      	it	ne
 8000bfe:	ea93 0f0c 	teqne	r3, ip
 8000c02:	d00a      	beq.n	8000c1a <__aeabi_fmul+0x11e>
 8000c04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c08:	bf18      	it	ne
 8000c0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c0e:	d1d8      	bne.n	8000bc2 <__aeabi_fmul+0xc6>
 8000c10:	ea80 0001 	eor.w	r0, r0, r1
 8000c14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	4770      	bx	lr
 8000c1a:	f090 0f00 	teq	r0, #0
 8000c1e:	bf17      	itett	ne
 8000c20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c24:	4608      	moveq	r0, r1
 8000c26:	f091 0f00 	teqne	r1, #0
 8000c2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c2e:	d014      	beq.n	8000c5a <__aeabi_fmul+0x15e>
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d101      	bne.n	8000c3a <__aeabi_fmul+0x13e>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	d10f      	bne.n	8000c5a <__aeabi_fmul+0x15e>
 8000c3a:	ea93 0f0c 	teq	r3, ip
 8000c3e:	d103      	bne.n	8000c48 <__aeabi_fmul+0x14c>
 8000c40:	024b      	lsls	r3, r1, #9
 8000c42:	bf18      	it	ne
 8000c44:	4608      	movne	r0, r1
 8000c46:	d108      	bne.n	8000c5a <__aeabi_fmul+0x15e>
 8000c48:	ea80 0001 	eor.w	r0, r0, r1
 8000c4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c62:	4770      	bx	lr

08000c64 <__aeabi_fdiv>:
 8000c64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c72:	ea92 0f0c 	teqne	r2, ip
 8000c76:	ea93 0f0c 	teqne	r3, ip
 8000c7a:	d069      	beq.n	8000d50 <__aeabi_fdiv+0xec>
 8000c7c:	eba2 0203 	sub.w	r2, r2, r3
 8000c80:	ea80 0c01 	eor.w	ip, r0, r1
 8000c84:	0249      	lsls	r1, r1, #9
 8000c86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c8a:	d037      	beq.n	8000cfc <__aeabi_fdiv+0x98>
 8000c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	bf38      	it	cc
 8000ca0:	005b      	lslcc	r3, r3, #1
 8000ca2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ca6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000caa:	428b      	cmp	r3, r1
 8000cac:	bf24      	itt	cs
 8000cae:	1a5b      	subcs	r3, r3, r1
 8000cb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cb8:	bf24      	itt	cs
 8000cba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cc6:	bf24      	itt	cs
 8000cc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ccc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cd4:	bf24      	itt	cs
 8000cd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	bf18      	it	ne
 8000ce2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ce6:	d1e0      	bne.n	8000caa <__aeabi_fdiv+0x46>
 8000ce8:	2afd      	cmp	r2, #253	; 0xfd
 8000cea:	f63f af50 	bhi.w	8000b8e <__aeabi_fmul+0x92>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf4:	bf08      	it	eq
 8000cf6:	f020 0001 	biceq.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d00:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d04:	327f      	adds	r2, #127	; 0x7f
 8000d06:	bfc2      	ittt	gt
 8000d08:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d0c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d10:	4770      	bxgt	lr
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	3a01      	subs	r2, #1
 8000d1c:	e737      	b.n	8000b8e <__aeabi_fmul+0x92>
 8000d1e:	f092 0f00 	teq	r2, #0
 8000d22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d26:	bf02      	ittt	eq
 8000d28:	0040      	lsleq	r0, r0, #1
 8000d2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d2e:	3a01      	subeq	r2, #1
 8000d30:	d0f9      	beq.n	8000d26 <__aeabi_fdiv+0xc2>
 8000d32:	ea40 000c 	orr.w	r0, r0, ip
 8000d36:	f093 0f00 	teq	r3, #0
 8000d3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d3e:	bf02      	ittt	eq
 8000d40:	0049      	lsleq	r1, r1, #1
 8000d42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d46:	3b01      	subeq	r3, #1
 8000d48:	d0f9      	beq.n	8000d3e <__aeabi_fdiv+0xda>
 8000d4a:	ea41 010c 	orr.w	r1, r1, ip
 8000d4e:	e795      	b.n	8000c7c <__aeabi_fdiv+0x18>
 8000d50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d54:	ea92 0f0c 	teq	r2, ip
 8000d58:	d108      	bne.n	8000d6c <__aeabi_fdiv+0x108>
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	f47f af7d 	bne.w	8000c5a <__aeabi_fmul+0x15e>
 8000d60:	ea93 0f0c 	teq	r3, ip
 8000d64:	f47f af70 	bne.w	8000c48 <__aeabi_fmul+0x14c>
 8000d68:	4608      	mov	r0, r1
 8000d6a:	e776      	b.n	8000c5a <__aeabi_fmul+0x15e>
 8000d6c:	ea93 0f0c 	teq	r3, ip
 8000d70:	d104      	bne.n	8000d7c <__aeabi_fdiv+0x118>
 8000d72:	024b      	lsls	r3, r1, #9
 8000d74:	f43f af4c 	beq.w	8000c10 <__aeabi_fmul+0x114>
 8000d78:	4608      	mov	r0, r1
 8000d7a:	e76e      	b.n	8000c5a <__aeabi_fmul+0x15e>
 8000d7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d80:	bf18      	it	ne
 8000d82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d86:	d1ca      	bne.n	8000d1e <__aeabi_fdiv+0xba>
 8000d88:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d8c:	f47f af5c 	bne.w	8000c48 <__aeabi_fmul+0x14c>
 8000d90:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	f47f af3c 	bne.w	8000c10 <__aeabi_fmul+0x114>
 8000d98:	e75f      	b.n	8000c5a <__aeabi_fmul+0x15e>
 8000d9a:	bf00      	nop

08000d9c <__aeabi_f2iz>:
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000da4:	d30f      	bcc.n	8000dc6 <__aeabi_f2iz+0x2a>
 8000da6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000daa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dae:	d90d      	bls.n	8000dcc <__aeabi_f2iz+0x30>
 8000db0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc0:	bf18      	it	ne
 8000dc2:	4240      	negne	r0, r0
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2iz+0x3a>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d105      	bne.n	8000de2 <__aeabi_f2iz+0x46>
 8000dd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_f2uiz>:
 8000de8:	0042      	lsls	r2, r0, #1
 8000dea:	d20e      	bcs.n	8000e0a <__aeabi_f2uiz+0x22>
 8000dec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000df0:	d30b      	bcc.n	8000e0a <__aeabi_f2uiz+0x22>
 8000df2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000df6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dfa:	d409      	bmi.n	8000e10 <__aeabi_f2uiz+0x28>
 8000dfc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e04:	fa23 f002 	lsr.w	r0, r3, r2
 8000e08:	4770      	bx	lr
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	4770      	bx	lr
 8000e10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e14:	d101      	bne.n	8000e1a <__aeabi_f2uiz+0x32>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	d102      	bne.n	8000e20 <__aeabi_f2uiz+0x38>
 8000e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1e:	4770      	bx	lr
 8000e20:	f04f 0000 	mov.w	r0, #0
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e3a:	b29b      	uxth	r3, r3
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	605a      	str	r2, [r3, #4]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
	...

08000e68 <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <usart_setup+0x60>)
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <usart_setup+0x64>)
 8000e74:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <usart_setup+0x60>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <usart_setup+0x60>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <usart_setup+0x60>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <usart_setup+0x60>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <usart_setup+0x60>)
 8000e90:	220c      	movs	r2, #12
 8000e92:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <usart_setup+0x60>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <usart_setup+0x60>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <usart_setup+0x60>)
 8000ea2:	f009 f8fa 	bl	800a09a <HAL_HalfDuplex_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d000      	beq.n	8000eae <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 8000eac:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <usart_setup+0x60>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <usart_setup+0x60>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 0220 	orr.w	r2, r2, #32
 8000ebc:	60da      	str	r2, [r3, #12]
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000bc4 	.word	0x20000bc4
 8000ecc:	40004800 	.word	0x40004800

08000ed0 <owInit>:

void owInit(OneWire *ow) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b087      	sub	sp, #28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000ee0:	e015      	b.n	8000f0e <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
    k=0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8000ef0:	e007      	b.n	8000f02 <owInit+0x32>
    r[k] = 0;
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	3301      	adds	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	ddf4      	ble.n	8000ef2 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	dde6      	ble.n	8000ee2 <owInit+0x12>
  }
  k=0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8000f18:	e008      	b.n	8000f2c <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4413      	add	r3, r2
 8000f20:	331c      	adds	r3, #28
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b07      	cmp	r3, #7
 8000f30:	ddf3      	ble.n	8000f1a <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	619a      	str	r2, [r3, #24]

}
 8000f38:	bf00      	nop
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
	...

08000f44 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8000f4a:	f000 f850 	bl	8000fee <getUsartIndex>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <owReadHandler+0x70>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d025      	beq.n	8000faa <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <owReadHandler+0x70>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d01f      	beq.n	8000faa <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8000f6a:	bf00      	nop
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <owReadHandler+0x70>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f9      	beq.n	8000f6c <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 8000f78:	79fc      	ldrb	r4, [r7, #7]
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <owReadHandler+0x70>)
 8000f7c:	f7ff ff54 	bl	8000e28 <USART_ReceiveData>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <owReadHandler+0x74>)
 8000f86:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	b25a      	sxtb	r2, r3
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <owReadHandler+0x78>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <owReadHandler+0x78>)
 8000fa8:	701a      	strb	r2, [r3, #0]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40004800 	.word	0x40004800
 8000fb8:	20000928 	.word	0x20000928
 8000fbc:	200008cc 	.word	0x200008cc

08000fc0 <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 8000fc6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000fca:	f7ff ff4d 	bl	8000e68 <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 8000fce:	20f0      	movs	r0, #240	; 0xf0
 8000fd0:	f000 f814 	bl	8000ffc <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 8000fd4:	f000 f850 	bl	8001078 <owEchoRead>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 8000fdc:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000fe0:	f7ff ff42 	bl	8000e68 <usart_setup>
  return owPresence;
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <owSend>:

void owSend(uint16_t data) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 8001006:	f7ff fff2 	bl	8000fee <getUsartIndex>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	2301      	movs	r3, #1
 8001010:	4093      	lsls	r3, r2
 8001012:	b25a      	sxtb	r2, r3
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <owSend+0x50>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	b25b      	sxtb	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b25b      	sxtb	r3, r3
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <owSend+0x50>)
 8001024:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	4619      	mov	r1, r3
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <owSend+0x54>)
 800102c:	f7ff ff0b 	bl	8000e46 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 8001030:	bf00      	nop
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <owSend+0x58>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103c:	2b40      	cmp	r3, #64	; 0x40
 800103e:	d1f8      	bne.n	8001032 <owSend+0x36>
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200008cc 	.word	0x200008cc
 8001050:	40004800 	.word	0x40004800
 8001054:	20000bc4 	.word	0x20000bc4

08001058 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	2bff      	cmp	r3, #255	; 0xff
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <owEchoRead>:

uint16_t owEchoRead() {//
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 800107e:	f7ff ffb6 	bl	8000fee <getUsartIndex>
 8001082:	4603      	mov	r3, r0
 8001084:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 800108c:	bf00      	nop
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <owEchoRead+0x48>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	fa42 f303 	asr.w	r3, r2, r3
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <owEchoRead+0x36>
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	1e5a      	subs	r2, r3, #1
 80010a8:	80fa      	strh	r2, [r7, #6]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1ef      	bne.n	800108e <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 80010ae:	797b      	ldrb	r3, [r7, #5]
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <owEchoRead+0x4c>)
 80010b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b6:	b29b      	uxth	r3, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200008cc 	.word	0x200008cc
 80010c4:	20000928 	.word	0x20000928

080010c8 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e014      	b.n	8001104 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e002      	b.n	80010f2 <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b07      	cmp	r3, #7
 8001108:	d9e7      	bls.n	80010da <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 800110a:	683b      	ldr	r3, [r7, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 8001120:	f107 020c 	add.w	r2, r7, #12
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffcd 	bl	80010c8 <byteToBits>
  for (i = 0; i < 8; ++i) {
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e00b      	b.n	800114c <owSendByte+0x36>
    owSend(data[i]);
 8001134:	f107 020c 	add.w	r2, r7, #12
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5b 	bl	8000ffc <owSend>
  for (i = 0; i < 8; ++i) {
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b07      	cmp	r3, #7
 8001150:	ddf0      	ble.n	8001134 <owSendByte+0x1e>
  }
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	733b      	strb	r3, [r7, #12]
  crc = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e018      	b.n	80011b2 <owCRC+0x56>
      fb = crc ^ dat;
 8001180:	7b7a      	ldrb	r2, [r7, #13]
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	4053      	eors	r3, r2
 8001186:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8001190:	7b7b      	ldrb	r3, [r7, #13]
 8001192:	085b      	lsrs	r3, r3, #1
 8001194:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	085b      	lsrs	r3, r3, #1
 800119a:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 800119c:	7afb      	ldrb	r3, [r7, #11]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d104      	bne.n	80011ac <owCRC+0x50>
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80011a8:	43db      	mvns	r3, r3
 80011aa:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	3301      	adds	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2b07      	cmp	r3, #7
 80011b6:	d9e3      	bls.n	8001180 <owCRC+0x24>
    }
    st_byt++;
 80011b8:	7b3b      	ldrb	r3, [r7, #12]
 80011ba:	3301      	adds	r3, #1
 80011bc:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 80011be:	7b3a      	ldrb	r2, [r7, #12]
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3d4      	bcc.n	8001170 <owCRC+0x14>
  return crc;
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 80011da:	2107      	movs	r1, #7
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffbd 	bl	800115c <owCRC>
 80011e2:	4603      	mov	r3, r0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8001204:	f7ff fedc 	bl	8000fc0 <owResetCmd>
 8001208:	4603      	mov	r3, r0
 800120a:	2bf0      	cmp	r3, #240	; 0xf0
 800120c:	d101      	bne.n	8001212 <hasNextRom+0x26>
    return 0;
 800120e:	2300      	movs	r3, #0
 8001210:	e097      	b.n	8001342 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8001212:	20f0      	movs	r0, #240	; 0xf0
 8001214:	f7ff ff7f 	bl	8001116 <owSendByte>
  do {
		uint8_t answerBit =0;
 8001218:	2300      	movs	r3, #0
 800121a:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 800121c:	7ffb      	ldrb	r3, [r7, #31]
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	4413      	add	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 8001230:	20ff      	movs	r0, #255	; 0xff
 8001232:	f7ff fee3 	bl	8000ffc <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8001236:	f7ff ff1f 	bl	8001078 <owEchoRead>
 800123a:	4603      	mov	r3, r0
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff0b 	bl	8001058 <owReadSlot>
 8001242:	4603      	mov	r3, r0
 8001244:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8001246:	20ff      	movs	r0, #255	; 0xff
 8001248:	f7ff fed8 	bl	8000ffc <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 800124c:	f7ff ff14 	bl	8001078 <owEchoRead>
 8001250:	4603      	mov	r3, r0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff00 	bl	8001058 <owReadSlot>
 8001258:	4603      	mov	r3, r0
 800125a:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 800125c:	7afa      	ldrb	r2, [r7, #11]
 800125e:	7abb      	ldrb	r3, [r7, #10]
 8001260:	429a      	cmp	r2, r3
 8001262:	d105      	bne.n	8001270 <hasNextRom+0x84>
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d102      	bne.n	8001270 <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	e068      	b.n	8001342 <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 8001270:	7afa      	ldrb	r2, [r7, #11]
 8001272:	7abb      	ldrb	r3, [r7, #10]
 8001274:	429a      	cmp	r2, r3
 8001276:	d002      	beq.n	800127e <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8001278:	7afb      	ldrb	r3, [r7, #11]
 800127a:	75bb      	strb	r3, [r7, #22]
 800127c:	e023      	b.n	80012c6 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 800127e:	7ffa      	ldrb	r2, [r7, #31]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	429a      	cmp	r2, r3
 8001286:	d102      	bne.n	800128e <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 8001288:	2301      	movs	r3, #1
 800128a:	75bb      	strb	r3, [r7, #22]
 800128c:	e01b      	b.n	80012c6 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 800128e:	7ffa      	ldrb	r2, [r7, #31]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	429a      	cmp	r2, r3
 8001296:	dd02      	ble.n	800129e <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 8001298:	2300      	movs	r3, #0
 800129a:	75bb      	strb	r3, [r7, #22]
 800129c:	e00e      	b.n	80012bc <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4413      	add	r3, r2
 80012a4:	331c      	adds	r3, #28
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	fa42 f303 	asr.w	r3, r2, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80012bc:	7dbb      	ldrb	r3, [r7, #22]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 80012c6:	7dbb      	ldrb	r3, [r7, #22]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00e      	beq.n	80012ea <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	7ffb      	ldrb	r3, [r7, #31]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	2101      	movs	r1, #1
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 80012ea:	7dbb      	ldrb	r3, [r7, #22]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <hasNextRom+0x108>
 80012f0:	2300      	movs	r3, #0
 80012f2:	e000      	b.n	80012f6 <hasNextRom+0x10a>
 80012f4:	23ff      	movs	r3, #255	; 0xff
 80012f6:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 80012f8:	7d7b      	ldrb	r3, [r7, #21]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe7d 	bl	8000ffc <owSend>
    ui32BitNumber++;//ищем следующий бит
 8001302:	7ffb      	ldrb	r3, [r7, #31]
 8001304:	3301      	adds	r3, #1
 8001306:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	2b3f      	cmp	r3, #63	; 0x3f
 800130c:	d984      	bls.n	8001218 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	619a      	str	r2, [r3, #24]
  for (; i < 7; i++)
 8001314:	e00b      	b.n	800132e <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	441a      	add	r2, r3
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	7811      	ldrb	r1, [r2, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	460a      	mov	r2, r1
 8001326:	771a      	strb	r2, [r3, #28]
  for (; i < 7; i++)
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	3301      	adds	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2b06      	cmp	r3, #6
 8001332:	d9f0      	bls.n	8001316 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	bfcc      	ite	gt
 800133c:	2301      	movgt	r3, #1
 800133e:	2300      	movle	r3, #0
 8001340:	b2db      	uxtb	r3, r3
}
 8001342:	4618      	mov	r0, r3
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <owSearchCmd>:

//Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fdba 	bl	8000ed0 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff40 	bl	80011ec <hasNextRom>
 800136c:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da02      	bge.n	800137a <owSearchCmd+0x30>
      return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	e009      	b.n	800138e <owSearchCmd+0x44>
    device++;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <owSearchCmd+0x42>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b02      	cmp	r3, #2
 800138a:	dde7      	ble.n	800135c <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	int i = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 80013a2:	f7ff fe0d 	bl	8000fc0 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 80013a6:	2055      	movs	r0, #85	; 0x55
 80013a8:	f7ff feb5 	bl	8001116 <owSendByte>
  for (; i < 8; i++)
 80013ac:	e009      	b.n	80013c2 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fead 	bl	8001116 <owSendByte>
  for (; i < 8; i++)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	ddf2      	ble.n	80013ae <owMatchRomCmd+0x18>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f7ff ffda 	bl	8001396 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 80013e2:	2044      	movs	r0, #68	; 0x44
 80013e4:	f7ff fe97 	bl	8001116 <owSendByte>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 80013fc:	2300      	movs	r3, #0
 80013fe:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d001      	beq.n	800140c <owReadScratchpadCmd+0x1c>
 8001408:	2b28      	cmp	r3, #40	; 0x28
 800140a:	d109      	bne.n	8001420 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 800140c:	2348      	movs	r3, #72	; 0x48
 800140e:	82bb      	strh	r3, [r7, #20]
      break;
 8001410:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f7ff ffbf 	bl	8001396 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8001418:	20be      	movs	r0, #190	; 0xbe
 800141a:	f7ff fe7c 	bl	8001116 <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 800141e:	e048      	b.n	80014b2 <owReadScratchpadCmd+0xc2>
      return data;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	e04b      	b.n	80014bc <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 8001424:	8abb      	ldrh	r3, [r7, #20]
 8001426:	3b08      	subs	r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	da00      	bge.n	800142e <owReadScratchpadCmd+0x3e>
 800142c:	3307      	adds	r3, #7
 800142e:	10db      	asrs	r3, r3, #3
 8001430:	b2da      	uxtb	r2, r3
 8001432:	8afb      	ldrh	r3, [r7, #22]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	b29b      	uxth	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 800143e:	20ff      	movs	r0, #255	; 0xff
 8001440:	f7ff fddc 	bl	8000ffc <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8001444:	f7ff fe18 	bl	8001078 <owEchoRead>
 8001448:	4603      	mov	r3, r0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fe04 	bl	8001058 <owReadSlot>
 8001450:	4603      	mov	r3, r0
 8001452:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8001454:	7cbb      	ldrb	r3, [r7, #18]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d113      	bne.n	8001482 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 800145a:	7cfb      	ldrb	r3, [r7, #19]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b25a      	sxtb	r2, r3
 8001464:	8afb      	ldrh	r3, [r7, #22]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	b25b      	sxtb	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b259      	sxtb	r1, r3
 8001476:	7cfb      	ldrb	r3, [r7, #19]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	b2ca      	uxtb	r2, r1
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e014      	b.n	80014ac <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 8001482:	7cfb      	ldrb	r3, [r7, #19]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b25a      	sxtb	r2, r3
 800148c:	8afb      	ldrh	r3, [r7, #22]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	b25b      	sxtb	r3, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	4013      	ands	r3, r2
 80014a0:	b259      	sxtb	r1, r3
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 80014ac:	8afb      	ldrh	r3, [r7, #22]
 80014ae:	3301      	adds	r3, #1
 80014b0:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 80014b2:	8afa      	ldrh	r2, [r7, #22]
 80014b4:	8abb      	ldrh	r3, [r7, #20]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3b4      	bcc.n	8001424 <owReadScratchpadCmd+0x34>
  }
  return data;
 80014ba:	687b      	ldr	r3, [r7, #4]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4613      	mov	r3, r2
 80014d0:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  switch (rom->family) {
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d022      	beq.n	8001538 <readTemperature+0x74>
 80014f2:	2b28      	cmp	r3, #40	; 0x28
 80014f4:	d13a      	bne.n	800156c <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	461a      	mov	r2, r3
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7ff ff76 	bl	80013f0 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001506:	79db      	ldrb	r3, [r3, #7]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	b25a      	sxtb	r2, r3
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	7a1b      	ldrb	r3, [r3, #8]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	b2db      	uxtb	r3, r3
 8001514:	b25b      	sxtb	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b25b      	sxtb	r3, r3
 800151a:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	f003 020f 	and.w	r2, r3, #15
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	111b      	asrs	r3, r3, #4
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 8001536:	e01c      	b.n	8001572 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	461a      	mov	r2, r3
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff ff55 	bl	80013f0 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001548:	7a1b      	ldrb	r3, [r3, #8]
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b25b      	sxtb	r3, r3
 8001550:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	7a1b      	ldrb	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4413      	add	r3, r2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 800156a:	e002      	b.n	8001572 <readTemperature+0xae>
    default:
      return t;
 800156c:	8c3b      	ldrh	r3, [r7, #32]
 800156e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001570:	e008      	b.n	8001584 <readTemperature+0xc0>
  }
  if (reSense) {
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7ff ff29 	bl	80013d2 <owConvertTemperatureCmd>
  }
  return t;
 8001580:	8c3b      	ldrh	r3, [r7, #32]
 8001582:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001584:	2300      	movs	r3, #0
 8001586:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800158a:	f362 0307 	bfi	r3, r2, #0, #8
 800158e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001592:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001596:	4618      	mov	r0, r3
 8001598:	3730      	adds	r7, #48	; 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80015a6:	f7ff fd0b 	bl	8000fc0 <owResetCmd>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2bf0      	cmp	r3, #240	; 0xf0
 80015ae:	d052      	beq.n	8001656 <get_ROMid+0xb6>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 80015b0:	483b      	ldr	r0, [pc, #236]	; (80016a0 <get_ROMid+0x100>)
 80015b2:	f7ff feca 	bl	800134a <owSearchCmd>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <get_ROMid+0x104>)
 80015bc:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <get_ROMid+0x104>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d113      	bne.n	80015ee <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80015c6:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <get_ROMid+0x108>)
 80015c8:	4a38      	ldr	r2, [pc, #224]	; (80016ac <get_ROMid+0x10c>)
 80015ca:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <get_ROMid+0x110>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e005      	b.n	80015e0 <get_ROMid+0x40>
					__asm__("nop");
 80015d4:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80015d6:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <get_ROMid+0x110>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a34      	ldr	r2, [pc, #208]	; (80016b0 <get_ROMid+0x110>)
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <get_ROMid+0x110>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <get_ROMid+0x108>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3f3      	bcc.n	80015d4 <get_ROMid+0x34>
				pDelay = 1000000;
 80015ec:	e7eb      	b.n	80015c6 <get_ROMid+0x26>
			}

		}
		i = 0;
 80015ee:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <get_ROMid+0x110>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 80015f4:	e028      	b.n	8001648 <get_ROMid+0xa8>
			RomCode *r = &ow.ids[i];
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <get_ROMid+0x110>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <get_ROMid+0x100>)
 80015fe:	4413      	add	r3, r2
 8001600:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fde5 	bl	80011d2 <owCRC8>
 8001608:	4603      	mov	r3, r0
 800160a:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	79db      	ldrb	r3, [r3, #7]
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	429a      	cmp	r2, r3
 8001614:	d101      	bne.n	800161a <get_ROMid+0x7a>
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <get_ROMid+0x114>)
 8001618:	e000      	b.n	800161c <get_ROMid+0x7c>
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <get_ROMid+0x118>)
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <get_ROMid+0x11c>)
 800161e:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <get_ROMid+0x110>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <get_ROMid+0x120>)
 8001628:	601a      	str	r2, [r3, #0]

			//sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
			//		r->code[2], r->code[1], r->code[0], r->crc);

			if (crc != r->crc) {
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	79db      	ldrb	r3, [r3, #7]
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	429a      	cmp	r2, r3
 8001632:	d004      	beq.n	800163e <get_ROMid+0x9e>
				devInfo.device = i;
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <get_ROMid+0x110>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <get_ROMid+0x120>)
 800163c:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <get_ROMid+0x110>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <get_ROMid+0x110>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <get_ROMid+0x104>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <get_ROMid+0x110>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d8cf      	bhi.n	80015f6 <get_ROMid+0x56>
			//	sprintf (devInfo.info,"\n can't read cause CNC error");
			}
		}

	}
	pDelay = 1000000;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <get_ROMid+0x108>)
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <get_ROMid+0x10c>)
 800165a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <get_ROMid+0x110>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e005      	b.n	8001670 <get_ROMid+0xd0>
		__asm__("nop");
 8001664:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <get_ROMid+0x110>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <get_ROMid+0x110>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <get_ROMid+0x110>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <get_ROMid+0x108>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3f3      	bcc.n	8001664 <get_ROMid+0xc4>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <get_ROMid+0x11c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <get_ROMid+0x114>)
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fd64 	bl	8000150 <strcmp>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <get_ROMid+0xf2>
 800168e:	2300      	movs	r3, #0
 8001690:	e001      	b.n	8001696 <get_ROMid+0xf6>
	else return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200008dc 	.word	0x200008dc
 80016a4:	20000940 	.word	0x20000940
 80016a8:	20000000 	.word	0x20000000
 80016ac:	000f4240 	.word	0x000f4240
 80016b0:	200008d8 	.word	0x200008d8
 80016b4:	0800a910 	.word	0x0800a910
 80016b8:	0800a918 	.word	0x0800a918
 80016bc:	20000944 	.word	0x20000944
 80016c0:	20000904 	.word	0x20000904

080016c4 <get_Temperature>:

void get_Temperature (void)
{
 80016c4:	b598      	push	{r3, r4, r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	i=0;
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <get_Temperature+0x104>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80016ce:	e071      	b.n	80017b4 <get_Temperature+0xf0>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <get_Temperature+0x104>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a3d      	ldr	r2, [pc, #244]	; (80017cc <get_Temperature+0x108>)
 80016d6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80016da:	2b28      	cmp	r3, #40	; 0x28
 80016dc:	d006      	beq.n	80016ec <get_Temperature+0x28>
 80016de:	2b28      	cmp	r3, #40	; 0x28
 80016e0:	dc60      	bgt.n	80017a4 <get_Temperature+0xe0>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d060      	beq.n	80017a8 <get_Temperature+0xe4>
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d02e      	beq.n	8001748 <get_Temperature+0x84>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 80016ea:	e05b      	b.n	80017a4 <get_Temperature+0xe0>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <get_Temperature+0x104>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4a36      	ldr	r2, [pc, #216]	; (80017cc <get_Temperature+0x108>)
 80016f4:	4413      	add	r3, r2
 80016f6:	2201      	movs	r2, #1
 80016f8:	4619      	mov	r1, r3
 80016fa:	4834      	ldr	r0, [pc, #208]	; (80017cc <get_Temperature+0x108>)
 80016fc:	f7ff fee2 	bl	80014c4 <readTemperature>
 8001700:	4602      	mov	r2, r0
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <get_Temperature+0x10c>)
 8001704:	b212      	sxth	r2, r2
 8001706:	4611      	mov	r1, r2
 8001708:	7019      	strb	r1, [r3, #0]
 800170a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800170e:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <get_Temperature+0x10c>)
 8001712:	f993 3000 	ldrsb.w	r3, [r3]
 8001716:	461a      	mov	r2, r3
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	461a      	mov	r2, r3
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <get_Temperature+0x10c>)
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	4413      	add	r3, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f993 	bl	8000a54 <__aeabi_i2f>
 800172e:	4603      	mov	r3, r0
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <get_Temperature+0x104>)
 8001732:	6814      	ldr	r4, [r2, #0]
 8001734:	4927      	ldr	r1, [pc, #156]	; (80017d4 <get_Temperature+0x110>)
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fa94 	bl	8000c64 <__aeabi_fdiv>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <get_Temperature+0x114>)
 8001742:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 8001746:	e030      	b.n	80017aa <get_Temperature+0xe6>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <get_Temperature+0x104>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <get_Temperature+0x108>)
 8001750:	4413      	add	r3, r2
 8001752:	2201      	movs	r2, #1
 8001754:	4619      	mov	r1, r3
 8001756:	481d      	ldr	r0, [pc, #116]	; (80017cc <get_Temperature+0x108>)
 8001758:	f7ff feb4 	bl	80014c4 <readTemperature>
 800175c:	4602      	mov	r2, r0
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <get_Temperature+0x10c>)
 8001760:	b212      	sxth	r2, r2
 8001762:	4611      	mov	r1, r2
 8001764:	7019      	strb	r1, [r3, #0]
 8001766:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800176a:	705a      	strb	r2, [r3, #1]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <get_Temperature+0x10c>)
 800176e:	f993 3000 	ldrsb.w	r3, [r3]
 8001772:	461a      	mov	r2, r3
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	461a      	mov	r2, r3
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <get_Temperature+0x10c>)
 8001780:	785b      	ldrb	r3, [r3, #1]
 8001782:	4413      	add	r3, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f965 	bl	8000a54 <__aeabi_i2f>
 800178a:	4603      	mov	r3, r0
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <get_Temperature+0x104>)
 800178e:	6814      	ldr	r4, [r2, #0]
 8001790:	4910      	ldr	r1, [pc, #64]	; (80017d4 <get_Temperature+0x110>)
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fa66 	bl	8000c64 <__aeabi_fdiv>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <get_Temperature+0x114>)
 800179e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			break;
 80017a2:	e002      	b.n	80017aa <get_Temperature+0xe6>
			break;
 80017a4:	bf00      	nop
 80017a6:	e000      	b.n	80017aa <get_Temperature+0xe6>
			break;
 80017a8:	bf00      	nop
	for (; i < devices; i++) {
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <get_Temperature+0x104>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <get_Temperature+0x104>)
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <get_Temperature+0x118>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <get_Temperature+0x104>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d886      	bhi.n	80016d0 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	bd98      	pop	{r3, r4, r7, pc}
 80017c8:	200008d8 	.word	0x200008d8
 80017cc:	200008dc 	.word	0x200008dc
 80017d0:	20000900 	.word	0x20000900
 80017d4:	41200000 	.word	0x41200000
 80017d8:	20000934 	.word	0x20000934
 80017dc:	20000940 	.word	0x20000940

080017e0 <ProcessTimers>:

	volatile uint32_t GTimers[MAX_GTIMERS];
	volatile uint8_t GTStates[MAX_GTIMERS];
#endif

void ProcessTimers(uint32_t * tick) {
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
	uint32_t x = *tick;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60bb      	str	r3, [r7, #8]

	if (x > 0) {
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d025      	beq.n	8001844 <ProcessTimers+0x64>
		for (i=0; i<MAX_GTIMERS; i++) {  //!!!! для локальных таймеров нужно добавить MAX_TIMERS
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e01c      	b.n	8001838 <ProcessTimers+0x58>
			Timers[i] += x;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	4a13      	ldr	r2, [pc, #76]	; (8001850 <ProcessTimers+0x70>)
 8001802:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	440a      	add	r2, r1
 800180c:	4910      	ldr	r1, [pc, #64]	; (8001850 <ProcessTimers+0x70>)
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#ifdef USE_GLOBAL_TIMERS
			if (GTStates[i] == TIMER_RUNNING) {
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <ProcessTimers+0x74>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d109      	bne.n	8001832 <ProcessTimers+0x52>
				GTimers[i] += x;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <ProcessTimers+0x78>)
 8001822:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	440a      	add	r2, r1
 800182c:	490a      	ldr	r1, [pc, #40]	; (8001858 <ProcessTimers+0x78>)
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i=0; i<MAX_GTIMERS; i++) {  //!!!! для локальных таймеров нужно добавить MAX_TIMERS
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	3301      	adds	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b07      	cmp	r3, #7
 800183c:	d9df      	bls.n	80017fe <ProcessTimers+0x1e>
			}
#endif
		}
		*tick = 0;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
	}
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2000094c 	.word	0x2000094c
 8001854:	20000970 	.word	0x20000970
 8001858:	20000950 	.word	0x20000950

0800185c <InitGTimers>:
	Timers[Timer] = 0;
}

#ifdef USE_GLOBAL_TIMERS

void InitGTimers(void) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i=0; i<MAX_TIMERS; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	e007      	b.n	8001878 <InitGTimers+0x1c>
		GTimers[i] = TIMER_STOPPED;
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <InitGTimers+0x30>)
 800186c:	2100      	movs	r1, #0
 800186e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0; i<MAX_TIMERS; i++) {
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	3301      	adds	r3, #1
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <InitGTimers+0xc>
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000950 	.word	0x20000950

08001890 <GetGTimer>:

uint32_t  GetGTimer(uint8_t Timer){
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	return GTimers[Timer];
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4a03      	ldr	r2, [pc, #12]	; (80018ac <GetGTimer+0x1c>)
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20000950 	.word	0x20000950

080018b0 <StopGTimer>:

void StopGTimer(uint8_t Timer){
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	GTStates[Timer] = TIMER_STOPPED;
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <StopGTimer+0x28>)
 80018be:	2100      	movs	r1, #0
 80018c0:	54d1      	strb	r1, [r2, r3]
	GTimers[Timer] = 0;//added
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <StopGTimer+0x2c>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000970 	.word	0x20000970
 80018dc:	20000950 	.word	0x20000950

080018e0 <StartGTimer>:

void StartGTimer(uint8_t Timer){
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
		GTimers[Timer] = 0;
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <StartGTimer+0x28>)
 80018ee:	2100      	movs	r1, #0
 80018f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		GTStates[Timer] = TIMER_RUNNING;
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <StartGTimer+0x2c>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	54d1      	strb	r1, [r2, r3]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000950 	.word	0x20000950
 800190c:	20000970 	.word	0x20000970

08001910 <Button_Add>:
 * @param handle handle of button to be registered
 * @retval return button ID (index of button in registred list), return -1 on failure
 * @note adjust MAX_BUTTONS accordingly
 */
int32_t Button_Add(Button_Struct_t *handle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");
    BUTTON_ASSERT(Button_Count < MAX_BUTTONS, "MAX Button count reached");

    if (Button_Count < MAX_BUTTONS && handle != NULL)
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <Button_Add+0x6c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d826      	bhi.n	800196e <Button_Add+0x5e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d023      	beq.n	800196e <Button_Add+0x5e>
    {
        BUTTON_ASSERT(handle->Button_Read, "Button_Read not defined");

        /* call init function if defined */
        if (handle->Button_Init != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <Button_Add+0x24>
        {
            handle->Button_Init();
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	4798      	blx	r3
        }
        handle->Button_Event = Button_Idle;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
        handle->Button_Clicked_Count = 0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	731a      	strb	r2, [r3, #12]
        handle->Button_Pressed_Ticks = 0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
        handle->Button_Released_Ticks = 0;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]

        Button_List[Button_Count] = handle;
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <Button_Add+0x6c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <Button_Add+0x70>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        Button_Count++;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <Button_Add+0x6c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <Button_Add+0x6c>)
 8001964:	701a      	strb	r2, [r3, #0]

        /** return button ID (index of button in registred list) */
        return Button_Count - 1;
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <Button_Add+0x6c>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	e001      	b.n	8001972 <Button_Add+0x62>
    }
    /** return error */
    return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000084 	.word	0x20000084
 8001980:	20000074 	.word	0x20000074

08001984 <Button_Loop>:
 * @brief frequently called in main loop or timer ISR. should be called at least every 20ms?
 * @param none
 * @retval none
 */
void Button_Loop(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
    static uint32_t Button_Scan_Time_Stamp = 0;

    /** execute this loop on every BUTTON_SCAN_TICK */
    if (Button_Get_Tick() - Button_Scan_Time_Stamp > BUTTON_SCAN_TICK)
 800198a:	f002 f829 	bl	80039e0 <Button_Get_Tick>
 800198e:	4602      	mov	r2, r0
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <Button_Loop+0x15c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b0a      	cmp	r3, #10
 8001998:	f240 809d 	bls.w	8001ad6 <Button_Loop+0x152>
    {
        Button_Struct_t *handle = NULL;
 800199c:	2300      	movs	r3, #0
 800199e:	603b      	str	r3, [r7, #0]
        Button_Scan_Time_Stamp = Button_Get_Tick();
 80019a0:	f002 f81e 	bl	80039e0 <Button_Get_Tick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a4e      	ldr	r2, [pc, #312]	; (8001ae0 <Button_Loop+0x15c>)
 80019a8:	6013      	str	r3, [r2, #0]

        for (uint8_t Index = 0; Index < Button_Count; Index++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	e08c      	b.n	8001aca <Button_Loop+0x146>
        {
            /** grab button handle from list */
            handle = Button_List[Index];
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4a4c      	ldr	r2, [pc, #304]	; (8001ae4 <Button_Loop+0x160>)
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	603b      	str	r3, [r7, #0]

            BUTTON_ASSERT(handle, "NULL found in list");

            if (handle != NULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8081 	beq.w	8001ac4 <Button_Loop+0x140>
            {
                /** button pressed detected */
                if (handle->Button_Read != NULL && handle->Button_Read())
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d038      	beq.n	8001a3c <Button_Loop+0xb8>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4798      	blx	r3
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d032      	beq.n	8001a3c <Button_Loop+0xb8>
                {
                    handle->Button_Pressed_Ticks++;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	605a      	str	r2, [r3, #4]

                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b63      	cmp	r3, #99	; 0x63
 80019e6:	d80e      	bhi.n	8001a06 <Button_Loop+0x82>
                    {
                        /** button repressed detected */
                        if (handle->Button_Released_Ticks < BUTTON_REPRESSED_TICK)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b06      	cmp	r3, #6
 80019ee:	d803      	bhi.n	80019f8 <Button_Loop+0x74>
                        {
                            handle->Button_Event = Button_Repressed;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2202      	movs	r2, #2
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	e002      	b.n	80019fe <Button_Loop+0x7a>
                        }
                        else
                        {
                            handle->Button_Event = Button_Pressed;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
                        }
                        handle->Button_Released_Ticks = 0;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 8001a04:	e05d      	b.n	8001ac2 <Button_Loop+0x13e>
                    }
                    else if (handle->Button_Event != Button_Long_Pressed)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d059      	beq.n	8001ac2 <Button_Loop+0x13e>
                    {
                        /** button long pressed detected */
                        handle->Button_Event = Button_Long_Pressed;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2203      	movs	r2, #3
 8001a12:	701a      	strb	r2, [r3, #0]
                        /** 0xFF for long press */
                        handle->Button_Clicked_Count = 0xFF;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	731a      	strb	r2, [r3, #12]
                        handle->Button_Count_Captured = 0xFF;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	22ff      	movs	r2, #255	; 0xff
 8001a1e:	735a      	strb	r2, [r3, #13]
                        /** if button callback is defined, call it*/
                        if (handle->Callback != NULL)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <Button_Loop+0xb0>
                        {
                            handle->Callback(handle->Button_Clicked_Count);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	7b12      	ldrb	r2, [r2, #12]
 8001a30:	4610      	mov	r0, r2
 8001a32:	4798      	blx	r3
                        }
                        handle->Button_Clicked_Count = 0;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	731a      	strb	r2, [r3, #12]
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 8001a3a:	e042      	b.n	8001ac2 <Button_Loop+0x13e>
                    }
                }
                else
                {
                    /** button released detected */
                    handle->Button_Released_Ticks++;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	609a      	str	r2, [r3, #8]

                    /** if button was pressed for BUTTON_DEBOUNCE_TICK */
                    if (handle->Button_Pressed_Ticks > BUTTON_DEBOUNCE_TICK)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d91c      	bls.n	8001a88 <Button_Loop+0x104>
                    {
                        handle->Button_Pressed_Ticks = 0;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]

                        if (handle->Button_Event == Button_Repressed)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d106      	bne.n	8001a6a <Button_Loop+0xe6>
                        {
                            handle->Button_Clicked_Count++;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	731a      	strb	r2, [r3, #12]
 8001a68:	e00e      	b.n	8001a88 <Button_Loop+0x104>
                        }
                        else if (handle->Button_Event == Button_Pressed)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d103      	bne.n	8001a7a <Button_Loop+0xf6>
                        {
                            handle->Button_Clicked_Count = 1;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2201      	movs	r2, #1
 8001a76:	731a      	strb	r2, [r3, #12]
 8001a78:	e006      	b.n	8001a88 <Button_Loop+0x104>
                        }
                        else if (handle->Button_Event == Button_Long_Pressed)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d102      	bne.n	8001a88 <Button_Loop+0x104>
                        {
                            handle->Button_Event = Button_Idle;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /** if button released for BUTTON_CLICKED_TICK */
                    if (handle->Button_Released_Ticks > BUTTON_CLICKED_TICK)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d919      	bls.n	8001ac4 <Button_Loop+0x140>
                    {
                        if (handle->Button_Event != Button_Idle)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d015      	beq.n	8001ac4 <Button_Loop+0x140>
                        {
                            handle->Button_Event = Button_Idle;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
                            /** capture the button click so we can read it manually if we want */
                            handle->Button_Count_Captured = handle->Button_Clicked_Count;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	7b1a      	ldrb	r2, [r3, #12]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	735a      	strb	r2, [r3, #13]
                            /** if button callback is defined, call it */
                            if (handle->Callback != NULL)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <Button_Loop+0x136>
                            {
                                handle->Callback(handle->Button_Clicked_Count);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	7b12      	ldrb	r2, [r2, #12]
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4798      	blx	r3
                            }
                            /** reest click count after callback and start the scan again */
                            handle->Button_Clicked_Count = 0;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	731a      	strb	r2, [r3, #12]
 8001ac0:	e000      	b.n	8001ac4 <Button_Loop+0x140>
                    if (handle->Button_Pressed_Ticks < BUTTON_LONG_PRESSED_TICK)
 8001ac2:	bf00      	nop
        for (uint8_t Index = 0; Index < Button_Count; Index++)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <Button_Loop+0x164>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f4ff af6d 	bcc.w	80019b0 <Button_Loop+0x2c>
                    }
                }
            }
        }
    }
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000088 	.word	0x20000088
 8001ae4:	20000074 	.word	0x20000074
 8001ae8:	20000084 	.word	0x20000084

08001aec <Button_Get_Status>:
 * @brief return the current state of button
 * @param handle handle of button
 * @retval return Button_Event
 */
Button_Event_t Button_Get_Status(Button_Struct_t *handle)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");

    if (handle != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <Button_Get_Status+0x14>
    {
        return handle->Button_Event;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	e000      	b.n	8001b02 <Button_Get_Status+0x16>
    }
    /** error*/
    return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <Button_Get_Clicked_Count>:
 * @brief return the clicked count of button
 * @param handle handle of button
 * @retval return clicked count
 */
uint8_t Button_Get_Clicked_Count(Button_Struct_t *handle)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    BUTTON_ASSERT(handle, "handle is NULL");

    uint8_t count = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

    if (handle != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00d      	beq.n	8001b3a <Button_Get_Clicked_Count+0x2e>
    {
        if (handle->Button_Event == Button_Idle || handle->Button_Event == Button_Long_Pressed)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <Button_Get_Clicked_Count+0x22>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d105      	bne.n	8001b3a <Button_Get_Clicked_Count+0x2e>
        {
            count = handle->Button_Count_Captured;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7b5b      	ldrb	r3, [r3, #13]
 8001b32:	73fb      	strb	r3, [r7, #15]
            handle->Button_Count_Captured = 0;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	735a      	strb	r2, [r3, #13]
        }
    }

    return count;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
	...

08001b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b4e:	f005 f97f 	bl	8006e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b52:	f000 f9a1 	bl	8001e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b56:	f000 fb4d 	bl	80021f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b5a:	f000 fad9 	bl	8002110 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001b5e:	f000 fa53 	bl	8002008 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001b62:	f000 faff 	bl	8002164 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001b66:	f000 fb27 	bl	80021b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b6a:	f000 f9f1 	bl	8001f50 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b6e:	f000 fa81 	bl	8002074 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

//FLASH INIT
  	  W25qxx_Init();
 8001b72:	f004 fdf1 	bl	8006758 <W25qxx_Init>
	//W25qxx_EraseChip();
	//W25qxx_EraseBlock(0); // 65536 байт
	//W25qxx_EraseSector(0); // 4096 байт

//ADC INIT
  	HAL_ADCEx_Calibration_Start(&hadc1);
 8001b76:	48aa      	ldr	r0, [pc, #680]	; (8001e20 <main+0x2d8>)
 8001b78:	f005 feaa 	bl	80078d0 <HAL_ADCEx_Calibration_Start>
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_source_value, ADC_CHANELS	); // DMA считывает ADC_CHANELS значений и инициирует прерывание
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	49a9      	ldr	r1, [pc, #676]	; (8001e24 <main+0x2dc>)
 8001b80:	48a7      	ldr	r0, [pc, #668]	; (8001e20 <main+0x2d8>)
 8001b82:	f005 faef 	bl	8007164 <HAL_ADC_Start_DMA>


//DISPLAY INIT
	u8g2_Setup_st7565_nhd_c12864_f(&u8g2, U8G2_R2, u8x8_byte_4wire_hw_spi,
 8001b86:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <main+0x2e0>)
 8001b88:	4aa8      	ldr	r2, [pc, #672]	; (8001e2c <main+0x2e4>)
 8001b8a:	49a9      	ldr	r1, [pc, #676]	; (8001e30 <main+0x2e8>)
 8001b8c:	48a9      	ldr	r0, [pc, #676]	; (8001e34 <main+0x2ec>)
 8001b8e:	f003 fa7f 	bl	8005090 <u8g2_Setup_st7565_nhd_c12864_f>
			u8g2_gpio_and_delay_stm32);
	u8g2_InitDisplay(&u8g2); 	 // send init sequence to the display, display is in sleep mode after this
 8001b92:	48a8      	ldr	r0, [pc, #672]	; (8001e34 <main+0x2ec>)
 8001b94:	f004 fc1f 	bl	80063d6 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8001b98:	2100      	movs	r1, #0
 8001b9a:	48a6      	ldr	r0, [pc, #664]	; (8001e34 <main+0x2ec>)
 8001b9c:	f004 fc2a 	bl	80063f4 <u8x8_SetPowerSave>
	u8g2_SetContrast(&u8g2, 250);
 8001ba0:	21fa      	movs	r1, #250	; 0xfa
 8001ba2:	48a4      	ldr	r0, [pc, #656]	; (8001e34 <main+0x2ec>)
 8001ba4:	f004 fc37 	bl	8006416 <u8x8_SetContrast>
	u8g2_ClearDisplay(&u8g2);
 8001ba8:	48a2      	ldr	r0, [pc, #648]	; (8001e34 <main+0x2ec>)
 8001baa:	f003 fa4b 	bl	8005044 <u8g2_ClearDisplay>
	//u8g2_SetFont(&u8g2, u8g2_font_courB18_tr);
	u8g2_ClearBuffer(&u8g2);
 8001bae:	48a1      	ldr	r0, [pc, #644]	; (8001e34 <main+0x2ec>)
 8001bb0:	f003 f96d 	bl	8004e8e <u8g2_ClearBuffer>
	W25qxx_ReadBytes(imageBuff, IMAGE_LOGO_3, 1024);
 8001bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001bbc:	489e      	ldr	r0, [pc, #632]	; (8001e38 <main+0x2f0>)
 8001bbe:	f005 f8c7 	bl	8006d50 <W25qxx_ReadBytes>
	u8g2_DrawXBM(&u8g2,33,5, 64, 55, imageBuff);
 8001bc2:	4b9d      	ldr	r3, [pc, #628]	; (8001e38 <main+0x2f0>)
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	2337      	movs	r3, #55	; 0x37
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2340      	movs	r3, #64	; 0x40
 8001bcc:	2205      	movs	r2, #5
 8001bce:	2121      	movs	r1, #33	; 0x21
 8001bd0:	4898      	ldr	r0, [pc, #608]	; (8001e34 <main+0x2ec>)
 8001bd2:	f003 f8bd 	bl	8004d50 <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2);
 8001bd6:	4897      	ldr	r0, [pc, #604]	; (8001e34 <main+0x2ec>)
 8001bd8:	f003 f9cc 	bl	8004f74 <u8g2_SendBuffer>
	HAL_Delay(1000);
 8001bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001be0:	f005 f998 	bl	8006f14 <HAL_Delay>
	display_height = u8g2_GetDisplayHeight(&u8g2);
 8001be4:	4b93      	ldr	r3, [pc, #588]	; (8001e34 <main+0x2ec>)
 8001be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b93      	ldr	r3, [pc, #588]	; (8001e3c <main+0x2f4>)
 8001bee:	701a      	strb	r2, [r3, #0]
	display_width = u8g2_GetDisplayWidth(&u8g2);
 8001bf0:	4b90      	ldr	r3, [pc, #576]	; (8001e34 <main+0x2ec>)
 8001bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b91      	ldr	r3, [pc, #580]	; (8001e40 <main+0x2f8>)
 8001bfa:	701a      	strb	r2, [r3, #0]
	display_num_lines = display_height / (LCD_FONT_HIGHT + LCD_LINE_SPACER);
 8001bfc:	4b8f      	ldr	r3, [pc, #572]	; (8001e3c <main+0x2f4>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <main+0x2fc>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b8f      	ldr	r3, [pc, #572]	; (8001e48 <main+0x300>)
 8001c0c:	701a      	strb	r2, [r3, #0]

//BUTTONS INIT
	Button_A.Button_Init = NULL; // инициализация кнопки
 8001c0e:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <main+0x304>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
	Button_A.Button_Read = Button_A_Read;
 8001c14:	4b8d      	ldr	r3, [pc, #564]	; (8001e4c <main+0x304>)
 8001c16:	4a8e      	ldr	r2, [pc, #568]	; (8001e50 <main+0x308>)
 8001c18:	615a      	str	r2, [r3, #20]
	Button_A.Callback = NULL; //    NULL; /** without callback */
 8001c1a:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <main+0x304>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_A);
 8001c20:	488a      	ldr	r0, [pc, #552]	; (8001e4c <main+0x304>)
 8001c22:	f7ff fe75 	bl	8001910 <Button_Add>

	Button_B.Button_Init = NULL;
 8001c26:	4b8b      	ldr	r3, [pc, #556]	; (8001e54 <main+0x30c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
	Button_B.Button_Read = Button_B_Read;
 8001c2c:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <main+0x30c>)
 8001c2e:	4a8a      	ldr	r2, [pc, #552]	; (8001e58 <main+0x310>)
 8001c30:	615a      	str	r2, [r3, #20]
	Button_B.Callback = NULL; //    NULL; /** without callback */
 8001c32:	4b88      	ldr	r3, [pc, #544]	; (8001e54 <main+0x30c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_B);
 8001c38:	4886      	ldr	r0, [pc, #536]	; (8001e54 <main+0x30c>)
 8001c3a:	f7ff fe69 	bl	8001910 <Button_Add>

	Button_C.Button_Init = NULL;
 8001c3e:	4b87      	ldr	r3, [pc, #540]	; (8001e5c <main+0x314>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
	Button_C.Button_Read = Button_C_Read;
 8001c44:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <main+0x314>)
 8001c46:	4a86      	ldr	r2, [pc, #536]	; (8001e60 <main+0x318>)
 8001c48:	615a      	str	r2, [r3, #20]
	Button_C.Callback = NULL; //    NULL; /** without callback */
 8001c4a:	4b84      	ldr	r3, [pc, #528]	; (8001e5c <main+0x314>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_C);
 8001c50:	4882      	ldr	r0, [pc, #520]	; (8001e5c <main+0x314>)
 8001c52:	f7ff fe5d 	bl	8001910 <Button_Add>

	Button_D.Button_Init = NULL;
 8001c56:	4b83      	ldr	r3, [pc, #524]	; (8001e64 <main+0x31c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
	Button_D.Button_Read = Button_D_Read;
 8001c5c:	4b81      	ldr	r3, [pc, #516]	; (8001e64 <main+0x31c>)
 8001c5e:	4a82      	ldr	r2, [pc, #520]	; (8001e68 <main+0x320>)
 8001c60:	615a      	str	r2, [r3, #20]
	Button_D.Callback = NULL; //    NULL; /** without callback */
 8001c62:	4b80      	ldr	r3, [pc, #512]	; (8001e64 <main+0x31c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
	Button_Add(&Button_D);
 8001c68:	487e      	ldr	r0, [pc, #504]	; (8001e64 <main+0x31c>)
 8001c6a:	f7ff fe51 	bl	8001910 <Button_Add>

//READ SETPOINTS FROM FLASH W25Q
	W25qxx_ReadBytes(SetpointsUnion.SetpointsArray, SETPOINTS_FLASH_SECTOR*FLASH_SECTOR_SIZE, MENU_SETPOINTS_NUM_ITEMS);
 8001c6e:	2219      	movs	r2, #25
 8001c70:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001c74:	487d      	ldr	r0, [pc, #500]	; (8001e6c <main+0x324>)
 8001c76:	f005 f86b 	bl	8006d50 <W25qxx_ReadBytes>

//ONE WIRE INIT
	get_ROMid();
 8001c7a:	f7ff fc91 	bl	80015a0 <get_ROMid>

//TIMERS INIT
	InitGTimers();
 8001c7e:	f7ff fded 	bl	800185c <InitGTimers>
	//StartGTimer(TIMER_CONV_U_OFF);
	StartGTimer(TIMER_PRX_SENS_FEEDBACK);
 8001c82:	2006      	movs	r0, #6
 8001c84:	f7ff fe2c 	bl	80018e0 <StartGTimer>
	StartGTimer(TIMER_TEMP_SENS_UPDATE);
 8001c88:	2007      	movs	r0, #7
 8001c8a:	f7ff fe29 	bl	80018e0 <StartGTimer>

//GET TEMPERATURE
	get_Temperature();
 8001c8e:	f7ff fd19 	bl	80016c4 <get_Temperature>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //blink
	  if((HAL_GetTick() - time_b) > BLINK_INTERVAL) // интервал 500мс
 8001c92:	f005 f935 	bl	8006f00 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <main+0x328>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ca2:	d913      	bls.n	8001ccc <main+0x184>
	   {
		  flag_blink = !flag_blink;
 8001ca4:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <main+0x32c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f083 0301 	eor.w	r3, r3, #1
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <main+0x32c>)
 8001cc0:	701a      	strb	r2, [r3, #0]
		  time_b = HAL_GetTick();
 8001cc2:	f005 f91d 	bl	8006f00 <HAL_GetTick>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <main+0x328>)
 8001cca:	6013      	str	r3, [r2, #0]
	   }


	  fnMenuProcess();
 8001ccc:	f001 fb90 	bl	80033f0 <fnMenuProcess>
	  btn_state = fnGetPressKey();// опрос кнопок
 8001cd0:	f001 fdbc 	bl	800384c <fnGetPressKey>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <main+0x330>)
 8001cda:	801a      	strh	r2, [r3, #0]
	  ProcessTimers(&sys_timer);
 8001cdc:	4867      	ldr	r0, [pc, #412]	; (8001e7c <main+0x334>)
 8001cde:	f7ff fd7f 	bl	80017e0 <ProcessTimers>

	  fnInputsUpdate();
 8001ce2:	f002 f9d5 	bl	8004090 <fnInputsUpdate>
	  fnPumpControl(&main_data, &SetpointsUnion.setpoints_data);
 8001ce6:	4961      	ldr	r1, [pc, #388]	; (8001e6c <main+0x324>)
 8001ce8:	4865      	ldr	r0, [pc, #404]	; (8001e80 <main+0x338>)
 8001cea:	f001 ff79 	bl	8003be0 <fnPumpControl>
	  fnWaterLevelControl(&main_data, &SetpointsUnion.setpoints_data);
 8001cee:	495f      	ldr	r1, [pc, #380]	; (8001e6c <main+0x324>)
 8001cf0:	4863      	ldr	r0, [pc, #396]	; (8001e80 <main+0x338>)
 8001cf2:	f002 f847 	bl	8003d84 <fnWaterLevelControl>
	  fnConverterControl(&main_data, &SetpointsUnion.setpoints_data);
 8001cf6:	495d      	ldr	r1, [pc, #372]	; (8001e6c <main+0x324>)
 8001cf8:	4861      	ldr	r0, [pc, #388]	; (8001e80 <main+0x338>)
 8001cfa:	f002 f85d 	bl	8003db8 <fnConverterControl>
	  fnFridgeControl(&main_data, &SetpointsUnion.setpoints_data);
 8001cfe:	495b      	ldr	r1, [pc, #364]	; (8001e6c <main+0x324>)
 8001d00:	485f      	ldr	r0, [pc, #380]	; (8001e80 <main+0x338>)
 8001d02:	f002 f8f9 	bl	8003ef8 <fnFridgeControl>
	  fnMainPowerControl(&main_data, &SetpointsUnion.setpoints_data);
 8001d06:	4959      	ldr	r1, [pc, #356]	; (8001e6c <main+0x324>)
 8001d08:	485d      	ldr	r0, [pc, #372]	; (8001e80 <main+0x338>)
 8001d0a:	f002 f995 	bl	8004038 <fnMainPowerControl>
	  fnOutputsUpdate(&main_data);
 8001d0e:	485c      	ldr	r0, [pc, #368]	; (8001e80 <main+0x338>)
 8001d10:	f002 fa7c 	bl	800420c <fnOutputsUpdate>

	  if (GetGTimer(TIMER_TEMP_SENS_UPDATE) >= TEMP_SENS_UPDATE_PERIOD) {
 8001d14:	2007      	movs	r0, #7
 8001d16:	f7ff fdbb 	bl	8001890 <GetGTimer>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d20:	d314      	bcc.n	8001d4c <main+0x204>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d22:	2102      	movs	r1, #2
 8001d24:	4857      	ldr	r0, [pc, #348]	; (8001e84 <main+0x33c>)
 8001d26:	f006 fbe8 	bl	80084fa <HAL_GPIO_TogglePin>
		  get_Temperature();
 8001d2a:	f7ff fccb 	bl	80016c4 <get_Temperature>
		  main_data.inside_temperature = Temp[0];
 8001d2e:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <main+0x340>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a53      	ldr	r2, [pc, #332]	; (8001e80 <main+0x338>)
 8001d34:	6053      	str	r3, [r2, #4]
		  main_data.outside_temperature = Temp[1];
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <main+0x340>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a51      	ldr	r2, [pc, #324]	; (8001e80 <main+0x338>)
 8001d3c:	6013      	str	r3, [r2, #0]
		  main_data.fridge_temperature = Temp[2];
 8001d3e:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <main+0x340>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <main+0x338>)
 8001d44:	6093      	str	r3, [r2, #8]
		  StartGTimer(TIMER_TEMP_SENS_UPDATE);
 8001d46:	2007      	movs	r0, #7
 8001d48:	f7ff fdca 	bl	80018e0 <StartGTimer>
	  }

//---------------------------------------------------------------------------------------
	  if (flag_adc_complet == true) // если сработало прерывание от DMA АЦП
 8001d4c:	4b4f      	ldr	r3, [pc, #316]	; (8001e8c <main+0x344>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d09d      	beq.n	8001c92 <main+0x14a>
	  		{
	  			flag_adc_complet = false;
 8001d56:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <main+0x344>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
	  			main_data.battery_voltage = fnEmaFilterBatVolt(adc_source_value[0]) * ADC_REFERENCE * ADC_BAT_VOLT_DIVIDER; 		// значение напряжения после фильтрации
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <main+0x2dc>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f001 fea0 	bl	8003aa8 <fnEmaFilterBatVolt>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fc76 	bl	800065c <__aeabi_i2d>
 8001d70:	a329      	add	r3, pc, #164	; (adr r3, 8001e18 <main+0x2d0>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	f7fe f9f5 	bl	8000164 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <main+0x348>)
 8001d88:	f7fe f9ec 	bl	8000164 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe fd54 	bl	8000840 <__aeabi_d2f>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4a39      	ldr	r2, [pc, #228]	; (8001e80 <main+0x338>)
 8001d9c:	6113      	str	r3, [r2, #16]
	  			main_data.sensors_supply_voltage = (fnEmaFilterSensVolt(adc_source_value[1]) * ADC_REFERENCE);
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <main+0x2dc>)
 8001da0:	885b      	ldrh	r3, [r3, #2]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 feb3 	bl	8003b10 <fnEmaFilterSensVolt>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fc55 	bl	800065c <__aeabi_i2d>
 8001db2:	a319      	add	r3, pc, #100	; (adr r3, 8001e18 <main+0x2d0>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe f9d4 	bl	8000164 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe fd3c 	bl	8000840 <__aeabi_d2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4a2d      	ldr	r2, [pc, #180]	; (8001e80 <main+0x338>)
 8001dcc:	6153      	str	r3, [r2, #20]
	  			main_data.res_sensor_resistance = (fnEmaFilterResSens(adc_source_value[2]) / ADC_RES_SENS_DIVIDER);
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <main+0x2dc>)
 8001dd0:	889b      	ldrh	r3, [r3, #4]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f001 fecf 	bl	8003b78 <fnEmaFilterResSens>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <main+0x34c>)
 8001de0:	fba3 2302 	umull	r2, r3, r3, r2
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <main+0x338>)
 8001dea:	819a      	strh	r2, [r3, #12]

	  			for (uint8_t i = 0; i < ADC_CHANELS; i++) {	// обнуляем массив со значениями от АЦП
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	e007      	b.n	8001e02 <main+0x2ba>
	  				adc_source_value[i] = 0;
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <main+0x2dc>)
 8001df6:	2100      	movs	r1, #0
 8001df8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  			for (uint8_t i = 0; i < ADC_CHANELS; i++) {	// обнуляем массив со значениями от АЦП
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d9f4      	bls.n	8001df2 <main+0x2aa>
	  			}

	  			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_source_value, ADC_CHANELS); // перезапускаем DMA
 8001e08:	2203      	movs	r2, #3
 8001e0a:	4906      	ldr	r1, [pc, #24]	; (8001e24 <main+0x2dc>)
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <main+0x2d8>)
 8001e0e:	f005 f9a9 	bl	8007164 <HAL_ADC_Start_DMA>
	  if((HAL_GetTick() - time_b) > BLINK_INTERVAL) // интервал 500мс
 8001e12:	e73e      	b.n	8001c92 <main+0x14a>
 8001e14:	f3af 8000 	nop.w
 8001e18:	eb1c432d 	.word	0xeb1c432d
 8001e1c:	3f4a36e2 	.word	0x3f4a36e2
 8001e20:	20000b94 	.word	0x20000b94
 8001e24:	20000098 	.word	0x20000098
 8001e28:	08002425 	.word	0x08002425
 8001e2c:	08002539 	.word	0x08002539
 8001e30:	0800ba24 	.word	0x0800ba24
 8001e34:	20000a68 	.word	0x20000a68
 8001e38:	200000a8 	.word	0x200000a8
 8001e3c:	20000979 	.word	0x20000979
 8001e40:	20000c50 	.word	0x20000c50
 8001e44:	aaaaaaab 	.word	0xaaaaaaab
 8001e48:	20000978 	.word	0x20000978
 8001e4c:	20000a4c 	.word	0x20000a4c
 8001e50:	080039f1 	.word	0x080039f1
 8001e54:	20000a30 	.word	0x20000a30
 8001e58:	08003a11 	.word	0x08003a11
 8001e5c:	20000a14 	.word	0x20000a14
 8001e60:	08003a35 	.word	0x08003a35
 8001e64:	200009f8 	.word	0x200009f8
 8001e68:	08003a55 	.word	0x08003a55
 8001e6c:	20000b78 	.word	0x20000b78
 8001e70:	200000a0 	.word	0x200000a0
 8001e74:	200000a4 	.word	0x200000a4
 8001e78:	20000090 	.word	0x20000090
 8001e7c:	200004ac 	.word	0x200004ac
 8001e80:	200009d4 	.word	0x200009d4
 8001e84:	40010800 	.word	0x40010800
 8001e88:	20000934 	.word	0x20000934
 8001e8c:	2000009e 	.word	0x2000009e
 8001e90:	40260000 	.word	0x40260000
 8001e94:	51eb851f 	.word	0x51eb851f

08001e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b094      	sub	sp, #80	; 0x50
 8001e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea2:	2228      	movs	r2, #40	; 0x28
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f008 fd1e 	bl	800a8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eda:	2302      	movs	r3, #2
 8001edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ee4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f006 fb1c 	bl	800852c <HAL_RCC_OscConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001efa:	f002 f9bb 	bl	8004274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efe:	230f      	movs	r3, #15
 8001f00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2102      	movs	r1, #2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f006 fd86 	bl	8008a2c <HAL_RCC_ClockConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f26:	f002 f9a5 	bl	8004274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f006 ff12 	bl	8008d60 <HAL_RCCEx_PeriphCLKConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f42:	f002 f997 	bl	8004274 <Error_Handler>
  }
}
 8001f46:	bf00      	nop
 8001f48:	3750      	adds	r7, #80	; 0x50
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001f62:	4a28      	ldr	r2, [pc, #160]	; (8002004 <MX_ADC1_Init+0xb4>)
 8001f64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001f7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f8e:	481c      	ldr	r0, [pc, #112]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001f90:	f004 ffe4 	bl	8006f5c <HAL_ADC_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001f9a:	f002 f96b 	bl	8004274 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4814      	ldr	r0, [pc, #80]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001fb0:	f005 fa94 	bl	80074dc <HAL_ADC_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001fba:	f002 f95b 	bl	8004274 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001fcc:	f005 fa86 	bl	80074dc <HAL_ADC_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001fd6:	f002 f94d 	bl	8004274 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <MX_ADC1_Init+0xb0>)
 8001fe8:	f005 fa78 	bl	80074dc <HAL_ADC_ConfigChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001ff2:	f002 f93f 	bl	8004274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000b94 	.word	0x20000b94
 8002004:	40012400 	.word	0x40012400

08002008 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <MX_SPI1_Init+0x64>)
 800200e:	4a18      	ldr	r2, [pc, #96]	; (8002070 <MX_SPI1_Init+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <MX_SPI1_Init+0x64>)
 8002014:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_SPI1_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <MX_SPI1_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_SPI1_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_SPI1_Init+0x64>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_SPI1_Init+0x64>)
 8002034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002038:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_SPI1_Init+0x64>)
 800203c:	2218      	movs	r2, #24
 800203e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <MX_SPI1_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_SPI1_Init+0x64>)
 8002048:	2200      	movs	r2, #0
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <MX_SPI1_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_SPI1_Init+0x64>)
 8002054:	220a      	movs	r2, #10
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <MX_SPI1_Init+0x64>)
 800205a:	f006 fffb 	bl	8009054 <HAL_SPI_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002064:	f002 f906 	bl	8004274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000097c 	.word	0x2000097c
 8002070:	40013000 	.word	0x40013000

08002074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <MX_TIM2_Init+0x98>)
 8002092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <MX_TIM2_Init+0x98>)
 800209a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800209e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_TIM2_Init+0x98>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <MX_TIM2_Init+0x98>)
 80020a8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80020ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <MX_TIM2_Init+0x98>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_TIM2_Init+0x98>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020ba:	4814      	ldr	r0, [pc, #80]	; (800210c <MX_TIM2_Init+0x98>)
 80020bc:	f007 fd36 	bl	8009b2c <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020c6:	f002 f8d5 	bl	8004274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	4619      	mov	r1, r3
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_TIM2_Init+0x98>)
 80020d8:	f007 fd77 	bl	8009bca <HAL_TIM_ConfigClockSource>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80020e2:	f002 f8c7 	bl	8004274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ee:	463b      	mov	r3, r7
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_TIM2_Init+0x98>)
 80020f4:	f007 ff26 	bl	8009f44 <HAL_TIMEx_MasterConfigSynchronization>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020fe:	f002 f8b9 	bl	8004274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000c08 	.word	0x20000c08

08002110 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_USART1_UART_Init+0x4c>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <MX_USART1_UART_Init+0x50>)
 8002118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MX_USART1_UART_Init+0x4c>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_USART1_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_USART1_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_USART1_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_USART1_UART_Init+0x4c>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_USART1_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_USART1_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_USART1_UART_Init+0x4c>)
 8002148:	f007 ff5a 	bl	800a000 <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002152:	f002 f88f 	bl	8004274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000b34 	.word	0x20000b34
 8002160:	40013800 	.word	0x40013800

08002164 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <MX_USART3_UART_Init+0x50>)
 800216c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 8002170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002174:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 800218a:	220c      	movs	r2, #12
 800218c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 8002196:	2200      	movs	r2, #0
 8002198:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800219a:	4805      	ldr	r0, [pc, #20]	; (80021b0 <MX_USART3_UART_Init+0x4c>)
 800219c:	f007 ff7d 	bl	800a09a <HAL_HalfDuplex_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021a6:	f002 f865 	bl	8004274 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000bc4 	.word	0x20000bc4
 80021b4:	40004800 	.word	0x40004800

080021b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_DMA_Init+0x38>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <MX_DMA_Init+0x38>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6153      	str	r3, [r2, #20]
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_DMA_Init+0x38>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	200b      	movs	r0, #11
 80021dc:	f005 fd05 	bl	8007bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021e0:	200b      	movs	r0, #11
 80021e2:	f005 fd1e 	bl	8007c22 <HAL_NVIC_EnableIRQ>

}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002208:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <MX_GPIO_Init+0x150>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <MX_GPIO_Init+0x150>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <MX_GPIO_Init+0x150>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002220:	4b48      	ldr	r3, [pc, #288]	; (8002344 <MX_GPIO_Init+0x150>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a47      	ldr	r2, [pc, #284]	; (8002344 <MX_GPIO_Init+0x150>)
 8002226:	f043 0320 	orr.w	r3, r3, #32
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b45      	ldr	r3, [pc, #276]	; (8002344 <MX_GPIO_Init+0x150>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <MX_GPIO_Init+0x150>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a41      	ldr	r2, [pc, #260]	; (8002344 <MX_GPIO_Init+0x150>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <MX_GPIO_Init+0x150>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <MX_GPIO_Init+0x150>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <MX_GPIO_Init+0x150>)
 8002256:	f043 0308 	orr.w	r3, r3, #8
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <MX_GPIO_Init+0x150>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, W25Q_CS_Pin|LCD_LED_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800226e:	4836      	ldr	r0, [pc, #216]	; (8002348 <MX_GPIO_Init+0x154>)
 8002270:	f006 f92b 	bl	80084ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	2102      	movs	r1, #2
 8002278:	4834      	ldr	r0, [pc, #208]	; (800234c <MX_GPIO_Init+0x158>)
 800227a:	f006 f926 	bl	80084ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	2118      	movs	r1, #24
 8002282:	4832      	ldr	r0, [pc, #200]	; (800234c <MX_GPIO_Init+0x158>)
 8002284:	f006 f921 	bl	80084ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|SENS_SUPPLY_Pin|BUZZER_Pin|CONV_OUTPUT_Pin
 8002288:	2200      	movs	r2, #0
 800228a:	f643 3105 	movw	r1, #15109	; 0x3b05
 800228e:	4830      	ldr	r0, [pc, #192]	; (8002350 <MX_GPIO_Init+0x15c>)
 8002290:	f006 f91b 	bl	80084ca <HAL_GPIO_WritePin>
                          |PUMP_OUTPUT_Pin|MAIN_SUPPLY_Pin|FRIDGE_OUTPUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : W25Q_CS_Pin LCD_LED_Pin */
  GPIO_InitStruct.Pin = W25Q_CS_Pin|LCD_LED_Pin;
 8002294:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	4619      	mov	r1, r3
 80022ac:	4826      	ldr	r0, [pc, #152]	; (8002348 <MX_GPIO_Init+0x154>)
 80022ae:	f005 ff71 	bl	8008194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 80022b2:	231a      	movs	r3, #26
 80022b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2302      	movs	r3, #2
 80022c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4619      	mov	r1, r3
 80022c8:	4820      	ldr	r0, [pc, #128]	; (800234c <MX_GPIO_Init+0x158>)
 80022ca:	f005 ff63 	bl	8008194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin SENS_SUPPLY_Pin BUZZER_Pin CONV_OUTPUT_Pin
                           PUMP_OUTPUT_Pin MAIN_SUPPLY_Pin FRIDGE_OUTPUT_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|SENS_SUPPLY_Pin|BUZZER_Pin|CONV_OUTPUT_Pin
 80022ce:	f643 3305 	movw	r3, #15109	; 0x3b05
 80022d2:	613b      	str	r3, [r7, #16]
                          |PUMP_OUTPUT_Pin|MAIN_SUPPLY_Pin|FRIDGE_OUTPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2302      	movs	r3, #2
 80022de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	4619      	mov	r1, r3
 80022e6:	481a      	ldr	r0, [pc, #104]	; (8002350 <MX_GPIO_Init+0x15c>)
 80022e8:	f005 ff54 	bl	8008194 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOOR_INPUT_Pin PRX_SENS_INPUT_Pin BUTTON_ENTER_Pin BUTTON_ESC_Pin
                           BUTTON_UP_Pin */
  GPIO_InitStruct.Pin = DOOR_INPUT_Pin|PRX_SENS_INPUT_Pin|BUTTON_ENTER_Pin|BUTTON_ESC_Pin
 80022ec:	f24c 0338 	movw	r3, #49208	; 0xc038
 80022f0:	613b      	str	r3, [r7, #16]
                          |BUTTON_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	4619      	mov	r1, r3
 8002300:	4813      	ldr	r0, [pc, #76]	; (8002350 <MX_GPIO_Init+0x15c>)
 8002302:	f005 ff47 	bl	8008194 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGN_INPUT_Pin */
  GPIO_InitStruct.Pin = IGN_INPUT_Pin;
 8002306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800230a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IGN_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4619      	mov	r1, r3
 800231a:	480c      	ldr	r0, [pc, #48]	; (800234c <MX_GPIO_Init+0x158>)
 800231c:	f005 ff3a 	bl	8008194 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_DOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOWN_Pin;
 8002320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_DOWN_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 0310 	add.w	r3, r7, #16
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_GPIO_Init+0x158>)
 8002336:	f005 ff2d 	bl	8008194 <HAL_GPIO_Init>

}
 800233a:	bf00      	nop
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40011000 	.word	0x40011000
 800234c:	40010800 	.word	0x40010800
 8002350:	40010c00 	.word	0x40010c00

08002354 <u8g_port_delay_ns>:


//****************************************************************************

//функции задержек для работы библиотеки дисплея
void u8g_port_delay_ns(uint8_t ns) {
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	// Core @72 MHZ: 14ns per instruction.
	// __NOP(); is direct "nop;" instruction to cpu.
	// Divide ns / 28 (extra instruction for jump back to beginning of the loop) for loop cycles.
	for (uint8_t i = 0; i < (ns / 28); i++) {
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	e003      	b.n	800236c <u8g_port_delay_ns+0x18>
		__NOP();
 8002364:	bf00      	nop
	for (uint8_t i = 0; i < (ns / 28); i++) {
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	3301      	adds	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <u8g_port_delay_ns+0x38>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	429a      	cmp	r2, r3
 800237c:	d3f2      	bcc.n	8002364 <u8g_port_delay_ns+0x10>
	}
}
 800237e:	bf00      	nop
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	24924925 	.word	0x24924925

08002390 <u8g_port_delay_100ns>:

void u8g_port_delay_100ns(uint8_t ns) {
 8002390:	b5b0      	push	{r4, r5, r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	// Same as in u8g_hw_port_delay_ns function.
	// 100 / 28 = 3.57;
	for (uint16_t i = 0; i < (ns * 3.57); i++) {
 800239a:	2300      	movs	r3, #0
 800239c:	81fb      	strh	r3, [r7, #14]
 800239e:	e003      	b.n	80023a8 <u8g_port_delay_100ns+0x18>
		__NOP();
 80023a0:	bf00      	nop
	for (uint16_t i = 0; i < (ns * 3.57); i++) {
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	3301      	adds	r3, #1
 80023a6:	81fb      	strh	r3, [r7, #14]
 80023a8:	89fb      	ldrh	r3, [r7, #14]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f956 	bl	800065c <__aeabi_i2d>
 80023b0:	4604      	mov	r4, r0
 80023b2:	460d      	mov	r5, r1
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f950 	bl	800065c <__aeabi_i2d>
 80023bc:	a30a      	add	r3, pc, #40	; (adr r3, 80023e8 <u8g_port_delay_100ns+0x58>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fd fecf 	bl	8000164 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fe fa0f 	bl	80007f0 <__aeabi_dcmplt>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e3      	bne.n	80023a0 <u8g_port_delay_100ns+0x10>
	}
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bdb0      	pop	{r4, r5, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	f3af 8000 	nop.w
 80023e8:	28f5c28f 	.word	0x28f5c28f
 80023ec:	400c8f5c 	.word	0x400c8f5c

080023f0 <u8g_port_delay_10us>:

void u8g_port_delay_10us(uint8_t us) {
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
	// Same as in u8g_hw_port_delay_ns function.
	// 3.57 * 100 ? 357;
	for (uint16_t i = 0; i < (us * 357); i++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	81fb      	strh	r3, [r7, #14]
 80023fe:	e003      	b.n	8002408 <u8g_port_delay_10us+0x18>
		__NOP();
 8002400:	bf00      	nop
	for (uint16_t i = 0; i < (us * 357); i++) {
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	3301      	adds	r3, #1
 8002406:	81fb      	strh	r3, [r7, #14]
 8002408:	89fa      	ldrh	r2, [r7, #14]
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f240 1165 	movw	r1, #357	; 0x165
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	429a      	cmp	r2, r3
 8002416:	dbf3      	blt.n	8002400 <u8g_port_delay_10us+0x10>
	}
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <u8g2_gpio_and_delay_stm32>:
//************************************************************************

// функция обработки задержек и управления gpio для работы библиотеки дисплея
uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8,
		U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
		U8X8_UNUSED void *arg_ptr) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	72fb      	strb	r3, [r7, #11]
 8002432:	4613      	mov	r3, r2
 8002434:	72bb      	strb	r3, [r7, #10]

	switch (msg) {
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	3b28      	subs	r3, #40	; 0x28
 800243a:	2b23      	cmp	r3, #35	; 0x23
 800243c:	d873      	bhi.n	8002526 <u8g2_gpio_and_delay_stm32+0x102>
 800243e:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <u8g2_gpio_and_delay_stm32+0x20>)
 8002440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002444:	080024d5 	.word	0x080024d5
 8002448:	080024ff 	.word	0x080024ff
 800244c:	080024f5 	.word	0x080024f5
 8002450:	080024eb 	.word	0x080024eb
 8002454:	080024e1 	.word	0x080024e1
 8002458:	08002527 	.word	0x08002527
 800245c:	08002527 	.word	0x08002527
 8002460:	08002527 	.word	0x08002527
 8002464:	08002527 	.word	0x08002527
 8002468:	08002527 	.word	0x08002527
 800246c:	08002527 	.word	0x08002527
 8002470:	08002527 	.word	0x08002527
 8002474:	08002527 	.word	0x08002527
 8002478:	08002527 	.word	0x08002527
 800247c:	08002527 	.word	0x08002527
 8002480:	08002527 	.word	0x08002527
 8002484:	08002527 	.word	0x08002527
 8002488:	08002527 	.word	0x08002527
 800248c:	08002527 	.word	0x08002527
 8002490:	08002527 	.word	0x08002527
 8002494:	08002527 	.word	0x08002527
 8002498:	08002527 	.word	0x08002527
 800249c:	08002527 	.word	0x08002527
 80024a0:	08002527 	.word	0x08002527
 80024a4:	08002527 	.word	0x08002527
 80024a8:	08002527 	.word	0x08002527
 80024ac:	08002527 	.word	0x08002527
 80024b0:	08002527 	.word	0x08002527
 80024b4:	08002527 	.word	0x08002527
 80024b8:	08002527 	.word	0x08002527
 80024bc:	08002527 	.word	0x08002527
 80024c0:	08002527 	.word	0x08002527
 80024c4:	08002527 	.word	0x08002527
 80024c8:	08002527 	.word	0x08002527
 80024cc:	08002527 	.word	0x08002527
 80024d0:	08002509 	.word	0x08002509

		case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2110      	movs	r1, #16
 80024d8:	4816      	ldr	r0, [pc, #88]	; (8002534 <u8g2_gpio_and_delay_stm32+0x110>)
 80024da:	f005 fff6 	bl	80084ca <HAL_GPIO_WritePin>
		break;
 80024de:	e024      	b.n	800252a <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_NANO:
		u8g_port_delay_ns(arg_int);
 80024e0:	7abb      	ldrb	r3, [r7, #10]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff36 	bl	8002354 <u8g_port_delay_ns>
		break;
 80024e8:	e01f      	b.n	800252a <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_100NANO:
		u8g_port_delay_100ns(arg_int);
 80024ea:	7abb      	ldrb	r3, [r7, #10]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff4f 	bl	8002390 <u8g_port_delay_100ns>
		break;
 80024f2:	e01a      	b.n	800252a <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_10MICRO:
		u8g_port_delay_10us(arg_int);
 80024f4:	7abb      	ldrb	r3, [r7, #10]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff7a 	bl	80023f0 <u8g_port_delay_10us>
		break;
 80024fc:	e015      	b.n	800252a <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 80024fe:	7abb      	ldrb	r3, [r7, #10]
 8002500:	4618      	mov	r0, r3
 8002502:	f004 fd07 	bl	8006f14 <HAL_Delay>
		break;
 8002506:	e010      	b.n	800252a <u8g2_gpio_and_delay_stm32+0x106>

		case U8X8_MSG_GPIO_RESET:
		if (arg_int)
 8002508:	7abb      	ldrb	r3, [r7, #10]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <u8g2_gpio_and_delay_stm32+0xf6>
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, SET);
 800250e:	2201      	movs	r2, #1
 8002510:	2108      	movs	r1, #8
 8002512:	4808      	ldr	r0, [pc, #32]	; (8002534 <u8g2_gpio_and_delay_stm32+0x110>)
 8002514:	f005 ffd9 	bl	80084ca <HAL_GPIO_WritePin>
		else
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
		break;
 8002518:	e007      	b.n	800252a <u8g2_gpio_and_delay_stm32+0x106>
		HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	2108      	movs	r1, #8
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <u8g2_gpio_and_delay_stm32+0x110>)
 8002520:	f005 ffd3 	bl	80084ca <HAL_GPIO_WritePin>
		break;
 8002524:	e001      	b.n	800252a <u8g2_gpio_and_delay_stm32+0x106>
		default:
		return 0;//A message was received which is not implemented, return 0 to indicate an error
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <u8g2_gpio_and_delay_stm32+0x108>
	}

	return 1; // command processed successfully.
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40010800 	.word	0x40010800

08002538 <u8x8_byte_4wire_hw_spi>:
//***************************************************************************************************

// функция для работы библиотеки дисплея по SPI
uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	72fb      	strb	r3, [r7, #11]
 8002546:	4613      	mov	r3, r2
 8002548:	72bb      	strb	r3, [r7, #10]

	switch (msg) {
 800254a:	7afb      	ldrb	r3, [r7, #11]
 800254c:	3b14      	subs	r3, #20
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d837      	bhi.n	80025c2 <u8x8_byte_4wire_hw_spi+0x8a>
 8002552:	a201      	add	r2, pc, #4	; (adr r2, 8002558 <u8x8_byte_4wire_hw_spi+0x20>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	080025c7 	.word	0x080025c7
 800255c:	080025c3 	.word	0x080025c3
 8002560:	080025c3 	.word	0x080025c3
 8002564:	0800258d 	.word	0x0800258d
 8002568:	080025ab 	.word	0x080025ab
 800256c:	080025b7 	.word	0x080025b7
 8002570:	080025c3 	.word	0x080025c3
 8002574:	080025c3 	.word	0x080025c3
 8002578:	080025c3 	.word	0x080025c3
 800257c:	080025c3 	.word	0x080025c3
 8002580:	080025c3 	.word	0x080025c3
 8002584:	080025c3 	.word	0x080025c3
 8002588:	0800259d 	.word	0x0800259d
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 100);
 800258c:	7abb      	ldrb	r3, [r7, #10]
 800258e:	b29a      	uxth	r2, r3
 8002590:	2364      	movs	r3, #100	; 0x64
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	480f      	ldr	r0, [pc, #60]	; (80025d4 <u8x8_byte_4wire_hw_spi+0x9c>)
 8002596:	f006 fde1 	bl	800915c <HAL_SPI_Transmit>
		break;
 800259a:	e015      	b.n	80025c8 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_INIT:
		break;

	case U8X8_MSG_BYTE_SET_DC:
		 HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, arg_int);
 800259c:	7abb      	ldrb	r3, [r7, #10]
 800259e:	461a      	mov	r2, r3
 80025a0:	2101      	movs	r1, #1
 80025a2:	480d      	ldr	r0, [pc, #52]	; (80025d8 <u8x8_byte_4wire_hw_spi+0xa0>)
 80025a4:	f005 ff91 	bl	80084ca <HAL_GPIO_WritePin>
		break;
 80025a8:	e00e      	b.n	80025c8 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_START_TRANSFER:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2110      	movs	r1, #16
 80025ae:	480b      	ldr	r0, [pc, #44]	; (80025dc <u8x8_byte_4wire_hw_spi+0xa4>)
 80025b0:	f005 ff8b 	bl	80084ca <HAL_GPIO_WritePin>
		break;
 80025b4:	e008      	b.n	80025c8 <u8x8_byte_4wire_hw_spi+0x90>

	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 80025b6:	2201      	movs	r2, #1
 80025b8:	2110      	movs	r1, #16
 80025ba:	4808      	ldr	r0, [pc, #32]	; (80025dc <u8x8_byte_4wire_hw_spi+0xa4>)
 80025bc:	f005 ff85 	bl	80084ca <HAL_GPIO_WritePin>
		break;
 80025c0:	e002      	b.n	80025c8 <u8x8_byte_4wire_hw_spi+0x90>

	default:
		return 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e001      	b.n	80025ca <u8x8_byte_4wire_hw_spi+0x92>
		break;
 80025c6:	bf00      	nop
	}
	return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000097c 	.word	0x2000097c
 80025d8:	40010c00 	.word	0x40010c00
 80025dc:	40010800 	.word	0x40010800

080025e0 <fnPrintMenuItemName>:
//*****************************************************************************************

//Функция печати имени пункта меню из progmem (общая для всех меню) --------------
void fnPrintMenuItemName(uint8_t _num_item, uint8_t _num_line, const char* const* _names) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	; 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	603a      	str	r2, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
 80025ec:	460b      	mov	r3, r1
 80025ee:	71bb      	strb	r3, [r7, #6]

  char buffer[32] = {0,};                            // Буфер на полную строку
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	615a      	str	r2, [r3, #20]
 8002606:	619a      	str	r2, [r3, #24]
  uint8_t i = 0;                                     // Переменная - счетчик
 8002608:	2300      	movs	r3, #0
 800260a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  const char * ptr = _names[_num_item];			// Получаем указатель на первый символ строки
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28


  do {                                            // Начало цикла
    buffer[i] = *ptr;        					  // Прочитать в буфер один символ из PGM и подвинуть указатель на 1
 800261a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800261e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002626:	440b      	add	r3, r1
 8002628:	f803 2c28 	strb.w	r2, [r3, #-40]
    i++;
 800262c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002630:	3301      	adds	r3, #1
 8002632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ptr++;
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	3301      	adds	r3, #1
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
  } while (i<ITEM_MAX_CHARS);                     // Если это не конец строки - вернуться в начало цикла
 800263c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002640:	2b10      	cmp	r3, #16
 8002642:	d9ea      	bls.n	800261a <fnPrintMenuItemName+0x3a>
      buffer[i++] = (char)(pgm_read_byte(ptr));   // выводим
      ptr++;                                      // следующий символ
    }
 */

  u8g2_SetFont(&u8g2,u8g2_font_6x12_tr);
 8002644:	490d      	ldr	r1, [pc, #52]	; (800267c <fnPrintMenuItemName+0x9c>)
 8002646:	480e      	ldr	r0, [pc, #56]	; (8002680 <fnPrintMenuItemName+0xa0>)
 8002648:	f003 f924 	bl	8005894 <u8g2_SetFont>
  u8g2_DrawStr(&u8g2,3,(_num_line*12)-1,buffer); // Вывод готовой строки
 800264c:	79bb      	ldrb	r3, [r7, #6]
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	0052      	lsls	r2, r2, #1
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	2103      	movs	r1, #3
 8002664:	4806      	ldr	r0, [pc, #24]	; (8002680 <fnPrintMenuItemName+0xa0>)
 8002666:	f003 f877 	bl	8005758 <u8g2_DrawStr>
  u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 800266a:	4906      	ldr	r1, [pc, #24]	; (8002684 <fnPrintMenuItemName+0xa4>)
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <fnPrintMenuItemName+0xa0>)
 800266e:	f003 f911 	bl	8005894 <u8g2_SetFont>

}
 8002672:	bf00      	nop
 8002674:	3730      	adds	r7, #48	; 0x30
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	0800aff0 	.word	0x0800aff0
 8002680:	20000a68 	.word	0x20000a68
 8002684:	0800b3bc 	.word	0x0800b3bc

08002688 <fnPrintSelectionFrame>:
//*******************************************************************************************************************

//----------- Функция печати рамки навигации по меню -------------------
void fnPrintSelectionFrame(uint8_t item_pointer) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af02      	add	r7, sp, #8
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]

  uint8_t n = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]


  if(item_pointer < display_num_lines)n = item_pointer;
 8002696:	4b31      	ldr	r3, [pc, #196]	; (800275c <fnPrintSelectionFrame+0xd4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	79fa      	ldrb	r2, [r7, #7]
 800269c:	429a      	cmp	r2, r3
 800269e:	d202      	bcs.n	80026a6 <fnPrintSelectionFrame+0x1e>
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e008      	b.n	80026b8 <fnPrintSelectionFrame+0x30>
  else n = item_pointer % display_num_lines;
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <fnPrintSelectionFrame+0xd4>)
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80026b0:	fb02 f201 	mul.w	r2, r2, r1
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	73fb      	strb	r3, [r7, #15]

  if(menu_mode == MENU_SETPOINTS_EDIT_MODE){
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <fnPrintSelectionFrame+0xd8>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d135      	bne.n	800272c <fnPrintSelectionFrame+0xa4>


    if(flag_blink)u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <fnPrintSelectionFrame+0xdc>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d014      	beq.n	80026f2 <fnPrintSelectionFrame+0x6a>
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	0052      	lsls	r2, r2, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3302      	adds	r3, #2
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <fnPrintSelectionFrame+0xe0>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b02      	subs	r3, #2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	210c      	movs	r1, #12
 80026e6:	9100      	str	r1, [sp, #0]
 80026e8:	2100      	movs	r1, #0
 80026ea:	4820      	ldr	r0, [pc, #128]	; (800276c <fnPrintSelectionFrame+0xe4>)
 80026ec:	f002 fb85 	bl	8004dfa <u8g2_DrawFrame>
  }
  else{
	  u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
  }

}
 80026f0:	e030      	b.n	8002754 <fnPrintSelectionFrame+0xcc>
      u8g2_SetDrawColor(&u8g2,0);
 80026f2:	2100      	movs	r1, #0
 80026f4:	481d      	ldr	r0, [pc, #116]	; (800276c <fnPrintSelectionFrame+0xe4>)
 80026f6:	f003 f9f4 	bl	8005ae2 <u8g2_SetDrawColor>
      u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	0052      	lsls	r2, r2, #1
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	b29b      	uxth	r3, r3
 8002708:	3302      	adds	r3, #2
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <fnPrintSelectionFrame+0xe0>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b02      	subs	r3, #2
 8002714:	b29b      	uxth	r3, r3
 8002716:	210c      	movs	r1, #12
 8002718:	9100      	str	r1, [sp, #0]
 800271a:	2100      	movs	r1, #0
 800271c:	4813      	ldr	r0, [pc, #76]	; (800276c <fnPrintSelectionFrame+0xe4>)
 800271e:	f002 fb6c 	bl	8004dfa <u8g2_DrawFrame>
      u8g2_SetDrawColor(&u8g2,1);
 8002722:	2101      	movs	r1, #1
 8002724:	4811      	ldr	r0, [pc, #68]	; (800276c <fnPrintSelectionFrame+0xe4>)
 8002726:	f003 f9dc 	bl	8005ae2 <u8g2_SetDrawColor>
}
 800272a:	e013      	b.n	8002754 <fnPrintSelectionFrame+0xcc>
	  u8g2_DrawFrame(&u8g2,0, n*(LCD_FONT_HIGHT + LCD_LINE_SPACER)+2, display_width-2, (LCD_FONT_HIGHT + LCD_LINE_SPACER));
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	0052      	lsls	r2, r2, #1
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	b29b      	uxth	r3, r3
 800273a:	3302      	adds	r3, #2
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <fnPrintSelectionFrame+0xe0>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b02      	subs	r3, #2
 8002746:	b29b      	uxth	r3, r3
 8002748:	210c      	movs	r1, #12
 800274a:	9100      	str	r1, [sp, #0]
 800274c:	2100      	movs	r1, #0
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <fnPrintSelectionFrame+0xe4>)
 8002750:	f002 fb53 	bl	8004dfa <u8g2_DrawFrame>
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000978 	.word	0x20000978
 8002760:	2000008e 	.word	0x2000008e
 8002764:	200000a4 	.word	0x200000a4
 8002768:	20000c50 	.word	0x20000c50
 800276c:	20000a68 	.word	0x20000a68

08002770 <printMenuSetpoints>:
//********************************************************************************************************************

//--------- Функция вывода меню уставок ------------------------------------------------
void printMenuSetpoints(void){
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

  u8g2_ClearBuffer(&u8g2);				//
 8002776:	482d      	ldr	r0, [pc, #180]	; (800282c <printMenuSetpoints+0xbc>)
 8002778:	f002 fb89 	bl	8004e8e <u8g2_ClearBuffer>
  u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 800277c:	492c      	ldr	r1, [pc, #176]	; (8002830 <printMenuSetpoints+0xc0>)
 800277e:	482b      	ldr	r0, [pc, #172]	; (800282c <printMenuSetpoints+0xbc>)
 8002780:	f003 f888 	bl	8005894 <u8g2_SetFont>

  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 8002784:	2300      	movs	r3, #0
 8002786:	71fb      	strb	r3, [r7, #7]
 8002788:	e024      	b.n	80027d4 <printMenuSetpoints+0x64>

    fnPrintMenuItemName(i+(menu_current_page*display_num_lines), i+1, setpoints_menu_names); // Выводим название пункта
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <printMenuSetpoints+0xc4>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <printMenuSetpoints+0xc8>)
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	b2da      	uxtb	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	4413      	add	r3, r2
 800279c:	b2d8      	uxtb	r0, r3
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	3301      	adds	r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4a25      	ldr	r2, [pc, #148]	; (800283c <printMenuSetpoints+0xcc>)
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7ff ff1a 	bl	80025e0 <fnPrintMenuItemName>
    fnPrintMenuSetpointsItemVal(i+(menu_current_page*display_num_lines), i+1); // Выводим значение пункта меню уставок
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <printMenuSetpoints+0xc4>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4a21      	ldr	r2, [pc, #132]	; (8002838 <printMenuSetpoints+0xc8>)
 80027b2:	7812      	ldrb	r2, [r2, #0]
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4413      	add	r3, r2
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	3301      	adds	r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f000 f83d 	bl	8002848 <fnPrintMenuSetpointsItemVal>
  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	3301      	adds	r3, #1
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <printMenuSetpoints+0xc8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	79fa      	ldrb	r2, [r7, #7]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d3d5      	bcc.n	800278a <printMenuSetpoints+0x1a>
  }

  //рисуем рамку
  fnPrintSelectionFrame(menu_current_item);
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <printMenuSetpoints+0xd0>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff50 	bl	8002688 <fnPrintSelectionFrame>

  //рисуем боковой скролл бар
  uint8_t scroll_bar_height = display_height/(MENU_SETPOINTS_NUM_ITEMS/display_num_lines);
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <printMenuSetpoints+0xd4>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <printMenuSetpoints+0xc8>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	2319      	movs	r3, #25
 80027f6:	fb93 f3f1 	sdiv	r3, r3, r1
 80027fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80027fe:	71bb      	strb	r3, [r7, #6]
  u8g2_DrawVLine(&u8g2,127, menu_current_page*scroll_bar_height, scroll_bar_height);
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <printMenuSetpoints+0xc4>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	79ba      	ldrb	r2, [r7, #6]
 8002808:	b292      	uxth	r2, r2
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	b29a      	uxth	r2, r3
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	b29b      	uxth	r3, r3
 8002814:	217f      	movs	r1, #127	; 0x7f
 8002816:	4805      	ldr	r0, [pc, #20]	; (800282c <printMenuSetpoints+0xbc>)
 8002818:	f003 f94a 	bl	8005ab0 <u8g2_DrawVLine>

  u8g2_SendBuffer(&u8g2);
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <printMenuSetpoints+0xbc>)
 800281e:	f002 fba9 	bl	8004f74 <u8g2_SendBuffer>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000a68 	.word	0x20000a68
 8002830:	0800b3bc 	.word	0x0800b3bc
 8002834:	2000008d 	.word	0x2000008d
 8002838:	20000978 	.word	0x20000978
 800283c:	0800ac28 	.word	0x0800ac28
 8002840:	2000008c 	.word	0x2000008c
 8002844:	20000979 	.word	0x20000979

08002848 <fnPrintMenuSetpointsItemVal>:
//*************************************************************************************************************

//Функция печати значения пункта меню уставок ---------------------------------
void fnPrintMenuSetpointsItemVal(uint8_t num_item, uint8_t num_line){
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	4603      	mov	r3, r0
 8002850:	460a      	mov	r2, r1
 8002852:	71fb      	strb	r3, [r7, #7]
 8002854:	4613      	mov	r3, r2
 8002856:	71bb      	strb	r3, [r7, #6]

  //если все параметры одного типа то можно выводить через массив
  //snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
  //u8g2_DrawStr(&u8g2,98,(num_line*12)-2,buffer);

  char buffer[10] = {0,};
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	809a      	strh	r2, [r3, #4]
  uint8_t float_m, float_n; // переменные для разбития числа на целую и дробную часть

	switch (num_item) {
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	2b18      	cmp	r3, #24
 800286a:	f200 81f3 	bhi.w	8002c54 <fnPrintMenuSetpointsItemVal+0x40c>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <fnPrintMenuSetpointsItemVal+0x2c>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	080028d9 	.word	0x080028d9
 8002878:	080028ed 	.word	0x080028ed
 800287c:	08002939 	.word	0x08002939
 8002880:	08002979 	.word	0x08002979
 8002884:	0800298d 	.word	0x0800298d
 8002888:	080029cd 	.word	0x080029cd
 800288c:	080029e1 	.word	0x080029e1
 8002890:	08002a2d 	.word	0x08002a2d
 8002894:	08002a6d 	.word	0x08002a6d
 8002898:	08002a81 	.word	0x08002a81
 800289c:	08002ac1 	.word	0x08002ac1
 80028a0:	08002ad5 	.word	0x08002ad5
 80028a4:	08002ae9 	.word	0x08002ae9
 80028a8:	08002afd 	.word	0x08002afd
 80028ac:	08002b49 	.word	0x08002b49
 80028b0:	08002b5d 	.word	0x08002b5d
 80028b4:	08002b71 	.word	0x08002b71
 80028b8:	08002b85 	.word	0x08002b85
 80028bc:	08002bc9 	.word	0x08002bc9
 80028c0:	08002bdd 	.word	0x08002bdd
 80028c4:	08002bf1 	.word	0x08002bf1
 80028c8:	08002c05 	.word	0x08002c05
 80028cc:	08002c19 	.word	0x08002c19
 80028d0:	08002c2d 	.word	0x08002c2d
 80028d4:	08002c41 	.word	0x08002c41
	case 0:
		snprintf(buffer, sizeof(buffer), "%ds",
				SetpointsUnion.SetpointsArray[num_item]);
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	4aaf      	ldr	r2, [pc, #700]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%ds",
 80028de:	f107 000c 	add.w	r0, r7, #12
 80028e2:	4aae      	ldr	r2, [pc, #696]	; (8002b9c <fnPrintMenuSetpointsItemVal+0x354>)
 80028e4:	210a      	movs	r1, #10
 80028e6:	f001 ffc3 	bl	8004870 <mini_snprintf>
		break;
 80028ea:	e1b4      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 1:

		switch (SetpointsUnion.SetpointsArray[num_item]) {
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	4aaa      	ldr	r2, [pc, #680]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d00e      	beq.n	8002914 <fnPrintMenuSetpointsItemVal+0xcc>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	dc1c      	bgt.n	8002934 <fnPrintMenuSetpointsItemVal+0xec>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <fnPrintMenuSetpointsItemVal+0xbc>
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d010      	beq.n	8002924 <fnPrintMenuSetpointsItemVal+0xdc>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 8002902:	e017      	b.n	8002934 <fnPrintMenuSetpointsItemVal+0xec>
			snprintf(buffer, sizeof(buffer), "off");
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4aa5      	ldr	r2, [pc, #660]	; (8002ba0 <fnPrintMenuSetpointsItemVal+0x358>)
 800290a:	210a      	movs	r1, #10
 800290c:	4618      	mov	r0, r3
 800290e:	f001 ffaf 	bl	8004870 <mini_snprintf>
			break;
 8002912:	e010      	b.n	8002936 <fnPrintMenuSetpointsItemVal+0xee>
			snprintf(buffer, sizeof(buffer), "on");
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	4aa2      	ldr	r2, [pc, #648]	; (8002ba4 <fnPrintMenuSetpointsItemVal+0x35c>)
 800291a:	210a      	movs	r1, #10
 800291c:	4618      	mov	r0, r3
 800291e:	f001 ffa7 	bl	8004870 <mini_snprintf>
			break;
 8002922:	e008      	b.n	8002936 <fnPrintMenuSetpointsItemVal+0xee>
			snprintf(buffer, sizeof(buffer), "auto");
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	4a9f      	ldr	r2, [pc, #636]	; (8002ba8 <fnPrintMenuSetpointsItemVal+0x360>)
 800292a:	210a      	movs	r1, #10
 800292c:	4618      	mov	r0, r3
 800292e:	f001 ff9f 	bl	8004870 <mini_snprintf>
			break;
 8002932:	e000      	b.n	8002936 <fnPrintMenuSetpointsItemVal+0xee>
			break;
 8002934:	bf00      	nop
		}

		break;
 8002936:	e18e      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 2:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4a97      	ldr	r2, [pc, #604]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 8002940:	7dfa      	ldrb	r2, [r7, #23]
 8002942:	4b9a      	ldr	r3, [pc, #616]	; (8002bac <fnPrintMenuSetpointsItemVal+0x364>)
 8002944:	fba3 1302 	umull	r1, r3, r3, r2
 8002948:	08d9      	lsrs	r1, r3, #3
 800294a:	460b      	mov	r3, r1
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	4a94      	ldr	r2, [pc, #592]	; (8002bac <fnPrintMenuSetpointsItemVal+0x364>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	08db      	lsrs	r3, r3, #3
 8002960:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 8002962:	7dfa      	ldrb	r2, [r7, #23]
 8002964:	7dbb      	ldrb	r3, [r7, #22]
 8002966:	f107 000c 	add.w	r0, r7, #12
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	4a90      	ldr	r2, [pc, #576]	; (8002bb0 <fnPrintMenuSetpointsItemVal+0x368>)
 8002970:	210a      	movs	r1, #10
 8002972:	f001 ff7d 	bl	8004870 <mini_snprintf>
		break;
 8002976:	e16e      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 3:
		snprintf(buffer, sizeof(buffer), "%ds",
				SetpointsUnion.SetpointsArray[num_item]);
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	4a87      	ldr	r2, [pc, #540]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%ds",
 800297e:	f107 000c 	add.w	r0, r7, #12
 8002982:	4a86      	ldr	r2, [pc, #536]	; (8002b9c <fnPrintMenuSetpointsItemVal+0x354>)
 8002984:	210a      	movs	r1, #10
 8002986:	f001 ff73 	bl	8004870 <mini_snprintf>
		break;
 800298a:	e164      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 4:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 8002994:	7dfa      	ldrb	r2, [r7, #23]
 8002996:	4b85      	ldr	r3, [pc, #532]	; (8002bac <fnPrintMenuSetpointsItemVal+0x364>)
 8002998:	fba3 1302 	umull	r1, r3, r3, r2
 800299c:	08d9      	lsrs	r1, r3, #3
 800299e:	460b      	mov	r3, r1
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	4a7f      	ldr	r2, [pc, #508]	; (8002bac <fnPrintMenuSetpointsItemVal+0x364>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 80029b6:	7dfa      	ldrb	r2, [r7, #23]
 80029b8:	7dbb      	ldrb	r3, [r7, #22]
 80029ba:	f107 000c 	add.w	r0, r7, #12
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	4a7b      	ldr	r2, [pc, #492]	; (8002bb0 <fnPrintMenuSetpointsItemVal+0x368>)
 80029c4:	210a      	movs	r1, #10
 80029c6:	f001 ff53 	bl	8004870 <mini_snprintf>
		break;
 80029ca:	e144      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 5:
		snprintf(buffer, sizeof(buffer), "%dm",
				SetpointsUnion.SetpointsArray[num_item]);
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	4a72      	ldr	r2, [pc, #456]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 80029d0:	5cd3      	ldrb	r3, [r2, r3]
		snprintf(buffer, sizeof(buffer), "%dm",
 80029d2:	f107 000c 	add.w	r0, r7, #12
 80029d6:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <fnPrintMenuSetpointsItemVal+0x36c>)
 80029d8:	210a      	movs	r1, #10
 80029da:	f001 ff49 	bl	8004870 <mini_snprintf>
		break;
 80029de:	e13a      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 6:
		switch (SetpointsUnion.SetpointsArray[num_item]) {
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4a6d      	ldr	r2, [pc, #436]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d00e      	beq.n	8002a08 <fnPrintMenuSetpointsItemVal+0x1c0>
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	dc1c      	bgt.n	8002a28 <fnPrintMenuSetpointsItemVal+0x1e0>
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <fnPrintMenuSetpointsItemVal+0x1b0>
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d010      	beq.n	8002a18 <fnPrintMenuSetpointsItemVal+0x1d0>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 80029f6:	e017      	b.n	8002a28 <fnPrintMenuSetpointsItemVal+0x1e0>
			snprintf(buffer, sizeof(buffer), "off");
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	4a68      	ldr	r2, [pc, #416]	; (8002ba0 <fnPrintMenuSetpointsItemVal+0x358>)
 80029fe:	210a      	movs	r1, #10
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 ff35 	bl	8004870 <mini_snprintf>
			break;
 8002a06:	e010      	b.n	8002a2a <fnPrintMenuSetpointsItemVal+0x1e2>
			snprintf(buffer, sizeof(buffer), "on");
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <fnPrintMenuSetpointsItemVal+0x35c>)
 8002a0e:	210a      	movs	r1, #10
 8002a10:	4618      	mov	r0, r3
 8002a12:	f001 ff2d 	bl	8004870 <mini_snprintf>
			break;
 8002a16:	e008      	b.n	8002a2a <fnPrintMenuSetpointsItemVal+0x1e2>
			snprintf(buffer, sizeof(buffer), "auto");
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	4a62      	ldr	r2, [pc, #392]	; (8002ba8 <fnPrintMenuSetpointsItemVal+0x360>)
 8002a1e:	210a      	movs	r1, #10
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 ff25 	bl	8004870 <mini_snprintf>
			break;
 8002a26:	e000      	b.n	8002a2a <fnPrintMenuSetpointsItemVal+0x1e2>
			break;
 8002a28:	bf00      	nop
		}
		break;
 8002a2a:	e114      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 7:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4a5a      	ldr	r2, [pc, #360]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 8002a34:	7dfa      	ldrb	r2, [r7, #23]
 8002a36:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <fnPrintMenuSetpointsItemVal+0x364>)
 8002a38:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3c:	08d9      	lsrs	r1, r3, #3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	4a57      	ldr	r2, [pc, #348]	; (8002bac <fnPrintMenuSetpointsItemVal+0x364>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 8002a56:	7dfa      	ldrb	r2, [r7, #23]
 8002a58:	7dbb      	ldrb	r3, [r7, #22]
 8002a5a:	f107 000c 	add.w	r0, r7, #12
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	4a53      	ldr	r2, [pc, #332]	; (8002bb0 <fnPrintMenuSetpointsItemVal+0x368>)
 8002a64:	210a      	movs	r1, #10
 8002a66:	f001 ff03 	bl	8004870 <mini_snprintf>
		break;
 8002a6a:	e0f4      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 8:
	  	snprintf(buffer,sizeof(buffer), "%ds", SetpointsUnion.SetpointsArray[num_item]);
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
 8002a72:	f107 000c 	add.w	r0, r7, #12
 8002a76:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <fnPrintMenuSetpointsItemVal+0x354>)
 8002a78:	210a      	movs	r1, #10
 8002a7a:	f001 fef9 	bl	8004870 <mini_snprintf>
	  	break;
 8002a7e:	e0ea      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 9:
		float_m = SetpointsUnion.SetpointsArray[num_item];
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	75fb      	strb	r3, [r7, #23]
		float_n = float_m % 10;
 8002a88:	7dfa      	ldrb	r2, [r7, #23]
 8002a8a:	4b48      	ldr	r3, [pc, #288]	; (8002bac <fnPrintMenuSetpointsItemVal+0x364>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	08d9      	lsrs	r1, r3, #3
 8002a92:	460b      	mov	r3, r1
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	75bb      	strb	r3, [r7, #22]
		float_m = float_m / 10;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	4a42      	ldr	r2, [pc, #264]	; (8002bac <fnPrintMenuSetpointsItemVal+0x364>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	75fb      	strb	r3, [r7, #23]
		snprintf(buffer, sizeof(buffer), "%d.%d", float_m, float_n);
 8002aaa:	7dfa      	ldrb	r2, [r7, #23]
 8002aac:	7dbb      	ldrb	r3, [r7, #22]
 8002aae:	f107 000c 	add.w	r0, r7, #12
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	4a3e      	ldr	r2, [pc, #248]	; (8002bb0 <fnPrintMenuSetpointsItemVal+0x368>)
 8002ab8:	210a      	movs	r1, #10
 8002aba:	f001 fed9 	bl	8004870 <mini_snprintf>
		break;
 8002abe:	e0ca      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 10:
	  	snprintf(buffer,sizeof(buffer), "%dm", SetpointsUnion.SetpointsArray[num_item]);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	f107 000c 	add.w	r0, r7, #12
 8002aca:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <fnPrintMenuSetpointsItemVal+0x36c>)
 8002acc:	210a      	movs	r1, #10
 8002ace:	f001 fecf 	bl	8004870 <mini_snprintf>
	      break;
 8002ad2:	e0c0      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 11:
	  	snprintf(buffer,sizeof(buffer), "%dC", SetpointsUnion.SetpointsArray[num_item]);
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	4a30      	ldr	r2, [pc, #192]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002ad8:	5cd3      	ldrb	r3, [r2, r3]
 8002ada:	f107 000c 	add.w	r0, r7, #12
 8002ade:	4a36      	ldr	r2, [pc, #216]	; (8002bb8 <fnPrintMenuSetpointsItemVal+0x370>)
 8002ae0:	210a      	movs	r1, #10
 8002ae2:	f001 fec5 	bl	8004870 <mini_snprintf>
	    break;
 8002ae6:	e0b6      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 12:
	  	snprintf(buffer,sizeof(buffer), "%dC", SetpointsUnion.SetpointsArray[num_item]);
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	4a2b      	ldr	r2, [pc, #172]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	f107 000c 	add.w	r0, r7, #12
 8002af2:	4a31      	ldr	r2, [pc, #196]	; (8002bb8 <fnPrintMenuSetpointsItemVal+0x370>)
 8002af4:	210a      	movs	r1, #10
 8002af6:	f001 febb 	bl	8004870 <mini_snprintf>
	    break;
 8002afa:	e0ac      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 13:
		switch (SetpointsUnion.SetpointsArray[num_item]) {
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d00e      	beq.n	8002b24 <fnPrintMenuSetpointsItemVal+0x2dc>
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	dc1c      	bgt.n	8002b44 <fnPrintMenuSetpointsItemVal+0x2fc>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <fnPrintMenuSetpointsItemVal+0x2cc>
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d010      	beq.n	8002b34 <fnPrintMenuSetpointsItemVal+0x2ec>
			break;
		case AUTO_MODE:
			snprintf(buffer, sizeof(buffer), "auto");
			break;
		default:
			break;
 8002b12:	e017      	b.n	8002b44 <fnPrintMenuSetpointsItemVal+0x2fc>
			snprintf(buffer, sizeof(buffer), "off");
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <fnPrintMenuSetpointsItemVal+0x358>)
 8002b1a:	210a      	movs	r1, #10
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 fea7 	bl	8004870 <mini_snprintf>
			break;
 8002b22:	e010      	b.n	8002b46 <fnPrintMenuSetpointsItemVal+0x2fe>
			snprintf(buffer, sizeof(buffer), "on");
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <fnPrintMenuSetpointsItemVal+0x35c>)
 8002b2a:	210a      	movs	r1, #10
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 fe9f 	bl	8004870 <mini_snprintf>
			break;
 8002b32:	e008      	b.n	8002b46 <fnPrintMenuSetpointsItemVal+0x2fe>
			snprintf(buffer, sizeof(buffer), "auto");
 8002b34:	f107 030c 	add.w	r3, r7, #12
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <fnPrintMenuSetpointsItemVal+0x360>)
 8002b3a:	210a      	movs	r1, #10
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 fe97 	bl	8004870 <mini_snprintf>
			break;
 8002b42:	e000      	b.n	8002b46 <fnPrintMenuSetpointsItemVal+0x2fe>
			break;
 8002b44:	bf00      	nop
		}
	    break;
 8002b46:	e086      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 14:
		snprintf(buffer,sizeof(buffer), "%dR", SetpointsUnion.SetpointsArray[num_item]);
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002b4c:	5cd3      	ldrb	r3, [r2, r3]
 8002b4e:	f107 000c 	add.w	r0, r7, #12
 8002b52:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <fnPrintMenuSetpointsItemVal+0x374>)
 8002b54:	210a      	movs	r1, #10
 8002b56:	f001 fe8b 	bl	8004870 <mini_snprintf>
		break;
 8002b5a:	e07c      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 15:
	  	snprintf(buffer,sizeof(buffer), "%dR", SetpointsUnion.SetpointsArray[num_item]);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002b60:	5cd3      	ldrb	r3, [r2, r3]
 8002b62:	f107 000c 	add.w	r0, r7, #12
 8002b66:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <fnPrintMenuSetpointsItemVal+0x374>)
 8002b68:	210a      	movs	r1, #10
 8002b6a:	f001 fe81 	bl	8004870 <mini_snprintf>
	    break;
 8002b6e:	e072      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 16:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002b74:	5cd3      	ldrb	r3, [r2, r3]
 8002b76:	f107 000c 	add.w	r0, r7, #12
 8002b7a:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <fnPrintMenuSetpointsItemVal+0x378>)
 8002b7c:	210a      	movs	r1, #10
 8002b7e:	f001 fe77 	bl	8004870 <mini_snprintf>
	    break;
 8002b82:	e068      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 17:
	  	snprintf(buffer,sizeof(buffer), "%dL", SetpointsUnion.SetpointsArray[num_item]);
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <fnPrintMenuSetpointsItemVal+0x350>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	f107 000c 	add.w	r0, r7, #12
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <fnPrintMenuSetpointsItemVal+0x37c>)
 8002b90:	210a      	movs	r1, #10
 8002b92:	f001 fe6d 	bl	8004870 <mini_snprintf>
	    break;
 8002b96:	e05e      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>
 8002b98:	20000b78 	.word	0x20000b78
 8002b9c:	0800a924 	.word	0x0800a924
 8002ba0:	0800a928 	.word	0x0800a928
 8002ba4:	0800a92c 	.word	0x0800a92c
 8002ba8:	0800a930 	.word	0x0800a930
 8002bac:	cccccccd 	.word	0xcccccccd
 8002bb0:	0800a938 	.word	0x0800a938
 8002bb4:	0800a940 	.word	0x0800a940
 8002bb8:	0800a944 	.word	0x0800a944
 8002bbc:	0800a948 	.word	0x0800a948
 8002bc0:	0800a94c 	.word	0x0800a94c
 8002bc4:	0800a950 	.word	0x0800a950

	case 18:
	  	snprintf(buffer,sizeof(buffer), "%dh", SetpointsUnion.SetpointsArray[num_item]);
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <fnPrintMenuSetpointsItemVal+0x430>)
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	f107 000c 	add.w	r0, r7, #12
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <fnPrintMenuSetpointsItemVal+0x434>)
 8002bd4:	210a      	movs	r1, #10
 8002bd6:	f001 fe4b 	bl	8004870 <mini_snprintf>
	    break;
 8002bda:	e03c      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 19:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <fnPrintMenuSetpointsItemVal+0x430>)
 8002be0:	5cd3      	ldrb	r3, [r2, r3]
 8002be2:	f107 000c 	add.w	r0, r7, #12
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <fnPrintMenuSetpointsItemVal+0x438>)
 8002be8:	210a      	movs	r1, #10
 8002bea:	f001 fe41 	bl	8004870 <mini_snprintf>
	    break;
 8002bee:	e032      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 20:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <fnPrintMenuSetpointsItemVal+0x430>)
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	f107 000c 	add.w	r0, r7, #12
 8002bfa:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <fnPrintMenuSetpointsItemVal+0x438>)
 8002bfc:	210a      	movs	r1, #10
 8002bfe:	f001 fe37 	bl	8004870 <mini_snprintf>
	    break;
 8002c02:	e028      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 21:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <fnPrintMenuSetpointsItemVal+0x430>)
 8002c08:	5cd3      	ldrb	r3, [r2, r3]
 8002c0a:	f107 000c 	add.w	r0, r7, #12
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <fnPrintMenuSetpointsItemVal+0x438>)
 8002c10:	210a      	movs	r1, #10
 8002c12:	f001 fe2d 	bl	8004870 <mini_snprintf>
	    break;
 8002c16:	e01e      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 22:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <fnPrintMenuSetpointsItemVal+0x430>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	f107 000c 	add.w	r0, r7, #12
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <fnPrintMenuSetpointsItemVal+0x438>)
 8002c24:	210a      	movs	r1, #10
 8002c26:	f001 fe23 	bl	8004870 <mini_snprintf>
	    break;
 8002c2a:	e014      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 23:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <fnPrintMenuSetpointsItemVal+0x430>)
 8002c30:	5cd3      	ldrb	r3, [r2, r3]
 8002c32:	f107 000c 	add.w	r0, r7, #12
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <fnPrintMenuSetpointsItemVal+0x438>)
 8002c38:	210a      	movs	r1, #10
 8002c3a:	f001 fe19 	bl	8004870 <mini_snprintf>
	    break;
 8002c3e:	e00a      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	case 24:
	  	snprintf(buffer,sizeof(buffer), "%d", SetpointsUnion.SetpointsArray[num_item]);
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <fnPrintMenuSetpointsItemVal+0x430>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	f107 000c 	add.w	r0, r7, #12
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <fnPrintMenuSetpointsItemVal+0x438>)
 8002c4c:	210a      	movs	r1, #10
 8002c4e:	f001 fe0f 	bl	8004870 <mini_snprintf>
	    break;
 8002c52:	e000      	b.n	8002c56 <fnPrintMenuSetpointsItemVal+0x40e>

	default:
		break;
 8002c54:	bf00      	nop
	}

   u8g2_DrawStr(&u8g2,102,(num_line*12),buffer);
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	0052      	lsls	r2, r2, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	2166      	movs	r1, #102	; 0x66
 8002c6a:	4806      	ldr	r0, [pc, #24]	; (8002c84 <fnPrintMenuSetpointsItemVal+0x43c>)
 8002c6c:	f002 fd74 	bl	8005758 <u8g2_DrawStr>

 }
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000b78 	.word	0x20000b78
 8002c7c:	0800a954 	.word	0x0800a954
 8002c80:	0800a94c 	.word	0x0800a94c
 8002c84:	20000a68 	.word	0x20000a68

08002c88 <fnPrintMenuParamItemVal>:
//*********************************************************************************************************************


//Функция печати значения пункта меню просмотра параметров ------------------------------
void fnPrintMenuParamItemVal(uint8_t num_item, uint8_t num_line){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460a      	mov	r2, r1
 8002c92:	71fb      	strb	r3, [r7, #7]
 8002c94:	4613      	mov	r3, r2
 8002c96:	71bb      	strb	r3, [r7, #6]

  char buffer[10] = {0,};
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	f107 0310 	add.w	r3, r7, #16
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	809a      	strh	r2, [r3, #4]
  int float_m, float_n; // переменные для разбития числа на целую и дробную часть

  switch (num_item)
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b0e      	cmp	r3, #14
 8002caa:	f200 8155 	bhi.w	8002f58 <fnPrintMenuParamItemVal+0x2d0>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <fnPrintMenuParamItemVal+0x2c>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cf1 	.word	0x08002cf1
 8002cb8:	08002d47 	.word	0x08002d47
 8002cbc:	08002d59 	.word	0x08002d59
 8002cc0:	08002daf 	.word	0x08002daf
 8002cc4:	08002e05 	.word	0x08002e05
 8002cc8:	08002e5b 	.word	0x08002e5b
 8002ccc:	08002eb1 	.word	0x08002eb1
 8002cd0:	08002edb 	.word	0x08002edb
 8002cd4:	08002eed 	.word	0x08002eed
 8002cd8:	08002eff 	.word	0x08002eff
 8002cdc:	08002f11 	.word	0x08002f11
 8002ce0:	08002f23 	.word	0x08002f23
 8002ce4:	08002f35 	.word	0x08002f35
 8002ce8:	08002f47 	.word	0x08002f47
 8002cec:	08002f59 	.word	0x08002f59
  {
  case 0:
    float_m = (int)(main_data.battery_voltage * 10);
 8002cf0:	4ba2      	ldr	r3, [pc, #648]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	49a2      	ldr	r1, [pc, #648]	; (8002f80 <fnPrintMenuParamItemVal+0x2f8>)
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd ff00 	bl	8000afc <__aeabi_fmul>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f84c 	bl	8000d9c <__aeabi_f2iz>
 8002d04:	4603      	mov	r3, r0
 8002d06:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	4b9e      	ldr	r3, [pc, #632]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002d0c:	fb83 1302 	smull	r1, r3, r3, r2
 8002d10:	1099      	asrs	r1, r3, #2
 8002d12:	17d3      	asrs	r3, r2, #31
 8002d14:	1ac9      	subs	r1, r1, r3
 8002d16:	460b      	mov	r3, r1
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4a97      	ldr	r2, [pc, #604]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002d26:	fb82 1203 	smull	r1, r2, r2, r3
 8002d2a:	1092      	asrs	r2, r2, #2
 8002d2c:	17db      	asrs	r3, r3, #31
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 8002d32:	f107 000c 	add.w	r0, r7, #12
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4a92      	ldr	r2, [pc, #584]	; (8002f88 <fnPrintMenuParamItemVal+0x300>)
 8002d3e:	210a      	movs	r1, #10
 8002d40:	f001 fd96 	bl	8004870 <mini_snprintf>
    break;
 8002d44:	e109      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 1:
    snprintf(buffer,sizeof(buffer),"%uL", main_data.water_level_liter);
 8002d46:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002d48:	7e1b      	ldrb	r3, [r3, #24]
 8002d4a:	f107 000c 	add.w	r0, r7, #12
 8002d4e:	4a8f      	ldr	r2, [pc, #572]	; (8002f8c <fnPrintMenuParamItemVal+0x304>)
 8002d50:	210a      	movs	r1, #10
 8002d52:	f001 fd8d 	bl	8004870 <mini_snprintf>
    break;
 8002d56:	e100      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 2:
    float_m = (int)(main_data.outside_temperature * 10);
 8002d58:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4988      	ldr	r1, [pc, #544]	; (8002f80 <fnPrintMenuParamItemVal+0x2f8>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fecc 	bl	8000afc <__aeabi_fmul>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe f818 	bl	8000d9c <__aeabi_f2iz>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	4b84      	ldr	r3, [pc, #528]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002d74:	fb83 1302 	smull	r1, r3, r3, r2
 8002d78:	1099      	asrs	r1, r3, #2
 8002d7a:	17d3      	asrs	r3, r2, #31
 8002d7c:	1ac9      	subs	r1, r1, r3
 8002d7e:	460b      	mov	r3, r1
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	4a7d      	ldr	r2, [pc, #500]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8002d92:	1092      	asrs	r2, r2, #2
 8002d94:	17db      	asrs	r3, r3, #31
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 8002d9a:	f107 000c 	add.w	r0, r7, #12
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	4a7a      	ldr	r2, [pc, #488]	; (8002f90 <fnPrintMenuParamItemVal+0x308>)
 8002da6:	210a      	movs	r1, #10
 8002da8:	f001 fd62 	bl	8004870 <mini_snprintf>
    break;
 8002dac:	e0d5      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 3:
    float_m = (int)(main_data.inside_temperature * 10);
 8002dae:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4973      	ldr	r1, [pc, #460]	; (8002f80 <fnPrintMenuParamItemVal+0x2f8>)
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fea1 	bl	8000afc <__aeabi_fmul>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd ffed 	bl	8000d9c <__aeabi_f2iz>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	4b6e      	ldr	r3, [pc, #440]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002dca:	fb83 1302 	smull	r1, r3, r3, r2
 8002dce:	1099      	asrs	r1, r3, #2
 8002dd0:	17d3      	asrs	r3, r2, #31
 8002dd2:	1ac9      	subs	r1, r1, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4a68      	ldr	r2, [pc, #416]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002de4:	fb82 1203 	smull	r1, r2, r2, r3
 8002de8:	1092      	asrs	r2, r2, #2
 8002dea:	17db      	asrs	r3, r3, #31
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 8002df0:	f107 000c 	add.w	r0, r7, #12
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4a65      	ldr	r2, [pc, #404]	; (8002f90 <fnPrintMenuParamItemVal+0x308>)
 8002dfc:	210a      	movs	r1, #10
 8002dfe:	f001 fd37 	bl	8004870 <mini_snprintf>
    break;
 8002e02:	e0aa      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 4:
    float_m = (int)(main_data.fridge_temperature * 10);
 8002e04:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	495d      	ldr	r1, [pc, #372]	; (8002f80 <fnPrintMenuParamItemVal+0x2f8>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fe76 	bl	8000afc <__aeabi_fmul>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd ffc2 	bl	8000d9c <__aeabi_f2iz>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002e20:	fb83 1302 	smull	r1, r3, r3, r2
 8002e24:	1099      	asrs	r1, r3, #2
 8002e26:	17d3      	asrs	r3, r2, #31
 8002e28:	1ac9      	subs	r1, r1, r3
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4a52      	ldr	r2, [pc, #328]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002e3a:	fb82 1203 	smull	r1, r2, r2, r3
 8002e3e:	1092      	asrs	r2, r2, #2
 8002e40:	17db      	asrs	r3, r3, #31
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dC",float_m, float_n);
 8002e46:	f107 000c 	add.w	r0, r7, #12
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4a4f      	ldr	r2, [pc, #316]	; (8002f90 <fnPrintMenuParamItemVal+0x308>)
 8002e52:	210a      	movs	r1, #10
 8002e54:	f001 fd0c 	bl	8004870 <mini_snprintf>
    break;
 8002e58:	e07f      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 5:
    float_m = (int)(main_data.sensors_supply_voltage * 10);
 8002e5a:	4b48      	ldr	r3, [pc, #288]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4948      	ldr	r1, [pc, #288]	; (8002f80 <fnPrintMenuParamItemVal+0x2f8>)
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fe4b 	bl	8000afc <__aeabi_fmul>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd ff97 	bl	8000d9c <__aeabi_f2iz>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	61fb      	str	r3, [r7, #28]
    float_n = float_m%10;
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002e76:	fb83 1302 	smull	r1, r3, r3, r2
 8002e7a:	1099      	asrs	r1, r3, #2
 8002e7c:	17d3      	asrs	r3, r2, #31
 8002e7e:	1ac9      	subs	r1, r1, r3
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	61bb      	str	r3, [r7, #24]
    float_m = float_m/10;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4a3d      	ldr	r2, [pc, #244]	; (8002f84 <fnPrintMenuParamItemVal+0x2fc>)
 8002e90:	fb82 1203 	smull	r1, r2, r2, r3
 8002e94:	1092      	asrs	r2, r2, #2
 8002e96:	17db      	asrs	r3, r3, #31
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	61fb      	str	r3, [r7, #28]
    snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 8002e9c:	f107 000c 	add.w	r0, r7, #12
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <fnPrintMenuParamItemVal+0x300>)
 8002ea8:	210a      	movs	r1, #10
 8002eaa:	f001 fce1 	bl	8004870 <mini_snprintf>
    break;
 8002eae:	e054      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 6:
    if(main_data.res_sensor_resistance <= WATER_SENS_MAX_MAX)snprintf(buffer,sizeof(buffer),"%d",main_data.res_sensor_resistance);
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002eb2:	899b      	ldrh	r3, [r3, #12]
 8002eb4:	2bf0      	cmp	r3, #240	; 0xf0
 8002eb6:	d808      	bhi.n	8002eca <fnPrintMenuParamItemVal+0x242>
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002eba:	899b      	ldrh	r3, [r3, #12]
 8002ebc:	f107 000c 	add.w	r0, r7, #12
 8002ec0:	4a34      	ldr	r2, [pc, #208]	; (8002f94 <fnPrintMenuParamItemVal+0x30c>)
 8002ec2:	210a      	movs	r1, #10
 8002ec4:	f001 fcd4 	bl	8004870 <mini_snprintf>
    else snprintf(buffer,sizeof(buffer),"xxx");
    break;
 8002ec8:	e047      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>
    else snprintf(buffer,sizeof(buffer),"xxx");
 8002eca:	f107 030c 	add.w	r3, r7, #12
 8002ece:	4a32      	ldr	r2, [pc, #200]	; (8002f98 <fnPrintMenuParamItemVal+0x310>)
 8002ed0:	210a      	movs	r1, #10
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 fccc 	bl	8004870 <mini_snprintf>
    break;
 8002ed8:	e03f      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 7:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.door_switch_state);
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002edc:	7e9b      	ldrb	r3, [r3, #26]
 8002ede:	f107 000c 	add.w	r0, r7, #12
 8002ee2:	4a2e      	ldr	r2, [pc, #184]	; (8002f9c <fnPrintMenuParamItemVal+0x314>)
 8002ee4:	210a      	movs	r1, #10
 8002ee6:	f001 fcc3 	bl	8004870 <mini_snprintf>

    break;
 8002eea:	e036      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 8:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.proximity_sensor_state);
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002eee:	7edb      	ldrb	r3, [r3, #27]
 8002ef0:	f107 000c 	add.w	r0, r7, #12
 8002ef4:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <fnPrintMenuParamItemVal+0x314>)
 8002ef6:	210a      	movs	r1, #10
 8002ef8:	f001 fcba 	bl	8004870 <mini_snprintf>
    break;
 8002efc:	e02d      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>
  case 9:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.ignition_switch_state);
 8002efe:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002f00:	7f1b      	ldrb	r3, [r3, #28]
 8002f02:	f107 000c 	add.w	r0, r7, #12
 8002f06:	4a25      	ldr	r2, [pc, #148]	; (8002f9c <fnPrintMenuParamItemVal+0x314>)
 8002f08:	210a      	movs	r1, #10
 8002f0a:	f001 fcb1 	bl	8004870 <mini_snprintf>
    break;
 8002f0e:	e024      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 10:
	snprintf(buffer,sizeof(buffer),"%1u", main_data.converter_output_state);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002f12:	7f5b      	ldrb	r3, [r3, #29]
 8002f14:	f107 000c 	add.w	r0, r7, #12
 8002f18:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <fnPrintMenuParamItemVal+0x314>)
 8002f1a:	210a      	movs	r1, #10
 8002f1c:	f001 fca8 	bl	8004870 <mini_snprintf>
    break;
 8002f20:	e01b      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 11:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.fridge_output_state);
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002f24:	7f9b      	ldrb	r3, [r3, #30]
 8002f26:	f107 000c 	add.w	r0, r7, #12
 8002f2a:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <fnPrintMenuParamItemVal+0x314>)
 8002f2c:	210a      	movs	r1, #10
 8002f2e:	f001 fc9f 	bl	8004870 <mini_snprintf>
    break;
 8002f32:	e012      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 12:
    snprintf(buffer,sizeof(buffer),"%1u", main_data.pump_output_state);
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002f36:	7fdb      	ldrb	r3, [r3, #31]
 8002f38:	f107 000c 	add.w	r0, r7, #12
 8002f3c:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <fnPrintMenuParamItemVal+0x314>)
 8002f3e:	210a      	movs	r1, #10
 8002f40:	f001 fc96 	bl	8004870 <mini_snprintf>
    break;
 8002f44:	e009      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>

  case 13:
	snprintf(buffer,sizeof(buffer),"%1u", main_data.error_code);
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <fnPrintMenuParamItemVal+0x2f4>)
 8002f48:	7e5b      	ldrb	r3, [r3, #25]
 8002f4a:	f107 000c 	add.w	r0, r7, #12
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <fnPrintMenuParamItemVal+0x314>)
 8002f50:	210a      	movs	r1, #10
 8002f52:	f001 fc8d 	bl	8004870 <mini_snprintf>
    break;
 8002f56:	e000      	b.n	8002f5a <fnPrintMenuParamItemVal+0x2d2>
  case 14:

    break;

  default:
    break;
 8002f58:	bf00      	nop
  }

  u8g2_DrawStr(&u8g2,98,(num_line*12),buffer);
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	0052      	lsls	r2, r2, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	2162      	movs	r1, #98	; 0x62
 8002f6e:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <fnPrintMenuParamItemVal+0x318>)
 8002f70:	f002 fbf2 	bl	8005758 <u8g2_DrawStr>
}
 8002f74:	bf00      	nop
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	200009d4 	.word	0x200009d4
 8002f80:	41200000 	.word	0x41200000
 8002f84:	66666667 	.word	0x66666667
 8002f88:	0800a958 	.word	0x0800a958
 8002f8c:	0800a960 	.word	0x0800a960
 8002f90:	0800a964 	.word	0x0800a964
 8002f94:	0800a94c 	.word	0x0800a94c
 8002f98:	0800a96c 	.word	0x0800a96c
 8002f9c:	0800a970 	.word	0x0800a970
 8002fa0:	20000a68 	.word	0x20000a68

08002fa4 <fnPrintMenuParamView>:
//*************************************************************************************************************

//Функция вывода меню параметров  ---------------------------------------------
void fnPrintMenuParamView(void){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

	u8g2_ClearBuffer(&u8g2);				//
 8002faa:	482a      	ldr	r0, [pc, #168]	; (8003054 <fnPrintMenuParamView+0xb0>)
 8002fac:	f001 ff6f 	bl	8004e8e <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);
 8002fb0:	4929      	ldr	r1, [pc, #164]	; (8003058 <fnPrintMenuParamView+0xb4>)
 8002fb2:	4828      	ldr	r0, [pc, #160]	; (8003054 <fnPrintMenuParamView+0xb0>)
 8002fb4:	f002 fc6e 	bl	8005894 <u8g2_SetFont>

  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 8002fb8:	2300      	movs	r3, #0
 8002fba:	71fb      	strb	r3, [r7, #7]
 8002fbc:	e024      	b.n	8003008 <fnPrintMenuParamView+0x64>

    fnPrintMenuItemName(i+(menu_current_page*display_num_lines), i+1, parameters_names); // Выводим название пункта
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <fnPrintMenuParamView+0xb8>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	4a27      	ldr	r2, [pc, #156]	; (8003060 <fnPrintMenuParamView+0xbc>)
 8002fc4:	7812      	ldrb	r2, [r2, #0]
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	4413      	add	r3, r2
 8002fd0:	b2d8      	uxtb	r0, r3
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <fnPrintMenuParamView+0xc0>)
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f7ff fb00 	bl	80025e0 <fnPrintMenuItemName>
    fnPrintMenuParamItemVal(i+(menu_current_page*display_num_lines), i+1); // Выводим значение пункта меню уставок
 8002fe0:	4b1e      	ldr	r3, [pc, #120]	; (800305c <fnPrintMenuParamView+0xb8>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4a1e      	ldr	r2, [pc, #120]	; (8003060 <fnPrintMenuParamView+0xbc>)
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f7ff fe43 	bl	8002c88 <fnPrintMenuParamItemVal>
  for (uint8_t i = 0; i < display_num_lines; i++) {   // Цикл, выводящий пункты на дисплей
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	3301      	adds	r3, #1
 8003006:	71fb      	strb	r3, [r7, #7]
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <fnPrintMenuParamView+0xbc>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	79fa      	ldrb	r2, [r7, #7]
 800300e:	429a      	cmp	r2, r3
 8003010:	d3d5      	bcc.n	8002fbe <fnPrintMenuParamView+0x1a>
  }

  //рисуем боковой скролл бар
    uint8_t scroll_bar_height = display_height/(MENU_PARAM_VIEW_NUM_ITEMS/display_num_lines);
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <fnPrintMenuParamView+0xc4>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <fnPrintMenuParamView+0xbc>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	230f      	movs	r3, #15
 8003020:	fb93 f3f1 	sdiv	r3, r3, r1
 8003024:	fb92 f3f3 	sdiv	r3, r2, r3
 8003028:	71bb      	strb	r3, [r7, #6]
    u8g2_DrawVLine(&u8g2,127, menu_current_page*scroll_bar_height, scroll_bar_height);
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <fnPrintMenuParamView+0xb8>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	79ba      	ldrb	r2, [r7, #6]
 8003032:	b292      	uxth	r2, r2
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	b29a      	uxth	r2, r3
 800303a:	79bb      	ldrb	r3, [r7, #6]
 800303c:	b29b      	uxth	r3, r3
 800303e:	217f      	movs	r1, #127	; 0x7f
 8003040:	4804      	ldr	r0, [pc, #16]	; (8003054 <fnPrintMenuParamView+0xb0>)
 8003042:	f002 fd35 	bl	8005ab0 <u8g2_DrawVLine>

    u8g2_SendBuffer(&u8g2);
 8003046:	4803      	ldr	r0, [pc, #12]	; (8003054 <fnPrintMenuParamView+0xb0>)
 8003048:	f001 ff94 	bl	8004f74 <u8g2_SendBuffer>

}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000a68 	.word	0x20000a68
 8003058:	0800b3bc 	.word	0x0800b3bc
 800305c:	2000008d 	.word	0x2000008d
 8003060:	20000978 	.word	0x20000978
 8003064:	0800aa80 	.word	0x0800aa80
 8003068:	20000979 	.word	0x20000979

0800306c <fnPrintMainView>:
//*******************************************************************************************************************

//Функция вывода главного экрана -----------------------------------------------
void fnPrintMainView(void){
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af02      	add	r7, sp, #8

  char buffer[20] = {0,};
 8003072:	2300      	movs	r3, #0
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
  uint16_t float_m, float_n; // переменные для разбития числа на целую и дробную часть

  u8g2_ClearBuffer(&u8g2);					//
 8003082:	48aa      	ldr	r0, [pc, #680]	; (800332c <fnPrintMainView+0x2c0>)
 8003084:	f001 ff03 	bl	8004e8e <u8g2_ClearBuffer>
  u8g2_SetFont(&u8g2,u8g2_font_5x7_tr);
 8003088:	49a9      	ldr	r1, [pc, #676]	; (8003330 <fnPrintMainView+0x2c4>)
 800308a:	48a8      	ldr	r0, [pc, #672]	; (800332c <fnPrintMainView+0x2c0>)
 800308c:	f002 fc02 	bl	8005894 <u8g2_SetFont>

  u8g2_DrawBox(&u8g2,98,1,31,8);
 8003090:	2308      	movs	r3, #8
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	231f      	movs	r3, #31
 8003096:	2201      	movs	r2, #1
 8003098:	2162      	movs	r1, #98	; 0x62
 800309a:	48a4      	ldr	r0, [pc, #656]	; (800332c <fnPrintMainView+0x2c0>)
 800309c:	f001 fe89 	bl	8004db2 <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,98,11,31,8);
 80030a0:	2308      	movs	r3, #8
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	231f      	movs	r3, #31
 80030a6:	220b      	movs	r2, #11
 80030a8:	2162      	movs	r1, #98	; 0x62
 80030aa:	48a0      	ldr	r0, [pc, #640]	; (800332c <fnPrintMainView+0x2c0>)
 80030ac:	f001 fe81 	bl	8004db2 <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,98,21,31,8);
 80030b0:	2308      	movs	r3, #8
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	231f      	movs	r3, #31
 80030b6:	2215      	movs	r2, #21
 80030b8:	2162      	movs	r1, #98	; 0x62
 80030ba:	489c      	ldr	r0, [pc, #624]	; (800332c <fnPrintMainView+0x2c0>)
 80030bc:	f001 fe79 	bl	8004db2 <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,98,31,31,8);
 80030c0:	2308      	movs	r3, #8
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	231f      	movs	r3, #31
 80030c6:	221f      	movs	r2, #31
 80030c8:	2162      	movs	r1, #98	; 0x62
 80030ca:	4898      	ldr	r0, [pc, #608]	; (800332c <fnPrintMainView+0x2c0>)
 80030cc:	f001 fe71 	bl	8004db2 <u8g2_DrawBox>

  u8g2_SetDrawColor(&u8g2,0);
 80030d0:	2100      	movs	r1, #0
 80030d2:	4896      	ldr	r0, [pc, #600]	; (800332c <fnPrintMainView+0x2c0>)
 80030d4:	f002 fd05 	bl	8005ae2 <u8g2_SetDrawColor>

  float_m = (uint16_t)(main_data.battery_voltage * 10);
 80030d8:	4b96      	ldr	r3, [pc, #600]	; (8003334 <fnPrintMainView+0x2c8>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	4996      	ldr	r1, [pc, #600]	; (8003338 <fnPrintMainView+0x2cc>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fd0c 	bl	8000afc <__aeabi_fmul>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fe7e 	bl	8000de8 <__aeabi_f2uiz>
 80030ec:	4603      	mov	r3, r0
 80030ee:	82fb      	strh	r3, [r7, #22]
  float_n = float_m%10;
 80030f0:	8afa      	ldrh	r2, [r7, #22]
 80030f2:	4b92      	ldr	r3, [pc, #584]	; (800333c <fnPrintMainView+0x2d0>)
 80030f4:	fba3 1302 	umull	r1, r3, r3, r2
 80030f8:	08d9      	lsrs	r1, r3, #3
 80030fa:	460b      	mov	r3, r1
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	82bb      	strh	r3, [r7, #20]
  float_m = float_m/10;
 8003106:	8afb      	ldrh	r3, [r7, #22]
 8003108:	4a8c      	ldr	r2, [pc, #560]	; (800333c <fnPrintMainView+0x2d0>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	82fb      	strh	r3, [r7, #22]
  snprintf(buffer,sizeof(buffer),"%d.%dv",float_m, float_n);
 8003112:	8afa      	ldrh	r2, [r7, #22]
 8003114:	8abb      	ldrh	r3, [r7, #20]
 8003116:	4638      	mov	r0, r7
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	4a88      	ldr	r2, [pc, #544]	; (8003340 <fnPrintMainView+0x2d4>)
 800311e:	2114      	movs	r1, #20
 8003120:	f001 fba6 	bl	8004870 <mini_snprintf>
  u8g2_DrawStr(&u8g2,102, 8, buffer);
 8003124:	463b      	mov	r3, r7
 8003126:	2208      	movs	r2, #8
 8003128:	2166      	movs	r1, #102	; 0x66
 800312a:	4880      	ldr	r0, [pc, #512]	; (800332c <fnPrintMainView+0x2c0>)
 800312c:	f002 fb14 	bl	8005758 <u8g2_DrawStr>

  snprintf(buffer,sizeof(buffer),"> %dC", (int)main_data.inside_temperature);
 8003130:	4b80      	ldr	r3, [pc, #512]	; (8003334 <fnPrintMainView+0x2c8>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fe31 	bl	8000d9c <__aeabi_f2iz>
 800313a:	4603      	mov	r3, r0
 800313c:	4638      	mov	r0, r7
 800313e:	4a81      	ldr	r2, [pc, #516]	; (8003344 <fnPrintMainView+0x2d8>)
 8003140:	2114      	movs	r1, #20
 8003142:	f001 fb95 	bl	8004870 <mini_snprintf>
  u8g2_DrawStr(&u8g2, 98, 18, buffer);
 8003146:	463b      	mov	r3, r7
 8003148:	2212      	movs	r2, #18
 800314a:	2162      	movs	r1, #98	; 0x62
 800314c:	4877      	ldr	r0, [pc, #476]	; (800332c <fnPrintMainView+0x2c0>)
 800314e:	f002 fb03 	bl	8005758 <u8g2_DrawStr>

  snprintf(buffer,sizeof(buffer),"< %dC", (int)main_data.outside_temperature);
 8003152:	4b78      	ldr	r3, [pc, #480]	; (8003334 <fnPrintMainView+0x2c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd fe20 	bl	8000d9c <__aeabi_f2iz>
 800315c:	4603      	mov	r3, r0
 800315e:	4638      	mov	r0, r7
 8003160:	4a79      	ldr	r2, [pc, #484]	; (8003348 <fnPrintMainView+0x2dc>)
 8003162:	2114      	movs	r1, #20
 8003164:	f001 fb84 	bl	8004870 <mini_snprintf>
  u8g2_DrawStr(&u8g2, 98, 28, buffer);
 8003168:	463b      	mov	r3, r7
 800316a:	221c      	movs	r2, #28
 800316c:	2162      	movs	r1, #98	; 0x62
 800316e:	486f      	ldr	r0, [pc, #444]	; (800332c <fnPrintMainView+0x2c0>)
 8003170:	f002 faf2 	bl	8005758 <u8g2_DrawStr>

  snprintf(buffer,sizeof(buffer),"f %dC", (int)main_data.fridge_temperature);
 8003174:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <fnPrintMainView+0x2c8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fe0f 	bl	8000d9c <__aeabi_f2iz>
 800317e:	4603      	mov	r3, r0
 8003180:	4638      	mov	r0, r7
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <fnPrintMainView+0x2e0>)
 8003184:	2114      	movs	r1, #20
 8003186:	f001 fb73 	bl	8004870 <mini_snprintf>
  u8g2_DrawStr(&u8g2, 98, 38, buffer);
 800318a:	463b      	mov	r3, r7
 800318c:	2226      	movs	r2, #38	; 0x26
 800318e:	2162      	movs	r1, #98	; 0x62
 8003190:	4866      	ldr	r0, [pc, #408]	; (800332c <fnPrintMainView+0x2c0>)
 8003192:	f002 fae1 	bl	8005758 <u8g2_DrawStr>

  u8g2_SetDrawColor(&u8g2,1);
 8003196:	2101      	movs	r1, #1
 8003198:	4864      	ldr	r0, [pc, #400]	; (800332c <fnPrintMainView+0x2c0>)
 800319a:	f002 fca2 	bl	8005ae2 <u8g2_SetDrawColor>

  if(main_data.pump_output_state){
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <fnPrintMainView+0x2c8>)
 80031a0:	7fdb      	ldrb	r3, [r3, #31]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <fnPrintMainView+0x168>
	u8g2_DrawBox(&u8g2,64,1,21,8);
 80031a6:	2308      	movs	r3, #8
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2315      	movs	r3, #21
 80031ac:	2201      	movs	r2, #1
 80031ae:	2140      	movs	r1, #64	; 0x40
 80031b0:	485e      	ldr	r0, [pc, #376]	; (800332c <fnPrintMainView+0x2c0>)
 80031b2:	f001 fdfe 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 80031b6:	2100      	movs	r1, #0
 80031b8:	485c      	ldr	r0, [pc, #368]	; (800332c <fnPrintMainView+0x2c0>)
 80031ba:	f002 fc92 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 8, "PUMP");
 80031be:	4b64      	ldr	r3, [pc, #400]	; (8003350 <fnPrintMainView+0x2e4>)
 80031c0:	2208      	movs	r2, #8
 80031c2:	2141      	movs	r1, #65	; 0x41
 80031c4:	4859      	ldr	r0, [pc, #356]	; (800332c <fnPrintMainView+0x2c0>)
 80031c6:	f002 fac7 	bl	8005758 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 80031ca:	2101      	movs	r1, #1
 80031cc:	4857      	ldr	r0, [pc, #348]	; (800332c <fnPrintMainView+0x2c0>)
 80031ce:	f002 fc88 	bl	8005ae2 <u8g2_SetDrawColor>
 80031d2:	e00f      	b.n	80031f4 <fnPrintMainView+0x188>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 80031d4:	2100      	movs	r1, #0
 80031d6:	4855      	ldr	r0, [pc, #340]	; (800332c <fnPrintMainView+0x2c0>)
 80031d8:	f002 fc83 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,1,21,8);
 80031dc:	2308      	movs	r3, #8
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2315      	movs	r3, #21
 80031e2:	2201      	movs	r2, #1
 80031e4:	2140      	movs	r1, #64	; 0x40
 80031e6:	4851      	ldr	r0, [pc, #324]	; (800332c <fnPrintMainView+0x2c0>)
 80031e8:	f001 fde3 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 80031ec:	2101      	movs	r1, #1
 80031ee:	484f      	ldr	r0, [pc, #316]	; (800332c <fnPrintMainView+0x2c0>)
 80031f0:	f002 fc77 	bl	8005ae2 <u8g2_SetDrawColor>
  }

  if(main_data.converter_output_state){
 80031f4:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <fnPrintMainView+0x2c8>)
 80031f6:	7f5b      	ldrb	r3, [r3, #29]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d016      	beq.n	800322a <fnPrintMainView+0x1be>
	u8g2_DrawBox(&u8g2,64,11,21,8);
 80031fc:	2308      	movs	r3, #8
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2315      	movs	r3, #21
 8003202:	220b      	movs	r2, #11
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	4849      	ldr	r0, [pc, #292]	; (800332c <fnPrintMainView+0x2c0>)
 8003208:	f001 fdd3 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 800320c:	2100      	movs	r1, #0
 800320e:	4847      	ldr	r0, [pc, #284]	; (800332c <fnPrintMainView+0x2c0>)
 8003210:	f002 fc67 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 18, "CONV");
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <fnPrintMainView+0x2e8>)
 8003216:	2212      	movs	r2, #18
 8003218:	2141      	movs	r1, #65	; 0x41
 800321a:	4844      	ldr	r0, [pc, #272]	; (800332c <fnPrintMainView+0x2c0>)
 800321c:	f002 fa9c 	bl	8005758 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8003220:	2101      	movs	r1, #1
 8003222:	4842      	ldr	r0, [pc, #264]	; (800332c <fnPrintMainView+0x2c0>)
 8003224:	f002 fc5d 	bl	8005ae2 <u8g2_SetDrawColor>
 8003228:	e00f      	b.n	800324a <fnPrintMainView+0x1de>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 800322a:	2100      	movs	r1, #0
 800322c:	483f      	ldr	r0, [pc, #252]	; (800332c <fnPrintMainView+0x2c0>)
 800322e:	f002 fc58 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,11,21,8);
 8003232:	2308      	movs	r3, #8
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2315      	movs	r3, #21
 8003238:	220b      	movs	r2, #11
 800323a:	2140      	movs	r1, #64	; 0x40
 800323c:	483b      	ldr	r0, [pc, #236]	; (800332c <fnPrintMainView+0x2c0>)
 800323e:	f001 fdb8 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 8003242:	2101      	movs	r1, #1
 8003244:	4839      	ldr	r0, [pc, #228]	; (800332c <fnPrintMainView+0x2c0>)
 8003246:	f002 fc4c 	bl	8005ae2 <u8g2_SetDrawColor>
  }

  if(main_data.fridge_output_state){
 800324a:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <fnPrintMainView+0x2c8>)
 800324c:	7f9b      	ldrb	r3, [r3, #30]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d016      	beq.n	8003280 <fnPrintMainView+0x214>
	u8g2_DrawBox(&u8g2,64,21,21,8);
 8003252:	2308      	movs	r3, #8
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2315      	movs	r3, #21
 8003258:	2215      	movs	r2, #21
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	4833      	ldr	r0, [pc, #204]	; (800332c <fnPrintMainView+0x2c0>)
 800325e:	f001 fda8 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 8003262:	2100      	movs	r1, #0
 8003264:	4831      	ldr	r0, [pc, #196]	; (800332c <fnPrintMainView+0x2c0>)
 8003266:	f002 fc3c 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,65, 28, "FRDG");
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <fnPrintMainView+0x2ec>)
 800326c:	221c      	movs	r2, #28
 800326e:	2141      	movs	r1, #65	; 0x41
 8003270:	482e      	ldr	r0, [pc, #184]	; (800332c <fnPrintMainView+0x2c0>)
 8003272:	f002 fa71 	bl	8005758 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8003276:	2101      	movs	r1, #1
 8003278:	482c      	ldr	r0, [pc, #176]	; (800332c <fnPrintMainView+0x2c0>)
 800327a:	f002 fc32 	bl	8005ae2 <u8g2_SetDrawColor>
 800327e:	e00f      	b.n	80032a0 <fnPrintMainView+0x234>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8003280:	2100      	movs	r1, #0
 8003282:	482a      	ldr	r0, [pc, #168]	; (800332c <fnPrintMainView+0x2c0>)
 8003284:	f002 fc2d 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,64,21,21,8);
 8003288:	2308      	movs	r3, #8
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2315      	movs	r3, #21
 800328e:	2215      	movs	r2, #21
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	4826      	ldr	r0, [pc, #152]	; (800332c <fnPrintMainView+0x2c0>)
 8003294:	f001 fd8d 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 8003298:	2101      	movs	r1, #1
 800329a:	4824      	ldr	r0, [pc, #144]	; (800332c <fnPrintMainView+0x2c0>)
 800329c:	f002 fc21 	bl	8005ae2 <u8g2_SetDrawColor>
  }

  if(main_data.error_code){
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <fnPrintMainView+0x2c8>)
 80032a2:	7e5b      	ldrb	r3, [r3, #25]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d016      	beq.n	80032d6 <fnPrintMainView+0x26a>
	u8g2_DrawBox(&u8g2,1,1,16,8);
 80032a8:	2308      	movs	r3, #8
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2310      	movs	r3, #16
 80032ae:	2201      	movs	r2, #1
 80032b0:	2101      	movs	r1, #1
 80032b2:	481e      	ldr	r0, [pc, #120]	; (800332c <fnPrintMainView+0x2c0>)
 80032b4:	f001 fd7d 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 80032b8:	2100      	movs	r1, #0
 80032ba:	481c      	ldr	r0, [pc, #112]	; (800332c <fnPrintMainView+0x2c0>)
 80032bc:	f002 fc11 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,2, 8, "ERR");
 80032c0:	4b26      	ldr	r3, [pc, #152]	; (800335c <fnPrintMainView+0x2f0>)
 80032c2:	2208      	movs	r2, #8
 80032c4:	2102      	movs	r1, #2
 80032c6:	4819      	ldr	r0, [pc, #100]	; (800332c <fnPrintMainView+0x2c0>)
 80032c8:	f002 fa46 	bl	8005758 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 80032cc:	2101      	movs	r1, #1
 80032ce:	4817      	ldr	r0, [pc, #92]	; (800332c <fnPrintMainView+0x2c0>)
 80032d0:	f002 fc07 	bl	8005ae2 <u8g2_SetDrawColor>
 80032d4:	e00f      	b.n	80032f6 <fnPrintMainView+0x28a>
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 80032d6:	2100      	movs	r1, #0
 80032d8:	4814      	ldr	r0, [pc, #80]	; (800332c <fnPrintMainView+0x2c0>)
 80032da:	f002 fc02 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,1,1,16,8);
 80032de:	2308      	movs	r3, #8
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2310      	movs	r3, #16
 80032e4:	2201      	movs	r2, #1
 80032e6:	2101      	movs	r1, #1
 80032e8:	4810      	ldr	r0, [pc, #64]	; (800332c <fnPrintMainView+0x2c0>)
 80032ea:	f001 fd62 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,1);
 80032ee:	2101      	movs	r1, #1
 80032f0:	480e      	ldr	r0, [pc, #56]	; (800332c <fnPrintMainView+0x2c0>)
 80032f2:	f002 fbf6 	bl	8005ae2 <u8g2_SetDrawColor>
  }

  if(flag_mb_connected){
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <fnPrintMainView+0x2f4>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d034      	beq.n	8003368 <fnPrintMainView+0x2fc>
	u8g2_DrawBox(&u8g2,19,1,11,8);
 80032fe:	2308      	movs	r3, #8
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	230b      	movs	r3, #11
 8003304:	2201      	movs	r2, #1
 8003306:	2113      	movs	r1, #19
 8003308:	4808      	ldr	r0, [pc, #32]	; (800332c <fnPrintMainView+0x2c0>)
 800330a:	f001 fd52 	bl	8004db2 <u8g2_DrawBox>
	u8g2_SetDrawColor(&u8g2,0);
 800330e:	2100      	movs	r1, #0
 8003310:	4806      	ldr	r0, [pc, #24]	; (800332c <fnPrintMainView+0x2c0>)
 8003312:	f002 fbe6 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawStr(&u8g2,20, 8, "MB");
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <fnPrintMainView+0x2f8>)
 8003318:	2208      	movs	r2, #8
 800331a:	2114      	movs	r1, #20
 800331c:	4803      	ldr	r0, [pc, #12]	; (800332c <fnPrintMainView+0x2c0>)
 800331e:	f002 fa1b 	bl	8005758 <u8g2_DrawStr>
	u8g2_SetDrawColor(&u8g2,1);
 8003322:	2101      	movs	r1, #1
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <fnPrintMainView+0x2c0>)
 8003326:	f002 fbdc 	bl	8005ae2 <u8g2_SetDrawColor>
 800332a:	e02d      	b.n	8003388 <fnPrintMainView+0x31c>
 800332c:	20000a68 	.word	0x20000a68
 8003330:	0800aca4 	.word	0x0800aca4
 8003334:	200009d4 	.word	0x200009d4
 8003338:	41200000 	.word	0x41200000
 800333c:	cccccccd 	.word	0xcccccccd
 8003340:	0800a958 	.word	0x0800a958
 8003344:	0800a974 	.word	0x0800a974
 8003348:	0800a97c 	.word	0x0800a97c
 800334c:	0800a984 	.word	0x0800a984
 8003350:	0800a98c 	.word	0x0800a98c
 8003354:	0800a994 	.word	0x0800a994
 8003358:	0800a99c 	.word	0x0800a99c
 800335c:	0800a9a4 	.word	0x0800a9a4
 8003360:	200004a8 	.word	0x200004a8
 8003364:	0800a9a8 	.word	0x0800a9a8
  }
  else{
	u8g2_SetDrawColor(&u8g2,0);
 8003368:	2100      	movs	r1, #0
 800336a:	481c      	ldr	r0, [pc, #112]	; (80033dc <fnPrintMainView+0x370>)
 800336c:	f002 fbb9 	bl	8005ae2 <u8g2_SetDrawColor>
	u8g2_DrawBox(&u8g2,19,1,16,8);
 8003370:	2308      	movs	r3, #8
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	2310      	movs	r3, #16
 8003376:	2201      	movs	r2, #1
 8003378:	2113      	movs	r1, #19
 800337a:	4818      	ldr	r0, [pc, #96]	; (80033dc <fnPrintMainView+0x370>)
 800337c:	f001 fd19 	bl	8004db2 <u8g2_DrawBox>
    u8g2_SetDrawColor(&u8g2,1);
 8003380:	2101      	movs	r1, #1
 8003382:	4816      	ldr	r0, [pc, #88]	; (80033dc <fnPrintMainView+0x370>)
 8003384:	f002 fbad 	bl	8005ae2 <u8g2_SetDrawColor>
  }

  snprintf(buffer,sizeof(buffer),"%d ",main_data.water_level_liter);
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <fnPrintMainView+0x374>)
 800338a:	7e1b      	ldrb	r3, [r3, #24]
 800338c:	4638      	mov	r0, r7
 800338e:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <fnPrintMainView+0x378>)
 8003390:	2114      	movs	r1, #20
 8003392:	f001 fa6d 	bl	8004870 <mini_snprintf>
  u8g2_SetFont(&u8g2, u8g2_font_fub20_tn);
 8003396:	4914      	ldr	r1, [pc, #80]	; (80033e8 <fnPrintMainView+0x37c>)
 8003398:	4810      	ldr	r0, [pc, #64]	; (80033dc <fnPrintMainView+0x370>)
 800339a:	f002 fa7b 	bl	8005894 <u8g2_SetFont>
  u8g2_DrawStr(&u8g2,55, 55, buffer);
 800339e:	463b      	mov	r3, r7
 80033a0:	2237      	movs	r2, #55	; 0x37
 80033a2:	2137      	movs	r1, #55	; 0x37
 80033a4:	480d      	ldr	r0, [pc, #52]	; (80033dc <fnPrintMainView+0x370>)
 80033a6:	f002 f9d7 	bl	8005758 <u8g2_DrawStr>

  W25qxx_ReadBytes(imageBuff, (IMAGE_WATER_LEVEL), 1024);
 80033aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ae:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80033b2:	480e      	ldr	r0, [pc, #56]	; (80033ec <fnPrintMainView+0x380>)
 80033b4:	f003 fccc 	bl	8006d50 <W25qxx_ReadBytes>
  u8g2_DrawXBM(&u8g2,5, 12, 50, 50, imageBuff);
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <fnPrintMainView+0x380>)
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	2332      	movs	r3, #50	; 0x32
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2332      	movs	r3, #50	; 0x32
 80033c2:	220c      	movs	r2, #12
 80033c4:	2105      	movs	r1, #5
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <fnPrintMainView+0x370>)
 80033c8:	f001 fcc2 	bl	8004d50 <u8g2_DrawXBM>

  u8g2_SendBuffer(&u8g2);
 80033cc:	4803      	ldr	r0, [pc, #12]	; (80033dc <fnPrintMainView+0x370>)
 80033ce:	f001 fdd1 	bl	8004f74 <u8g2_SendBuffer>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000a68 	.word	0x20000a68
 80033e0:	200009d4 	.word	0x200009d4
 80033e4:	0800a9ac 	.word	0x0800a9ac
 80033e8:	0800b864 	.word	0x0800b864
 80033ec:	200000a8 	.word	0x200000a8

080033f0 <fnMenuProcess>:
//***********************************************************************************************************

//Menu -----------------
void fnMenuProcess(void){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af02      	add	r7, sp, #8

    //определение текущей страницы меню
    if(menu_current_item < display_num_lines) menu_current_page = 0;
 80033f6:	4b9b      	ldr	r3, [pc, #620]	; (8003664 <fnMenuProcess+0x274>)
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	4b9b      	ldr	r3, [pc, #620]	; (8003668 <fnMenuProcess+0x278>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d203      	bcs.n	800340a <fnMenuProcess+0x1a>
 8003402:	4b9a      	ldr	r3, [pc, #616]	; (800366c <fnMenuProcess+0x27c>)
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e053      	b.n	80034b2 <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*2)menu_current_page = 1 ;
 800340a:	4b96      	ldr	r3, [pc, #600]	; (8003664 <fnMenuProcess+0x274>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	4b95      	ldr	r3, [pc, #596]	; (8003668 <fnMenuProcess+0x278>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	429a      	cmp	r2, r3
 8003418:	da03      	bge.n	8003422 <fnMenuProcess+0x32>
 800341a:	4b94      	ldr	r3, [pc, #592]	; (800366c <fnMenuProcess+0x27c>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e047      	b.n	80034b2 <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*3)menu_current_page = 2 ;
 8003422:	4b90      	ldr	r3, [pc, #576]	; (8003664 <fnMenuProcess+0x274>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	4b8f      	ldr	r3, [pc, #572]	; (8003668 <fnMenuProcess+0x278>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	4299      	cmp	r1, r3
 8003436:	da03      	bge.n	8003440 <fnMenuProcess+0x50>
 8003438:	4b8c      	ldr	r3, [pc, #560]	; (800366c <fnMenuProcess+0x27c>)
 800343a:	2202      	movs	r2, #2
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e038      	b.n	80034b2 <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*4)menu_current_page = 3 ;
 8003440:	4b88      	ldr	r3, [pc, #544]	; (8003664 <fnMenuProcess+0x274>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b88      	ldr	r3, [pc, #544]	; (8003668 <fnMenuProcess+0x278>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	da03      	bge.n	8003458 <fnMenuProcess+0x68>
 8003450:	4b86      	ldr	r3, [pc, #536]	; (800366c <fnMenuProcess+0x27c>)
 8003452:	2203      	movs	r2, #3
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e02c      	b.n	80034b2 <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*5)menu_current_page = 4 ;
 8003458:	4b82      	ldr	r3, [pc, #520]	; (8003664 <fnMenuProcess+0x274>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4619      	mov	r1, r3
 800345e:	4b82      	ldr	r3, [pc, #520]	; (8003668 <fnMenuProcess+0x278>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	4299      	cmp	r1, r3
 800346c:	da03      	bge.n	8003476 <fnMenuProcess+0x86>
 800346e:	4b7f      	ldr	r3, [pc, #508]	; (800366c <fnMenuProcess+0x27c>)
 8003470:	2204      	movs	r2, #4
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e01d      	b.n	80034b2 <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*6)menu_current_page = 5 ;
 8003476:	4b7b      	ldr	r3, [pc, #492]	; (8003664 <fnMenuProcess+0x274>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	4b7a      	ldr	r3, [pc, #488]	; (8003668 <fnMenuProcess+0x278>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4299      	cmp	r1, r3
 800348c:	da03      	bge.n	8003496 <fnMenuProcess+0xa6>
 800348e:	4b77      	ldr	r3, [pc, #476]	; (800366c <fnMenuProcess+0x27c>)
 8003490:	2205      	movs	r2, #5
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	e00d      	b.n	80034b2 <fnMenuProcess+0xc2>
    else if(menu_current_item < display_num_lines*7)menu_current_page = 6 ;
 8003496:	4b73      	ldr	r3, [pc, #460]	; (8003664 <fnMenuProcess+0x274>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	4619      	mov	r1, r3
 800349c:	4b72      	ldr	r3, [pc, #456]	; (8003668 <fnMenuProcess+0x278>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	4299      	cmp	r1, r3
 80034aa:	da02      	bge.n	80034b2 <fnMenuProcess+0xc2>
 80034ac:	4b6f      	ldr	r3, [pc, #444]	; (800366c <fnMenuProcess+0x27c>)
 80034ae:	2206      	movs	r2, #6
 80034b0:	701a      	strb	r2, [r3, #0]

    switch (menu_mode)
 80034b2:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <fnMenuProcess+0x280>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	f200 81a9 	bhi.w	800380e <fnMenuProcess+0x41e>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <fnMenuProcess+0xd4>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034d9 	.word	0x080034d9
 80034c8:	08003509 	.word	0x08003509
 80034cc:	08003589 	.word	0x08003589
 80034d0:	08003607 	.word	0x08003607
 80034d4:	08003745 	.word	0x08003745
    {
      case MENU_MAIN_VIEW:

        fnPrintMainView();
 80034d8:	f7ff fdc8 	bl	800306c <fnPrintMainView>

        if(btn_state == BTN_ENTER_LONG_PRESS){
 80034dc:	4b65      	ldr	r3, [pc, #404]	; (8003674 <fnMenuProcess+0x284>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d105      	bne.n	80034f0 <fnMenuProcess+0x100>
          menu_mode = MENU_SETPOINTS;
 80034e4:	4b62      	ldr	r3, [pc, #392]	; (8003670 <fnMenuProcess+0x280>)
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 80034ea:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <fnMenuProcess+0x274>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
         // tone(BUZZER,500,200);
        }

        if(btn_state == BTN_ENTER){
 80034f0:	4b60      	ldr	r3, [pc, #384]	; (8003674 <fnMenuProcess+0x284>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	f040 818c 	bne.w	8003812 <fnMenuProcess+0x422>
          menu_mode = MENU_PARAM_VIEW;
 80034fa:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <fnMenuProcess+0x280>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 8003500:	4b58      	ldr	r3, [pc, #352]	; (8003664 <fnMenuProcess+0x274>)
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
        }
        break;
 8003506:	e184      	b.n	8003812 <fnMenuProcess+0x422>

      case MENU_PARAM_VIEW:

        fnPrintMenuParamView();
 8003508:	f7ff fd4c 	bl	8002fa4 <fnPrintMenuParamView>

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)) {         // Если кнопку нажали или удерживают
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <fnMenuProcess+0x284>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d003      	beq.n	800351c <fnMenuProcess+0x12c>
 8003514:	4b57      	ldr	r3, [pc, #348]	; (8003674 <fnMenuProcess+0x284>)
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d115      	bne.n	8003548 <fnMenuProcess+0x158>
          menu_current_item = constrain(menu_current_item - display_num_lines , 0, MENU_PARAM_VIEW_NUM_ITEMS - 1); // Двигаем указатель в пределах дисплея
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <fnMenuProcess+0x274>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <fnMenuProcess+0x278>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	db0a      	blt.n	8003542 <fnMenuProcess+0x152>
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <fnMenuProcess+0x274>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <fnMenuProcess+0x278>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b0e      	cmp	r3, #14
 800353a:	bfa8      	it	ge
 800353c:	230e      	movge	r3, #14
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e000      	b.n	8003544 <fnMenuProcess+0x154>
 8003542:	2300      	movs	r3, #0
 8003544:	4a47      	ldr	r2, [pc, #284]	; (8003664 <fnMenuProcess+0x274>)
 8003546:	7013      	strb	r3, [r2, #0]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)) {
 8003548:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <fnMenuProcess+0x284>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d003      	beq.n	8003558 <fnMenuProcess+0x168>
 8003550:	4b48      	ldr	r3, [pc, #288]	; (8003674 <fnMenuProcess+0x284>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d10b      	bne.n	8003570 <fnMenuProcess+0x180>
          menu_current_item = constrain(menu_current_item + display_num_lines, 0, MENU_PARAM_VIEW_NUM_ITEMS - 1);
 8003558:	4b42      	ldr	r3, [pc, #264]	; (8003664 <fnMenuProcess+0x274>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	4b42      	ldr	r3, [pc, #264]	; (8003668 <fnMenuProcess+0x278>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	4413      	add	r3, r2
 8003564:	2b0e      	cmp	r3, #14
 8003566:	bfa8      	it	ge
 8003568:	230e      	movge	r3, #14
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <fnMenuProcess+0x274>)
 800356e:	701a      	strb	r2, [r3, #0]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if(btn_state == BTN_ENTER){
 8003570:	4b40      	ldr	r3, [pc, #256]	; (8003674 <fnMenuProcess+0x284>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	2b10      	cmp	r3, #16
 8003576:	f040 814e 	bne.w	8003816 <fnMenuProcess+0x426>
          menu_mode = MENU_LOGO_VIEW;
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <fnMenuProcess+0x280>)
 800357c:	2204      	movs	r2, #4
 800357e:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 8003580:	4b38      	ldr	r3, [pc, #224]	; (8003664 <fnMenuProcess+0x274>)
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
        }

        break;
 8003586:	e146      	b.n	8003816 <fnMenuProcess+0x426>

      case MENU_SETPOINTS:

        printMenuSetpoints();
 8003588:	f7ff f8f2 	bl	8002770 <printMenuSetpoints>

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)) {         // Если кнопку нажали или удерживают
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <fnMenuProcess+0x284>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d003      	beq.n	800359c <fnMenuProcess+0x1ac>
 8003594:	4b37      	ldr	r3, [pc, #220]	; (8003674 <fnMenuProcess+0x284>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d109      	bne.n	80035b0 <fnMenuProcess+0x1c0>
          menu_current_item = constrain(menu_current_item + 1, 0, MENU_SETPOINTS_NUM_ITEMS - 1); // Двигаем указатель в пределах дисплея
 800359c:	4b31      	ldr	r3, [pc, #196]	; (8003664 <fnMenuProcess+0x274>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b17      	cmp	r3, #23
 80035a2:	bf28      	it	cs
 80035a4:	2317      	movcs	r3, #23
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <fnMenuProcess+0x274>)
 80035ae:	701a      	strb	r2, [r3, #0]
          //Serial.println(menu_current_item);
        }

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)) {
 80035b0:	4b30      	ldr	r3, [pc, #192]	; (8003674 <fnMenuProcess+0x284>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d003      	beq.n	80035c0 <fnMenuProcess+0x1d0>
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <fnMenuProcess+0x284>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d10f      	bne.n	80035e0 <fnMenuProcess+0x1f0>
          menu_current_item = constrain(menu_current_item - 1, 0, MENU_SETPOINTS_NUM_ITEMS - 1);
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <fnMenuProcess+0x274>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <fnMenuProcess+0x1ea>
 80035c8:	4b26      	ldr	r3, [pc, #152]	; (8003664 <fnMenuProcess+0x274>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b19      	cmp	r3, #25
 80035ce:	bf28      	it	cs
 80035d0:	2319      	movcs	r3, #25
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e000      	b.n	80035dc <fnMenuProcess+0x1ec>
 80035da:	2300      	movs	r3, #0
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <fnMenuProcess+0x274>)
 80035de:	7013      	strb	r3, [r2, #0]
          //if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(menu_current_item);
        }

        if(btn_state == BTN_ENTER)menu_mode = MENU_SETPOINTS_EDIT_MODE;
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <fnMenuProcess+0x284>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d102      	bne.n	80035ee <fnMenuProcess+0x1fe>
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <fnMenuProcess+0x280>)
 80035ea:	2203      	movs	r2, #3
 80035ec:	701a      	strb	r2, [r3, #0]

        if(btn_state == BTN_ESC){
 80035ee:	4b21      	ldr	r3, [pc, #132]	; (8003674 <fnMenuProcess+0x284>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	f040 8111 	bne.w	800381a <fnMenuProcess+0x42a>
          menu_mode = MENU_MAIN_VIEW;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <fnMenuProcess+0x280>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <fnMenuProcess+0x274>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
          //tone(BUZZER,500,200);
        }

        break;
 8003604:	e109      	b.n	800381a <fnMenuProcess+0x42a>

      case MENU_SETPOINTS_EDIT_MODE:

        printMenuSetpoints();
 8003606:	f7ff f8b3 	bl	8002770 <printMenuSetpoints>

        if ((btn_state == BTN_UP) || (btn_state == BTN_UP_LONG_PRESS)){
 800360a:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <fnMenuProcess+0x284>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d003      	beq.n	800361a <fnMenuProcess+0x22a>
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <fnMenuProcess+0x284>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d140      	bne.n	800369c <fnMenuProcess+0x2ac>
          SetpointsUnion.SetpointsArray[menu_current_item] = constrain(SetpointsUnion.SetpointsArray[menu_current_item]+1,param_range_min[menu_current_item],param_range_max[menu_current_item]);
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <fnMenuProcess+0x274>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4b15      	ldr	r3, [pc, #84]	; (8003678 <fnMenuProcess+0x288>)
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	3301      	adds	r3, #1
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <fnMenuProcess+0x274>)
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	4611      	mov	r1, r2
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <fnMenuProcess+0x28c>)
 800362e:	5c52      	ldrb	r2, [r2, r1]
 8003630:	4293      	cmp	r3, r2
 8003632:	da05      	bge.n	8003640 <fnMenuProcess+0x250>
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <fnMenuProcess+0x274>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <fnMenuProcess+0x28c>)
 800363c:	5c9b      	ldrb	r3, [r3, r2]
 800363e:	e028      	b.n	8003692 <fnMenuProcess+0x2a2>
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <fnMenuProcess+0x274>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <fnMenuProcess+0x288>)
 8003648:	5c9a      	ldrb	r2, [r3, r2]
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <fnMenuProcess+0x274>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	4619      	mov	r1, r3
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <fnMenuProcess+0x290>)
 8003652:	5c5b      	ldrb	r3, [r3, r1]
 8003654:	429a      	cmp	r2, r3
 8003656:	d315      	bcc.n	8003684 <fnMenuProcess+0x294>
 8003658:	4b02      	ldr	r3, [pc, #8]	; (8003664 <fnMenuProcess+0x274>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <fnMenuProcess+0x290>)
 8003660:	5c9b      	ldrb	r3, [r3, r2]
 8003662:	e016      	b.n	8003692 <fnMenuProcess+0x2a2>
 8003664:	2000008c 	.word	0x2000008c
 8003668:	20000978 	.word	0x20000978
 800366c:	2000008d 	.word	0x2000008d
 8003670:	2000008e 	.word	0x2000008e
 8003674:	20000090 	.word	0x20000090
 8003678:	20000b78 	.word	0x20000b78
 800367c:	20000004 	.word	0x20000004
 8003680:	20000020 	.word	0x20000020
 8003684:	4b69      	ldr	r3, [pc, #420]	; (800382c <fnMenuProcess+0x43c>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b69      	ldr	r3, [pc, #420]	; (8003830 <fnMenuProcess+0x440>)
 800368c:	5c9b      	ldrb	r3, [r3, r2]
 800368e:	3301      	adds	r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	4a66      	ldr	r2, [pc, #408]	; (800382c <fnMenuProcess+0x43c>)
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	4611      	mov	r1, r2
 8003698:	4a65      	ldr	r2, [pc, #404]	; (8003830 <fnMenuProcess+0x440>)
 800369a:	5453      	strb	r3, [r2, r1]
         // Serial.println(SetpointsUnion.SetpointsArray[menu_current_item]);
        }

        if ((btn_state == BTN_DOWN) || (btn_state == BTN_DOWN_LONG_PRESS)){
 800369c:	4b65      	ldr	r3, [pc, #404]	; (8003834 <fnMenuProcess+0x444>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d003      	beq.n	80036ac <fnMenuProcess+0x2bc>
 80036a4:	4b63      	ldr	r3, [pc, #396]	; (8003834 <fnMenuProcess+0x444>)
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d125      	bne.n	80036f8 <fnMenuProcess+0x308>
          SetpointsUnion.SetpointsArray[menu_current_item] = constrain(SetpointsUnion.SetpointsArray[menu_current_item]-1,param_range_min[menu_current_item],param_range_max[menu_current_item]);
 80036ac:	4b5f      	ldr	r3, [pc, #380]	; (800382c <fnMenuProcess+0x43c>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b5f      	ldr	r3, [pc, #380]	; (8003830 <fnMenuProcess+0x440>)
 80036b4:	5c9a      	ldrb	r2, [r3, r2]
 80036b6:	4b5d      	ldr	r3, [pc, #372]	; (800382c <fnMenuProcess+0x43c>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4619      	mov	r1, r3
 80036bc:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <fnMenuProcess+0x448>)
 80036be:	5c5b      	ldrb	r3, [r3, r1]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d805      	bhi.n	80036d0 <fnMenuProcess+0x2e0>
 80036c4:	4b59      	ldr	r3, [pc, #356]	; (800382c <fnMenuProcess+0x43c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <fnMenuProcess+0x448>)
 80036cc:	5c9b      	ldrb	r3, [r3, r2]
 80036ce:	e00e      	b.n	80036ee <fnMenuProcess+0x2fe>
 80036d0:	4b56      	ldr	r3, [pc, #344]	; (800382c <fnMenuProcess+0x43c>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <fnMenuProcess+0x440>)
 80036d8:	5c9b      	ldrb	r3, [r3, r2]
 80036da:	3b01      	subs	r3, #1
 80036dc:	4a53      	ldr	r2, [pc, #332]	; (800382c <fnMenuProcess+0x43c>)
 80036de:	7812      	ldrb	r2, [r2, #0]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4a56      	ldr	r2, [pc, #344]	; (800383c <fnMenuProcess+0x44c>)
 80036e4:	5c52      	ldrb	r2, [r2, r1]
 80036e6:	4293      	cmp	r3, r2
 80036e8:	bfa8      	it	ge
 80036ea:	4613      	movge	r3, r2
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	4a4f      	ldr	r2, [pc, #316]	; (800382c <fnMenuProcess+0x43c>)
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4a4e      	ldr	r2, [pc, #312]	; (8003830 <fnMenuProcess+0x440>)
 80036f6:	5453      	strb	r3, [r2, r1]
         // if(SetpointsUnion.setpoints_data.debug_key== DEBUG_KEY_1)Serial.println(SetpointsUnion.SetpointsArray[menu_current_item]);
        }

        if(btn_state == BTN_ENTER){
 80036f8:	4b4e      	ldr	r3, [pc, #312]	; (8003834 <fnMenuProcess+0x444>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d119      	bne.n	8003734 <fnMenuProcess+0x344>
          //выход с сохранением в flash
        	W25qxx_EraseSector(SETPOINTS_FLASH_SECTOR);
 8003700:	200a      	movs	r0, #10
 8003702:	f003 f8f1 	bl	80068e8 <W25qxx_EraseSector>
        	bool flag_empty = false;
 8003706:	2300      	movs	r3, #0
 8003708:	71fb      	strb	r3, [r7, #7]
        	flag_empty = W25qxx_IsEmptySector(SETPOINTS_FLASH_SECTOR, 0,MENU_SETPOINTS_NUM_ITEMS);
 800370a:	2219      	movs	r2, #25
 800370c:	2100      	movs	r1, #0
 800370e:	200a      	movs	r0, #10
 8003710:	f003 f954 	bl	80069bc <W25qxx_IsEmptySector>
 8003714:	4603      	mov	r3, r0
 8003716:	71fb      	strb	r3, [r7, #7]
        	if(flag_empty){
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <fnMenuProcess+0x33e>
        		W25qxx_WriteSector(SetpointsUnion.SetpointsArray, SETPOINTS_FLASH_SECTOR, 0, MENU_SETPOINTS_NUM_ITEMS);
 800371e:	2319      	movs	r3, #25
 8003720:	2200      	movs	r2, #0
 8003722:	210a      	movs	r1, #10
 8003724:	4842      	ldr	r0, [pc, #264]	; (8003830 <fnMenuProcess+0x440>)
 8003726:	f003 fab1 	bl	8006c8c <W25qxx_WriteSector>
        		flag_empty = false;
 800372a:	2300      	movs	r3, #0
 800372c:	71fb      	strb	r3, [r7, #7]
        		//tone(BUZZER,500,200);
        	}

          menu_mode = MENU_SETPOINTS;
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <fnMenuProcess+0x450>)
 8003730:	2202      	movs	r2, #2
 8003732:	701a      	strb	r2, [r3, #0]
        }

        if(btn_state == BTN_ESC){
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <fnMenuProcess+0x444>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d170      	bne.n	800381e <fnMenuProcess+0x42e>
		  //выход без сохранения
		  menu_mode = MENU_SETPOINTS;
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <fnMenuProcess+0x450>)
 800373e:	2202      	movs	r2, #2
 8003740:	701a      	strb	r2, [r3, #0]
		}

        break;
 8003742:	e06c      	b.n	800381e <fnMenuProcess+0x42e>

      case MENU_LOGO_VIEW:

        switch (SetpointsUnion.setpoints_data.logo)
 8003744:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <fnMenuProcess+0x440>)
 8003746:	7d5b      	ldrb	r3, [r3, #21]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d036      	beq.n	80037ba <fnMenuProcess+0x3ca>
 800374c:	2b02      	cmp	r3, #2
 800374e:	dc4c      	bgt.n	80037ea <fnMenuProcess+0x3fa>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <fnMenuProcess+0x36a>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d018      	beq.n	800378a <fnMenuProcess+0x39a>
 8003758:	e047      	b.n	80037ea <fnMenuProcess+0x3fa>
        {
        case 0:
          u8g2_ClearBuffer(&u8g2);
 800375a:	483a      	ldr	r0, [pc, #232]	; (8003844 <fnMenuProcess+0x454>)
 800375c:	f001 fb97 	bl	8004e8e <u8g2_ClearBuffer>
          W25qxx_ReadBytes(imageBuff, IMAGE_LOGO_FK, 1024);
 8003760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003768:	4837      	ldr	r0, [pc, #220]	; (8003848 <fnMenuProcess+0x458>)
 800376a:	f003 faf1 	bl	8006d50 <W25qxx_ReadBytes>
          u8g2_DrawXBM(&u8g2,33,5, 64, 55, imageBuff);
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <fnMenuProcess+0x458>)
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	2337      	movs	r3, #55	; 0x37
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	2340      	movs	r3, #64	; 0x40
 8003778:	2205      	movs	r2, #5
 800377a:	2121      	movs	r1, #33	; 0x21
 800377c:	4831      	ldr	r0, [pc, #196]	; (8003844 <fnMenuProcess+0x454>)
 800377e:	f001 fae7 	bl	8004d50 <u8g2_DrawXBM>
          u8g2_SendBuffer(&u8g2);
 8003782:	4830      	ldr	r0, [pc, #192]	; (8003844 <fnMenuProcess+0x454>)
 8003784:	f001 fbf6 	bl	8004f74 <u8g2_SendBuffer>
          break;
 8003788:	e036      	b.n	80037f8 <fnMenuProcess+0x408>

        case 1:
          u8g2_ClearBuffer(&u8g2);
 800378a:	482e      	ldr	r0, [pc, #184]	; (8003844 <fnMenuProcess+0x454>)
 800378c:	f001 fb7f 	bl	8004e8e <u8g2_ClearBuffer>
          W25qxx_ReadBytes(imageBuff, IMAGE_LOGO_2, 1024);
 8003790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003798:	482b      	ldr	r0, [pc, #172]	; (8003848 <fnMenuProcess+0x458>)
 800379a:	f003 fad9 	bl	8006d50 <W25qxx_ReadBytes>
          u8g2_DrawXBM(&u8g2,33,5, 64, 55, imageBuff);
 800379e:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <fnMenuProcess+0x458>)
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	2337      	movs	r3, #55	; 0x37
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2340      	movs	r3, #64	; 0x40
 80037a8:	2205      	movs	r2, #5
 80037aa:	2121      	movs	r1, #33	; 0x21
 80037ac:	4825      	ldr	r0, [pc, #148]	; (8003844 <fnMenuProcess+0x454>)
 80037ae:	f001 facf 	bl	8004d50 <u8g2_DrawXBM>
          u8g2_SendBuffer(&u8g2);
 80037b2:	4824      	ldr	r0, [pc, #144]	; (8003844 <fnMenuProcess+0x454>)
 80037b4:	f001 fbde 	bl	8004f74 <u8g2_SendBuffer>
          break;
 80037b8:	e01e      	b.n	80037f8 <fnMenuProcess+0x408>

        case 2:
          u8g2_ClearBuffer(&u8g2);
 80037ba:	4822      	ldr	r0, [pc, #136]	; (8003844 <fnMenuProcess+0x454>)
 80037bc:	f001 fb67 	bl	8004e8e <u8g2_ClearBuffer>
          W25qxx_ReadBytes(imageBuff, IMAGE_LOGO_3, 1024);
 80037c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80037c8:	481f      	ldr	r0, [pc, #124]	; (8003848 <fnMenuProcess+0x458>)
 80037ca:	f003 fac1 	bl	8006d50 <W25qxx_ReadBytes>
          u8g2_DrawXBM(&u8g2,33,5, 64, 55, imageBuff);
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <fnMenuProcess+0x458>)
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	2337      	movs	r3, #55	; 0x37
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	2205      	movs	r2, #5
 80037da:	2121      	movs	r1, #33	; 0x21
 80037dc:	4819      	ldr	r0, [pc, #100]	; (8003844 <fnMenuProcess+0x454>)
 80037de:	f001 fab7 	bl	8004d50 <u8g2_DrawXBM>
          u8g2_SendBuffer(&u8g2);
 80037e2:	4818      	ldr	r0, [pc, #96]	; (8003844 <fnMenuProcess+0x454>)
 80037e4:	f001 fbc6 	bl	8004f74 <u8g2_SendBuffer>
          break;
 80037e8:	e006      	b.n	80037f8 <fnMenuProcess+0x408>

		default:
			u8g2_ClearBuffer(&u8g2);
 80037ea:	4816      	ldr	r0, [pc, #88]	; (8003844 <fnMenuProcess+0x454>)
 80037ec:	f001 fb4f 	bl	8004e8e <u8g2_ClearBuffer>
			//пусто
			u8g2_SendBuffer(&u8g2);
 80037f0:	4814      	ldr	r0, [pc, #80]	; (8003844 <fnMenuProcess+0x454>)
 80037f2:	f001 fbbf 	bl	8004f74 <u8g2_SendBuffer>
			break;
 80037f6:	bf00      	nop
        }


        if(btn_state == BTN_ENTER){
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <fnMenuProcess+0x444>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d110      	bne.n	8003822 <fnMenuProcess+0x432>
          menu_mode = MENU_MAIN_VIEW;
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <fnMenuProcess+0x450>)
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
          menu_current_item = 0;
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <fnMenuProcess+0x43c>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
        }

        break;
 800380c:	e009      	b.n	8003822 <fnMenuProcess+0x432>

      default:

      break;
 800380e:	bf00      	nop
 8003810:	e008      	b.n	8003824 <fnMenuProcess+0x434>
        break;
 8003812:	bf00      	nop
 8003814:	e006      	b.n	8003824 <fnMenuProcess+0x434>
        break;
 8003816:	bf00      	nop
 8003818:	e004      	b.n	8003824 <fnMenuProcess+0x434>
        break;
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <fnMenuProcess+0x434>
        break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <fnMenuProcess+0x434>
        break;
 8003822:	bf00      	nop

    }
  //end menu
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	2000008c 	.word	0x2000008c
 8003830:	20000b78 	.word	0x20000b78
 8003834:	20000090 	.word	0x20000090
 8003838:	20000004 	.word	0x20000004
 800383c:	20000020 	.word	0x20000020
 8003840:	2000008e 	.word	0x2000008e
 8003844:	20000a68 	.word	0x20000a68
 8003848:	200000a8 	.word	0x200000a8

0800384c <fnGetPressKey>:

//***************************************************************************************************************

//
static uint16_t fnGetPressKey(void){
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0

 	static uint16_t key_pressed;

 	 //считываем состояние кнопок и заносим в массив
 		  btnStatesArray[BUTTON_UP] = Button_Get_Clicked_Count(&Button_A);  //
 8003850:	485d      	ldr	r0, [pc, #372]	; (80039c8 <fnGetPressKey+0x17c>)
 8003852:	f7fe f95b 	bl	8001b0c <Button_Get_Clicked_Count>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <fnGetPressKey+0x180>)
 800385c:	701a      	strb	r2, [r3, #0]
 		  btnStatesArray[BUTTON_DOWN] = Button_Get_Clicked_Count(&Button_B);
 800385e:	485c      	ldr	r0, [pc, #368]	; (80039d0 <fnGetPressKey+0x184>)
 8003860:	f7fe f954 	bl	8001b0c <Button_Get_Clicked_Count>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <fnGetPressKey+0x180>)
 800386a:	705a      	strb	r2, [r3, #1]
 		  btnStatesArray[BUTTON_ENTER] = Button_Get_Clicked_Count(&Button_C);
 800386c:	4859      	ldr	r0, [pc, #356]	; (80039d4 <fnGetPressKey+0x188>)
 800386e:	f7fe f94d 	bl	8001b0c <Button_Get_Clicked_Count>
 8003872:	4603      	mov	r3, r0
 8003874:	461a      	mov	r2, r3
 8003876:	4b55      	ldr	r3, [pc, #340]	; (80039cc <fnGetPressKey+0x180>)
 8003878:	709a      	strb	r2, [r3, #2]
 		  btnStatesArray[BUTTON_ESC] = Button_Get_Clicked_Count(&Button_D);
 800387a:	4857      	ldr	r0, [pc, #348]	; (80039d8 <fnGetPressKey+0x18c>)
 800387c:	f7fe f946 	bl	8001b0c <Button_Get_Clicked_Count>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	4b51      	ldr	r3, [pc, #324]	; (80039cc <fnGetPressKey+0x180>)
 8003886:	70da      	strb	r2, [r3, #3]


 	if(btnStatesArray[BUTTON_UP] == 1)key_pressed |= BTN_UP;
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <fnGetPressKey+0x180>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <fnGetPressKey+0x54>
 8003890:	4b52      	ldr	r3, [pc, #328]	; (80039dc <fnGetPressKey+0x190>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	4b50      	ldr	r3, [pc, #320]	; (80039dc <fnGetPressKey+0x190>)
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	e006      	b.n	80038ae <fnGetPressKey+0x62>
 		else key_pressed &= ~BTN_UP;
 80038a0:	4b4e      	ldr	r3, [pc, #312]	; (80039dc <fnGetPressKey+0x190>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <fnGetPressKey+0x190>)
 80038ac:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_DOWN] == 1) key_pressed |= BTN_DOWN;    //
 80038ae:	4b47      	ldr	r3, [pc, #284]	; (80039cc <fnGetPressKey+0x180>)
 80038b0:	785b      	ldrb	r3, [r3, #1]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <fnGetPressKey+0x7a>
 80038b6:	4b49      	ldr	r3, [pc, #292]	; (80039dc <fnGetPressKey+0x190>)
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	b29a      	uxth	r2, r3
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <fnGetPressKey+0x190>)
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	e006      	b.n	80038d4 <fnGetPressKey+0x88>
 		else key_pressed &= ~BTN_DOWN;
 80038c6:	4b45      	ldr	r3, [pc, #276]	; (80039dc <fnGetPressKey+0x190>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	f023 0302 	bic.w	r3, r3, #2
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	4b42      	ldr	r3, [pc, #264]	; (80039dc <fnGetPressKey+0x190>)
 80038d2:	801a      	strh	r2, [r3, #0]

 	if(Button_Get_Status(&Button_A) == Button_Long_Pressed)key_pressed |= BTN_UP_LONG_PRESS;
 80038d4:	483c      	ldr	r0, [pc, #240]	; (80039c8 <fnGetPressKey+0x17c>)
 80038d6:	f7fe f909 	bl	8001aec <Button_Get_Status>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d107      	bne.n	80038f0 <fnGetPressKey+0xa4>
 80038e0:	4b3e      	ldr	r3, [pc, #248]	; (80039dc <fnGetPressKey+0x190>)
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <fnGetPressKey+0x190>)
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	e006      	b.n	80038fe <fnGetPressKey+0xb2>
 	 	else key_pressed &= ~BTN_UP_LONG_PRESS;
 80038f0:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <fnGetPressKey+0x190>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	4b38      	ldr	r3, [pc, #224]	; (80039dc <fnGetPressKey+0x190>)
 80038fc:	801a      	strh	r2, [r3, #0]

	if(Button_Get_Status(&Button_B) == Button_Long_Pressed)key_pressed |= BTN_DOWN_LONG_PRESS; //
 80038fe:	4834      	ldr	r0, [pc, #208]	; (80039d0 <fnGetPressKey+0x184>)
 8003900:	f7fe f8f4 	bl	8001aec <Button_Get_Status>
 8003904:	4603      	mov	r3, r0
 8003906:	2b03      	cmp	r3, #3
 8003908:	d107      	bne.n	800391a <fnGetPressKey+0xce>
 800390a:	4b34      	ldr	r3, [pc, #208]	; (80039dc <fnGetPressKey+0x190>)
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	f043 0308 	orr.w	r3, r3, #8
 8003912:	b29a      	uxth	r2, r3
 8003914:	4b31      	ldr	r3, [pc, #196]	; (80039dc <fnGetPressKey+0x190>)
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	e006      	b.n	8003928 <fnGetPressKey+0xdc>
		else key_pressed &= ~BTN_DOWN_LONG_PRESS;
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <fnGetPressKey+0x190>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	f023 0308 	bic.w	r3, r3, #8
 8003922:	b29a      	uxth	r2, r3
 8003924:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <fnGetPressKey+0x190>)
 8003926:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ENTER] == 1) key_pressed |= BTN_ENTER;    //
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <fnGetPressKey+0x180>)
 800392a:	789b      	ldrb	r3, [r3, #2]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <fnGetPressKey+0xf4>
 8003930:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <fnGetPressKey+0x190>)
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	f043 0310 	orr.w	r3, r3, #16
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b28      	ldr	r3, [pc, #160]	; (80039dc <fnGetPressKey+0x190>)
 800393c:	801a      	strh	r2, [r3, #0]
 800393e:	e006      	b.n	800394e <fnGetPressKey+0x102>
 		else key_pressed &= ~BTN_ENTER;
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <fnGetPressKey+0x190>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	f023 0310 	bic.w	r3, r3, #16
 8003948:	b29a      	uxth	r2, r3
 800394a:	4b24      	ldr	r3, [pc, #144]	; (80039dc <fnGetPressKey+0x190>)
 800394c:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ESC] == 1) key_pressed |= BTN_ESC;  //
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <fnGetPressKey+0x180>)
 8003950:	78db      	ldrb	r3, [r3, #3]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <fnGetPressKey+0x11a>
 8003956:	4b21      	ldr	r3, [pc, #132]	; (80039dc <fnGetPressKey+0x190>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	f043 0320 	orr.w	r3, r3, #32
 800395e:	b29a      	uxth	r2, r3
 8003960:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <fnGetPressKey+0x190>)
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	e006      	b.n	8003974 <fnGetPressKey+0x128>
 		else key_pressed &= ~BTN_ESC;
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <fnGetPressKey+0x190>)
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	b29a      	uxth	r2, r3
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <fnGetPressKey+0x190>)
 8003972:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ENTER] == 255) key_pressed |= BTN_ENTER_LONG_PRESS;  //
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <fnGetPressKey+0x180>)
 8003976:	789b      	ldrb	r3, [r3, #2]
 8003978:	2bff      	cmp	r3, #255	; 0xff
 800397a:	d107      	bne.n	800398c <fnGetPressKey+0x140>
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <fnGetPressKey+0x190>)
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003984:	b29a      	uxth	r2, r3
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <fnGetPressKey+0x190>)
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e006      	b.n	800399a <fnGetPressKey+0x14e>
 		else key_pressed &= ~BTN_ENTER_LONG_PRESS;
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <fnGetPressKey+0x190>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003994:	b29a      	uxth	r2, r3
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <fnGetPressKey+0x190>)
 8003998:	801a      	strh	r2, [r3, #0]

 	if(btnStatesArray[BUTTON_ESC] == 255) key_pressed |= BTN_ESC_LONG_PRESS;  //
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <fnGetPressKey+0x180>)
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	2bff      	cmp	r3, #255	; 0xff
 80039a0:	d107      	bne.n	80039b2 <fnGetPressKey+0x166>
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <fnGetPressKey+0x190>)
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <fnGetPressKey+0x190>)
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	e006      	b.n	80039c0 <fnGetPressKey+0x174>
 		else key_pressed &= ~BTN_ESC_LONG_PRESS;
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <fnGetPressKey+0x190>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <fnGetPressKey+0x190>)
 80039be:	801a      	strh	r2, [r3, #0]

 	return key_pressed;
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <fnGetPressKey+0x190>)
 80039c2:	881b      	ldrh	r3, [r3, #0]
 }
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000a4c 	.word	0x20000a4c
 80039cc:	20000094 	.word	0x20000094
 80039d0:	20000a30 	.word	0x20000a30
 80039d4:	20000a14 	.word	0x20000a14
 80039d8:	200009f8 	.word	0x200009f8
 80039dc:	200004b0 	.word	0x200004b0

080039e0 <Button_Get_Tick>:

//*********************************************************************************

//
uint32_t Button_Get_Tick(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80039e4:	f003 fa8c 	bl	8006f00 <HAL_GetTick>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <Button_A_Read>:
//**********************************************************************************

//
uint8_t Button_A_Read(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) ? 0 : 1;
 80039f4:	2120      	movs	r1, #32
 80039f6:	4805      	ldr	r0, [pc, #20]	; (8003a0c <Button_A_Read+0x1c>)
 80039f8:	f004 fd50 	bl	800849c <HAL_GPIO_ReadPin>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40010c00 	.word	0x40010c00

08003a10 <Button_B_Read>:

uint8_t Button_B_Read(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin) ? 0 : 1;
 8003a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <Button_B_Read+0x20>)
 8003a1a:	f004 fd3f 	bl	800849c <HAL_GPIO_ReadPin>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40010800 	.word	0x40010800

08003a34 <Button_C_Read>:

uint8_t Button_C_Read(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_ENTER_GPIO_Port, BUTTON_ENTER_Pin) ? 0 : 1;
 8003a38:	2108      	movs	r1, #8
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <Button_C_Read+0x1c>)
 8003a3c:	f004 fd2e 	bl	800849c <HAL_GPIO_ReadPin>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40010c00 	.word	0x40010c00

08003a54 <Button_D_Read>:

uint8_t Button_D_Read(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BUTTON_ESC_GPIO_Port, BUTTON_ESC_Pin) ? 0 : 1;
 8003a58:	2110      	movs	r1, #16
 8003a5a:	4805      	ldr	r0, [pc, #20]	; (8003a70 <Button_D_Read+0x1c>)
 8003a5c:	f004 fd1e 	bl	800849c <HAL_GPIO_ReadPin>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40010c00 	.word	0x40010c00

08003a74 <HAL_ADC_ConvCpltCallback>:
//***********************************************************************************

//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a06      	ldr	r2, [pc, #24]	; (8003a9c <HAL_ADC_ConvCpltCallback+0x28>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d105      	bne.n	8003a92 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		HAL_ADC_Stop(&hadc1);
 8003a86:	4806      	ldr	r0, [pc, #24]	; (8003aa0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8003a88:	f003 fb40 	bl	800710c <HAL_ADC_Stop>
		flag_adc_complet = true;
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_ADC_ConvCpltCallback+0x30>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	701a      	strb	r2, [r3, #0]
	}
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40012400 	.word	0x40012400
 8003aa0:	20000b94 	.word	0x20000b94
 8003aa4:	2000009e 	.word	0x2000009e

08003aa8 <fnEmaFilterBatVolt>:
//************************************************************************************

//фильтр экспоненциальное бегущее среднее для напряжения аккумулятора -----------------------------------
uint16_t fnEmaFilterBatVolt(uint16_t new_value)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	80fb      	strh	r3, [r7, #6]
	static float k = EMA_FILTER_K;
	static float filtered_value = 0;

	filtered_value += ((float)new_value - filtered_value) * k;
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc ffc9 	bl	8000a4c <__aeabi_ui2f>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <fnEmaFilterBatVolt+0x60>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fc ff10 	bl	80008e8 <__aeabi_fsub>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <fnEmaFilterBatVolt+0x64>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f7fd f812 	bl	8000afc <__aeabi_fmul>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <fnEmaFilterBatVolt+0x60>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fc ff02 	bl	80008ec <__addsf3>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <fnEmaFilterBatVolt+0x60>)
 8003aee:	601a      	str	r2, [r3, #0]
	return  filtered_value;
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <fnEmaFilterBatVolt+0x60>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f977 	bl	8000de8 <__aeabi_f2uiz>
 8003afa:	4603      	mov	r3, r0
 8003afc:	b29b      	uxth	r3, r3
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200004b4 	.word	0x200004b4
 8003b0c:	2000003c 	.word	0x2000003c

08003b10 <fnEmaFilterSensVolt>:

//фильтр экспоненциальное бегущее среднее для напряжения питания сенсоров ----
uint16_t fnEmaFilterSensVolt(uint16_t new_value)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
	static float k = EMA_FILTER_K;
	static float filtered_value = 0;

	filtered_value += ((float)new_value - filtered_value) * k;
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc ff95 	bl	8000a4c <__aeabi_ui2f>
 8003b22:	4602      	mov	r2, r0
 8003b24:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <fnEmaFilterSensVolt+0x60>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7fc fedc 	bl	80008e8 <__aeabi_fsub>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <fnEmaFilterSensVolt+0x64>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7fc ffde 	bl	8000afc <__aeabi_fmul>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <fnEmaFilterSensVolt+0x60>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f7fc fece 	bl	80008ec <__addsf3>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <fnEmaFilterSensVolt+0x60>)
 8003b56:	601a      	str	r2, [r3, #0]
	return  filtered_value;
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <fnEmaFilterSensVolt+0x60>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fd f943 	bl	8000de8 <__aeabi_f2uiz>
 8003b62:	4603      	mov	r3, r0
 8003b64:	b29b      	uxth	r3, r3
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200004b8 	.word	0x200004b8
 8003b74:	20000040 	.word	0x20000040

08003b78 <fnEmaFilterResSens>:

//фильтр экспоненциальное бегущее среднее для измерения сопротивления ------
uint16_t fnEmaFilterResSens(uint16_t new_value)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80fb      	strh	r3, [r7, #6]
	static float k = EMA_FILTER_K;
	static float filtered_value = 0;

	filtered_value += ((float)new_value - filtered_value) * k;
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc ff61 	bl	8000a4c <__aeabi_ui2f>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <fnEmaFilterResSens+0x60>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fc fea8 	bl	80008e8 <__aeabi_fsub>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <fnEmaFilterResSens+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f7fc ffaa 	bl	8000afc <__aeabi_fmul>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <fnEmaFilterResSens+0x60>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f7fc fe9a 	bl	80008ec <__addsf3>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <fnEmaFilterResSens+0x60>)
 8003bbe:	601a      	str	r2, [r3, #0]
	return  filtered_value;
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <fnEmaFilterResSens+0x60>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd f90f 	bl	8000de8 <__aeabi_f2uiz>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	b29b      	uxth	r3, r3
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200004bc 	.word	0x200004bc
 8003bdc:	20000044 	.word	0x20000044

08003be0 <fnPumpControl>:
//*************************************************************************************

//
void fnPumpControl(struct MyData *data, struct SetpointsStruct *setpoints){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]

  bool prx_trigged = false;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
  static bool prx_old_state = false;
  enum fsm_state {off, wait_for_prx,wait_for_T_off};
  static enum fsm_state step = off;

  if((data->proximity_sensor_state == true) && (prx_old_state == false) && (GetGTimer(TIMER_PRX_SENS_FEEDBACK) >= PRX_SENSOR_FEEDBACK_DELAY)){
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7edb      	ldrb	r3, [r3, #27]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d011      	beq.n	8003c1a <fnPumpControl+0x3a>
 8003bf6:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <fnPumpControl+0x144>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	f083 0301 	eor.w	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <fnPumpControl+0x3a>
 8003c04:	2006      	movs	r0, #6
 8003c06:	f7fd fe43 	bl	8001890 <GetGTimer>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b09      	cmp	r3, #9
 8003c0e:	d904      	bls.n	8003c1a <fnPumpControl+0x3a>


    StartGTimer(TIMER_PRX_SENS_FEEDBACK);
 8003c10:	2006      	movs	r0, #6
 8003c12:	f7fd fe65 	bl	80018e0 <StartGTimer>
    prx_trigged = true;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
  }

  prx_old_state = data->proximity_sensor_state;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	7eda      	ldrb	r2, [r3, #27]
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <fnPumpControl+0x144>)
 8003c20:	701a      	strb	r2, [r3, #0]


  switch (setpoints->pump_out_mode){
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d00a      	beq.n	8003c40 <fnPumpControl+0x60>
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	dc75      	bgt.n	8003d1a <fnPumpControl+0x13a>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <fnPumpControl+0x58>
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d013      	beq.n	8003c5e <fnPumpControl+0x7e>
      }

      break;

    default:
    break;
 8003c36:	e070      	b.n	8003d1a <fnPumpControl+0x13a>
      data->pump_output_state = false;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	77da      	strb	r2, [r3, #31]
      break;
 8003c3e:	e06d      	b.n	8003d1c <fnPumpControl+0x13c>
      if(!data->door_switch_state)step = off;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7e9b      	ldrb	r3, [r3, #26]
 8003c44:	f083 0301 	eor.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <fnPumpControl+0x76>
 8003c4e:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <fnPumpControl+0x148>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
      break;
 8003c54:	e062      	b.n	8003d1c <fnPumpControl+0x13c>
      else data->pump_output_state = true;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	77da      	strb	r2, [r3, #31]
      break;
 8003c5c:	e05e      	b.n	8003d1c <fnPumpControl+0x13c>
      switch (step)
 8003c5e:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <fnPumpControl+0x148>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d036      	beq.n	8003cd4 <fnPumpControl+0xf4>
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	dc4f      	bgt.n	8003d0a <fnPumpControl+0x12a>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <fnPumpControl+0x94>
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d019      	beq.n	8003ca6 <fnPumpControl+0xc6>
      break;
 8003c72:	e04a      	b.n	8003d0a <fnPumpControl+0x12a>
        data->pump_output_state = false;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	77da      	strb	r2, [r3, #31]
        StopGTimer(TIMER_PUMP_OFF);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fd fe18 	bl	80018b0 <StopGTimer>
        if(data->door_switch_state)step = wait_for_prx;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7e9b      	ldrb	r3, [r3, #26]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <fnPumpControl+0xb0>
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <fnPumpControl+0x148>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
        break;
 8003c8e:	e03e      	b.n	8003d0e <fnPumpControl+0x12e>
        else if(!data->door_switch_state)step = off;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7e9b      	ldrb	r3, [r3, #26]
 8003c94:	f083 0301 	eor.w	r3, r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d037      	beq.n	8003d0e <fnPumpControl+0x12e>
 8003c9e:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <fnPumpControl+0x148>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
        break;
 8003ca4:	e033      	b.n	8003d0e <fnPumpControl+0x12e>
        if(prx_trigged){
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <fnPumpControl+0xde>
          StartGTimer(TIMER_PUMP_OFF);
 8003cac:	2000      	movs	r0, #0
 8003cae:	f7fd fe17 	bl	80018e0 <StartGTimer>
          data->pump_output_state = true;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	77da      	strb	r2, [r3, #31]
          step = wait_for_T_off;
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <fnPumpControl+0x148>)
 8003cba:	2202      	movs	r2, #2
 8003cbc:	701a      	strb	r2, [r3, #0]
        if(!data->door_switch_state)step = off;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7e9b      	ldrb	r3, [r3, #26]
 8003cc2:	f083 0301 	eor.w	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d022      	beq.n	8003d12 <fnPumpControl+0x132>
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <fnPumpControl+0x148>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
        break;
 8003cd2:	e01e      	b.n	8003d12 <fnPumpControl+0x132>
        if(!data->door_switch_state || prx_trigged || (GetGTimer(TIMER_PUMP_OFF) >= setpoints->pump_T_off * 1000 ))step = off;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7e9b      	ldrb	r3, [r3, #26]
 8003cd8:	f083 0301 	eor.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10f      	bne.n	8003d02 <fnPumpControl+0x122>
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10c      	bne.n	8003d02 <fnPumpControl+0x122>
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7fd fdd1 	bl	8001890 <GetGTimer>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cfa:	fb03 f301 	mul.w	r3, r3, r1
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d309      	bcc.n	8003d16 <fnPumpControl+0x136>
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <fnPumpControl+0x148>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
        break;
 8003d08:	e005      	b.n	8003d16 <fnPumpControl+0x136>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e006      	b.n	8003d1c <fnPumpControl+0x13c>
        break;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <fnPumpControl+0x13c>
        break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <fnPumpControl+0x13c>
        break;
 8003d16:	bf00      	nop
      break;
 8003d18:	e000      	b.n	8003d1c <fnPumpControl+0x13c>
    break;
 8003d1a:	bf00      	nop
  }

}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200004c0 	.word	0x200004c0
 8003d28:	200004c1 	.word	0x200004c1

08003d2c <map>:
//************************************************************************************

//
uint8_t map(uint8_t x, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max)
{
 8003d2c:	b490      	push	{r4, r7}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4604      	mov	r4, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	71fb      	strb	r3, [r7, #7]
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71bb      	strb	r3, [r7, #6]
 8003d42:	460b      	mov	r3, r1
 8003d44:	717b      	strb	r3, [r7, #5]
 8003d46:	4613      	mov	r3, r2
 8003d48:	713b      	strb	r3, [r7, #4]
	uint8_t devider = (in_max - in_min);
 8003d4a:	797a      	ldrb	r2, [r7, #5]
 8003d4c:	79bb      	ldrb	r3, [r7, #6]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	73fb      	strb	r3, [r7, #15]

	if(devider>0){
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00f      	beq.n	8003d78 <map+0x4c>
		return (x - in_min) * (out_max - out_min) / devider + out_min;
 8003d58:	79fa      	ldrb	r2, [r7, #7]
 8003d5a:	79bb      	ldrb	r3, [r7, #6]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	7e39      	ldrb	r1, [r7, #24]
 8003d60:	793a      	ldrb	r2, [r7, #4]
 8003d62:	1a8a      	subs	r2, r1, r2
 8003d64:	fb02 f203 	mul.w	r2, r2, r3
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	793b      	ldrb	r3, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	e000      	b.n	8003d7a <map+0x4e>
	}
	else {
		return 0;
 8003d78:	2300      	movs	r3, #0
	}
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc90      	pop	{r4, r7}
 8003d82:	4770      	bx	lr

08003d84 <fnWaterLevelControl>:
//*************************************************************************************

//
// fnWaterLevelControl
void fnWaterLevelControl(struct MyData *data, struct SetpointsStruct *setpoints)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	data->water_level_liter = map(data->res_sensor_resistance,setpoints->water_sens_min,setpoints->water_sens_max,0,setpoints->water_tank_capacity);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	899b      	ldrh	r3, [r3, #12]
 8003d92:	b2d8      	uxtb	r0, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	7b99      	ldrb	r1, [r3, #14]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	7bda      	ldrb	r2, [r3, #15]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	7c5b      	ldrb	r3, [r3, #17]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	f7ff ffc2 	bl	8003d2c <map>
 8003da8:	4603      	mov	r3, r0
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	761a      	strb	r2, [r3, #24]
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <fnConverterControl>:
//*******************************************************************************************

//convreter control
void fnConverterControl(struct MyData *data, struct SetpointsStruct *setpoints)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  uint16_t voltage = (uint16_t)data->battery_voltage * 10;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd f80e 	bl	8000de8 <__aeabi_f2uiz>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	0092      	lsls	r2, r2, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	81fb      	strh	r3, [r7, #14]
  static bool flag_convOff_due_voltage;    // флаг что конветер был выключен по напряжению
  static bool flag_convOff_due_ign_switch; // флаг что конветер был выключен по таймеру после выключения зажигания

  static bool state = true; // изначально (после старта) включен

  switch (setpoints->conv_out_mode){
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	799b      	ldrb	r3, [r3, #6]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d010      	beq.n	8003e04 <fnConverterControl+0x4c>
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	dc77      	bgt.n	8003ed6 <fnConverterControl+0x11e>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <fnConverterControl+0x38>
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d014      	beq.n	8003e18 <fnConverterControl+0x60>
      }

      break;

    default:
    break;
 8003dee:	e072      	b.n	8003ed6 <fnConverterControl+0x11e>
      state = false;
 8003df0:	4b3e      	ldr	r3, [pc, #248]	; (8003eec <fnConverterControl+0x134>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
      StopGTimer(TIMER_CONV_U_OFF);
 8003df6:	2001      	movs	r0, #1
 8003df8:	f7fd fd5a 	bl	80018b0 <StopGTimer>
      StopGTimer(TIMER_CONV_IGN_OFF);
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	f7fd fd57 	bl	80018b0 <StopGTimer>
      break;
 8003e02:	e06b      	b.n	8003edc <fnConverterControl+0x124>
      state = true;
 8003e04:	4b39      	ldr	r3, [pc, #228]	; (8003eec <fnConverterControl+0x134>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
      StopGTimer(TIMER_CONV_U_OFF);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f7fd fd50 	bl	80018b0 <StopGTimer>
      StopGTimer(TIMER_CONV_IGN_OFF);
 8003e10:	2002      	movs	r0, #2
 8003e12:	f7fd fd4d 	bl	80018b0 <StopGTimer>
      break;
 8003e16:	e061      	b.n	8003edc <fnConverterControl+0x124>
      if (voltage >= setpoints->conv_U_on)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	791b      	ldrb	r3, [r3, #4]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	89fa      	ldrh	r2, [r7, #14]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d30f      	bcc.n	8003e44 <fnConverterControl+0x8c>
        if (!flag_convOff_due_ign_switch)state = true; // если напряжение в пределах нормы включаем преобразователь
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <fnConverterControl+0x138>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f083 0301 	eor.w	r3, r3, #1
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <fnConverterControl+0x80>
 8003e32:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <fnConverterControl+0x134>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
        flag_convOff_due_voltage = false;    // флаг что было отключение по низкому напряжению
 8003e38:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <fnConverterControl+0x13c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
        StopGTimer(TIMER_CONV_U_OFF); // останавливваем таймер выключения
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f7fd fd36 	bl	80018b0 <StopGTimer>
      if (voltage > setpoints->conv_U_on)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	791b      	ldrb	r3, [r3, #4]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	89fa      	ldrh	r2, [r7, #14]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d903      	bls.n	8003e58 <fnConverterControl+0xa0>
    	StartGTimer(TIMER_CONV_U_OFF); // заряжаем таймер на выключение
 8003e50:	2001      	movs	r0, #1
 8003e52:	f7fd fd45 	bl	80018e0 <StartGTimer>
 8003e56:	e015      	b.n	8003e84 <fnConverterControl+0xcc>
        if (GetGTimer(TIMER_CONV_U_OFF) > (setpoints->conv_T_U_off * SEC))
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f7fd fd19 	bl	8001890 <GetGTimer>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	78db      	ldrb	r3, [r3, #3]
 8003e64:	4619      	mov	r1, r3
 8003e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e6a:	fb03 f301 	mul.w	r3, r3, r1
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d908      	bls.n	8003e84 <fnConverterControl+0xcc>
          state = false;
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <fnConverterControl+0x134>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
          flag_convOff_due_voltage = true;   // флаг что было отключение по низкому напряжению
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <fnConverterControl+0x13c>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
          StopGTimer(TIMER_CONV_U_OFF); // останавливаем таймер выключения
 8003e7e:	2001      	movs	r0, #1
 8003e80:	f7fd fd16 	bl	80018b0 <StopGTimer>
      if (data->ignition_switch_state)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7f1b      	ldrb	r3, [r3, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <fnConverterControl+0xf6>
        flag_convOff_due_ign_switch = false; //сброс флага что было отключение по ignition switch
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <fnConverterControl+0x138>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
        if (!flag_convOff_due_voltage)state = true;
 8003e92:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <fnConverterControl+0x13c>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	f083 0301 	eor.w	r3, r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <fnConverterControl+0xee>
 8003ea0:	4b12      	ldr	r3, [pc, #72]	; (8003eec <fnConverterControl+0x134>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
        StartGTimer(TIMER_CONV_IGN_OFF);
 8003ea6:	2002      	movs	r0, #2
 8003ea8:	f7fd fd1a 	bl	80018e0 <StartGTimer>
      break;
 8003eac:	e015      	b.n	8003eda <fnConverterControl+0x122>
        if (GetGTimer(TIMER_CONV_IGN_OFF) > (setpoints->conv_T_IGN_off * MIN))
 8003eae:	2002      	movs	r0, #2
 8003eb0:	f7fd fcee 	bl	8001890 <GetGTimer>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	795b      	ldrb	r3, [r3, #5]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ec0:	fb03 f301 	mul.w	r3, r3, r1
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d908      	bls.n	8003eda <fnConverterControl+0x122>
          state = false;
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <fnConverterControl+0x134>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
          flag_convOff_due_ign_switch = true; //установка флага что было отключение по ignition switch
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <fnConverterControl+0x138>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
      break;
 8003ed4:	e001      	b.n	8003eda <fnConverterControl+0x122>
    break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <fnConverterControl+0x124>
      break;
 8003eda:	bf00      	nop
  }

  data->converter_output_state = state;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <fnConverterControl+0x134>)
 8003ede:	781a      	ldrb	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	775a      	strb	r2, [r3, #29]
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000048 	.word	0x20000048
 8003ef0:	200004c2 	.word	0x200004c2
 8003ef4:	200004c3 	.word	0x200004c3

08003ef8 <fnFridgeControl>:
//*****************************************************************************************

//FRIDGE RELAY CONTROL
void fnFridgeControl(struct MyData *data, struct SetpointsStruct *setpoints)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]

  uint16_t voltage = (uint16_t)data->battery_voltage * 10;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fc ff6e 	bl	8000de8 <__aeabi_f2uiz>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	0092      	lsls	r2, r2, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	81fb      	strh	r3, [r7, #14]
  static bool flag_fridgeOff_due_voltage;    // флаг что конветер был выключен по напряжению
  static bool flag_fridgeOff_due_ign_switch; // флаг что конветер был выключен по таймеру после выключения зажигания

  static bool state = true; // изначально (после старта) включен

  switch (setpoints->fridge_out_mode){
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	7b5b      	ldrb	r3, [r3, #13]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d010      	beq.n	8003f44 <fnFridgeControl+0x4c>
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	dc77      	bgt.n	8004016 <fnFridgeControl+0x11e>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <fnFridgeControl+0x38>
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d014      	beq.n	8003f58 <fnFridgeControl+0x60>
      }

      break;

    default:
    break;
 8003f2e:	e072      	b.n	8004016 <fnFridgeControl+0x11e>
      state = false;
 8003f30:	4b3e      	ldr	r3, [pc, #248]	; (800402c <fnFridgeControl+0x134>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
      StopGTimer(TIMER_FRIDGE_U_OFF);
 8003f36:	2003      	movs	r0, #3
 8003f38:	f7fd fcba 	bl	80018b0 <StopGTimer>
      StopGTimer(TIMER_FRIDGE_IGN_OFF);
 8003f3c:	2004      	movs	r0, #4
 8003f3e:	f7fd fcb7 	bl	80018b0 <StopGTimer>
      break;
 8003f42:	e06b      	b.n	800401c <fnFridgeControl+0x124>
      state = true;
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <fnFridgeControl+0x134>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	701a      	strb	r2, [r3, #0]
      StopGTimer(TIMER_FRIDGE_U_OFF);
 8003f4a:	2003      	movs	r0, #3
 8003f4c:	f7fd fcb0 	bl	80018b0 <StopGTimer>
      StopGTimer(TIMER_FRIDGE_IGN_OFF);
 8003f50:	2004      	movs	r0, #4
 8003f52:	f7fd fcad 	bl	80018b0 <StopGTimer>
      break;
 8003f56:	e061      	b.n	800401c <fnFridgeControl+0x124>
      if (voltage >= setpoints->fridge_U_on)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	7a5b      	ldrb	r3, [r3, #9]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	89fa      	ldrh	r2, [r7, #14]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d30f      	bcc.n	8003f84 <fnFridgeControl+0x8c>
        if (!flag_fridgeOff_due_ign_switch)state = true; // если напряжение в пределах нормы включаем преобразователь
 8003f64:	4b32      	ldr	r3, [pc, #200]	; (8004030 <fnFridgeControl+0x138>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f083 0301 	eor.w	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <fnFridgeControl+0x80>
 8003f72:	4b2e      	ldr	r3, [pc, #184]	; (800402c <fnFridgeControl+0x134>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
        flag_fridgeOff_due_voltage = false;    // флаг что было отключение по низкому напряжению
 8003f78:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <fnFridgeControl+0x13c>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
        StopGTimer(TIMER_FRIDGE_U_OFF); // останавливваем таймер выключения
 8003f7e:	2003      	movs	r0, #3
 8003f80:	f7fd fc96 	bl	80018b0 <StopGTimer>
      if (voltage > setpoints->fridge_U_on)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	7a5b      	ldrb	r3, [r3, #9]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	89fa      	ldrh	r2, [r7, #14]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d903      	bls.n	8003f98 <fnFridgeControl+0xa0>
    	StartGTimer(TIMER_FRIDGE_U_OFF); // заряжаем таймер на выключение
 8003f90:	2003      	movs	r0, #3
 8003f92:	f7fd fca5 	bl	80018e0 <StartGTimer>
 8003f96:	e015      	b.n	8003fc4 <fnFridgeControl+0xcc>
        if (GetGTimer(TIMER_FRIDGE_U_OFF) > (setpoints->fridge_T_U_off * SEC))
 8003f98:	2003      	movs	r0, #3
 8003f9a:	f7fd fc79 	bl	8001890 <GetGTimer>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	7a1b      	ldrb	r3, [r3, #8]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003faa:	fb03 f301 	mul.w	r3, r3, r1
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d908      	bls.n	8003fc4 <fnFridgeControl+0xcc>
          state = false;
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	; (800402c <fnFridgeControl+0x134>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
          flag_fridgeOff_due_voltage = true;   // флаг что было отключение по низкому напряжению
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <fnFridgeControl+0x13c>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
          StopGTimer(TIMER_FRIDGE_U_OFF); // останавливаем таймер выключения
 8003fbe:	2003      	movs	r0, #3
 8003fc0:	f7fd fc76 	bl	80018b0 <StopGTimer>
      if (data->ignition_switch_state)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7f1b      	ldrb	r3, [r3, #28]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d010      	beq.n	8003fee <fnFridgeControl+0xf6>
        flag_fridgeOff_due_ign_switch = false; //сброс флага что было отключение по ignition switch
 8003fcc:	4b18      	ldr	r3, [pc, #96]	; (8004030 <fnFridgeControl+0x138>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
        if (!flag_fridgeOff_due_voltage)state = true;
 8003fd2:	4b18      	ldr	r3, [pc, #96]	; (8004034 <fnFridgeControl+0x13c>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	f083 0301 	eor.w	r3, r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <fnFridgeControl+0xee>
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <fnFridgeControl+0x134>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
        StartGTimer(TIMER_FRIDGE_IGN_OFF);
 8003fe6:	2004      	movs	r0, #4
 8003fe8:	f7fd fc7a 	bl	80018e0 <StartGTimer>
      break;
 8003fec:	e015      	b.n	800401a <fnFridgeControl+0x122>
        if (GetGTimer(TIMER_FRIDGE_IGN_OFF) > (setpoints->fridge_T_IGN_off * MIN))
 8003fee:	2004      	movs	r0, #4
 8003ff0:	f7fd fc4e 	bl	8001890 <GetGTimer>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	7a9b      	ldrb	r3, [r3, #10]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004000:	fb03 f301 	mul.w	r3, r3, r1
 8004004:	429a      	cmp	r2, r3
 8004006:	d908      	bls.n	800401a <fnFridgeControl+0x122>
          state = false;
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <fnFridgeControl+0x134>)
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
          flag_fridgeOff_due_ign_switch = true; //установка флага что было отключение по ignition switch
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <fnFridgeControl+0x138>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
      break;
 8004014:	e001      	b.n	800401a <fnFridgeControl+0x122>
    break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <fnFridgeControl+0x124>
      break;
 800401a:	bf00      	nop
  }

  data->fridge_output_state = state;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <fnFridgeControl+0x134>)
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	779a      	strb	r2, [r3, #30]
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000049 	.word	0x20000049
 8004030:	200004c4 	.word	0x200004c4
 8004034:	200004c5 	.word	0x200004c5

08004038 <fnMainPowerControl>:
//*****************************************************************************************

// Main power control
void fnMainPowerControl(struct MyData *data, struct SetpointsStruct *setpoints)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  static bool state = true;

  if(data->ignition_switch_state)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	7f1b      	ldrb	r3, [r3, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <fnMainPowerControl+0x20>
  {
	StartGTimer(TIMER_SHUTDOWN_DELAY);
 800404a:	2005      	movs	r0, #5
 800404c:	f7fd fc48 	bl	80018e0 <StartGTimer>
    state = true;
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <fnMainPowerControl+0x50>)
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e00e      	b.n	8004076 <fnMainPowerControl+0x3e>
  }
  else
  {
	if (GetGTimer(TIMER_SHUTDOWN_DELAY) > (setpoints->shutdown_delay * HOUR))state = false;
 8004058:	2005      	movs	r0, #5
 800405a:	f7fd fc19 	bl	8001890 <GetGTimer>
 800405e:	4602      	mov	r2, r0
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	7c9b      	ldrb	r3, [r3, #18]
 8004064:	4619      	mov	r1, r3
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <fnMainPowerControl+0x54>)
 8004068:	fb03 f301 	mul.w	r3, r3, r1
 800406c:	429a      	cmp	r2, r3
 800406e:	d902      	bls.n	8004076 <fnMainPowerControl+0x3e>
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <fnMainPowerControl+0x50>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
  }

  data->main_supply_output_state = state;
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <fnMainPowerControl+0x50>)
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	2000004a 	.word	0x2000004a
 800408c:	0036ee80 	.word	0x0036ee80

08004090 <fnInputsUpdate>:
//**********************************************************************

//
void fnInputsUpdate(void){
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0

  static uint8_t inputs_undebounced_sample = 0;
  static uint8_t inputs_debounced_state = 0;

  if (!HAL_GPIO_ReadPin(DOOR_INPUT_GPIO_Port, DOOR_INPUT_Pin))inputs_undebounced_sample |= (1 << 0);
 8004094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004098:	4837      	ldr	r0, [pc, #220]	; (8004178 <fnInputsUpdate+0xe8>)
 800409a:	f004 f9ff 	bl	800849c <HAL_GPIO_ReadPin>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d107      	bne.n	80040b4 <fnInputsUpdate+0x24>
 80040a4:	4b35      	ldr	r3, [pc, #212]	; (800417c <fnInputsUpdate+0xec>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	4b33      	ldr	r3, [pc, #204]	; (800417c <fnInputsUpdate+0xec>)
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e006      	b.n	80040c2 <fnInputsUpdate+0x32>
  else  inputs_undebounced_sample &= ~(1 << 0);
 80040b4:	4b31      	ldr	r3, [pc, #196]	; (800417c <fnInputsUpdate+0xec>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b2f      	ldr	r3, [pc, #188]	; (800417c <fnInputsUpdate+0xec>)
 80040c0:	701a      	strb	r2, [r3, #0]

  if (!HAL_GPIO_ReadPin(PRX_SENS_INPUT_GPIO_Port, PRX_SENS_INPUT_Pin))inputs_undebounced_sample |= (1 << 1);
 80040c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040c6:	482c      	ldr	r0, [pc, #176]	; (8004178 <fnInputsUpdate+0xe8>)
 80040c8:	f004 f9e8 	bl	800849c <HAL_GPIO_ReadPin>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d107      	bne.n	80040e2 <fnInputsUpdate+0x52>
 80040d2:	4b2a      	ldr	r3, [pc, #168]	; (800417c <fnInputsUpdate+0xec>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	4b27      	ldr	r3, [pc, #156]	; (800417c <fnInputsUpdate+0xec>)
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e006      	b.n	80040f0 <fnInputsUpdate+0x60>
  else inputs_undebounced_sample &= ~(1 << 1);
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <fnInputsUpdate+0xec>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	f023 0302 	bic.w	r3, r3, #2
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	4b23      	ldr	r3, [pc, #140]	; (800417c <fnInputsUpdate+0xec>)
 80040ee:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(IGN_INPUT_GPIO_Port,IGN_INPUT_Pin))inputs_undebounced_sample |= (1 << 2);
 80040f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040f4:	4822      	ldr	r0, [pc, #136]	; (8004180 <fnInputsUpdate+0xf0>)
 80040f6:	f004 f9d1 	bl	800849c <HAL_GPIO_ReadPin>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <fnInputsUpdate+0x80>
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <fnInputsUpdate+0xec>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b1c      	ldr	r3, [pc, #112]	; (800417c <fnInputsUpdate+0xec>)
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e006      	b.n	800411e <fnInputsUpdate+0x8e>
  else inputs_undebounced_sample &= ~(1 << 2);
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <fnInputsUpdate+0xec>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <fnInputsUpdate+0xec>)
 800411c:	701a      	strb	r2, [r3, #0]

  inputs_debounced_state = fnDebounce(inputs_undebounced_sample);
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <fnInputsUpdate+0xec>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f832 	bl	800418c <fnDebounce>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <fnInputsUpdate+0xf4>)
 800412e:	701a      	strb	r2, [r3, #0]

  main_data.door_switch_state = (inputs_debounced_state & (1 << 0));
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <fnInputsUpdate+0xf4>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2da      	uxtb	r2, r3
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <fnInputsUpdate+0xf8>)
 8004144:	769a      	strb	r2, [r3, #26]
  main_data.proximity_sensor_state = (inputs_debounced_state & (1 << 1));
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <fnInputsUpdate+0xf4>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2da      	uxtb	r2, r3
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <fnInputsUpdate+0xf8>)
 800415a:	76da      	strb	r2, [r3, #27]
  main_data.ignition_switch_state = (inputs_debounced_state & (1 << 2));
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <fnInputsUpdate+0xf4>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <fnInputsUpdate+0xf8>)
 8004170:	771a      	strb	r2, [r3, #28]

}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40010c00 	.word	0x40010c00
 800417c:	200004c6 	.word	0x200004c6
 8004180:	40010800 	.word	0x40010800
 8004184:	200004c7 	.word	0x200004c7
 8004188:	200009d4 	.word	0x200009d4

0800418c <fnDebounce>:
//**********************************************************************************

//Debounce
uint8_t fnDebounce(uint8_t sample) // антидребезг на основе вертикального счетчика
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
      static uint8_t state, cnt0, cnt1;
      uint8_t delta, toggle;

      delta = sample ^ state;
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <fnDebounce+0x74>)
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	4053      	eors	r3, r2
 800419e:	73fb      	strb	r3, [r7, #15]
      cnt1 = cnt1 ^ cnt0;
 80041a0:	4b18      	ldr	r3, [pc, #96]	; (8004204 <fnDebounce+0x78>)
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <fnDebounce+0x7c>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	4053      	eors	r3, r2
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	4b15      	ldr	r3, [pc, #84]	; (8004204 <fnDebounce+0x78>)
 80041ae:	701a      	strb	r2, [r3, #0]
      cnt0 = ~cnt0;
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <fnDebounce+0x7c>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <fnDebounce+0x7c>)
 80041ba:	701a      	strb	r2, [r3, #0]

      cnt0 &= delta;
 80041bc:	4b12      	ldr	r3, [pc, #72]	; (8004208 <fnDebounce+0x7c>)
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	4013      	ands	r3, r2
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4b10      	ldr	r3, [pc, #64]	; (8004208 <fnDebounce+0x7c>)
 80041c8:	701a      	strb	r2, [r3, #0]
      cnt1 &= delta;
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <fnDebounce+0x78>)
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	4013      	ands	r3, r2
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <fnDebounce+0x78>)
 80041d6:	701a      	strb	r2, [r3, #0]

      toggle = cnt0 & cnt1;
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <fnDebounce+0x7c>)
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <fnDebounce+0x78>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	4013      	ands	r3, r2
 80041e2:	73bb      	strb	r3, [r7, #14]
      state ^= toggle;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <fnDebounce+0x74>)
 80041e6:	781a      	ldrb	r2, [r3, #0]
 80041e8:	7bbb      	ldrb	r3, [r7, #14]
 80041ea:	4053      	eors	r3, r2
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <fnDebounce+0x74>)
 80041f0:	701a      	strb	r2, [r3, #0]
      return state;
 80041f2:	4b03      	ldr	r3, [pc, #12]	; (8004200 <fnDebounce+0x74>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	200004c8 	.word	0x200004c8
 8004204:	200004c9 	.word	0x200004c9
 8004208:	200004ca 	.word	0x200004ca

0800420c <fnOutputsUpdate>:
//*************************************************************************

//Outputs Update
void fnOutputsUpdate(struct MyData *data)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PUMP_OUTPUT_GPIO_Port, PUMP_OUTPUT_Pin, data->pump_output_state);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	7fdb      	ldrb	r3, [r3, #31]
 8004218:	461a      	mov	r2, r3
 800421a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800421e:	4814      	ldr	r0, [pc, #80]	; (8004270 <fnOutputsUpdate+0x64>)
 8004220:	f004 f953 	bl	80084ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRIDGE_OUTPUT_GPIO_Port, FRIDGE_OUTPUT_Pin, data->fridge_output_state);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	7f9b      	ldrb	r3, [r3, #30]
 8004228:	461a      	mov	r2, r3
 800422a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800422e:	4810      	ldr	r0, [pc, #64]	; (8004270 <fnOutputsUpdate+0x64>)
 8004230:	f004 f94b 	bl	80084ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CONV_OUTPUT_GPIO_Port, CONV_OUTPUT_Pin, data->converter_output_state);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	7f5b      	ldrb	r3, [r3, #29]
 8004238:	461a      	mov	r2, r3
 800423a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800423e:	480c      	ldr	r0, [pc, #48]	; (8004270 <fnOutputsUpdate+0x64>)
 8004240:	f004 f943 	bl	80084ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MAIN_SUPPLY_GPIO_Port, MAIN_SUPPLY_Pin, data->main_supply_output_state);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800424a:	461a      	mov	r2, r3
 800424c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004250:	4807      	ldr	r0, [pc, #28]	; (8004270 <fnOutputsUpdate+0x64>)
 8004252:	f004 f93a 	bl	80084ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SENS_SUPPLY_GPIO_Port, SENS_SUPPLY_Pin, data->sensors_supply_output_state);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425c:	461a      	mov	r2, r3
 800425e:	2104      	movs	r1, #4
 8004260:	4803      	ldr	r0, [pc, #12]	; (8004270 <fnOutputsUpdate+0x64>)
 8004262:	f004 f932 	bl	80084ca <HAL_GPIO_WritePin>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40010c00 	.word	0x40010c00

08004274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004278:	b672      	cpsid	i
}
 800427a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800427c:	e7fe      	b.n	800427c <Error_Handler+0x8>

0800427e <mini_strlen>:

#include "mini-printf.h"

static int
mini_strlen(const char *s)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
	int len = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
	while (s[len] != '\0') len++;
 800428a:	e002      	b.n	8004292 <mini_strlen+0x14>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3301      	adds	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f6      	bne.n	800428c <mini_strlen+0xe>
	return len;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <mini_itoa>:

static int
mini_itoa(long value, unsigned int radix, int uppercase, int unsig,
	 char *buffer)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b08b      	sub	sp, #44	; 0x2c
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
	char	*pbuffer = buffer;
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
	int	negative = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	623b      	str	r3, [r7, #32]
	int	i, len;

	/* No support for unusual radixes. */
	if (radix > 16)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d901      	bls.n	80042ca <mini_itoa+0x20>
		return 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e069      	b.n	800439e <mini_itoa+0xf4>

	if (value < 0 && !unsig) {
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	da07      	bge.n	80042e0 <mini_itoa+0x36>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d104      	bne.n	80042e0 <mini_itoa+0x36>
		negative = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	623b      	str	r3, [r7, #32]
		value = -value;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	425b      	negs	r3, r3
 80042de:	60fb      	str	r3, [r7, #12]
	}

	/* This builds the string back to front ... */
	do {
		int digit = value % radix;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	fb01 f202 	mul.w	r2, r1, r2
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
		*(pbuffer++) = (digit < 10 ? '0' + digit : (uppercase ? 'A' : 'a') + digit - 10);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	dc04      	bgt.n	8004302 <mini_itoa+0x58>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3330      	adds	r3, #48	; 0x30
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	e00b      	b.n	800431a <mini_itoa+0x70>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <mini_itoa+0x62>
 8004308:	2241      	movs	r2, #65	; 0x41
 800430a:	e000      	b.n	800430e <mini_itoa+0x64>
 800430c:	2261      	movs	r2, #97	; 0x61
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	4413      	add	r3, r2
 8004314:	b2db      	uxtb	r3, r3
 8004316:	3b0a      	subs	r3, #10
 8004318:	b2da      	uxtb	r2, r3
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1c59      	adds	r1, r3, #1
 800431e:	6279      	str	r1, [r7, #36]	; 0x24
 8004320:	701a      	strb	r2, [r3, #0]
		value /= radix;
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	60fb      	str	r3, [r7, #12]
	} while (value > 0);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	dcd6      	bgt.n	80042e0 <mini_itoa+0x36>

	if (negative)
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <mini_itoa+0x98>
		*(pbuffer++) = '-';
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	627a      	str	r2, [r7, #36]	; 0x24
 800433e:	222d      	movs	r2, #45	; 0x2d
 8004340:	701a      	strb	r2, [r3, #0]

	*(pbuffer) = '\0';
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]

	/* ... now we reverse it (could do it recursively but will
	 * conserve the stack space) */
	len = (pbuffer - buffer);
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len / 2; i++) {
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	e01a      	b.n	800438c <mini_itoa+0xe2>
		char j = buffer[i];
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435a:	4413      	add	r3, r2
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	74fb      	strb	r3, [r7, #19]
		buffer[i] = buffer[len-i-1];
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436a:	441a      	add	r2, r3
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004370:	440b      	add	r3, r1
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	701a      	strb	r2, [r3, #0]
		buffer[len-i-1] = j;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004380:	4413      	add	r3, r2
 8004382:	7cfa      	ldrb	r2, [r7, #19]
 8004384:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len / 2; i++) {
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3301      	adds	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	0fda      	lsrs	r2, r3, #31
 8004390:	4413      	add	r3, r2
 8004392:	105b      	asrs	r3, r3, #1
 8004394:	461a      	mov	r2, r3
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4293      	cmp	r3, r2
 800439a:	dbdc      	blt.n	8004356 <mini_itoa+0xac>
	}

	return len;
 800439c:	697b      	ldr	r3, [r7, #20]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	372c      	adds	r7, #44	; 0x2c
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <mini_pad>:

static int
mini_pad(char* ptr, int len, char pad_char, int pad_to, char *buffer)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	; 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71fb      	strb	r3, [r7, #7]
	int i;
	int overflow = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
	char * pbuffer = buffer;
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	617b      	str	r3, [r7, #20]
	if(pad_to == 0) pad_to = len;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <mini_pad+0x22>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	603b      	str	r3, [r7, #0]
	if(len > pad_to) {
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	dd03      	ble.n	80043da <mini_pad+0x32>
		len = pad_to;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	60bb      	str	r3, [r7, #8]
		overflow = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	61bb      	str	r3, [r7, #24]
	}
	for(i = pad_to - len; i > 0; i --) {
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e007      	b.n	80043f4 <mini_pad+0x4c>
		*(pbuffer++) = pad_char;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	617a      	str	r2, [r7, #20]
 80043ea:	79fa      	ldrb	r2, [r7, #7]
 80043ec:	701a      	strb	r2, [r3, #0]
	for(i = pad_to - len; i > 0; i --) {
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	dcf4      	bgt.n	80043e4 <mini_pad+0x3c>
	}
	for(i = len; i > 0; i --) {
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e00a      	b.n	8004416 <mini_pad+0x6e>
		*(pbuffer++) = *(ptr++);
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	1c53      	adds	r3, r2, #1
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	6179      	str	r1, [r7, #20]
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	701a      	strb	r2, [r3, #0]
	for(i = len; i > 0; i --) {
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3b01      	subs	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	dcf1      	bgt.n	8004400 <mini_pad+0x58>
	}
	len = pbuffer - buffer;
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	60bb      	str	r3, [r7, #8]
	if(overflow) {
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d012      	beq.n	8004450 <mini_pad+0xa8>
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	e008      	b.n	8004442 <mini_pad+0x9a>
			*(pbuffer-- - 1) = '*';
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1e5a      	subs	r2, r3, #1
 8004434:	617a      	str	r2, [r7, #20]
 8004436:	3b01      	subs	r3, #1
 8004438:	222a      	movs	r2, #42	; 0x2a
 800443a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 3 && pbuffer > buffer; i ++) {
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3301      	adds	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b02      	cmp	r3, #2
 8004446:	dc03      	bgt.n	8004450 <mini_pad+0xa8>
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	429a      	cmp	r2, r3
 800444e:	d8ef      	bhi.n	8004430 <mini_pad+0x88>
		}
	}
	return len;
 8004450:	68bb      	ldr	r3, [r7, #8]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3724      	adds	r7, #36	; 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <_puts>:
	unsigned int buffer_len;
};

static int
_puts(char *s, int len, void *buf)
{
 800445c:	b480      	push	{r7}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
	if(!buf) return len;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <_puts+0x16>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	e02c      	b.n	80044cc <_puts+0x70>
	struct mini_buff *b = buf;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	61bb      	str	r3, [r7, #24]
	char * p0 = b->buffer;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]
	int i;
	/* Copy to buffer */
	for (i = 0; i < len; i++) {
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e016      	b.n	80044b0 <_puts+0x54>
		if(b->pbuffer == b->buffer + b->buffer_len - 1) {
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	3b01      	subs	r3, #1
 8004490:	440b      	add	r3, r1
 8004492:	429a      	cmp	r2, r3
 8004494:	d011      	beq.n	80044ba <_puts+0x5e>
			break;
		}
		*(b->pbuffer ++) = s[i];
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	441a      	add	r2, r3
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	1c58      	adds	r0, r3, #1
 80044a2:	69b9      	ldr	r1, [r7, #24]
 80044a4:	6048      	str	r0, [r1, #4]
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	dbe4      	blt.n	8004482 <_puts+0x26>
 80044b8:	e000      	b.n	80044bc <_puts+0x60>
			break;
 80044ba:	bf00      	nop
	}
	*(b->pbuffer) = 0;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
	return b->pbuffer - p0;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3724      	adds	r7, #36	; 0x24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr
	...

080044d8 <mini_vsnprintf>:
}
#endif

int
mini_vsnprintf(char *buffer, unsigned int buffer_len, const char *fmt, va_list va)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
	struct mini_buff b;
	b.buffer = buffer;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	613b      	str	r3, [r7, #16]
	b.pbuffer = buffer;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	617b      	str	r3, [r7, #20]
	b.buffer_len = buffer_len;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61bb      	str	r3, [r7, #24]
	if(buffer_len == 0) buffer = (void*) 0;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <mini_vsnprintf+0x24>
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
	int n = mini_vpprintf(_puts, (buffer != (void*)0)?&b:(void*)0, fmt, va);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <mini_vsnprintf+0x30>
 8004502:	f107 0110 	add.w	r1, r7, #16
 8004506:	e000      	b.n	800450a <mini_vsnprintf+0x32>
 8004508:	2100      	movs	r1, #0
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4808      	ldr	r0, [pc, #32]	; (8004530 <mini_vsnprintf+0x58>)
 8004510:	f000 f810 	bl	8004534 <mini_vpprintf>
 8004514:	61f8      	str	r0, [r7, #28]
	if(buffer == (void*) 0) {
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <mini_vsnprintf+0x48>
		return n;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	e002      	b.n	8004526 <mini_vsnprintf+0x4e>
	}
	return b.pbuffer - b.buffer;
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	0800445d 	.word	0x0800445d

08004534 <mini_vpprintf>:

int
mini_vpprintf(int (*puts)(char* s, int len, void* buf), void* buf, const char *fmt, va_list va)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b09a      	sub	sp, #104	; 0x68
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
	char bf2[24];
	char ch;
#ifdef MINI_PRINTF_ENABLE_OBJECTS
	void* obj;
#endif
	if(puts == (void*)0) {
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <mini_vpprintf+0x1c>
		/* run puts in counting mode. */
		puts = _puts; buf = (void*)0;
 8004548:	4bb5      	ldr	r3, [pc, #724]	; (8004820 <mini_vpprintf+0x2ec>)
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
	}
	int n = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	65fb      	str	r3, [r7, #92]	; 0x5c
	while ((ch=*(fmt++))) {
 8004554:	e17b      	b.n	800484e <mini_vpprintf+0x31a>
		int len;
		if (ch!='%') {
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b25      	cmp	r3, #37	; 0x25
 800455a:	d009      	beq.n	8004570 <mini_vpprintf+0x3c>
			len = 1;
 800455c:	2301      	movs	r3, #1
 800455e:	65bb      	str	r3, [r7, #88]	; 0x58
			len = puts(&ch, len, buf);
 8004560:	f107 0017 	add.w	r0, r7, #23
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800456a:	4798      	blx	r3
 800456c:	65b8      	str	r0, [r7, #88]	; 0x58
 800456e:	e16a      	b.n	8004846 <mini_vpprintf+0x312>
		} else {
			char pad_char = ' ';
 8004570:	2320      	movs	r3, #32
 8004572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			int pad_to = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	653b      	str	r3, [r7, #80]	; 0x50
			char l = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			char *ptr;

			ch=*(fmt++);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	75fb      	strb	r3, [r7, #23]

			/* Zero padding requested */
			if (ch == '0') pad_char = '0';
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d112      	bne.n	80045b6 <mini_vpprintf+0x82>
 8004590:	2330      	movs	r3, #48	; 0x30
 8004592:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			while (ch >= '0' && ch <= '9') {
 8004596:	e00e      	b.n	80045b6 <mini_vpprintf+0x82>
				pad_to = pad_to * 10 + (ch - '0');
 8004598:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	461a      	mov	r2, r3
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	3b30      	subs	r3, #48	; 0x30
 80045a8:	4413      	add	r3, r2
 80045aa:	653b      	str	r3, [r7, #80]	; 0x50
				ch=*(fmt++);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	75fb      	strb	r3, [r7, #23]
			while (ch >= '0' && ch <= '9') {
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b2f      	cmp	r3, #47	; 0x2f
 80045ba:	d902      	bls.n	80045c2 <mini_vpprintf+0x8e>
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	2b39      	cmp	r3, #57	; 0x39
 80045c0:	d9ea      	bls.n	8004598 <mini_vpprintf+0x64>
			}
			if(pad_to > (signed int) sizeof(bf)) {
 80045c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c4:	2b18      	cmp	r3, #24
 80045c6:	dd01      	ble.n	80045cc <mini_vpprintf+0x98>
				pad_to = sizeof(bf);
 80045c8:	2318      	movs	r3, #24
 80045ca:	653b      	str	r3, [r7, #80]	; 0x50
			}
			if (ch == 'l') {
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b6c      	cmp	r3, #108	; 0x6c
 80045d0:	d107      	bne.n	80045e2 <mini_vpprintf+0xae>
				l = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				ch=*(fmt++);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	75fb      	strb	r3, [r7, #23]
			}

			switch (ch) {
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 813c 	beq.w	8004862 <mini_vpprintf+0x32e>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f2c0 8121 	blt.w	8004832 <mini_vpprintf+0x2fe>
 80045f0:	2b78      	cmp	r3, #120	; 0x78
 80045f2:	f300 811e 	bgt.w	8004832 <mini_vpprintf+0x2fe>
 80045f6:	2b58      	cmp	r3, #88	; 0x58
 80045f8:	f2c0 811b 	blt.w	8004832 <mini_vpprintf+0x2fe>
 80045fc:	3b58      	subs	r3, #88	; 0x58
 80045fe:	2b20      	cmp	r3, #32
 8004600:	f200 8117 	bhi.w	8004832 <mini_vpprintf+0x2fe>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <mini_vpprintf+0xd8>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	0800472b 	.word	0x0800472b
 8004610:	08004833 	.word	0x08004833
 8004614:	08004833 	.word	0x08004833
 8004618:	08004833 	.word	0x08004833
 800461c:	08004833 	.word	0x08004833
 8004620:	08004833 	.word	0x08004833
 8004624:	08004833 	.word	0x08004833
 8004628:	08004833 	.word	0x08004833
 800462c:	08004833 	.word	0x08004833
 8004630:	08004833 	.word	0x08004833
 8004634:	08004833 	.word	0x08004833
 8004638:	080047ad 	.word	0x080047ad
 800463c:	08004691 	.word	0x08004691
 8004640:	08004833 	.word	0x08004833
 8004644:	08004833 	.word	0x08004833
 8004648:	08004833 	.word	0x08004833
 800464c:	08004833 	.word	0x08004833
 8004650:	08004833 	.word	0x08004833
 8004654:	08004833 	.word	0x08004833
 8004658:	08004833 	.word	0x08004833
 800465c:	08004833 	.word	0x08004833
 8004660:	08004833 	.word	0x08004833
 8004664:	08004833 	.word	0x08004833
 8004668:	08004833 	.word	0x08004833
 800466c:	08004833 	.word	0x08004833
 8004670:	08004833 	.word	0x08004833
 8004674:	08004833 	.word	0x08004833
 8004678:	080047e1 	.word	0x080047e1
 800467c:	08004833 	.word	0x08004833
 8004680:	08004691 	.word	0x08004691
 8004684:	08004833 	.word	0x08004833
 8004688:	08004833 	.word	0x08004833
 800468c:	0800472b 	.word	0x0800472b
				case 0:
					goto end;
				case 'u':
				case 'd':
					if(l) {
 8004690:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004694:	2b00      	cmp	r3, #0
 8004696:	d015      	beq.n	80046c4 <mini_vpprintf+0x190>
						len = mini_itoa(va_arg(va, unsigned long), 10, 0, (ch=='u'), bf2);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	1d1a      	adds	r2, r3, #4
 800469c:	603a      	str	r2, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b75      	cmp	r3, #117	; 0x75
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	f107 0318 	add.w	r3, r7, #24
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	2200      	movs	r2, #0
 80046ba:	210a      	movs	r1, #10
 80046bc:	f7ff fdf5 	bl	80042aa <mini_itoa>
 80046c0:	65b8      	str	r0, [r7, #88]	; 0x58
 80046c2:	e01e      	b.n	8004702 <mini_vpprintf+0x1ce>
					} else {
						if(ch == 'u') {
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b75      	cmp	r3, #117	; 0x75
 80046c8:	d10e      	bne.n	80046e8 <mini_vpprintf+0x1b4>
							len = mini_itoa((unsigned long) va_arg(va, unsigned int), 10, 0, 1, bf2);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	603a      	str	r2, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f107 0318 	add.w	r3, r7, #24
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2301      	movs	r3, #1
 80046dc:	2200      	movs	r2, #0
 80046de:	210a      	movs	r1, #10
 80046e0:	f7ff fde3 	bl	80042aa <mini_itoa>
 80046e4:	65b8      	str	r0, [r7, #88]	; 0x58
 80046e6:	e00c      	b.n	8004702 <mini_vpprintf+0x1ce>
						} else {
							len = mini_itoa((long) va_arg(va, int), 10, 0, 0, bf2);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	603a      	str	r2, [r7, #0]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	f107 0318 	add.w	r3, r7, #24
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	2300      	movs	r3, #0
 80046f8:	2200      	movs	r2, #0
 80046fa:	210a      	movs	r1, #10
 80046fc:	f7ff fdd5 	bl	80042aa <mini_itoa>
 8004700:	65b8      	str	r0, [r7, #88]	; 0x58
						}
					}
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 8004702:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004706:	f107 0018 	add.w	r0, r7, #24
 800470a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004714:	f7ff fe48 	bl	80043a8 <mini_pad>
 8004718:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 800471a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004724:	4798      	blx	r3
 8004726:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8004728:	e08d      	b.n	8004846 <mini_vpprintf+0x312>

				case 'x':
				case 'X':
					if(l) {
 800472a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800472e:	2b00      	cmp	r3, #0
 8004730:	d014      	beq.n	800475c <mini_vpprintf+0x228>
						len = mini_itoa(va_arg(va, unsigned long), 16, (ch=='X'), 1, bf2);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	1d1a      	adds	r2, r3, #4
 8004736:	603a      	str	r2, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	2b58      	cmp	r3, #88	; 0x58
 8004740:	bf0c      	ite	eq
 8004742:	2301      	moveq	r3, #1
 8004744:	2300      	movne	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	f107 0318 	add.w	r3, r7, #24
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	2301      	movs	r3, #1
 8004752:	2110      	movs	r1, #16
 8004754:	f7ff fda9 	bl	80042aa <mini_itoa>
 8004758:	65b8      	str	r0, [r7, #88]	; 0x58
 800475a:	e013      	b.n	8004784 <mini_vpprintf+0x250>
					} else {
						len = mini_itoa((unsigned long) va_arg(va, unsigned int), 16, (ch=='X'), 1, bf2);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	603a      	str	r2, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b58      	cmp	r3, #88	; 0x58
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	f107 0318 	add.w	r3, r7, #24
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2301      	movs	r3, #1
 800477c:	2110      	movs	r1, #16
 800477e:	f7ff fd94 	bl	80042aa <mini_itoa>
 8004782:	65b8      	str	r0, [r7, #88]	; 0x58
					}
					len = mini_pad(bf2, len, pad_char, pad_to, bf);
 8004784:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004788:	f107 0018 	add.w	r0, r7, #24
 800478c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004794:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004796:	f7ff fe07 	bl	80043a8 <mini_pad>
 800479a:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 800479c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047a6:	4798      	blx	r3
 80047a8:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 80047aa:	e04c      	b.n	8004846 <mini_vpprintf+0x312>

				case 'c' :
					ch = (char)(va_arg(va, int));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	1d1a      	adds	r2, r3, #4
 80047b0:	603a      	str	r2, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	75fb      	strb	r3, [r7, #23]
					len = mini_pad(&ch, 1, pad_char, pad_to, bf);
 80047b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80047bc:	f107 0017 	add.w	r0, r7, #23
 80047c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c8:	2101      	movs	r1, #1
 80047ca:	f7ff fded 	bl	80043a8 <mini_pad>
 80047ce:	65b8      	str	r0, [r7, #88]	; 0x58
					len = puts(bf, len, buf);
 80047d0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047da:	4798      	blx	r3
 80047dc:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 80047de:	e032      	b.n	8004846 <mini_vpprintf+0x312>

				case 's' :
					ptr = va_arg(va, char*);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	603a      	str	r2, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
					len = mini_strlen(ptr);
 80047ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80047ec:	f7ff fd47 	bl	800427e <mini_strlen>
 80047f0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (pad_to > 0) {
 80047f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	dd15      	ble.n	8004824 <mini_vpprintf+0x2f0>
						len = mini_pad(ptr, len, pad_char, pad_to, bf);
 80047f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80047fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004804:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004806:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004808:	f7ff fdce 	bl	80043a8 <mini_pad>
 800480c:	65b8      	str	r0, [r7, #88]	; 0x58
						len = puts(bf, len, buf);
 800480e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004818:	4798      	blx	r3
 800481a:	65b8      	str	r0, [r7, #88]	; 0x58
					} else {
						len = puts(ptr, len, buf);
					}
					break;
 800481c:	e013      	b.n	8004846 <mini_vpprintf+0x312>
 800481e:	bf00      	nop
 8004820:	0800445d 	.word	0x0800445d
						len = puts(ptr, len, buf);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800482a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800482c:	4798      	blx	r3
 800482e:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8004830:	e009      	b.n	8004846 <mini_vpprintf+0x312>
					}
					mini_handler_freeor(mini_handler_data, ptr);
					break;
#endif
				default:
					len = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	65bb      	str	r3, [r7, #88]	; 0x58
					len = puts(&ch, len, buf);
 8004836:	f107 0017 	add.w	r0, r7, #23
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004840:	4798      	blx	r3
 8004842:	65b8      	str	r0, [r7, #88]	; 0x58
					break;
 8004844:	bf00      	nop
			}
		}
		n = n + len;
 8004846:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800484a:	4413      	add	r3, r2
 800484c:	65fb      	str	r3, [r7, #92]	; 0x5c
	while ((ch=*(fmt++))) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	75fb      	strb	r3, [r7, #23]
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f47f ae7b 	bne.w	8004556 <mini_vpprintf+0x22>
	}
end:
 8004860:	e000      	b.n	8004864 <mini_vpprintf+0x330>
					goto end;
 8004862:	bf00      	nop
	return n;
 8004864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004866:	4618      	mov	r0, r3
 8004868:	3760      	adds	r7, #96	; 0x60
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop

08004870 <mini_snprintf>:


int
mini_snprintf(char* buffer, unsigned int buffer_len, const char *fmt, ...)
{
 8004870:	b40c      	push	{r2, r3}
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
	int ret;
	va_list va;
	va_start(va, fmt);
 800487c:	f107 031c 	add.w	r3, r7, #28
 8004880:	60bb      	str	r3, [r7, #8]
	ret = mini_vsnprintf(buffer, buffer_len, fmt, va);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fe25 	bl	80044d8 <mini_vsnprintf>
 800488e:	60f8      	str	r0, [r7, #12]
	va_end(va);

	return ret;
 8004890:	68fb      	ldr	r3, [r7, #12]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800489c:	b002      	add	sp, #8
 800489e:	4770      	bx	lr

080048a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_MspInit+0x5c>)
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	4a14      	ldr	r2, [pc, #80]	; (80048fc <HAL_MspInit+0x5c>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	6193      	str	r3, [r2, #24]
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_MspInit+0x5c>)
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <HAL_MspInit+0x5c>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <HAL_MspInit+0x5c>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	61d3      	str	r3, [r2, #28]
 80048ca:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <HAL_MspInit+0x5c>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <HAL_MspInit+0x60>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	4a04      	ldr	r2, [pc, #16]	; (8004900 <HAL_MspInit+0x60>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	40021000 	.word	0x40021000
 8004900:	40010000 	.word	0x40010000

08004904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	; 0x28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800490c:	f107 0318 	add.w	r3, r7, #24
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	609a      	str	r2, [r3, #8]
 8004918:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a37      	ldr	r2, [pc, #220]	; (80049fc <HAL_ADC_MspInit+0xf8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d167      	bne.n	80049f4 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004924:	4b36      	ldr	r3, [pc, #216]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4a35      	ldr	r2, [pc, #212]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 800492a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800492e:	6193      	str	r3, [r2, #24]
 8004930:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493c:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	4a2f      	ldr	r2, [pc, #188]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	6193      	str	r3, [r2, #24]
 8004948:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004954:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 800495a:	f043 0308 	orr.w	r3, r3, #8
 800495e:	6193      	str	r3, [r2, #24]
 8004960:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <HAL_ADC_MspInit+0xfc>)
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RES_SENS_Pin|BAT_VOLT_Pin;
 800496c:	2305      	movs	r3, #5
 800496e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004970:	2303      	movs	r3, #3
 8004972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004974:	f107 0318 	add.w	r3, r7, #24
 8004978:	4619      	mov	r1, r3
 800497a:	4822      	ldr	r0, [pc, #136]	; (8004a04 <HAL_ADC_MspInit+0x100>)
 800497c:	f003 fc0a 	bl	8008194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENS_VOLT_Pin;
 8004980:	2302      	movs	r3, #2
 8004982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004984:	2303      	movs	r3, #3
 8004986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENS_VOLT_GPIO_Port, &GPIO_InitStruct);
 8004988:	f107 0318 	add.w	r3, r7, #24
 800498c:	4619      	mov	r1, r3
 800498e:	481e      	ldr	r0, [pc, #120]	; (8004a08 <HAL_ADC_MspInit+0x104>)
 8004990:	f003 fc00 	bl	8008194 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004994:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_ADC_MspInit+0x10c>)
 8004998:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800499a:	4b1c      	ldr	r3, [pc, #112]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 800499c:	2200      	movs	r2, #0
 800499e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049a6:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049a8:	2280      	movs	r2, #128	; 0x80
 80049aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049ac:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049be:	2220      	movs	r2, #32
 80049c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049c8:	4810      	ldr	r0, [pc, #64]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049ca:	f003 f945 	bl	8007c58 <HAL_DMA_Init>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80049d4:	f7ff fc4e 	bl	8004274 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049dc:	621a      	str	r2, [r3, #32]
 80049de:	4a0b      	ldr	r2, [pc, #44]	; (8004a0c <HAL_ADC_MspInit+0x108>)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80049e4:	2200      	movs	r2, #0
 80049e6:	2100      	movs	r1, #0
 80049e8:	2012      	movs	r0, #18
 80049ea:	f003 f8fe 	bl	8007bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80049ee:	2012      	movs	r0, #18
 80049f0:	f003 f917 	bl	8007c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80049f4:	bf00      	nop
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40012400 	.word	0x40012400
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40010800 	.word	0x40010800
 8004a08:	40010c00 	.word	0x40010c00
 8004a0c:	20000af0 	.word	0x20000af0
 8004a10:	40020008 	.word	0x40020008

08004a14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1c:	f107 0310 	add.w	r3, r7, #16
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <HAL_SPI_MspInit+0x88>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d12f      	bne.n	8004a94 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a34:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <HAL_SPI_MspInit+0x8c>)
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <HAL_SPI_MspInit+0x8c>)
 8004a3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a3e:	6193      	str	r3, [r2, #24]
 8004a40:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <HAL_SPI_MspInit+0x8c>)
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4c:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <HAL_SPI_MspInit+0x8c>)
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_SPI_MspInit+0x8c>)
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	6193      	str	r3, [r2, #24]
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_SPI_MspInit+0x8c>)
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004a64:	23a0      	movs	r3, #160	; 0xa0
 8004a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a70:	f107 0310 	add.w	r3, r7, #16
 8004a74:	4619      	mov	r1, r3
 8004a76:	480b      	ldr	r0, [pc, #44]	; (8004aa4 <HAL_SPI_MspInit+0x90>)
 8004a78:	f003 fb8c 	bl	8008194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a7c:	2340      	movs	r3, #64	; 0x40
 8004a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a88:	f107 0310 	add.w	r3, r7, #16
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <HAL_SPI_MspInit+0x90>)
 8004a90:	f003 fb80 	bl	8008194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004a94:	bf00      	nop
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40013000 	.word	0x40013000
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40010800 	.word	0x40010800

08004aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004aba:	4b08      	ldr	r3, [pc, #32]	; (8004adc <HAL_TIM_Base_MspInit+0x34>)
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	4a07      	ldr	r2, [pc, #28]	; (8004adc <HAL_TIM_Base_MspInit+0x34>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	61d3      	str	r3, [r2, #28]
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_TIM_Base_MspInit+0x34>)
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	40021000 	.word	0x40021000

08004ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae8:	f107 0318 	add.w	r3, r7, #24
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <HAL_UART_MspInit+0xf4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d132      	bne.n	8004b66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b00:	4b35      	ldr	r3, [pc, #212]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0a:	6193      	str	r3, [r2, #24]
 8004b0c:	4b32      	ldr	r3, [pc, #200]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b18:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	4a2e      	ldr	r2, [pc, #184]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b1e:	f043 0304 	orr.w	r3, r3, #4
 8004b22:	6193      	str	r3, [r2, #24]
 8004b24:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b36:	2302      	movs	r3, #2
 8004b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3e:	f107 0318 	add.w	r3, r7, #24
 8004b42:	4619      	mov	r1, r3
 8004b44:	4825      	ldr	r0, [pc, #148]	; (8004bdc <HAL_UART_MspInit+0xfc>)
 8004b46:	f003 fb25 	bl	8008194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b58:	f107 0318 	add.w	r3, r7, #24
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	481f      	ldr	r0, [pc, #124]	; (8004bdc <HAL_UART_MspInit+0xfc>)
 8004b60:	f003 fb18 	bl	8008194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004b64:	e031      	b.n	8004bca <HAL_UART_MspInit+0xea>
  else if(huart->Instance==USART3)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <HAL_UART_MspInit+0x100>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d12c      	bne.n	8004bca <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b7a:	61d3      	str	r3, [r2, #28]
 8004b7c:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	4a12      	ldr	r2, [pc, #72]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b8e:	f043 0308 	orr.w	r3, r3, #8
 8004b92:	6193      	str	r3, [r2, #24]
 8004b94:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_UART_MspInit+0xf8>)
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ONE_WIRE_Pin;
 8004ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ba6:	2312      	movs	r3, #18
 8004ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004baa:	2303      	movs	r3, #3
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ONE_WIRE_GPIO_Port, &GPIO_InitStruct);
 8004bae:	f107 0318 	add.w	r3, r7, #24
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	480b      	ldr	r0, [pc, #44]	; (8004be4 <HAL_UART_MspInit+0x104>)
 8004bb6:	f003 faed 	bl	8008194 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	2027      	movs	r0, #39	; 0x27
 8004bc0:	f003 f813 	bl	8007bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004bc4:	2027      	movs	r0, #39	; 0x27
 8004bc6:	f003 f82c 	bl	8007c22 <HAL_NVIC_EnableIRQ>
}
 8004bca:	bf00      	nop
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40013800 	.word	0x40013800
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40010800 	.word	0x40010800
 8004be0:	40004800 	.word	0x40004800
 8004be4:	40010c00 	.word	0x40010c00

08004be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bec:	e7fe      	b.n	8004bec <NMI_Handler+0x4>

08004bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bf2:	e7fe      	b.n	8004bf2 <HardFault_Handler+0x4>

08004bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bf8:	e7fe      	b.n	8004bf8 <MemManage_Handler+0x4>

08004bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bfe:	e7fe      	b.n	8004bfe <BusFault_Handler+0x4>

08004c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c04:	e7fe      	b.n	8004c04 <UsageFault_Handler+0x4>

08004c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c06:	b480      	push	{r7}
 8004c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr

08004c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c12:	b480      	push	{r7}
 8004c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c22:	bf00      	nop
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
	...

08004c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c30:	f002 f954 	bl	8006edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Button_Loop();
 8004c34:	f7fc fea6 	bl	8001984 <Button_Loop>
  sys_timer++;
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <SysTick_Handler+0x1c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	4b01      	ldr	r3, [pc, #4]	; (8004c48 <SysTick_Handler+0x1c>)
 8004c42:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8004c44:	bf00      	nop
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	200004ac 	.word	0x200004ac

08004c4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c50:	4802      	ldr	r0, [pc, #8]	; (8004c5c <DMA1_Channel1_IRQHandler+0x10>)
 8004c52:	f003 f96b 	bl	8007f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000af0 	.word	0x20000af0

08004c60 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004c64:	4802      	ldr	r0, [pc, #8]	; (8004c70 <ADC1_2_IRQHandler+0x10>)
 8004c66:	f002 fb5b 	bl	8007320 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000b94 	.word	0x20000b94

08004c74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	owReadHandler();
 8004c78:	f7fc f964 	bl	8000f44 <owReadHandler>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c7c:	4802      	ldr	r0, [pc, #8]	; (8004c88 <USART3_IRQHandler+0x14>)
 8004c7e:	f005 fa61 	bl	800a144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000bc4 	.word	0x20000bc4

08004c8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	817b      	strh	r3, [r7, #10]
 8004caa:	460b      	mov	r3, r1
 8004cac:	813b      	strh	r3, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8004cb8:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8004cba:	7dbb      	ldrb	r3, [r7, #22]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8004ccc:	e035      	b.n	8004d3a <u8g2_DrawHXBM+0xa2>
    if ( *b & mask ) {
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00c      	beq.n	8004cf6 <u8g2_DrawHXBM+0x5e>
      u8g2->draw_color = color;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	7dba      	ldrb	r2, [r7, #22]
 8004ce0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004ce4:	893a      	ldrh	r2, [r7, #8]
 8004ce6:	8979      	ldrh	r1, [r7, #10]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	2301      	movs	r3, #1
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fe58 	bl	80059a4 <u8g2_DrawHVLine>
 8004cf4:	e010      	b.n	8004d18 <u8g2_DrawHXBM+0x80>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = ncolor;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	7d7a      	ldrb	r2, [r7, #21]
 8004d04:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004d08:	893a      	ldrh	r2, [r7, #8]
 8004d0a:	8979      	ldrh	r1, [r7, #10]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2301      	movs	r3, #1
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fe46 	bl	80059a4 <u8g2_DrawHVLine>
    }
    x++;
 8004d18:	897b      	ldrh	r3, [r7, #10]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <u8g2_DrawHXBM+0x9c>
    {
      mask = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
      b++;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	3301      	adds	r3, #1
 8004d32:	623b      	str	r3, [r7, #32]
    }
    len--;
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1c6      	bne.n	8004cce <u8g2_DrawHXBM+0x36>
  }
  u8g2->draw_color = color;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	7dba      	ldrb	r2, [r7, #22]
 8004d44:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8004d48:	bf00      	nop
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	817b      	strh	r3, [r7, #10]
 8004d62:	460b      	mov	r3, r1
 8004d64:	813b      	strh	r3, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8004d6e:	8afb      	ldrh	r3, [r7, #22]
 8004d70:	3307      	adds	r3, #7
 8004d72:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	08db      	lsrs	r3, r3, #3
 8004d78:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8004d7a:	e012      	b.n	8004da2 <u8g2_DrawXBM+0x52>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8004d7c:	88f8      	ldrh	r0, [r7, #6]
 8004d7e:	893a      	ldrh	r2, [r7, #8]
 8004d80:	8979      	ldrh	r1, [r7, #10]
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4603      	mov	r3, r0
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff ff85 	bl	8004c98 <u8g2_DrawHXBM>
    bitmap += blen;
 8004d8e:	8afb      	ldrh	r3, [r7, #22]
 8004d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d92:	4413      	add	r3, r2
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8004d96:	893b      	ldrh	r3, [r7, #8]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	813b      	strh	r3, [r7, #8]
    h--;
 8004d9c:	8c3b      	ldrh	r3, [r7, #32]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8004da2:	8c3b      	ldrh	r3, [r7, #32]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e9      	bne.n	8004d7c <u8g2_DrawXBM+0x2c>
  }
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b086      	sub	sp, #24
 8004db6:	af02      	add	r7, sp, #8
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	4608      	mov	r0, r1
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	817b      	strh	r3, [r7, #10]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	813b      	strh	r3, [r7, #8]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8004dcc:	e00d      	b.n	8004dea <u8g2_DrawBox+0x38>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	893a      	ldrh	r2, [r7, #8]
 8004dd2:	8979      	ldrh	r1, [r7, #10]
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	9000      	str	r0, [sp, #0]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fde3 	bl	80059a4 <u8g2_DrawHVLine>
    y++;    
 8004dde:	893b      	ldrh	r3, [r7, #8]
 8004de0:	3301      	adds	r3, #1
 8004de2:	813b      	strh	r3, [r7, #8]
    h--;
 8004de4:	8b3b      	ldrh	r3, [r7, #24]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8004dea:	8b3b      	ldrh	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ee      	bne.n	8004dce <u8g2_DrawBox+0x1c>
  }
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b088      	sub	sp, #32
 8004dfe:	af02      	add	r7, sp, #8
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	4608      	mov	r0, r1
 8004e04:	4611      	mov	r1, r2
 8004e06:	461a      	mov	r2, r3
 8004e08:	4603      	mov	r3, r0
 8004e0a:	817b      	strh	r3, [r7, #10]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	813b      	strh	r3, [r7, #8]
 8004e10:	4613      	mov	r3, r2
 8004e12:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8004e14:	897b      	ldrh	r3, [r7, #10]
 8004e16:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	893a      	ldrh	r2, [r7, #8]
 8004e1c:	8979      	ldrh	r1, [r7, #10]
 8004e1e:	2000      	movs	r0, #0
 8004e20:	9000      	str	r0, [sp, #0]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fdbe 	bl	80059a4 <u8g2_DrawHVLine>
  if (h >= 2) {
 8004e28:	8c3b      	ldrh	r3, [r7, #32]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d92b      	bls.n	8004e86 <u8g2_DrawFrame+0x8c>
    h-=2;
 8004e2e:	8c3b      	ldrh	r3, [r7, #32]
 8004e30:	3b02      	subs	r3, #2
 8004e32:	843b      	strh	r3, [r7, #32]
    y++;
 8004e34:	893b      	ldrh	r3, [r7, #8]
 8004e36:	3301      	adds	r3, #1
 8004e38:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8004e3a:	8c3b      	ldrh	r3, [r7, #32]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01a      	beq.n	8004e76 <u8g2_DrawFrame+0x7c>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8004e40:	8c3b      	ldrh	r3, [r7, #32]
 8004e42:	893a      	ldrh	r2, [r7, #8]
 8004e44:	8979      	ldrh	r1, [r7, #10]
 8004e46:	2001      	movs	r0, #1
 8004e48:	9000      	str	r0, [sp, #0]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fdaa 	bl	80059a4 <u8g2_DrawHVLine>
      x+=w;
 8004e50:	897a      	ldrh	r2, [r7, #10]
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	4413      	add	r3, r2
 8004e56:	817b      	strh	r3, [r7, #10]
      x--;
 8004e58:	897b      	ldrh	r3, [r7, #10]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8004e5e:	8c3b      	ldrh	r3, [r7, #32]
 8004e60:	893a      	ldrh	r2, [r7, #8]
 8004e62:	8979      	ldrh	r1, [r7, #10]
 8004e64:	2001      	movs	r0, #1
 8004e66:	9000      	str	r0, [sp, #0]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fd9b 	bl	80059a4 <u8g2_DrawHVLine>
      y+=h;
 8004e6e:	893a      	ldrh	r2, [r7, #8]
 8004e70:	8c3b      	ldrh	r3, [r7, #32]
 8004e72:	4413      	add	r3, r2
 8004e74:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8004e76:	88fb      	ldrh	r3, [r7, #6]
 8004e78:	893a      	ldrh	r2, [r7, #8]
 8004e7a:	8af9      	ldrh	r1, [r7, #22]
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	9000      	str	r0, [sp, #0]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fd8f 	bl	80059a4 <u8g2_DrawHVLine>
  }
}
 8004e86:	bf00      	nop
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	7c1b      	ldrb	r3, [r3, #16]
 8004e9c:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f005 fd13 	bl	800a8e8 <memset>
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b086      	sub	sp, #24
 8004ece:	af02      	add	r7, sp, #8
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	70fb      	strb	r3, [r7, #3]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	7c1b      	ldrb	r3, [r3, #16]
 8004ee0:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eea:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	89ba      	ldrh	r2, [r7, #12]
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8004ef8:	89bb      	ldrh	r3, [r7, #12]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8004efe:	89bb      	ldrh	r3, [r7, #12]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	4413      	add	r3, r2
 8004f04:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8004f06:	7bf9      	ldrb	r1, [r7, #15]
 8004f08:	78ba      	ldrb	r2, [r7, #2]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	2100      	movs	r1, #0
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 fa2e 	bl	8006374 <u8x8_DrawTile>
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f32:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f3a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	7c5b      	ldrb	r3, [r3, #17]
 8004f42:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8004f44:	7bba      	ldrb	r2, [r7, #14]
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ffbd 	bl	8004eca <u8g2_send_tile_row>
    src_row++;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	3301      	adds	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004f56:	7bbb      	ldrb	r3, [r7, #14]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004f5c:	7bfa      	ldrb	r2, [r7, #15]
 8004f5e:	7b7b      	ldrb	r3, [r7, #13]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d203      	bcs.n	8004f6c <u8g2_send_buffer+0x4c>
 8004f64:	7bba      	ldrb	r2, [r7, #14]
 8004f66:	7b3b      	ldrb	r3, [r7, #12]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3eb      	bcc.n	8004f44 <u8g2_send_buffer+0x24>
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ffcf 	bl	8004f20 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 fa58 	bl	8006438 <u8x8_RefreshDisplay>
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ff5b 	bl	8004e8e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8004fd8:	2100      	movs	r1, #0
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ffd8 	bl	8004f90 <u8g2_SetBufferCurrTileRow>
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff95 	bl	8004f20 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ffc:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	4413      	add	r3, r2
 8005008:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	7c5b      	ldrb	r3, [r3, #17]
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	429a      	cmp	r2, r3
 8005014:	d304      	bcc.n	8005020 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 fa0e 	bl	8006438 <u8x8_RefreshDisplay>
    return 0;
 800501c:	2300      	movs	r3, #0
 800501e:	e00d      	b.n	800503c <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff2f 	bl	8004e8e <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff ffab 	bl	8004f90 <u8g2_SetBufferCurrTileRow>
  return 1;
 800503a:	2301      	movs	r3, #1
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff ffb7 	bl	8004fc0 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff ffc8 	bl	8004fe8 <u8g2_NextPage>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f9      	bne.n	8005052 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800505e:	2100      	movs	r1, #0
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff95 	bl	8004f90 <u8g2_SetBufferCurrTileRow>
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2208      	movs	r2, #8
 800507c:	701a      	strb	r2, [r3, #0]
  return buf;
 800507e:	4b03      	ldr	r3, [pc, #12]	; (800508c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	200004cc 	.word	0x200004cc

08005090 <u8g2_Setup_st7565_nhd_c12864_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_erc12864_alt, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_nhd_c12864_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_nhd_c12864, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a0b      	ldr	r2, [pc, #44]	; (80050d4 <u8g2_Setup_st7565_nhd_c12864_f+0x44>)
 80050a6:	490c      	ldr	r1, [pc, #48]	; (80050d8 <u8g2_Setup_st7565_nhd_c12864_f+0x48>)
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f001 fa25 	bl	80064f8 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80050ae:	f107 0313 	add.w	r3, r7, #19
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff ffdc 	bl	8005070 <u8g2_m_16_8_f>
 80050b8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80050ba:	7cfa      	ldrb	r2, [r7, #19]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <u8g2_Setup_st7565_nhd_c12864_f+0x4c>)
 80050c2:	6979      	ldr	r1, [r7, #20]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fdc1 	bl	8005c4c <u8g2_SetupBuffer>
}
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	08006091 	.word	0x08006091
 80050d8:	08006231 	.word	0x08006231
 80050dc:	08005b0f 	.word	0x08005b0f

080050e0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	781b      	ldrb	r3, [r3, #0]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	81fb      	strh	r3, [r7, #14]
    font++;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3301      	adds	r3, #1
 8005120:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8005122:	89fb      	ldrh	r3, [r7, #14]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b29a      	uxth	r2, r3
 800512e:	89fb      	ldrh	r3, [r7, #14]
 8005130:	4413      	add	r3, r2
 8005132:	81fb      	strh	r3, [r7, #14]
    return pos;
 8005134:	89fb      	ldrh	r3, [r7, #14]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800514a:	2100      	movs	r1, #0
 800514c:	6838      	ldr	r0, [r7, #0]
 800514e:	f7ff ffc7 	bl	80050e0 <u8g2_font_get_byte>
 8005152:	4603      	mov	r3, r0
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800515a:	2101      	movs	r1, #1
 800515c:	6838      	ldr	r0, [r7, #0]
 800515e:	f7ff ffbf 	bl	80050e0 <u8g2_font_get_byte>
 8005162:	4603      	mov	r3, r0
 8005164:	461a      	mov	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800516a:	2102      	movs	r1, #2
 800516c:	6838      	ldr	r0, [r7, #0]
 800516e:	f7ff ffb7 	bl	80050e0 <u8g2_font_get_byte>
 8005172:	4603      	mov	r3, r0
 8005174:	461a      	mov	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800517a:	2103      	movs	r1, #3
 800517c:	6838      	ldr	r0, [r7, #0]
 800517e:	f7ff ffaf 	bl	80050e0 <u8g2_font_get_byte>
 8005182:	4603      	mov	r3, r0
 8005184:	461a      	mov	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800518a:	2104      	movs	r1, #4
 800518c:	6838      	ldr	r0, [r7, #0]
 800518e:	f7ff ffa7 	bl	80050e0 <u8g2_font_get_byte>
 8005192:	4603      	mov	r3, r0
 8005194:	461a      	mov	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800519a:	2105      	movs	r1, #5
 800519c:	6838      	ldr	r0, [r7, #0]
 800519e:	f7ff ff9f 	bl	80050e0 <u8g2_font_get_byte>
 80051a2:	4603      	mov	r3, r0
 80051a4:	461a      	mov	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80051aa:	2106      	movs	r1, #6
 80051ac:	6838      	ldr	r0, [r7, #0]
 80051ae:	f7ff ff97 	bl	80050e0 <u8g2_font_get_byte>
 80051b2:	4603      	mov	r3, r0
 80051b4:	461a      	mov	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80051ba:	2107      	movs	r1, #7
 80051bc:	6838      	ldr	r0, [r7, #0]
 80051be:	f7ff ff8f 	bl	80050e0 <u8g2_font_get_byte>
 80051c2:	4603      	mov	r3, r0
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80051ca:	2108      	movs	r1, #8
 80051cc:	6838      	ldr	r0, [r7, #0]
 80051ce:	f7ff ff87 	bl	80050e0 <u8g2_font_get_byte>
 80051d2:	4603      	mov	r3, r0
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80051da:	2109      	movs	r1, #9
 80051dc:	6838      	ldr	r0, [r7, #0]
 80051de:	f7ff ff7f 	bl	80050e0 <u8g2_font_get_byte>
 80051e2:	4603      	mov	r3, r0
 80051e4:	b25a      	sxtb	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80051ea:	210a      	movs	r1, #10
 80051ec:	6838      	ldr	r0, [r7, #0]
 80051ee:	f7ff ff77 	bl	80050e0 <u8g2_font_get_byte>
 80051f2:	4603      	mov	r3, r0
 80051f4:	b25a      	sxtb	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80051fa:	210b      	movs	r1, #11
 80051fc:	6838      	ldr	r0, [r7, #0]
 80051fe:	f7ff ff6f 	bl	80050e0 <u8g2_font_get_byte>
 8005202:	4603      	mov	r3, r0
 8005204:	b25a      	sxtb	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800520a:	210c      	movs	r1, #12
 800520c:	6838      	ldr	r0, [r7, #0]
 800520e:	f7ff ff67 	bl	80050e0 <u8g2_font_get_byte>
 8005212:	4603      	mov	r3, r0
 8005214:	b25a      	sxtb	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800521a:	210d      	movs	r1, #13
 800521c:	6838      	ldr	r0, [r7, #0]
 800521e:	f7ff ff5f 	bl	80050e0 <u8g2_font_get_byte>
 8005222:	4603      	mov	r3, r0
 8005224:	b25a      	sxtb	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800522a:	210e      	movs	r1, #14
 800522c:	6838      	ldr	r0, [r7, #0]
 800522e:	f7ff ff57 	bl	80050e0 <u8g2_font_get_byte>
 8005232:	4603      	mov	r3, r0
 8005234:	b25a      	sxtb	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800523a:	210f      	movs	r1, #15
 800523c:	6838      	ldr	r0, [r7, #0]
 800523e:	f7ff ff4f 	bl	80050e0 <u8g2_font_get_byte>
 8005242:	4603      	mov	r3, r0
 8005244:	b25a      	sxtb	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800524a:	2110      	movs	r1, #16
 800524c:	6838      	ldr	r0, [r7, #0]
 800524e:	f7ff ff47 	bl	80050e0 <u8g2_font_get_byte>
 8005252:	4603      	mov	r3, r0
 8005254:	b25a      	sxtb	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800525a:	2111      	movs	r1, #17
 800525c:	6838      	ldr	r0, [r7, #0]
 800525e:	f7ff ff50 	bl	8005102 <u8g2_font_get_word>
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800526a:	2113      	movs	r1, #19
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	f7ff ff48 	bl	8005102 <u8g2_font_get_word>
 8005272:	4603      	mov	r3, r0
 8005274:	461a      	mov	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
#endif
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	7b1b      	ldrb	r3, [r3, #12]
 8005292:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	7b7b      	ldrb	r3, [r7, #13]
 80052a0:	fa42 f303 	asr.w	r3, r2, r3
 80052a4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80052a6:	7b7b      	ldrb	r3, [r7, #13]
 80052a8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80052aa:	7bba      	ldrb	r2, [r7, #14]
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	4413      	add	r3, r2
 80052b0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80052b2:	7bbb      	ldrb	r3, [r7, #14]
 80052b4:	2b07      	cmp	r3, #7
 80052b6:	d91a      	bls.n	80052ee <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80052b8:	2308      	movs	r3, #8
 80052ba:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80052bc:	7b3a      	ldrb	r2, [r7, #12]
 80052be:	7b7b      	ldrb	r3, [r7, #13]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	7b3b      	ldrb	r3, [r7, #12]
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	b25a      	sxtb	r2, r3
 80052de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	b25b      	sxtb	r3, r3
 80052e6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	3b08      	subs	r3, #8
 80052ec:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	f04f 32ff 	mov.w	r2, #4294967295
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	43db      	mvns	r3, r3
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	4013      	ands	r3, r2
 8005302:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7bba      	ldrb	r2, [r7, #14]
 8005308:	731a      	strb	r2, [r3, #12]
  return val;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	460b      	mov	r3, r1
 8005320:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff ffab 	bl	8005282 <u8g2_font_decode_get_unsigned_bits>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8005330:	2301      	movs	r3, #1
 8005332:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	3b01      	subs	r3, #1
 8005338:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800533a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	b2db      	uxtb	r3, r3
 800534e:	73fb      	strb	r3, [r7, #15]
  return v;
 8005350:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
 8005368:	4613      	mov	r3, r2
 800536a:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3358      	adds	r3, #88	; 0x58
 8005370:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800537c:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005384:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800538c:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800538e:	7bfa      	ldrb	r2, [r7, #15]
 8005390:	7d7b      	ldrb	r3, [r7, #21]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800539a:	7dfa      	ldrb	r2, [r7, #23]
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d201      	bcs.n	80053a6 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
 80053a4:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	889b      	ldrh	r3, [r3, #4]
 80053aa:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	88db      	ldrh	r3, [r3, #6]
 80053b0:	817b      	strh	r3, [r7, #10]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
    
    //u8g2_add_vector(&x, &y, lx, ly, decode->dir);
    
#else
    x += lx;
 80053b2:	7d7b      	ldrb	r3, [r7, #21]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	89bb      	ldrh	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	81bb      	strh	r3, [r7, #12]
    y += ly;
 80053bc:	7d3b      	ldrb	r3, [r7, #20]
 80053be:	b29a      	uxth	r2, r3
 80053c0:	897b      	ldrh	r3, [r7, #10]
 80053c2:	4413      	add	r3, r2
 80053c4:	817b      	strh	r3, [r7, #10]
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80053c6:	78bb      	ldrb	r3, [r7, #2]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00e      	beq.n	80053ea <u8g2_font_decode_len+0x8e>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	7b9a      	ldrb	r2, [r3, #14]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
      u8g2_DrawHVLine(u8g2, 
 80053d6:	7dbb      	ldrb	r3, [r7, #22]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	897a      	ldrh	r2, [r7, #10]
 80053dc:	89b9      	ldrh	r1, [r7, #12]
 80053de:	2000      	movs	r0, #0
 80053e0:	9000      	str	r0, [sp, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fade 	bl	80059a4 <u8g2_DrawHVLine>
 80053e8:	e011      	b.n	800540e <u8g2_font_decode_len+0xb2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	7b5b      	ldrb	r3, [r3, #13]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10d      	bne.n	800540e <u8g2_font_decode_len+0xb2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	7bda      	ldrb	r2, [r3, #15]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
      u8g2_DrawHVLine(u8g2, 
 80053fc:	7dbb      	ldrb	r3, [r7, #22]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	897a      	ldrh	r2, [r7, #10]
 8005402:	89b9      	ldrh	r1, [r7, #12]
 8005404:	2000      	movs	r0, #0
 8005406:	9000      	str	r0, [sp, #0]
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 facb 	bl	80059a4 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800540e:	7dfa      	ldrb	r2, [r7, #23]
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	429a      	cmp	r2, r3
 8005414:	d309      	bcc.n	800542a <u8g2_font_decode_len+0xce>
      break;
    cnt -= rem;
 8005416:	7dfa      	ldrb	r2, [r7, #23]
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	757b      	strb	r3, [r7, #21]
    ly++;
 8005422:	7d3b      	ldrb	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8005428:	e7ad      	b.n	8005386 <u8g2_font_decode_len+0x2a>
      break;
 800542a:	bf00      	nop
  }
  lx += cnt;
 800542c:	7d7a      	ldrb	r2, [r7, #21]
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	4413      	add	r3, r2
 8005432:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8005434:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 800543c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	725a      	strb	r2, [r3, #9]
  
}
 8005444:	bf00      	nop
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3358      	adds	r3, #88	; 0x58
 800545a:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800546e:	4619      	mov	r1, r3
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff ff06 	bl	8005282 <u8g2_font_decode_get_unsigned_bits>
 8005476:	4603      	mov	r3, r0
 8005478:	b25a      	sxtb	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8005484:	4619      	mov	r1, r3
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff fefb 	bl	8005282 <u8g2_font_decode_get_unsigned_bits>
 800548c:	4603      	mov	r3, r0
 800548e:	b25a      	sxtb	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	7b9b      	ldrb	r3, [r3, #14]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	73da      	strb	r2, [r3, #15]
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b086      	sub	sp, #24
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3358      	adds	r3, #88	; 0x58
 80054c8:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff ffbd 	bl	800544c <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80054d8:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80054e0:	4619      	mov	r1, r3
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f7ff ff17 	bl	8005316 <u8g2_font_decode_get_signed_bits>
 80054e8:	4603      	mov	r3, r0
 80054ea:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80054f2:	4619      	mov	r1, r3
 80054f4:	6978      	ldr	r0, [r7, #20]
 80054f6:	f7ff ff0e 	bl	8005316 <u8g2_font_decode_get_signed_bits>
 80054fa:	4603      	mov	r3, r0
 80054fc:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005504:	4619      	mov	r1, r3
 8005506:	6978      	ldr	r0, [r7, #20]
 8005508:	f7ff ff05 	bl	8005316 <u8g2_font_decode_get_signed_bits>
 800550c:	4603      	mov	r3, r0
 800550e:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005516:	2b00      	cmp	r3, #0
 8005518:	dd50      	ble.n	80055bc <u8g2_font_decode_glyph+0x102>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
    
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#else
    decode->target_x += x;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	889a      	ldrh	r2, [r3, #4]
 800551e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8005522:	b29b      	uxth	r3, r3
 8005524:	4413      	add	r3, r2
 8005526:	b29a      	uxth	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	809a      	strh	r2, [r3, #4]
    decode->target_y -= h+y;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	88da      	ldrh	r2, [r3, #6]
 8005530:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005534:	b219      	sxth	r1, r3
 8005536:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800553a:	b21b      	sxth	r3, r3
 800553c:	440b      	add	r3, r1
 800553e:	b21b      	sxth	r3, r3
 8005540:	b29b      	uxth	r3, r3
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	b29a      	uxth	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	80da      	strh	r2, [r3, #6]
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2200      	movs	r2, #0
 8005554:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800555c:	4619      	mov	r1, r3
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f7ff fe8f 	bl	8005282 <u8g2_font_decode_get_unsigned_bits>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800556e:	4619      	mov	r1, r3
 8005570:	6978      	ldr	r0, [r7, #20]
 8005572:	f7ff fe86 	bl	8005282 <u8g2_font_decode_get_unsigned_bits>
 8005576:	4603      	mov	r3, r0
 8005578:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2200      	movs	r2, #0
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff feeb 	bl	800535c <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	2201      	movs	r2, #1
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fee5 	bl	800535c <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8005592:	2101      	movs	r1, #1
 8005594:	6978      	ldr	r0, [r7, #20]
 8005596:	f7ff fe74 	bl	8005282 <u8g2_font_decode_get_unsigned_bits>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1ec      	bne.n	800557a <u8g2_font_decode_glyph+0xc0>

      if ( decode->y >= h )
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80055a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	dd00      	ble.n	80055b0 <u8g2_font_decode_glyph+0xf6>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80055ae:	e7d2      	b.n	8005556 <u8g2_font_decode_glyph+0x9c>
	break;
 80055b0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	7b9a      	ldrb	r2, [r3, #14]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  }
  return d;
 80055bc:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d8:	60fb      	str	r3, [r7, #12]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3317      	adds	r3, #23
 80055de:	60fb      	str	r3, [r7, #12]

  
  if ( encoding <= 255 )
 80055e0:	887b      	ldrh	r3, [r7, #2]
 80055e2:	2bff      	cmp	r3, #255	; 0xff
 80055e4:	d82b      	bhi.n	800563e <u8g2_font_get_glyph_data+0x76>
  {
    if ( encoding >= 'a' )
 80055e6:	887b      	ldrh	r3, [r7, #2]
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d907      	bls.n	80055fc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80055f2:	461a      	mov	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e009      	b.n	8005610 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80055fc:	887b      	ldrh	r3, [r7, #2]
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d906      	bls.n	8005610 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005608:	461a      	mov	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <u8g2_font_get_glyph_data+0x74>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	887a      	ldrh	r2, [r7, #2]
 8005622:	429a      	cmp	r2, r3
 8005624:	d102      	bne.n	800562c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3302      	adds	r3, #2
 800562a:	e009      	b.n	8005640 <u8g2_font_get_glyph_data+0x78>
      }
      font += u8x8_pgm_read( font + 1 );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3301      	adds	r3, #1
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800563a:	e7e9      	b.n	8005610 <u8g2_font_get_glyph_data+0x48>
	break;
 800563c:	bf00      	nop
      font += u8x8_pgm_read( font + 2 );
    }  
  }
#endif
  
  return NULL;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b086      	sub	sp, #24
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	4608      	mov	r0, r1
 8005654:	4611      	mov	r1, r2
 8005656:	461a      	mov	r2, r3
 8005658:	4603      	mov	r3, r0
 800565a:	817b      	strh	r3, [r7, #10]
 800565c:	460b      	mov	r3, r1
 800565e:	813b      	strh	r3, [r7, #8]
 8005660:	4613      	mov	r3, r2
 8005662:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	897a      	ldrh	r2, [r7, #10]
 800566c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	893a      	ldrh	r2, [r7, #8]
 8005674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	4619      	mov	r1, r3
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7ff ffa3 	bl	80055c8 <u8g2_font_get_glyph_data>
 8005682:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800568a:	6939      	ldr	r1, [r7, #16]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff ff14 	bl	80054ba <u8g2_font_decode_glyph>
 8005692:	4603      	mov	r3, r0
 8005694:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8005696:	8afb      	ldrh	r3, [r7, #22]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	817b      	strh	r3, [r7, #10]
 80056b2:	460b      	mov	r3, r1
 80056b4:	813b      	strh	r3, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
    case 3:
      x += u8g2->font_calc_vref(u8g2);
      break;
  }
#else
  y += u8g2->font_calc_vref(u8g2);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	4798      	blx	r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	461a      	mov	r2, r3
 80056c6:	893b      	ldrh	r3, [r7, #8]
 80056c8:	4413      	add	r3, r2
 80056ca:	813b      	strh	r3, [r7, #8]
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	893a      	ldrh	r2, [r7, #8]
 80056d0:	8979      	ldrh	r1, [r7, #10]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff ffb9 	bl	800564a <u8g2_font_draw_glyph>
 80056d8:	4603      	mov	r3, r0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	817b      	strh	r3, [r7, #10]
 80056f0:	4613      	mov	r3, r2
 80056f2:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fbc8 	bl	8005e8a <u8x8_utf8_init>
  sum = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	7812      	ldrb	r2, [r2, #0]
 8005706:	4611      	mov	r1, r2
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	4798      	blx	r3
 800570c:	4603      	mov	r3, r0
 800570e:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8005710:	8abb      	ldrh	r3, [r7, #20]
 8005712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005716:	4293      	cmp	r3, r2
 8005718:	d018      	beq.n	800574c <u8g2_draw_string+0x6a>
      break;
    str++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3301      	adds	r3, #1
 800571e:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8005720:	8abb      	ldrh	r3, [r7, #20]
 8005722:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005726:	4293      	cmp	r3, r2
 8005728:	d0e9      	beq.n	80056fe <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800572a:	8abb      	ldrh	r3, [r7, #20]
 800572c:	893a      	ldrh	r2, [r7, #8]
 800572e:	8979      	ldrh	r1, [r7, #10]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff ffb5 	bl	80056a0 <u8g2_DrawGlyph>
 8005736:	4603      	mov	r3, r0
 8005738:	827b      	strh	r3, [r7, #18]
      x = u8g2_add_vector_x(x, delta, 0, u8g2->font_decode.dir);
      y = u8g2_add_vector_y(y, delta, 0, u8g2->font_decode.dir);
      */

#else
      x += delta;
 800573a:	897a      	ldrh	r2, [r7, #10]
 800573c:	8a7b      	ldrh	r3, [r7, #18]
 800573e:	4413      	add	r3, r2
 8005740:	817b      	strh	r3, [r7, #10]
#endif

      sum += delta;    
 8005742:	8afa      	ldrh	r2, [r7, #22]
 8005744:	8a7b      	ldrh	r3, [r7, #18]
 8005746:	4413      	add	r3, r2
 8005748:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800574a:	e7d8      	b.n	80056fe <u8g2_draw_string+0x1c>
      break;
 800574c:	bf00      	nop
    }
  }
  return sum;
 800574e:	8afb      	ldrh	r3, [r7, #22]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	4613      	mov	r3, r2
 8005768:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a06      	ldr	r2, [pc, #24]	; (8005788 <u8g2_DrawStr+0x30>)
 800576e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8005770:	893a      	ldrh	r2, [r7, #8]
 8005772:	8979      	ldrh	r1, [r7, #10]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff ffb3 	bl	80056e2 <u8g2_draw_string>
 800577c:	4603      	mov	r3, r0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	08005ea5 	.word	0x08005ea5

0800578c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005798:	2b00      	cmp	r3, #0
 800579a:	d05d      	beq.n	8005858 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d04d      	beq.n	800585a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d11c      	bne.n	8005802 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f993 207f 	ldrsb.w	r2, [r3, #127]	; 0x7f
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 80057d4:	429a      	cmp	r2, r3
 80057d6:	da05      	bge.n	80057e4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 80057f0:	429a      	cmp	r2, r3
 80057f2:	dd32      	ble.n	800585a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8005800:	e02b      	b.n	800585a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f993 307f 	ldrsb.w	r3, [r3, #127]	; 0x7f
 8005808:	461a      	mov	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8005810:	4619      	mov	r1, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8005818:	440b      	add	r3, r1
 800581a:	429a      	cmp	r2, r3
 800581c:	da0d      	bge.n	800583a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8005824:	b2da      	uxtb	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800582c:	b2db      	uxtb	r3, r3
 800582e:	4413      	add	r3, r2
 8005830:	b2db      	uxtb	r3, r3
 8005832:	b25a      	sxtb	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8005846:	429a      	cmp	r2, r3
 8005848:	dd07      	ble.n	800585a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8005856:	e000      	b.n	800585a <u8g2_UpdateRefHeight+0xce>
    return;
 8005858:	bf00      	nop
  }  
}
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  return 0;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr
	...

08005878 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a03      	ldr	r2, [pc, #12]	; (8005890 <u8g2_SetFontPosBaseline+0x18>)
 8005884:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	08005863 	.word	0x08005863

08005894 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d00b      	beq.n	80058c0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3368      	adds	r3, #104	; 0x68
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fc43 	bl	8005140 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff66 	bl	800578c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4611      	mov	r1, r2
 80058d4:	461a      	mov	r2, r3
 80058d6:	460b      	mov	r3, r1
 80058d8:	80fb      	strh	r3, [r7, #6]
 80058da:	4613      	mov	r3, r2
 80058dc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80058e4:	8afb      	ldrh	r3, [r7, #22]
 80058e6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	8abb      	ldrh	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80058f2:	8afa      	ldrh	r2, [r7, #22]
 80058f4:	8abb      	ldrh	r3, [r7, #20]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d90b      	bls.n	8005912 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80058fa:	8afa      	ldrh	r2, [r7, #22]
 80058fc:	88bb      	ldrh	r3, [r7, #4]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d205      	bcs.n	800590e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8005902:	88bb      	ldrh	r3, [r7, #4]
 8005904:	82bb      	strh	r3, [r7, #20]
      b--;
 8005906:	8abb      	ldrh	r3, [r7, #20]
 8005908:	3b01      	subs	r3, #1
 800590a:	82bb      	strh	r3, [r7, #20]
 800590c:	e001      	b.n	8005912 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8005912:	8afa      	ldrh	r2, [r7, #22]
 8005914:	88bb      	ldrh	r3, [r7, #4]
 8005916:	429a      	cmp	r2, r3
 8005918:	d301      	bcc.n	800591e <u8g2_clip_intersection2+0x56>
    return 0;
 800591a:	2300      	movs	r3, #0
 800591c:	e01c      	b.n	8005958 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800591e:	8aba      	ldrh	r2, [r7, #20]
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	429a      	cmp	r2, r3
 8005924:	d801      	bhi.n	800592a <u8g2_clip_intersection2+0x62>
    return 0;
 8005926:	2300      	movs	r3, #0
 8005928:	e016      	b.n	8005958 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800592a:	8afa      	ldrh	r2, [r7, #22]
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	429a      	cmp	r2, r3
 8005930:	d201      	bcs.n	8005936 <u8g2_clip_intersection2+0x6e>
    a = c;
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8005936:	8aba      	ldrh	r2, [r7, #20]
 8005938:	88bb      	ldrh	r3, [r7, #4]
 800593a:	429a      	cmp	r2, r3
 800593c:	d901      	bls.n	8005942 <u8g2_clip_intersection2+0x7a>
    b = d;
 800593e:	88bb      	ldrh	r3, [r7, #4]
 8005940:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8afa      	ldrh	r2, [r7, #22]
 8005946:	801a      	strh	r2, [r3, #0]
  b -= a;
 8005948:	8aba      	ldrh	r2, [r7, #20]
 800594a:	8afb      	ldrh	r3, [r7, #22]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	8aba      	ldrh	r2, [r7, #20]
 8005954:	801a      	strh	r2, [r3, #0]
  return 1;
 8005956:	2301      	movs	r3, #1
}
 8005958:	4618      	mov	r0, r3
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005962:	b590      	push	{r4, r7, lr}
 8005964:	b087      	sub	sp, #28
 8005966:	af02      	add	r7, sp, #8
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	4608      	mov	r0, r1
 800596c:	4611      	mov	r1, r2
 800596e:	461a      	mov	r2, r3
 8005970:	4603      	mov	r3, r0
 8005972:	817b      	strh	r3, [r7, #10]
 8005974:	460b      	mov	r3, r1
 8005976:	813b      	strh	r3, [r7, #8]
 8005978:	4613      	mov	r3, r2
 800597a:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005980:	893a      	ldrh	r2, [r7, #8]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800598a:	88f8      	ldrh	r0, [r7, #6]
 800598c:	893a      	ldrh	r2, [r7, #8]
 800598e:	8979      	ldrh	r1, [r7, #10]
 8005990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	4603      	mov	r3, r0
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	47a0      	blx	r4
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd90      	pop	{r4, r7, pc}

080059a4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	4608      	mov	r0, r1
 80059ae:	4611      	mov	r1, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	4603      	mov	r3, r0
 80059b4:	817b      	strh	r3, [r7, #10]
 80059b6:	460b      	mov	r3, r1
 80059b8:	813b      	strh	r3, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d072      	beq.n	8005aaa <u8g2_DrawHVLine+0x106>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d91a      	bls.n	8005a00 <u8g2_DrawHVLine+0x5c>
      {
	if ( dir == 2 )
 80059ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d109      	bne.n	80059e6 <u8g2_DrawHVLine+0x42>
	{
	  x -= len;
 80059d2:	897a      	ldrh	r2, [r7, #10]
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	b29b      	uxth	r3, r3
 80059da:	817b      	strh	r3, [r7, #10]
	  x++;
 80059dc:	897b      	ldrh	r3, [r7, #10]
 80059de:	3301      	adds	r3, #1
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	817b      	strh	r3, [r7, #10]
 80059e4:	e00c      	b.n	8005a00 <u8g2_DrawHVLine+0x5c>
	}
	else if ( dir == 3 )
 80059e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d108      	bne.n	8005a00 <u8g2_DrawHVLine+0x5c>
	{
	  y -= len;
 80059ee:	893a      	ldrh	r2, [r7, #8]
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	813b      	strh	r3, [r7, #8]
	  y++;
 80059f8:	893b      	ldrh	r3, [r7, #8]
 80059fa:	3301      	adds	r3, #1
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8005a00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8005a0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d11a      	bne.n	8005a4a <u8g2_DrawHVLine+0xa6>
      {
	if ( y < u8g2->user_y0 )
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005a1a:	893b      	ldrh	r3, [r7, #8]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d83b      	bhi.n	8005a98 <u8g2_DrawHVLine+0xf4>
	  return;
	if ( y >= u8g2->user_y1 )
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005a26:	893b      	ldrh	r3, [r7, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d937      	bls.n	8005a9c <u8g2_DrawHVLine+0xf8>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005a38:	1db9      	adds	r1, r7, #6
 8005a3a:	f107 000a 	add.w	r0, r7, #10
 8005a3e:	f7ff ff43 	bl	80058c8 <u8g2_clip_intersection2>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11a      	bne.n	8005a7e <u8g2_DrawHVLine+0xda>
	  return;
 8005a48:	e02f      	b.n	8005aaa <u8g2_DrawHVLine+0x106>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005a50:	897b      	ldrh	r3, [r7, #10]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d824      	bhi.n	8005aa0 <u8g2_DrawHVLine+0xfc>
	  return;
	if ( x >= u8g2->user_x1 )
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005a5c:	897b      	ldrh	r3, [r7, #10]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d920      	bls.n	8005aa4 <u8g2_DrawHVLine+0x100>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8005a6e:	1db9      	adds	r1, r7, #6
 8005a70:	f107 0008 	add.w	r0, r7, #8
 8005a74:	f7ff ff28 	bl	80058c8 <u8g2_clip_intersection2>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d014      	beq.n	8005aa8 <u8g2_DrawHVLine+0x104>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	689c      	ldr	r4, [r3, #8]
 8005a84:	8979      	ldrh	r1, [r7, #10]
 8005a86:	893a      	ldrh	r2, [r7, #8]
 8005a88:	88f8      	ldrh	r0, [r7, #6]
 8005a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	4603      	mov	r3, r0
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	47a0      	blx	r4
 8005a96:	e008      	b.n	8005aaa <u8g2_DrawHVLine+0x106>
	  return;
 8005a98:	bf00      	nop
 8005a9a:	e006      	b.n	8005aaa <u8g2_DrawHVLine+0x106>
	  return;
 8005a9c:	bf00      	nop
 8005a9e:	e004      	b.n	8005aaa <u8g2_DrawHVLine+0x106>
	  return;
 8005aa0:	bf00      	nop
 8005aa2:	e002      	b.n	8005aaa <u8g2_DrawHVLine+0x106>
	  return;
 8005aa4:	bf00      	nop
 8005aa6:	e000      	b.n	8005aaa <u8g2_DrawHVLine+0x106>
	  return;
 8005aa8:	bf00      	nop
    }
}
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd90      	pop	{r4, r7, pc}

08005ab0 <u8g2_DrawVLine>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
}

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	4608      	mov	r0, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	4603      	mov	r3, r0
 8005ac0:	817b      	strh	r3, [r7, #10]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	813b      	strh	r3, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	893a      	ldrh	r2, [r7, #8]
 8005ace:	8979      	ldrh	r1, [r7, #10]
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	9000      	str	r0, [sp, #0]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff ff65 	bl	80059a4 <u8g2_DrawHVLine>
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( color >= 3 )
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d903      	bls.n	8005b04 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b089      	sub	sp, #36	; 0x24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	817b      	strh	r3, [r7, #10]
 8005b20:	460b      	mov	r3, r1
 8005b22:	813b      	strh	r3, [r7, #8]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005b28:	893b      	ldrh	r3, [r7, #8]
 8005b2a:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005b2c:	7efb      	ldrb	r3, [r7, #27]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8005b34:	2301      	movs	r3, #1
 8005b36:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8005b38:	7e3a      	ldrb	r2, [r7, #24]
 8005b3a:	7efb      	ldrb	r3, [r7, #27]
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d801      	bhi.n	8005b58 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8005b54:	7e3b      	ldrb	r3, [r7, #24]
 8005b56:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d001      	beq.n	8005b66 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8005b62:	7e3b      	ldrb	r3, [r7, #24]
 8005b64:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8005b66:	893b      	ldrh	r3, [r7, #8]
 8005b68:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8005b6a:	8afb      	ldrh	r3, [r7, #22]
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	7c1b      	ldrb	r3, [r3, #16]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	8afa      	ldrh	r2, [r7, #22]
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8005b88:	8afb      	ldrh	r3, [r7, #22]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8005b90:	897b      	ldrh	r3, [r7, #10]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8005b98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d117      	bne.n	8005bd0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	7ebb      	ldrb	r3, [r7, #26]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	781a      	ldrb	r2, [r3, #0]
 8005bb2:	7e7b      	ldrb	r3, [r7, #25]
 8005bb4:	4053      	eors	r3, r2
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
	len--;
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e8      	bne.n	8005ba0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005bce:	e038      	b.n	8005c42 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	7ebb      	ldrb	r3, [r7, #26]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	7e7b      	ldrb	r3, [r7, #25]
 8005be4:	4053      	eors	r3, r2
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005bec:	7efb      	ldrb	r3, [r7, #27]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005bf2:	7efb      	ldrb	r3, [r7, #27]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	76fb      	strb	r3, [r7, #27]
      len--;
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005c00:	7efb      	ldrb	r3, [r7, #27]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d114      	bne.n	8005c30 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d801      	bhi.n	8005c20 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d008      	beq.n	8005c3c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	767b      	strb	r3, [r7, #25]
 8005c2e:	e005      	b.n	8005c3c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005c30:	7ebb      	ldrb	r3, [r7, #26]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8005c36:	7e7b      	ldrb	r3, [r7, #25]
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1c6      	bne.n	8005bd0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005c42:	bf00      	nop
 8005c44:	3724      	adds	r7, #36	; 0x24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr

08005c4c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	603b      	str	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	79fa      	ldrb	r2, [r7, #7]
 8005c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  u8g2->bitmap_transparency = 0;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  
  u8g2->draw_color = 1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  u8g2->is_auto_page_clear = 1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  
  u8g2->cb = u8g2_cb;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
#else
  u8g2->cb->update_page_win(u8g2);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	4798      	blx	r3
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff fddd 	bl	8005878 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
#endif
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cda:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005cdc:	89fb      	ldrh	r3, [r7, #14]
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	89fa      	ldrh	r2, [r7, #14]
 8005ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	7c1b      	ldrb	r3, [r3, #16]
 8005cec:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8005cee:	89fb      	ldrh	r3, [r7, #14]
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	89fa      	ldrh	r2, [r7, #14]
 8005cf8:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d00:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d02:	89fb      	ldrh	r3, [r7, #14]
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	89fa      	ldrh	r2, [r7, #14]
 8005d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d14:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005d16:	89fb      	ldrh	r3, [r7, #14]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8005d1e:	4413      	add	r3, r2
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	7c52      	ldrb	r2, [r2, #17]
 8005d24:	4293      	cmp	r3, r2
 8005d26:	dd08      	ble.n	8005d3a <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	7c5b      	ldrb	r3, [r3, #17]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005d3a:	89fb      	ldrh	r3, [r7, #14]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005d5c:	89fb      	ldrh	r3, [r7, #14]
 8005d5e:	4413      	add	r3, r2
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	8a9a      	ldrh	r2, [r3, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	8ada      	ldrh	r2, [r3, #22]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ff99 	bl	8005cc6 <u8g2_update_dimension_common>
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d30a      	bcc.n	8005de6 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr

08005e06 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b088      	sub	sp, #32
 8005e0a:	af02      	add	r7, sp, #8
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	4608      	mov	r0, r1
 8005e10:	4611      	mov	r1, r2
 8005e12:	461a      	mov	r2, r3
 8005e14:	4603      	mov	r3, r0
 8005e16:	817b      	strh	r3, [r7, #10]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	813b      	strh	r3, [r7, #8]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e26:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8005e28:	8aba      	ldrh	r2, [r7, #20]
 8005e2a:	893b      	ldrh	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e36:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8005e38:	8afa      	ldrh	r2, [r7, #22]
 8005e3a:	897b      	ldrh	r3, [r7, #10]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8005e40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8005e48:	8abb      	ldrh	r3, [r7, #20]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8005e4e:	8afa      	ldrh	r2, [r7, #22]
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	82fb      	strh	r3, [r7, #22]
 8005e56:	e00a      	b.n	8005e6e <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8005e58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d106      	bne.n	8005e6e <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8005e60:	8afb      	ldrh	r3, [r7, #22]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8005e66:	8aba      	ldrh	r2, [r7, #20]
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8005e6e:	88f8      	ldrh	r0, [r7, #6]
 8005e70:	8aba      	ldrh	r2, [r7, #20]
 8005e72:	8af9      	ldrh	r1, [r7, #22]
 8005e74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f7ff fd70 	bl	8005962 <u8g2_draw_hv_line_2dir>
}
 8005e82:	bf00      	nop
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <u8x8_ascii_next+0x18>
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	2b0a      	cmp	r3, #10
 8005eba:	d102      	bne.n	8005ec2 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ec0:	e001      	b.n	8005ec6 <u8x8_ascii_next+0x22>
  return b;
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	b29b      	uxth	r3, r3
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691c      	ldr	r4, [r3, #16]
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2120      	movs	r1, #32
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	47a0      	blx	r4
 8005eea:	4603      	mov	r3, r0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd90      	pop	{r4, r7, pc}

08005ef4 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	460b      	mov	r3, r1
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691c      	ldr	r4, [r3, #16]
 8005f06:	7afa      	ldrb	r2, [r7, #11]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2117      	movs	r1, #23
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	47a0      	blx	r4
 8005f10:	4603      	mov	r3, r0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd90      	pop	{r4, r7, pc}

08005f1a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005f26:	1cfb      	adds	r3, r7, #3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ffe1 	bl	8005ef4 <u8x8_byte_SendBytes>
 8005f32:	4603      	mov	r3, r0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68dc      	ldr	r4, [r3, #12]
 8005f4c:	78fa      	ldrb	r2, [r7, #3]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2115      	movs	r1, #21
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	47a0      	blx	r4
 8005f56:	4603      	mov	r3, r0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd90      	pop	{r4, r7, pc}

08005f60 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68dc      	ldr	r4, [r3, #12]
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	2300      	movs	r3, #0
 8005f74:	2116      	movs	r1, #22
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	47a0      	blx	r4
 8005f7a:	4603      	mov	r3, r0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd90      	pop	{r4, r7, pc}

08005f84 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005f84:	b590      	push	{r4, r7, lr}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	68dc      	ldr	r4, [r3, #12]
 8005f96:	7afa      	ldrb	r2, [r7, #11]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2117      	movs	r1, #23
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	47a0      	blx	r4
 8005fa0:	4603      	mov	r3, r0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd90      	pop	{r4, r7, pc}

08005faa <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005faa:	b590      	push	{r4, r7, lr}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68dc      	ldr	r4, [r3, #12]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2118      	movs	r1, #24
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	47a0      	blx	r4
 8005fc0:	4603      	mov	r3, r0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd90      	pop	{r4, r7, pc}

08005fca <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005fca:	b590      	push	{r4, r7, lr}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68dc      	ldr	r4, [r3, #12]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2119      	movs	r1, #25
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	47a0      	blx	r4
 8005fe0:	4603      	mov	r3, r0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd90      	pop	{r4, r7, pc}

08005fea <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005fea:	b590      	push	{r4, r7, lr}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	73fb      	strb	r3, [r7, #15]
    data++;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	2bfe      	cmp	r3, #254	; 0xfe
 8006004:	d031      	beq.n	800606a <u8x8_cad_SendSequence+0x80>
 8006006:	2bfe      	cmp	r3, #254	; 0xfe
 8006008:	dc3d      	bgt.n	8006086 <u8x8_cad_SendSequence+0x9c>
 800600a:	2b19      	cmp	r3, #25
 800600c:	dc3b      	bgt.n	8006086 <u8x8_cad_SendSequence+0x9c>
 800600e:	2b18      	cmp	r3, #24
 8006010:	da23      	bge.n	800605a <u8x8_cad_SendSequence+0x70>
 8006012:	2b16      	cmp	r3, #22
 8006014:	dc02      	bgt.n	800601c <u8x8_cad_SendSequence+0x32>
 8006016:	2b15      	cmp	r3, #21
 8006018:	da03      	bge.n	8006022 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800601a:	e034      	b.n	8006086 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800601c:	2b17      	cmp	r3, #23
 800601e:	d00e      	beq.n	800603e <u8x8_cad_SendSequence+0x54>
	return;
 8006020:	e031      	b.n	8006086 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68dc      	ldr	r4, [r3, #12]
 800602c:	7bba      	ldrb	r2, [r7, #14]
 800602e:	7bf9      	ldrb	r1, [r7, #15]
 8006030:	2300      	movs	r3, #0
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	47a0      	blx	r4
	  data++;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	3301      	adds	r3, #1
 800603a:	603b      	str	r3, [r7, #0]
	  break;
 800603c:	e022      	b.n	8006084 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006044:	f107 030e 	add.w	r3, r7, #14
 8006048:	461a      	mov	r2, r3
 800604a:	2101      	movs	r1, #1
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff ff99 	bl	8005f84 <u8x8_cad_SendData>
	  data++;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	603b      	str	r3, [r7, #0]
	  break;
 8006058:	e014      	b.n	8006084 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68dc      	ldr	r4, [r3, #12]
 800605e:	7bf9      	ldrb	r1, [r7, #15]
 8006060:	2300      	movs	r3, #0
 8006062:	2200      	movs	r2, #0
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	47a0      	blx	r4
	  break;
 8006068:	e00c      	b.n	8006084 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	461a      	mov	r2, r3
 8006074:	2129      	movs	r1, #41	; 0x29
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9ed 	bl	8006456 <u8x8_gpio_call>
	  data++;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	603b      	str	r3, [r7, #0]
	  break;
 8006082:	bf00      	nop
    cmd = *data;
 8006084:	e7b6      	b.n	8005ff4 <u8x8_cad_SendSequence+0xa>
	return;
 8006086:	bf00      	nop
    }
  }
}
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}
	...

08006090 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	607b      	str	r3, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	72fb      	strb	r3, [r7, #11]
 800609e:	4613      	mov	r3, r2
 80060a0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80060a2:	7afb      	ldrb	r3, [r7, #11]
 80060a4:	3b14      	subs	r3, #20
 80060a6:	2b05      	cmp	r3, #5
 80060a8:	d82f      	bhi.n	800610a <u8x8_cad_001+0x7a>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <u8x8_cad_001+0x20>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060f9 	.word	0x080060f9
 80060b4:	080060c9 	.word	0x080060c9
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	080060f9 	.word	0x080060f9
 80060c4:	080060f9 	.word	0x080060f9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80060c8:	2100      	movs	r1, #0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff ff00 	bl	8005ed0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80060d0:	7abb      	ldrb	r3, [r7, #10]
 80060d2:	4619      	mov	r1, r3
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff ff20 	bl	8005f1a <u8x8_byte_SendByte>
      break;
 80060da:	e018      	b.n	800610e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80060dc:	2100      	movs	r1, #0
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fef6 	bl	8005ed0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80060e4:	7abb      	ldrb	r3, [r7, #10]
 80060e6:	4619      	mov	r1, r3
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff ff16 	bl	8005f1a <u8x8_byte_SendByte>
      break;
 80060ee:	e00e      	b.n	800610e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80060f0:	2101      	movs	r1, #1
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff feec 	bl	8005ed0 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691c      	ldr	r4, [r3, #16]
 80060fc:	7aba      	ldrb	r2, [r7, #10]
 80060fe:	7af9      	ldrb	r1, [r7, #11]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	47a0      	blx	r4
 8006106:	4603      	mov	r3, r0
 8006108:	e002      	b.n	8006110 <u8x8_cad_001+0x80>
    default:
      return 0;
 800610a:	2300      	movs	r3, #0
 800610c:	e000      	b.n	8006110 <u8x8_cad_001+0x80>
  }
  return 1;
 800610e:	2301      	movs	r3, #1
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	bd90      	pop	{r4, r7, pc}

08006118 <u8x8_d_st7565_common>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_st7565_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	72fb      	strb	r3, [r7, #11]
 8006126:	4613      	mov	r3, r2
 8006128:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800612a:	7afb      	ldrb	r3, [r7, #11]
 800612c:	2b0f      	cmp	r3, #15
 800612e:	d006      	beq.n	800613e <u8x8_d_st7565_common+0x26>
 8006130:	2b0f      	cmp	r3, #15
 8006132:	dc71      	bgt.n	8006218 <u8x8_d_st7565_common+0x100>
 8006134:	2b0b      	cmp	r3, #11
 8006136:	d050      	beq.n	80061da <u8x8_d_st7565_common+0xc2>
 8006138:	2b0e      	cmp	r3, #14
 800613a:	d05b      	beq.n	80061f4 <u8x8_d_st7565_common+0xdc>
 800613c:	e06c      	b.n	8006218 <u8x8_d_st7565_common+0x100>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff ff33 	bl	8005faa <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	795b      	ldrb	r3, [r3, #5]
 8006148:	75bb      	strb	r3, [r7, #22]
      x *= 8;
 800614a:	7dbb      	ldrb	r3, [r7, #22]
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	75bb      	strb	r3, [r7, #22]
      x += u8x8->x_offset;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006156:	7dbb      	ldrb	r3, [r7, #22]
 8006158:	4413      	add	r3, r2
 800615a:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800615c:	7dbb      	ldrb	r3, [r7, #22]
 800615e:	091b      	lsrs	r3, r3, #4
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f043 0310 	orr.w	r3, r3, #16
 8006166:	b2db      	uxtb	r3, r3
 8006168:	4619      	mov	r1, r3
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fee6 	bl	8005f3c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8006170:	7dbb      	ldrb	r3, [r7, #22]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	b2db      	uxtb	r3, r3
 8006178:	4619      	mov	r1, r3
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff fede 	bl	8005f3c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	799b      	ldrb	r3, [r3, #6]
 8006184:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8006188:	b2db      	uxtb	r3, r3
 800618a:	4619      	mov	r1, r3
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fed5 	bl	8005f3c <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	791b      	ldrb	r3, [r3, #4]
 8006196:	75fb      	strb	r3, [r7, #23]
      c *= 8;
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	613b      	str	r3, [r7, #16]
      /* 
	The following if condition checks the hardware limits of the st7565 
	controller: It is not allowed to write beyond the display limits.
	This is in fact an issue within flip mode.
      */
      if ( c + x > 132u )
 80061a4:	7dfa      	ldrb	r2, [r7, #23]
 80061a6:	7dbb      	ldrb	r3, [r7, #22]
 80061a8:	4413      	add	r3, r2
 80061aa:	2b84      	cmp	r3, #132	; 0x84
 80061ac:	d905      	bls.n	80061ba <u8x8_d_st7565_common+0xa2>
      {
	c = 132u;
 80061ae:	2384      	movs	r3, #132	; 0x84
 80061b0:	75fb      	strb	r3, [r7, #23]
	c -= x;
 80061b2:	7dfa      	ldrb	r2, [r7, #23]
 80061b4:	7dbb      	ldrb	r3, [r7, #22]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	75fb      	strb	r3, [r7, #23]
      }
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4619      	mov	r1, r3
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fedf 	bl	8005f84 <u8x8_cad_SendData>
	arg_int--;
 80061c6:	7abb      	ldrb	r3, [r7, #10]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80061cc:	7abb      	ldrb	r3, [r7, #10]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f3      	bne.n	80061ba <u8x8_d_st7565_common+0xa2>
      
      u8x8_cad_EndTransfer(u8x8);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff fef9 	bl	8005fca <u8x8_cad_EndTransfer>
      break;
 80061d8:	e020      	b.n	800621c <u8x8_d_st7565_common+0x104>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80061da:	7abb      	ldrb	r3, [r7, #10]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <u8x8_d_st7565_common+0xd2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave0_seq);
 80061e0:	4911      	ldr	r1, [pc, #68]	; (8006228 <u8x8_d_st7565_common+0x110>)
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff ff01 	bl	8005fea <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
      break;
 80061e8:	e018      	b.n	800621c <u8x8_d_st7565_common+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_powersave1_seq);
 80061ea:	4910      	ldr	r1, [pc, #64]	; (800622c <u8x8_d_st7565_common+0x114>)
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fefc 	bl	8005fea <u8x8_cad_SendSequence>
      break;
 80061f2:	e013      	b.n	800621c <u8x8_d_st7565_common+0x104>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fed8 	bl	8005faa <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80061fa:	2181      	movs	r1, #129	; 0x81
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff fe9d 	bl	8005f3c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int >> 2 );	/* st7565 has range from 0 to 63 */
 8006202:	7abb      	ldrb	r3, [r7, #10]
 8006204:	089b      	lsrs	r3, r3, #2
 8006206:	b2db      	uxtb	r3, r3
 8006208:	4619      	mov	r1, r3
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f7ff fea8 	bl	8005f60 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff feda 	bl	8005fca <u8x8_cad_EndTransfer>
      break;
 8006216:	e001      	b.n	800621c <u8x8_d_st7565_common+0x104>
#endif
    default:
      return 0;
 8006218:	2300      	movs	r3, #0
 800621a:	e000      	b.n	800621e <u8x8_d_st7565_common+0x106>
  }
  return 1;
 800621c:	2301      	movs	r3, #1
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	0800ba30 	.word	0x0800ba30
 800622c:	0800ba38 	.word	0x0800ba38

08006230 <u8x8_d_st7565_nhd_c12864>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	607b      	str	r3, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	72fb      	strb	r3, [r7, #11]
 800623e:	4613      	mov	r3, r2
 8006240:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8006242:	7aba      	ldrb	r2, [r7, #10]
 8006244:	7af9      	ldrb	r1, [r7, #11]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff ff65 	bl	8006118 <u8x8_d_st7565_common>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d131      	bne.n	80062b8 <u8x8_d_st7565_nhd_c12864+0x88>
  {
    /* msg not handled, then try here */
    switch(msg)
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	2b0d      	cmp	r3, #13
 8006258:	d013      	beq.n	8006282 <u8x8_d_st7565_nhd_c12864+0x52>
 800625a:	2b0d      	cmp	r3, #13
 800625c:	dc2a      	bgt.n	80062b4 <u8x8_d_st7565_nhd_c12864+0x84>
 800625e:	2b09      	cmp	r3, #9
 8006260:	d002      	beq.n	8006268 <u8x8_d_st7565_nhd_c12864+0x38>
 8006262:	2b0a      	cmp	r3, #10
 8006264:	d005      	beq.n	8006272 <u8x8_d_st7565_nhd_c12864+0x42>
 8006266:	e025      	b.n	80062b4 <u8x8_d_st7565_nhd_c12864+0x84>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_nhd_c12864_display_info);
 8006268:	4916      	ldr	r1, [pc, #88]	; (80062c4 <u8x8_d_st7565_nhd_c12864+0x94>)
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f832 	bl	80062d4 <u8x8_d_helper_display_setup_memory>
	break;
 8006270:	e023      	b.n	80062ba <u8x8_d_st7565_nhd_c12864+0x8a>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f841 	bl	80062fa <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_nhd_c12864_init_seq);
 8006278:	4913      	ldr	r1, [pc, #76]	; (80062c8 <u8x8_d_st7565_nhd_c12864+0x98>)
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff feb5 	bl	8005fea <u8x8_cad_SendSequence>
	break;
 8006280:	e01b      	b.n	80062ba <u8x8_d_st7565_nhd_c12864+0x8a>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
 8006282:	7abb      	ldrb	r3, [r7, #10]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <u8x8_d_st7565_nhd_c12864+0x6e>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip0_seq);
 8006288:	4910      	ldr	r1, [pc, #64]	; (80062cc <u8x8_d_st7565_nhd_c12864+0x9c>)
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fead 	bl	8005fea <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	7c9a      	ldrb	r2, [r3, #18]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
	}	
	break;
 800629c:	e00d      	b.n	80062ba <u8x8_d_st7565_nhd_c12864+0x8a>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_flip1_seq);
 800629e:	490c      	ldr	r1, [pc, #48]	; (80062d0 <u8x8_d_st7565_nhd_c12864+0xa0>)
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff fea2 	bl	8005fea <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	7cda      	ldrb	r2, [r3, #19]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	break;
 80062b2:	e002      	b.n	80062ba <u8x8_d_st7565_nhd_c12864+0x8a>
      default:
	return 0;		/* msg unknown */
 80062b4:	2300      	movs	r3, #0
 80062b6:	e001      	b.n	80062bc <u8x8_d_st7565_nhd_c12864+0x8c>
    }
  }
 80062b8:	bf00      	nop
  return 1;
 80062ba:	2301      	movs	r3, #1
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	0800ba50 	.word	0x0800ba50
 80062c8:	0800ba68 	.word	0x0800ba68
 80062cc:	0800ba40 	.word	0x0800ba40
 80062d0:	0800ba48 	.word	0x0800ba48

080062d4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	7c9a      	ldrb	r2, [r3, #18]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80062fa:	b590      	push	{r4, r7, lr}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695c      	ldr	r4, [r3, #20]
 8006306:	2300      	movs	r3, #0
 8006308:	2200      	movs	r2, #0
 800630a:	2128      	movs	r1, #40	; 0x28
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68dc      	ldr	r4, [r3, #12]
 8006314:	2300      	movs	r3, #0
 8006316:	2200      	movs	r2, #0
 8006318:	2114      	movs	r1, #20
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800631e:	2201      	movs	r2, #1
 8006320:	214b      	movs	r1, #75	; 0x4b
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f897 	bl	8006456 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	791b      	ldrb	r3, [r3, #4]
 800632e:	461a      	mov	r2, r3
 8006330:	2129      	movs	r1, #41	; 0x29
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f88f 	bl	8006456 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8006338:	2200      	movs	r2, #0
 800633a:	214b      	movs	r1, #75	; 0x4b
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f88a 	bl	8006456 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	791b      	ldrb	r3, [r3, #4]
 8006348:	461a      	mov	r2, r3
 800634a:	2129      	movs	r1, #41	; 0x29
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f882 	bl	8006456 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8006352:	2201      	movs	r2, #1
 8006354:	214b      	movs	r1, #75	; 0x4b
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f87d 	bl	8006456 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	795b      	ldrb	r3, [r3, #5]
 8006362:	461a      	mov	r2, r3
 8006364:	2129      	movs	r1, #41	; 0x29
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f875 	bl	8006456 <u8x8_gpio_call>
}    
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	bd90      	pop	{r4, r7, pc}

08006374 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8006374:	b590      	push	{r4, r7, lr}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	461a      	mov	r2, r3
 8006382:	4603      	mov	r3, r0
 8006384:	70fb      	strb	r3, [r7, #3]
 8006386:	460b      	mov	r3, r1
 8006388:	70bb      	strb	r3, [r7, #2]
 800638a:	4613      	mov	r3, r2
 800638c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8006392:	78bb      	ldrb	r3, [r7, #2]
 8006394:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8006396:	787b      	ldrb	r3, [r7, #1]
 8006398:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689c      	ldr	r4, [r3, #8]
 80063a2:	f107 0308 	add.w	r3, r7, #8
 80063a6:	2201      	movs	r2, #1
 80063a8:	210f      	movs	r1, #15
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	47a0      	blx	r4
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd90      	pop	{r4, r7, pc}

080063b8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80063b8:	b590      	push	{r4, r7, lr}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689c      	ldr	r4, [r3, #8]
 80063c4:	2300      	movs	r3, #0
 80063c6:	2200      	movs	r2, #0
 80063c8:	2109      	movs	r1, #9
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	47a0      	blx	r4
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}

080063d6 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80063d6:	b590      	push	{r4, r7, lr}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689c      	ldr	r4, [r3, #8]
 80063e2:	2300      	movs	r3, #0
 80063e4:	2200      	movs	r2, #0
 80063e6:	210a      	movs	r1, #10
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	47a0      	blx	r4
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd90      	pop	{r4, r7, pc}

080063f4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689c      	ldr	r4, [r3, #8]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	2300      	movs	r3, #0
 8006408:	210b      	movs	r1, #11
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	47a0      	blx	r4
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	bd90      	pop	{r4, r7, pc}

08006416 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8006416:	b590      	push	{r4, r7, lr}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689c      	ldr	r4, [r3, #8]
 8006426:	78fa      	ldrb	r2, [r7, #3]
 8006428:	2300      	movs	r3, #0
 800642a:	210e      	movs	r1, #14
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	47a0      	blx	r4
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	bd90      	pop	{r4, r7, pc}

08006438 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8006438:	b590      	push	{r4, r7, lr}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689c      	ldr	r4, [r3, #8]
 8006444:	2300      	movs	r3, #0
 8006446:	2200      	movs	r2, #0
 8006448:	2110      	movs	r1, #16
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	47a0      	blx	r4
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bd90      	pop	{r4, r7, pc}

08006456 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8006456:	b590      	push	{r4, r7, lr}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	460b      	mov	r3, r1
 8006460:	70fb      	strb	r3, [r7, #3]
 8006462:	4613      	mov	r3, r2
 8006464:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695c      	ldr	r4, [r3, #20]
 800646a:	78ba      	ldrb	r2, [r7, #2]
 800646c:	78f9      	ldrb	r1, [r7, #3]
 800646e:	2300      	movs	r3, #0
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	47a0      	blx	r4
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bd90      	pop	{r4, r7, pc}

0800647c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	607b      	str	r3, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	72fb      	strb	r3, [r7, #11]
 800648a:	4613      	mov	r3, r2
 800648c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr
	...

0800649c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a11      	ldr	r2, [pc, #68]	; (80064f4 <u8x8_SetupDefaults+0x58>)
 80064ae:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a10      	ldr	r2, [pc, #64]	; (80064f4 <u8x8_SetupDefaults+0x58>)
 80064b4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a0e      	ldr	r2, [pc, #56]	; (80064f4 <u8x8_SetupDefaults+0x58>)
 80064ba:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a0d      	ldr	r2, [pc, #52]	; (80064f4 <u8x8_SetupDefaults+0x58>)
 80064c0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	22ff      	movs	r2, #255	; 0xff
 80064dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	22ff      	movs	r2, #255	; 0xff
 80064e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	0800647d 	.word	0x0800647d

080064f8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f7ff ffc8 	bl	800649c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff ff47 	bl	80063b8 <u8x8_SetupMemory>
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af02      	add	r7, sp, #8
 800653a:	4603      	mov	r3, r0
 800653c:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 800653e:	f107 020f 	add.w	r2, r7, #15
 8006542:	1df9      	adds	r1, r7, #7
 8006544:	2364      	movs	r3, #100	; 0x64
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	2301      	movs	r3, #1
 800654a:	4804      	ldr	r0, [pc, #16]	; (800655c <W25qxx_Spi+0x28>)
 800654c:	f003 f853 	bl	80095f6 <HAL_SPI_TransmitReceive>
	return ret;	
 8006550:	7bfb      	ldrb	r3, [r7, #15]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	2000097c 	.word	0x2000097c

08006560 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	2300      	movs	r3, #0
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
 8006572:	2300      	movs	r3, #0
 8006574:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8006576:	2200      	movs	r2, #0
 8006578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800657c:	4813      	ldr	r0, [pc, #76]	; (80065cc <W25qxx_ReadID+0x6c>)
 800657e:	f001 ffa4 	bl	80084ca <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8006582:	209f      	movs	r0, #159	; 0x9f
 8006584:	f7ff ffd6 	bl	8006534 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006588:	20a5      	movs	r0, #165	; 0xa5
 800658a:	f7ff ffd3 	bl	8006534 <W25qxx_Spi>
 800658e:	4603      	mov	r3, r0
 8006590:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006592:	20a5      	movs	r0, #165	; 0xa5
 8006594:	f7ff ffce 	bl	8006534 <W25qxx_Spi>
 8006598:	4603      	mov	r3, r0
 800659a:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800659c:	20a5      	movs	r0, #165	; 0xa5
 800659e:	f7ff ffc9 	bl	8006534 <W25qxx_Spi>
 80065a2:	4603      	mov	r3, r0
 80065a4:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80065a6:	2201      	movs	r2, #1
 80065a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065ac:	4807      	ldr	r0, [pc, #28]	; (80065cc <W25qxx_ReadID+0x6c>)
 80065ae:	f001 ff8c 	bl	80084ca <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	041a      	lsls	r2, r3, #16
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	4313      	orrs	r3, r2
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
  return Temp;
 80065c2:	68fb      	ldr	r3, [r7, #12]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40011000 	.word	0x40011000

080065d0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80065d6:	2200      	movs	r2, #0
 80065d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065dc:	4816      	ldr	r0, [pc, #88]	; (8006638 <W25qxx_ReadUniqID+0x68>)
 80065de:	f001 ff74 	bl	80084ca <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 80065e2:	204b      	movs	r0, #75	; 0x4b
 80065e4:	f7ff ffa6 	bl	8006534 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	71fb      	strb	r3, [r7, #7]
 80065ec:	e005      	b.n	80065fa <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80065ee:	20a5      	movs	r0, #165	; 0xa5
 80065f0:	f7ff ffa0 	bl	8006534 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	3301      	adds	r3, #1
 80065f8:	71fb      	strb	r3, [r7, #7]
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d9f6      	bls.n	80065ee <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 8006600:	2300      	movs	r3, #0
 8006602:	71bb      	strb	r3, [r7, #6]
 8006604:	e00b      	b.n	800661e <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8006606:	79bc      	ldrb	r4, [r7, #6]
 8006608:	20a5      	movs	r0, #165	; 0xa5
 800660a:	f7ff ff93 	bl	8006534 <W25qxx_Spi>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <W25qxx_ReadUniqID+0x6c>)
 8006614:	4423      	add	r3, r4
 8006616:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8006618:	79bb      	ldrb	r3, [r7, #6]
 800661a:	3301      	adds	r3, #1
 800661c:	71bb      	strb	r3, [r7, #6]
 800661e:	79bb      	ldrb	r3, [r7, #6]
 8006620:	2b07      	cmp	r3, #7
 8006622:	d9f0      	bls.n	8006606 <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006624:	2201      	movs	r2, #1
 8006626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800662a:	4803      	ldr	r0, [pc, #12]	; (8006638 <W25qxx_ReadUniqID+0x68>)
 800662c:	f001 ff4d 	bl	80084ca <HAL_GPIO_WritePin>
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	bd90      	pop	{r4, r7, pc}
 8006638:	40011000 	.word	0x40011000
 800663c:	20000c54 	.word	0x20000c54

08006640 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800664a:	4808      	ldr	r0, [pc, #32]	; (800666c <W25qxx_WriteEnable+0x2c>)
 800664c:	f001 ff3d 	bl	80084ca <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8006650:	2006      	movs	r0, #6
 8006652:	f7ff ff6f 	bl	8006534 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006656:	2201      	movs	r2, #1
 8006658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800665c:	4803      	ldr	r0, [pc, #12]	; (800666c <W25qxx_WriteEnable+0x2c>)
 800665e:	f001 ff34 	bl	80084ca <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8006662:	2001      	movs	r0, #1
 8006664:	f000 fc56 	bl	8006f14 <HAL_Delay>
}
 8006668:	bf00      	nop
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40011000 	.word	0x40011000

08006670 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800667e:	2200      	movs	r2, #0
 8006680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006684:	481c      	ldr	r0, [pc, #112]	; (80066f8 <W25qxx_ReadStatusRegister+0x88>)
 8006686:	f001 ff20 	bl	80084ca <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10c      	bne.n	80066aa <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8006690:	2005      	movs	r0, #5
 8006692:	f7ff ff4f 	bl	8006534 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8006696:	20a5      	movs	r0, #165	; 0xa5
 8006698:	f7ff ff4c 	bl	8006534 <W25qxx_Spi>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <W25qxx_ReadStatusRegister+0x8c>)
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80066a8:	e01b      	b.n	80066e2 <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d10c      	bne.n	80066ca <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 80066b0:	2035      	movs	r0, #53	; 0x35
 80066b2:	f7ff ff3f 	bl	8006534 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80066b6:	20a5      	movs	r0, #165	; 0xa5
 80066b8:	f7ff ff3c 	bl	8006534 <W25qxx_Spi>
 80066bc:	4603      	mov	r3, r0
 80066be:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80066c0:	4a0e      	ldr	r2, [pc, #56]	; (80066fc <W25qxx_ReadStatusRegister+0x8c>)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80066c8:	e00b      	b.n	80066e2 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 80066ca:	2015      	movs	r0, #21
 80066cc:	f7ff ff32 	bl	8006534 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80066d0:	20a5      	movs	r0, #165	; 0xa5
 80066d2:	f7ff ff2f 	bl	8006534 <W25qxx_Spi>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80066da:	4a08      	ldr	r2, [pc, #32]	; (80066fc <W25qxx_ReadStatusRegister+0x8c>)
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80066e2:	2201      	movs	r2, #1
 80066e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066e8:	4803      	ldr	r0, [pc, #12]	; (80066f8 <W25qxx_ReadStatusRegister+0x88>)
 80066ea:	f001 feee 	bl	80084ca <HAL_GPIO_WritePin>
	return status;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40011000 	.word	0x40011000
 80066fc:	20000c54 	.word	0x20000c54

08006700 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8006704:	2001      	movs	r0, #1
 8006706:	f000 fc05 	bl	8006f14 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800670a:	2200      	movs	r2, #0
 800670c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006710:	480f      	ldr	r0, [pc, #60]	; (8006750 <W25qxx_WaitForWriteEnd+0x50>)
 8006712:	f001 feda 	bl	80084ca <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8006716:	2005      	movs	r0, #5
 8006718:	f7ff ff0c 	bl	8006534 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800671c:	20a5      	movs	r0, #165	; 0xa5
 800671e:	f7ff ff09 	bl	8006534 <W25qxx_Spi>
 8006722:	4603      	mov	r3, r0
 8006724:	461a      	mov	r2, r3
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <W25qxx_WaitForWriteEnd+0x54>)
 8006728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800672c:	2001      	movs	r0, #1
 800672e:	f000 fbf1 	bl	8006f14 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8006732:	4b08      	ldr	r3, [pc, #32]	; (8006754 <W25qxx_WaitForWriteEnd+0x54>)
 8006734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1ed      	bne.n	800671c <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006740:	2201      	movs	r2, #1
 8006742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006746:	4802      	ldr	r0, [pc, #8]	; (8006750 <W25qxx_WaitForWriteEnd+0x50>)
 8006748:	f001 febf 	bl	80084ca <HAL_GPIO_WritePin>
}
 800674c:	bf00      	nop
 800674e:	bd80      	pop	{r7, pc}
 8006750:	40011000 	.word	0x40011000
 8006754:	20000c54 	.word	0x20000c54

08006758 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 800675e:	4b60      	ldr	r3, [pc, #384]	; (80068e0 <W25qxx_Init+0x188>)
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8006766:	e002      	b.n	800676e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8006768:	2001      	movs	r0, #1
 800676a:	f000 fbd3 	bl	8006f14 <HAL_Delay>
	while(HAL_GetTick()<100)
 800676e:	f000 fbc7 	bl	8006f00 <HAL_GetTick>
 8006772:	4603      	mov	r3, r0
 8006774:	2b63      	cmp	r3, #99	; 0x63
 8006776:	d9f7      	bls.n	8006768 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006778:	2201      	movs	r2, #1
 800677a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800677e:	4859      	ldr	r0, [pc, #356]	; (80068e4 <W25qxx_Init+0x18c>)
 8006780:	f001 fea3 	bl	80084ca <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8006784:	2064      	movs	r0, #100	; 0x64
 8006786:	f000 fbc5 	bl	8006f14 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 800678a:	f7ff fee9 	bl	8006560 <W25qxx_ReadID>
 800678e:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006798:	3b11      	subs	r3, #17
 800679a:	2b09      	cmp	r3, #9
 800679c:	d85f      	bhi.n	800685e <W25qxx_Init+0x106>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <W25qxx_Init+0x4c>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	08006851 	.word	0x08006851
 80067a8:	08006843 	.word	0x08006843
 80067ac:	08006835 	.word	0x08006835
 80067b0:	08006827 	.word	0x08006827
 80067b4:	08006819 	.word	0x08006819
 80067b8:	0800680b 	.word	0x0800680b
 80067bc:	080067fd 	.word	0x080067fd
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	080067dd 	.word	0x080067dd
 80067c8:	080067cd 	.word	0x080067cd
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 80067cc:	4b44      	ldr	r3, [pc, #272]	; (80068e0 <W25qxx_Init+0x188>)
 80067ce:	220a      	movs	r2, #10
 80067d0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80067d2:	4b43      	ldr	r3, [pc, #268]	; (80068e0 <W25qxx_Init+0x188>)
 80067d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067d8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 80067da:	e046      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 80067dc:	4b40      	ldr	r3, [pc, #256]	; (80068e0 <W25qxx_Init+0x188>)
 80067de:	2209      	movs	r2, #9
 80067e0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80067e2:	4b3f      	ldr	r3, [pc, #252]	; (80068e0 <W25qxx_Init+0x188>)
 80067e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067e8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 80067ea:	e03e      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 80067ec:	4b3c      	ldr	r3, [pc, #240]	; (80068e0 <W25qxx_Init+0x188>)
 80067ee:	2208      	movs	r2, #8
 80067f0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80067f2:	4b3b      	ldr	r3, [pc, #236]	; (80068e0 <W25qxx_Init+0x188>)
 80067f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067f8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 80067fa:	e036      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 80067fc:	4b38      	ldr	r3, [pc, #224]	; (80068e0 <W25qxx_Init+0x188>)
 80067fe:	2207      	movs	r2, #7
 8006800:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8006802:	4b37      	ldr	r3, [pc, #220]	; (80068e0 <W25qxx_Init+0x188>)
 8006804:	2280      	movs	r2, #128	; 0x80
 8006806:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8006808:	e02f      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 800680a:	4b35      	ldr	r3, [pc, #212]	; (80068e0 <W25qxx_Init+0x188>)
 800680c:	2206      	movs	r2, #6
 800680e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8006810:	4b33      	ldr	r3, [pc, #204]	; (80068e0 <W25qxx_Init+0x188>)
 8006812:	2240      	movs	r2, #64	; 0x40
 8006814:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8006816:	e028      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8006818:	4b31      	ldr	r3, [pc, #196]	; (80068e0 <W25qxx_Init+0x188>)
 800681a:	2205      	movs	r2, #5
 800681c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 800681e:	4b30      	ldr	r3, [pc, #192]	; (80068e0 <W25qxx_Init+0x188>)
 8006820:	2220      	movs	r2, #32
 8006822:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8006824:	e021      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8006826:	4b2e      	ldr	r3, [pc, #184]	; (80068e0 <W25qxx_Init+0x188>)
 8006828:	2204      	movs	r2, #4
 800682a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 800682c:	4b2c      	ldr	r3, [pc, #176]	; (80068e0 <W25qxx_Init+0x188>)
 800682e:	2210      	movs	r2, #16
 8006830:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8006832:	e01a      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8006834:	4b2a      	ldr	r3, [pc, #168]	; (80068e0 <W25qxx_Init+0x188>)
 8006836:	2203      	movs	r2, #3
 8006838:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800683a:	4b29      	ldr	r3, [pc, #164]	; (80068e0 <W25qxx_Init+0x188>)
 800683c:	2208      	movs	r2, #8
 800683e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8006840:	e013      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8006842:	4b27      	ldr	r3, [pc, #156]	; (80068e0 <W25qxx_Init+0x188>)
 8006844:	2202      	movs	r2, #2
 8006846:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8006848:	4b25      	ldr	r3, [pc, #148]	; (80068e0 <W25qxx_Init+0x188>)
 800684a:	2204      	movs	r2, #4
 800684c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 800684e:	e00c      	b.n	800686a <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8006850:	4b23      	ldr	r3, [pc, #140]	; (80068e0 <W25qxx_Init+0x188>)
 8006852:	2201      	movs	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8006856:	4b22      	ldr	r3, [pc, #136]	; (80068e0 <W25qxx_Init+0x188>)
 8006858:	2202      	movs	r2, #2
 800685a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 800685c:	e005      	b.n	800686a <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 800685e:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <W25qxx_Init+0x188>)
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8006866:	2300      	movs	r3, #0
 8006868:	e036      	b.n	80068d8 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 800686a:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <W25qxx_Init+0x188>)
 800686c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006870:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8006872:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <W25qxx_Init+0x188>)
 8006874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006878:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800687a:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <W25qxx_Init+0x188>)
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <W25qxx_Init+0x188>)
 8006882:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8006884:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <W25qxx_Init+0x188>)
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <W25qxx_Init+0x188>)
 800688a:	6912      	ldr	r2, [r2, #16]
 800688c:	fb02 f303 	mul.w	r3, r2, r3
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <W25qxx_Init+0x188>)
 8006892:	8952      	ldrh	r2, [r2, #10]
 8006894:	fbb3 f3f2 	udiv	r3, r3, r2
 8006898:	4a11      	ldr	r2, [pc, #68]	; (80068e0 <W25qxx_Init+0x188>)
 800689a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800689c:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <W25qxx_Init+0x188>)
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	4a0f      	ldr	r2, [pc, #60]	; (80068e0 <W25qxx_Init+0x188>)
 80068a4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80068a6:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <W25qxx_Init+0x188>)
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	4a0d      	ldr	r2, [pc, #52]	; (80068e0 <W25qxx_Init+0x188>)
 80068ac:	6912      	ldr	r2, [r2, #16]
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	0a9b      	lsrs	r3, r3, #10
 80068b4:	4a0a      	ldr	r2, [pc, #40]	; (80068e0 <W25qxx_Init+0x188>)
 80068b6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80068b8:	f7ff fe8a 	bl	80065d0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80068bc:	2001      	movs	r0, #1
 80068be:	f7ff fed7 	bl	8006670 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80068c2:	2002      	movs	r0, #2
 80068c4:	f7ff fed4 	bl	8006670 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80068c8:	2003      	movs	r0, #3
 80068ca:	f7ff fed1 	bl	8006670 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 80068ce:	4b04      	ldr	r3, [pc, #16]	; (80068e0 <W25qxx_Init+0x188>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80068d6:	2301      	movs	r3, #1
}	
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000c54 	.word	0x20000c54
 80068e4:	40011000 	.word	0x40011000

080068e8 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;	
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 80068f0:	e002      	b.n	80068f8 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80068f2:	2001      	movs	r0, #1
 80068f4:	f000 fb0e 	bl	8006f14 <HAL_Delay>
	while(w25qxx.Lock==1)
 80068f8:	4b24      	ldr	r3, [pc, #144]	; (800698c <W25qxx_EraseSector+0xa4>)
 80068fa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d0f7      	beq.n	80068f2 <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 8006902:	4b22      	ldr	r3, [pc, #136]	; (800698c <W25qxx_EraseSector+0xa4>)
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 800690a:	f7ff fef9 	bl	8006700 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800690e:	4b1f      	ldr	r3, [pc, #124]	; (800698c <W25qxx_EraseSector+0xa4>)
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	fb02 f303 	mul.w	r3, r2, r3
 8006918:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 800691a:	f7ff fe91 	bl	8006640 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800691e:	2200      	movs	r2, #0
 8006920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006924:	481a      	ldr	r0, [pc, #104]	; (8006990 <W25qxx_EraseSector+0xa8>)
 8006926:	f001 fdd0 	bl	80084ca <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 800692a:	2020      	movs	r0, #32
 800692c:	f7ff fe02 	bl	8006534 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8006930:	4b16      	ldr	r3, [pc, #88]	; (800698c <W25qxx_EraseSector+0xa4>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d905      	bls.n	8006944 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	0e1b      	lsrs	r3, r3, #24
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fdf8 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	b2db      	uxtb	r3, r3
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fdf2 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	b2db      	uxtb	r3, r3
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fdec 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fde7 	bl	8006534 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006966:	2201      	movs	r2, #1
 8006968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800696c:	4808      	ldr	r0, [pc, #32]	; (8006990 <W25qxx_EraseSector+0xa8>)
 800696e:	f001 fdac 	bl	80084ca <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8006972:	f7ff fec5 	bl	8006700 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8006976:	2001      	movs	r0, #1
 8006978:	f000 facc 	bl	8006f14 <HAL_Delay>
	w25qxx.Lock=0;
 800697c:	4b03      	ldr	r3, [pc, #12]	; (800698c <W25qxx_EraseSector+0xa4>)
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000c54 	.word	0x20000c54
 8006990:	40011000 	.word	0x40011000

08006994 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <W25qxx_SectorToPage+0x24>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	4a04      	ldr	r2, [pc, #16]	; (80069b8 <W25qxx_SectorToPage+0x24>)
 80069a8:	8952      	ldrh	r2, [r2, #10]
 80069aa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	20000c54 	.word	0x20000c54

080069bc <W25qxx_IsEmptySector>:
	w25qxx.Lock=0;
	return false;
}
//###################################################################################################################
bool 	W25qxx_IsEmptySector(uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_SectorSize)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b090      	sub	sp, #64	; 0x40
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80069c8:	e002      	b.n	80069d0 <W25qxx_IsEmptySector+0x14>
	W25qxx_Delay(1);
 80069ca:	2001      	movs	r0, #1
 80069cc:	f000 faa2 	bl	8006f14 <HAL_Delay>
	while(w25qxx.Lock==1)
 80069d0:	4b6a      	ldr	r3, [pc, #424]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 80069d2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d0f7      	beq.n	80069ca <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock=1;	
 80069da:	4b68      	ldr	r3, [pc, #416]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToCheck_up_to_SectorSize==0))
 80069e2:	4b66      	ldr	r3, [pc, #408]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d802      	bhi.n	80069f2 <W25qxx_IsEmptySector+0x36>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize=w25qxx.SectorSize;
 80069f2:	4b62      	ldr	r3, [pc, #392]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fc:	e054      	b.n	8006aa8 <W25qxx_IsEmptySector+0xec>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80069fe:	2200      	movs	r2, #0
 8006a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a04:	485e      	ldr	r0, [pc, #376]	; (8006b80 <W25qxx_IsEmptySector+0x1c4>)
 8006a06:	f001 fd60 	bl	80084ca <HAL_GPIO_WritePin>
		WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 8006a0a:	4b5c      	ldr	r3, [pc, #368]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a16:	4413      	add	r3, r2
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8006a1a:	200b      	movs	r0, #11
 8006a1c:	f7ff fd8a 	bl	8006534 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8006a20:	4b56      	ldr	r3, [pc, #344]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d905      	bls.n	8006a34 <W25qxx_IsEmptySector+0x78>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	0e1b      	lsrs	r3, r3, #24
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fd80 	bl	8006534 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8006a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a36:	0c1b      	lsrs	r3, r3, #16
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fd7a 	bl	8006534 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	0a1b      	lsrs	r3, r3, #8
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fd74 	bl	8006534 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fd6f 	bl	8006534 <W25qxx_Spi>
		W25qxx_Spi(0);
 8006a56:	2000      	movs	r0, #0
 8006a58:	f7ff fd6c 	bl	8006534 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 8006a5c:	f107 0114 	add.w	r1, r7, #20
 8006a60:	2364      	movs	r3, #100	; 0x64
 8006a62:	2220      	movs	r2, #32
 8006a64:	4847      	ldr	r0, [pc, #284]	; (8006b84 <W25qxx_IsEmptySector+0x1c8>)
 8006a66:	f002 fcb5 	bl	80093d4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a70:	4843      	ldr	r0, [pc, #268]	; (8006b80 <W25qxx_IsEmptySector+0x1c4>)
 8006a72:	f001 fd2a 	bl	80084ca <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8006a76:	2300      	movs	r3, #0
 8006a78:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a7c:	e00d      	b.n	8006a9a <W25qxx_IsEmptySector+0xde>
		{
			if(pBuffer[x]!=0xFF)
 8006a7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a82:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006a86:	4413      	add	r3, r2
 8006a88:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006a8c:	2bff      	cmp	r3, #255	; 0xff
 8006a8e:	d169      	bne.n	8006b64 <W25qxx_IsEmptySector+0x1a8>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8006a90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a94:	3301      	adds	r3, #1
 8006a96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a9e:	2b1f      	cmp	r3, #31
 8006aa0:	d9ed      	bls.n	8006a7e <W25qxx_IsEmptySector+0xc2>
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa4:	3320      	adds	r3, #32
 8006aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa8:	4b34      	ldr	r3, [pc, #208]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d3a5      	bcc.n	80069fe <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.SectorSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8006ab2:	4b32      	ldr	r3, [pc, #200]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f003 031f 	and.w	r3, r3, #31
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d04a      	beq.n	8006b58 <W25qxx_IsEmptySector+0x19c>
	{
		i-=sizeof(pBuffer);
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac4:	3b20      	subs	r3, #32
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.SectorSize; i++)
 8006ac8:	e041      	b.n	8006b4e <W25qxx_IsEmptySector+0x192>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8006aca:	2200      	movs	r2, #0
 8006acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ad0:	482b      	ldr	r0, [pc, #172]	; (8006b80 <W25qxx_IsEmptySector+0x1c4>)
 8006ad2:	f001 fcfa 	bl	80084ca <HAL_GPIO_WritePin>
			WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 8006ad6:	4b29      	ldr	r3, [pc, #164]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	fb02 f303 	mul.w	r3, r2, r3
 8006ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ae2:	4413      	add	r3, r2
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8006ae6:	200b      	movs	r0, #11
 8006ae8:	f7ff fd24 	bl	8006534 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 8006aec:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d905      	bls.n	8006b00 <W25qxx_IsEmptySector+0x144>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8006af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af6:	0e1b      	lsrs	r3, r3, #24
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fd1a 	bl	8006534 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8006b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b02:	0c1b      	lsrs	r3, r3, #16
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fd14 	bl	8006534 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0e:	0a1b      	lsrs	r3, r3, #8
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fd0e 	bl	8006534 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fd09 	bl	8006534 <W25qxx_Spi>
			W25qxx_Spi(0);
 8006b22:	2000      	movs	r0, #0
 8006b24:	f7ff fd06 	bl	8006534 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 8006b28:	f107 0114 	add.w	r1, r7, #20
 8006b2c:	2364      	movs	r3, #100	; 0x64
 8006b2e:	2201      	movs	r2, #1
 8006b30:	4814      	ldr	r0, [pc, #80]	; (8006b84 <W25qxx_IsEmptySector+0x1c8>)
 8006b32:	f002 fc4f 	bl	80093d4 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8006b36:	2201      	movs	r2, #1
 8006b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b3c:	4810      	ldr	r0, [pc, #64]	; (8006b80 <W25qxx_IsEmptySector+0x1c4>)
 8006b3e:	f001 fcc4 	bl	80084ca <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 8006b42:	7d3b      	ldrb	r3, [r7, #20]
 8006b44:	2bff      	cmp	r3, #255	; 0xff
 8006b46:	d10f      	bne.n	8006b68 <W25qxx_IsEmptySector+0x1ac>
		for( ; i<w25qxx.SectorSize; i++)
 8006b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d3b8      	bcc.n	8006aca <W25qxx_IsEmptySector+0x10e>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8006b58:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 8006b60:	2301      	movs	r3, #1
 8006b62:	e007      	b.n	8006b74 <W25qxx_IsEmptySector+0x1b8>
				goto NOT_EMPTY;		
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <W25qxx_IsEmptySector+0x1ae>
				goto NOT_EMPTY;
 8006b68:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8006b6a:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <W25qxx_IsEmptySector+0x1c0>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3740      	adds	r7, #64	; 0x40
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000c54 	.word	0x20000c54
 8006b80:	40011000 	.word	0x40011000
 8006b84:	2000097c 	.word	0x2000097c

08006b88 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8006b96:	e002      	b.n	8006b9e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f000 f9bb 	bl	8006f14 <HAL_Delay>
	while(w25qxx.Lock==1)
 8006b9e:	4b38      	ldr	r3, [pc, #224]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006ba0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d0f7      	beq.n	8006b98 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8006ba8:	4b35      	ldr	r3, [pc, #212]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4a32      	ldr	r2, [pc, #200]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006bb8:	8952      	ldrh	r2, [r2, #10]
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d802      	bhi.n	8006bc4 <W25qxx_WritePage+0x3c>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d105      	bne.n	8006bd0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8006bc4:	4b2e      	ldr	r3, [pc, #184]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006bc6:	895b      	ldrh	r3, [r3, #10]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	4a2a      	ldr	r2, [pc, #168]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006bd8:	8952      	ldrh	r2, [r2, #10]
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d905      	bls.n	8006bea <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8006bde:	4b28      	ldr	r3, [pc, #160]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006be0:	895b      	ldrh	r3, [r3, #10]
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 8006bea:	f7ff fd89 	bl	8006700 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8006bee:	f7ff fd27 	bl	8006640 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bf8:	4822      	ldr	r0, [pc, #136]	; (8006c84 <W25qxx_WritePage+0xfc>)
 8006bfa:	f001 fc66 	bl	80084ca <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8006bfe:	2002      	movs	r0, #2
 8006c00:	f7ff fc98 	bl	8006534 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8006c04:	4b1e      	ldr	r3, [pc, #120]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006c06:	895b      	ldrh	r3, [r3, #10]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	fb03 f302 	mul.w	r3, r3, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4413      	add	r3, r2
 8006c14:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d905      	bls.n	8006c2a <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	0e1b      	lsrs	r3, r3, #24
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fc85 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	0c1b      	lsrs	r3, r3, #16
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fc7f 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fc79 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fc74 	bl	8006534 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	2364      	movs	r3, #100	; 0x64
 8006c52:	68f9      	ldr	r1, [r7, #12]
 8006c54:	480c      	ldr	r0, [pc, #48]	; (8006c88 <W25qxx_WritePage+0x100>)
 8006c56:	f002 fa81 	bl	800915c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c60:	4808      	ldr	r0, [pc, #32]	; (8006c84 <W25qxx_WritePage+0xfc>)
 8006c62:	f001 fc32 	bl	80084ca <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8006c66:	f7ff fd4b 	bl	8006700 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	f000 f952 	bl	8006f14 <HAL_Delay>
	w25qxx.Lock=0;
 8006c70:	4b03      	ldr	r3, [pc, #12]	; (8006c80 <W25qxx_WritePage+0xf8>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20000c54 	.word	0x20000c54
 8006c84:	40011000 	.word	0x40011000
 8006c88:	2000097c 	.word	0x2000097c

08006c8c <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 8006c9a:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d802      	bhi.n	8006caa <W25qxx_WriteSector+0x1e>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d102      	bne.n	8006cb0 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 8006caa:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8006cb0:	4b26      	ldr	r3, [pc, #152]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d243      	bcs.n	8006d42 <W25qxx_WriteSector+0xb6>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	441a      	add	r2, r3
 8006cc0:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d905      	bls.n	8006cd4 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8006cc8:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e001      	b.n	8006cd8 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8006cd8:	68b8      	ldr	r0, [r7, #8]
 8006cda:	f7ff fe5b 	bl	8006994 <W25qxx_SectorToPage>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006ce2:	895b      	ldrh	r3, [r3, #10]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cec:	4413      	add	r3, r2
 8006cee:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8006cf0:	4b16      	ldr	r3, [pc, #88]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006cf2:	895b      	ldrh	r3, [r3, #10]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cfc:	fb02 f201 	mul.w	r2, r2, r1
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	69f9      	ldr	r1, [r7, #28]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff ff3c 	bl	8006b88 <W25qxx_WritePage>
		StartPage++;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006d18:	895b      	ldrh	r3, [r3, #10]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	1a9a      	subs	r2, r3, r2
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4413      	add	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8006d26:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <W25qxx_WriteSector+0xc0>)
 8006d28:	895b      	ldrh	r3, [r3, #10]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dce1      	bgt.n	8006d04 <W25qxx_WriteSector+0x78>
 8006d40:	e000      	b.n	8006d44 <W25qxx_WriteSector+0xb8>
		return;
 8006d42:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000c54 	.word	0x20000c54

08006d50 <W25qxx_ReadBytes>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8006d5c:	e002      	b.n	8006d64 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8006d5e:	2001      	movs	r0, #1
 8006d60:	f000 f8d8 	bl	8006f14 <HAL_Delay>
	while(w25qxx.Lock==1)
 8006d64:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <W25qxx_ReadBytes+0xa8>)
 8006d66:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d0f7      	beq.n	8006d5e <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8006d6e:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <W25qxx_ReadBytes+0xa8>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8006d76:	2200      	movs	r2, #0
 8006d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d7c:	481f      	ldr	r0, [pc, #124]	; (8006dfc <W25qxx_ReadBytes+0xac>)
 8006d7e:	f001 fba4 	bl	80084ca <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8006d82:	200b      	movs	r0, #11
 8006d84:	f7ff fbd6 	bl	8006534 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8006d88:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <W25qxx_ReadBytes+0xa8>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d905      	bls.n	8006d9c <W25qxx_ReadBytes+0x4c>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	0e1b      	lsrs	r3, r3, #24
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fbcc 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff fbc6 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fbc0 	bl	8006534 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fbbb 	bl	8006534 <W25qxx_Spi>
	W25qxx_Spi(0);
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f7ff fbb8 	bl	8006534 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006dcc:	68f9      	ldr	r1, [r7, #12]
 8006dce:	480c      	ldr	r0, [pc, #48]	; (8006e00 <W25qxx_ReadBytes+0xb0>)
 8006dd0:	f002 fb00 	bl	80093d4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006dda:	4808      	ldr	r0, [pc, #32]	; (8006dfc <W25qxx_ReadBytes+0xac>)
 8006ddc:	f001 fb75 	bl	80084ca <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8006de0:	2001      	movs	r0, #1
 8006de2:	f000 f897 	bl	8006f14 <HAL_Delay>
	w25qxx.Lock=0;
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <W25qxx_ReadBytes+0xa8>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8006dee:	bf00      	nop
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000c54 	.word	0x20000c54
 8006dfc:	40011000 	.word	0x40011000
 8006e00:	2000097c 	.word	0x2000097c

08006e04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e04:	480c      	ldr	r0, [pc, #48]	; (8006e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006e06:	490d      	ldr	r1, [pc, #52]	; (8006e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006e08:	4a0d      	ldr	r2, [pc, #52]	; (8006e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e0c:	e002      	b.n	8006e14 <LoopCopyDataInit>

08006e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e12:	3304      	adds	r3, #4

08006e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e18:	d3f9      	bcc.n	8006e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e1a:	4a0a      	ldr	r2, [pc, #40]	; (8006e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006e1c:	4c0a      	ldr	r4, [pc, #40]	; (8006e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e20:	e001      	b.n	8006e26 <LoopFillZerobss>

08006e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e24:	3204      	adds	r2, #4

08006e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e28:	d3fb      	bcc.n	8006e22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006e2a:	f7fd ff2f 	bl	8004c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e2e:	f003 fd37 	bl	800a8a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006e32:	f7fa fe89 	bl	8001b48 <main>
  bx lr
 8006e36:	4770      	bx	lr
  ldr r0, =_sdata
 8006e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e3c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8006e40:	0800ba94 	.word	0x0800ba94
  ldr r2, =_sbss
 8006e44:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8006e48:	20000c80 	.word	0x20000c80

08006e4c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e4c:	e7fe      	b.n	8006e4c <CAN1_RX1_IRQHandler>
	...

08006e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e54:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <HAL_Init+0x28>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a07      	ldr	r2, [pc, #28]	; (8006e78 <HAL_Init+0x28>)
 8006e5a:	f043 0310 	orr.w	r3, r3, #16
 8006e5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e60:	2003      	movs	r0, #3
 8006e62:	f000 feb7 	bl	8007bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e66:	200f      	movs	r0, #15
 8006e68:	f000 f808 	bl	8006e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e6c:	f7fd fd18 	bl	80048a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40022000 	.word	0x40022000

08006e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <HAL_InitTick+0x54>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4b12      	ldr	r3, [pc, #72]	; (8006ed4 <HAL_InitTick+0x58>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fecf 	bl	8007c3e <HAL_SYSTICK_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e00e      	b.n	8006ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b0f      	cmp	r3, #15
 8006eae:	d80a      	bhi.n	8006ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb8:	f000 fe97 	bl	8007bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ebc:	4a06      	ldr	r2, [pc, #24]	; (8006ed8 <HAL_InitTick+0x5c>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e000      	b.n	8006ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	2000004c 	.word	0x2000004c
 8006ed4:	20000054 	.word	0x20000054
 8006ed8:	20000050 	.word	0x20000050

08006edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <HAL_IncTick+0x1c>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HAL_IncTick+0x20>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4413      	add	r3, r2
 8006eec:	4a03      	ldr	r2, [pc, #12]	; (8006efc <HAL_IncTick+0x20>)
 8006eee:	6013      	str	r3, [r2, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr
 8006ef8:	20000054 	.word	0x20000054
 8006efc:	20000c7c 	.word	0x20000c7c

08006f00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return uwTick;
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <HAL_GetTick+0x10>)
 8006f06:	681b      	ldr	r3, [r3, #0]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr
 8006f10:	20000c7c 	.word	0x20000c7c

08006f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f1c:	f7ff fff0 	bl	8006f00 <HAL_GetTick>
 8006f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2c:	d005      	beq.n	8006f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <HAL_Delay+0x44>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f3a:	bf00      	nop
 8006f3c:	f7ff ffe0 	bl	8006f00 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d8f7      	bhi.n	8006f3c <HAL_Delay+0x28>
  {
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000054 	.word	0x20000054

08006f5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e0be      	b.n	80070fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d109      	bne.n	8006fa0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fd fcb2 	bl	8004904 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fbed 	bl	8007780 <ADC_ConversionStop_Disable>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f040 8099 	bne.w	80070ea <HAL_ADC_Init+0x18e>
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f040 8095 	bne.w	80070ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006fc8:	f023 0302 	bic.w	r3, r3, #2
 8006fcc:	f043 0202 	orr.w	r2, r3, #2
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006fdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7b1b      	ldrb	r3, [r3, #12]
 8006fe2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006fe4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff4:	d003      	beq.n	8006ffe <HAL_ADC_Init+0xa2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d102      	bne.n	8007004 <HAL_ADC_Init+0xa8>
 8006ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007002:	e000      	b.n	8007006 <HAL_ADC_Init+0xaa>
 8007004:	2300      	movs	r3, #0
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7d1b      	ldrb	r3, [r3, #20]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d119      	bne.n	8007048 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	7b1b      	ldrb	r3, [r3, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	3b01      	subs	r3, #1
 8007022:	035a      	lsls	r2, r3, #13
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	e00b      	b.n	8007048 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	f043 0201 	orr.w	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	430a      	orrs	r2, r1
 800705a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	4b28      	ldr	r3, [pc, #160]	; (8007104 <HAL_ADC_Init+0x1a8>)
 8007064:	4013      	ands	r3, r2
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	430b      	orrs	r3, r1
 800706e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007078:	d003      	beq.n	8007082 <HAL_ADC_Init+0x126>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d104      	bne.n	800708c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	3b01      	subs	r3, #1
 8007088:	051b      	lsls	r3, r3, #20
 800708a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	430a      	orrs	r2, r1
 800709e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <HAL_ADC_Init+0x1ac>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d10b      	bne.n	80070c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	f023 0303 	bic.w	r3, r3, #3
 80070be:	f043 0201 	orr.w	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80070c6:	e018      	b.n	80070fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	f023 0312 	bic.w	r3, r3, #18
 80070d0:	f043 0210 	orr.w	r2, r3, #16
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	f043 0201 	orr.w	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80070e8:	e007      	b.n	80070fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	f043 0210 	orr.w	r2, r3, #16
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	ffe1f7fd 	.word	0xffe1f7fd
 8007108:	ff1f0efe 	.word	0xff1f0efe

0800710c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_ADC_Stop+0x1a>
 8007122:	2302      	movs	r3, #2
 8007124:	e01a      	b.n	800715c <HAL_ADC_Stop+0x50>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fb26 	bl	8007780 <ADC_ConversionStop_Disable>
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	f043 0201 	orr.w	r2, r3, #1
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a64      	ldr	r2, [pc, #400]	; (800730c <HAL_ADC_Start_DMA+0x1a8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <HAL_ADC_Start_DMA+0x24>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a63      	ldr	r2, [pc, #396]	; (8007310 <HAL_ADC_Start_DMA+0x1ac>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d106      	bne.n	8007196 <HAL_ADC_Start_DMA+0x32>
 8007188:	4b60      	ldr	r3, [pc, #384]	; (800730c <HAL_ADC_Start_DMA+0x1a8>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 80b3 	bne.w	80072fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800719c:	2b01      	cmp	r3, #1
 800719e:	d101      	bne.n	80071a4 <HAL_ADC_Start_DMA+0x40>
 80071a0:	2302      	movs	r3, #2
 80071a2:	e0ae      	b.n	8007302 <HAL_ADC_Start_DMA+0x19e>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fa8d 	bl	80076cc <ADC_Enable>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f040 809a 	bne.w	80072f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a4e      	ldr	r2, [pc, #312]	; (8007310 <HAL_ADC_Start_DMA+0x1ac>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d105      	bne.n	80071e8 <HAL_ADC_Start_DMA+0x84>
 80071dc:	4b4b      	ldr	r3, [pc, #300]	; (800730c <HAL_ADC_Start_DMA+0x1a8>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d115      	bne.n	8007214 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d026      	beq.n	8007250 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007206:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800720a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007212:	e01d      	b.n	8007250 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a39      	ldr	r2, [pc, #228]	; (800730c <HAL_ADC_Start_DMA+0x1a8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_ADC_Start_DMA+0xd0>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a38      	ldr	r2, [pc, #224]	; (8007310 <HAL_ADC_Start_DMA+0x1ac>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d10d      	bne.n	8007250 <HAL_ADC_Start_DMA+0xec>
 8007234:	4b35      	ldr	r3, [pc, #212]	; (800730c <HAL_ADC_Start_DMA+0x1a8>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007248:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	f023 0206 	bic.w	r2, r3, #6
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	62da      	str	r2, [r3, #44]	; 0x2c
 8007268:	e002      	b.n	8007270 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	4a25      	ldr	r2, [pc, #148]	; (8007314 <HAL_ADC_Start_DMA+0x1b0>)
 800727e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	4a24      	ldr	r2, [pc, #144]	; (8007318 <HAL_ADC_Start_DMA+0x1b4>)
 8007286:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	4a23      	ldr	r2, [pc, #140]	; (800731c <HAL_ADC_Start_DMA+0x1b8>)
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0202 	mvn.w	r2, #2
 8007298:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a18      	ldr	r0, [r3, #32]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	334c      	adds	r3, #76	; 0x4c
 80072b4:	4619      	mov	r1, r3
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f000 fd27 	bl	8007d0c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80072c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80072cc:	d108      	bne.n	80072e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80072dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80072de:	e00f      	b.n	8007300 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80072f0:	e006      	b.n	8007300 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80072fa:	e001      	b.n	8007300 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40012400 	.word	0x40012400
 8007310:	40012800 	.word	0x40012800
 8007314:	08007803 	.word	0x08007803
 8007318:	0800787f 	.word	0x0800787f
 800731c:	0800789b 	.word	0x0800789b

08007320 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b20      	cmp	r3, #32
 8007334:	d140      	bne.n	80073b8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d139      	bne.n	80073b8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	d105      	bne.n	800735c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007366:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800736a:	d11d      	bne.n	80073a8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007370:	2b00      	cmp	r3, #0
 8007372:	d119      	bne.n	80073a8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0220 	bic.w	r2, r2, #32
 8007382:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d105      	bne.n	80073a8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	f043 0201 	orr.w	r2, r3, #1
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7fc fb63 	bl	8003a74 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f06f 0212 	mvn.w	r2, #18
 80073b6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c2:	2b80      	cmp	r3, #128	; 0x80
 80073c4:	d14f      	bne.n	8007466 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d148      	bne.n	8007466 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80073f6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80073fa:	d012      	beq.n	8007422 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8007406:	2b00      	cmp	r3, #0
 8007408:	d125      	bne.n	8007456 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8007414:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007418:	d11d      	bne.n	8007456 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800741e:	2b00      	cmp	r3, #0
 8007420:	d119      	bne.n	8007456 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007430:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d105      	bne.n	8007456 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	f043 0201 	orr.w	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fae6 	bl	8007a28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 020c 	mvn.w	r2, #12
 8007464:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d114      	bne.n	800749e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b01      	cmp	r3, #1
 8007480:	d10d      	bne.n	800749e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f812 	bl	80074b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0201 	mvn.w	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr

080074ca <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr

080074dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_ADC_ConfigChannel+0x20>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e0dc      	b.n	80076b6 <HAL_ADC_ConfigChannel+0x1da>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d81c      	bhi.n	8007546 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	3b05      	subs	r3, #5
 800751e:	221f      	movs	r2, #31
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	43db      	mvns	r3, r3
 8007526:	4019      	ands	r1, r3
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	3b05      	subs	r3, #5
 8007538:	fa00 f203 	lsl.w	r2, r0, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	635a      	str	r2, [r3, #52]	; 0x34
 8007544:	e03c      	b.n	80075c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d81c      	bhi.n	8007588 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	3b23      	subs	r3, #35	; 0x23
 8007560:	221f      	movs	r2, #31
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	43db      	mvns	r3, r3
 8007568:	4019      	ands	r1, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	3b23      	subs	r3, #35	; 0x23
 800757a:	fa00 f203 	lsl.w	r2, r0, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
 8007586:	e01b      	b.n	80075c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	3b41      	subs	r3, #65	; 0x41
 800759a:	221f      	movs	r2, #31
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	43db      	mvns	r3, r3
 80075a2:	4019      	ands	r1, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	3b41      	subs	r3, #65	; 0x41
 80075b4:	fa00 f203 	lsl.w	r2, r0, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b09      	cmp	r3, #9
 80075c6:	d91c      	bls.n	8007602 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68d9      	ldr	r1, [r3, #12]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	4413      	add	r3, r2
 80075d8:	3b1e      	subs	r3, #30
 80075da:	2207      	movs	r2, #7
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	43db      	mvns	r3, r3
 80075e2:	4019      	ands	r1, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6898      	ldr	r0, [r3, #8]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	4413      	add	r3, r2
 80075f2:	3b1e      	subs	r3, #30
 80075f4:	fa00 f203 	lsl.w	r2, r0, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	60da      	str	r2, [r3, #12]
 8007600:	e019      	b.n	8007636 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6919      	ldr	r1, [r3, #16]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	4413      	add	r3, r2
 8007612:	2207      	movs	r2, #7
 8007614:	fa02 f303 	lsl.w	r3, r2, r3
 8007618:	43db      	mvns	r3, r3
 800761a:	4019      	ands	r1, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	6898      	ldr	r0, [r3, #8]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	4413      	add	r3, r2
 800762a:	fa00 f203 	lsl.w	r2, r0, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b10      	cmp	r3, #16
 800763c:	d003      	beq.n	8007646 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007642:	2b11      	cmp	r3, #17
 8007644:	d132      	bne.n	80076ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d125      	bne.n	800769c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d126      	bne.n	80076ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800766c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b10      	cmp	r3, #16
 8007674:	d11a      	bne.n	80076ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007676:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800767c:	fba2 2303 	umull	r2, r3, r2, r3
 8007680:	0c9a      	lsrs	r2, r3, #18
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800768c:	e002      	b.n	8007694 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3b01      	subs	r3, #1
 8007692:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1f9      	bne.n	800768e <HAL_ADC_ConfigChannel+0x1b2>
 800769a:	e007      	b.n	80076ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	f043 0220 	orr.w	r2, r3, #32
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bc80      	pop	{r7}
 80076be:	4770      	bx	lr
 80076c0:	40012400 	.word	0x40012400
 80076c4:	2000004c 	.word	0x2000004c
 80076c8:	431bde83 	.word	0x431bde83

080076cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d040      	beq.n	800776c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f042 0201 	orr.w	r2, r2, #1
 80076f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80076fa:	4b1f      	ldr	r3, [pc, #124]	; (8007778 <ADC_Enable+0xac>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1f      	ldr	r2, [pc, #124]	; (800777c <ADC_Enable+0xb0>)
 8007700:	fba2 2303 	umull	r2, r3, r2, r3
 8007704:	0c9b      	lsrs	r3, r3, #18
 8007706:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007708:	e002      	b.n	8007710 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	3b01      	subs	r3, #1
 800770e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f9      	bne.n	800770a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007716:	f7ff fbf3 	bl	8006f00 <HAL_GetTick>
 800771a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800771c:	e01f      	b.n	800775e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800771e:	f7ff fbef 	bl	8006f00 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d918      	bls.n	800775e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b01      	cmp	r3, #1
 8007738:	d011      	beq.n	800775e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	f043 0210 	orr.w	r2, r3, #16
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	f043 0201 	orr.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e007      	b.n	800776e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d1d8      	bne.n	800771e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	2000004c 	.word	0x2000004c
 800777c:	431bde83 	.word	0x431bde83

08007780 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	d12e      	bne.n	80077f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0201 	bic.w	r2, r2, #1
 80077a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80077aa:	f7ff fba9 	bl	8006f00 <HAL_GetTick>
 80077ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80077b0:	e01b      	b.n	80077ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80077b2:	f7ff fba5 	bl	8006f00 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d914      	bls.n	80077ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d10d      	bne.n	80077ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	f043 0210 	orr.w	r2, r3, #16
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	f043 0201 	orr.w	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e007      	b.n	80077fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d0dc      	beq.n	80077b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007818:	2b00      	cmp	r3, #0
 800781a:	d127      	bne.n	800786c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007832:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007836:	d115      	bne.n	8007864 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800783c:	2b00      	cmp	r3, #0
 800783e:	d111      	bne.n	8007864 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d105      	bne.n	8007864 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	f043 0201 	orr.w	r2, r3, #1
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f7fc f905 	bl	8003a74 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800786a:	e004      	b.n	8007876 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
}
 8007876:	bf00      	nop
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7ff fe0a 	bl	80074a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	f043 0204 	orr.w	r2, r3, #4
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff fe02 	bl	80074ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d101      	bne.n	80078ee <HAL_ADCEx_Calibration_Start+0x1e>
 80078ea:	2302      	movs	r3, #2
 80078ec:	e095      	b.n	8007a1a <HAL_ADCEx_Calibration_Start+0x14a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff ff42 	bl	8007780 <ADC_ConversionStop_Disable>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 8084 	bne.w	8007a10 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007910:	f023 0302 	bic.w	r3, r3, #2
 8007914:	f043 0202 	orr.w	r2, r3, #2
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800791c:	4b41      	ldr	r3, [pc, #260]	; (8007a24 <HAL_ADCEx_Calibration_Start+0x154>)
 800791e:	681c      	ldr	r4, [r3, #0]
 8007920:	2002      	movs	r0, #2
 8007922:	f001 fad3 	bl	8008ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8007926:	4603      	mov	r3, r0
 8007928:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800792c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800792e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8007930:	e002      	b.n	8007938 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3b01      	subs	r3, #1
 8007936:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1f9      	bne.n	8007932 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fec4 	bl	80076cc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0208 	orr.w	r2, r2, #8
 8007952:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007954:	f7ff fad4 	bl	8006f00 <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800795a:	e01b      	b.n	8007994 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800795c:	f7ff fad0 	bl	8006f00 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b0a      	cmp	r3, #10
 8007968:	d914      	bls.n	8007994 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 0308 	and.w	r3, r3, #8
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00d      	beq.n	8007994 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	f023 0312 	bic.w	r3, r3, #18
 8007980:	f043 0210 	orr.w	r2, r3, #16
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e042      	b.n	8007a1a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0308 	and.w	r3, r3, #8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1dc      	bne.n	800795c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0204 	orr.w	r2, r2, #4
 80079b0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80079b2:	f7ff faa5 	bl	8006f00 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80079b8:	e01b      	b.n	80079f2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80079ba:	f7ff faa1 	bl	8006f00 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b0a      	cmp	r3, #10
 80079c6:	d914      	bls.n	80079f2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00d      	beq.n	80079f2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	f023 0312 	bic.w	r3, r3, #18
 80079de:	f043 0210 	orr.w	r2, r3, #16
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e013      	b.n	8007a1a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1dc      	bne.n	80079ba <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	f023 0303 	bic.w	r3, r3, #3
 8007a08:	f043 0201 	orr.w	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd90      	pop	{r4, r7, pc}
 8007a22:	bf00      	nop
 8007a24:	2000004c 	.word	0x2000004c

08007a28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr
	...

08007a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a4c:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <__NVIC_SetPriorityGrouping+0x44>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a58:	4013      	ands	r3, r2
 8007a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a6e:	4a04      	ldr	r2, [pc, #16]	; (8007a80 <__NVIC_SetPriorityGrouping+0x44>)
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	60d3      	str	r3, [r2, #12]
}
 8007a74:	bf00      	nop
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	e000ed00 	.word	0xe000ed00

08007a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <__NVIC_GetPriorityGrouping+0x18>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	0a1b      	lsrs	r3, r3, #8
 8007a8e:	f003 0307 	and.w	r3, r3, #7
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	e000ed00 	.word	0xe000ed00

08007aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	db0b      	blt.n	8007aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	f003 021f 	and.w	r2, r3, #31
 8007ab8:	4906      	ldr	r1, [pc, #24]	; (8007ad4 <__NVIC_EnableIRQ+0x34>)
 8007aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bc80      	pop	{r7}
 8007ad2:	4770      	bx	lr
 8007ad4:	e000e100 	.word	0xe000e100

08007ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	6039      	str	r1, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	db0a      	blt.n	8007b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	490c      	ldr	r1, [pc, #48]	; (8007b24 <__NVIC_SetPriority+0x4c>)
 8007af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af6:	0112      	lsls	r2, r2, #4
 8007af8:	b2d2      	uxtb	r2, r2
 8007afa:	440b      	add	r3, r1
 8007afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b00:	e00a      	b.n	8007b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	4908      	ldr	r1, [pc, #32]	; (8007b28 <__NVIC_SetPriority+0x50>)
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	3b04      	subs	r3, #4
 8007b10:	0112      	lsls	r2, r2, #4
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	440b      	add	r3, r1
 8007b16:	761a      	strb	r2, [r3, #24]
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	e000e100 	.word	0xe000e100
 8007b28:	e000ed00 	.word	0xe000ed00

08007b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b089      	sub	sp, #36	; 0x24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f1c3 0307 	rsb	r3, r3, #7
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	bf28      	it	cs
 8007b4a:	2304      	movcs	r3, #4
 8007b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	3304      	adds	r3, #4
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d902      	bls.n	8007b5c <NVIC_EncodePriority+0x30>
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	3b03      	subs	r3, #3
 8007b5a:	e000      	b.n	8007b5e <NVIC_EncodePriority+0x32>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	43da      	mvns	r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	401a      	ands	r2, r3
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b74:	f04f 31ff 	mov.w	r1, #4294967295
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7e:	43d9      	mvns	r1, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b84:	4313      	orrs	r3, r2
         );
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3724      	adds	r7, #36	; 0x24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr

08007b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ba0:	d301      	bcc.n	8007ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e00f      	b.n	8007bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ba6:	4a0a      	ldr	r2, [pc, #40]	; (8007bd0 <SysTick_Config+0x40>)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bae:	210f      	movs	r1, #15
 8007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb4:	f7ff ff90 	bl	8007ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bb8:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <SysTick_Config+0x40>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bbe:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <SysTick_Config+0x40>)
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	e000e010 	.word	0xe000e010

08007bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ff2d 	bl	8007a3c <__NVIC_SetPriorityGrouping>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007bfc:	f7ff ff42 	bl	8007a84 <__NVIC_GetPriorityGrouping>
 8007c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7ff ff90 	bl	8007b2c <NVIC_EncodePriority>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff ff5f 	bl	8007ad8 <__NVIC_SetPriority>
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	4603      	mov	r3, r0
 8007c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff ff35 	bl	8007aa0 <__NVIC_EnableIRQ>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff ffa2 	bl	8007b90 <SysTick_Config>
 8007c4c:	4603      	mov	r3, r0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e043      	b.n	8007cf6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <HAL_DMA_Init+0xa8>)
 8007c76:	4413      	add	r3, r2
 8007c78:	4a22      	ldr	r2, [pc, #136]	; (8007d04 <HAL_DMA_Init+0xac>)
 8007c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7e:	091b      	lsrs	r3, r3, #4
 8007c80:	009a      	lsls	r2, r3, #2
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a1f      	ldr	r2, [pc, #124]	; (8007d08 <HAL_DMA_Init+0xb0>)
 8007c8a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007ca2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007ca6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr
 8007d00:	bffdfff8 	.word	0xbffdfff8
 8007d04:	cccccccd 	.word	0xcccccccd
 8007d08:	40020000 	.word	0x40020000

08007d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_DMA_Start_IT+0x20>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e04a      	b.n	8007dc2 <HAL_DMA_Start_IT+0xb6>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d13a      	bne.n	8007db4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 f9e8 	bl	8008138 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d008      	beq.n	8007d82 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 020e 	orr.w	r2, r2, #14
 8007d7e:	601a      	str	r2, [r3, #0]
 8007d80:	e00f      	b.n	8007da2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0204 	bic.w	r2, r2, #4
 8007d90:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f042 020a 	orr.w	r2, r2, #10
 8007da0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e005      	b.n	8007dc0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3718      	adds	r7, #24
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d008      	beq.n	8007df2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2204      	movs	r2, #4
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e020      	b.n	8007e34 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 020e 	bic.w	r2, r2, #14
 8007e00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bc80      	pop	{r7}
 8007e3c:	4770      	bx	lr
	...

08007e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d005      	beq.n	8007e62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2204      	movs	r2, #4
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
 8007e60:	e051      	b.n	8007f06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 020e 	bic.w	r2, r2, #14
 8007e70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0201 	bic.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a22      	ldr	r2, [pc, #136]	; (8007f10 <HAL_DMA_Abort_IT+0xd0>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d029      	beq.n	8007ee0 <HAL_DMA_Abort_IT+0xa0>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a20      	ldr	r2, [pc, #128]	; (8007f14 <HAL_DMA_Abort_IT+0xd4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d022      	beq.n	8007edc <HAL_DMA_Abort_IT+0x9c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a1f      	ldr	r2, [pc, #124]	; (8007f18 <HAL_DMA_Abort_IT+0xd8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d01a      	beq.n	8007ed6 <HAL_DMA_Abort_IT+0x96>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a1d      	ldr	r2, [pc, #116]	; (8007f1c <HAL_DMA_Abort_IT+0xdc>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d012      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x90>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1c      	ldr	r2, [pc, #112]	; (8007f20 <HAL_DMA_Abort_IT+0xe0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d00a      	beq.n	8007eca <HAL_DMA_Abort_IT+0x8a>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1a      	ldr	r2, [pc, #104]	; (8007f24 <HAL_DMA_Abort_IT+0xe4>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d102      	bne.n	8007ec4 <HAL_DMA_Abort_IT+0x84>
 8007ebe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ec2:	e00e      	b.n	8007ee2 <HAL_DMA_Abort_IT+0xa2>
 8007ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ec8:	e00b      	b.n	8007ee2 <HAL_DMA_Abort_IT+0xa2>
 8007eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ece:	e008      	b.n	8007ee2 <HAL_DMA_Abort_IT+0xa2>
 8007ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ed4:	e005      	b.n	8007ee2 <HAL_DMA_Abort_IT+0xa2>
 8007ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eda:	e002      	b.n	8007ee2 <HAL_DMA_Abort_IT+0xa2>
 8007edc:	2310      	movs	r3, #16
 8007ede:	e000      	b.n	8007ee2 <HAL_DMA_Abort_IT+0xa2>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4a11      	ldr	r2, [pc, #68]	; (8007f28 <HAL_DMA_Abort_IT+0xe8>)
 8007ee4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
    } 
  }
  return status;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	40020008 	.word	0x40020008
 8007f14:	4002001c 	.word	0x4002001c
 8007f18:	40020030 	.word	0x40020030
 8007f1c:	40020044 	.word	0x40020044
 8007f20:	40020058 	.word	0x40020058
 8007f24:	4002006c 	.word	0x4002006c
 8007f28:	40020000 	.word	0x40020000

08007f2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	2204      	movs	r2, #4
 8007f4a:	409a      	lsls	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d04f      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0xc8>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d04a      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0320 	and.w	r3, r3, #32
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d107      	bne.n	8007f7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0204 	bic.w	r2, r2, #4
 8007f7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a66      	ldr	r2, [pc, #408]	; (800811c <HAL_DMA_IRQHandler+0x1f0>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d029      	beq.n	8007fda <HAL_DMA_IRQHandler+0xae>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a65      	ldr	r2, [pc, #404]	; (8008120 <HAL_DMA_IRQHandler+0x1f4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d022      	beq.n	8007fd6 <HAL_DMA_IRQHandler+0xaa>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a63      	ldr	r2, [pc, #396]	; (8008124 <HAL_DMA_IRQHandler+0x1f8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01a      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0xa4>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a62      	ldr	r2, [pc, #392]	; (8008128 <HAL_DMA_IRQHandler+0x1fc>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d012      	beq.n	8007fca <HAL_DMA_IRQHandler+0x9e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a60      	ldr	r2, [pc, #384]	; (800812c <HAL_DMA_IRQHandler+0x200>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00a      	beq.n	8007fc4 <HAL_DMA_IRQHandler+0x98>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a5f      	ldr	r2, [pc, #380]	; (8008130 <HAL_DMA_IRQHandler+0x204>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d102      	bne.n	8007fbe <HAL_DMA_IRQHandler+0x92>
 8007fb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007fbc:	e00e      	b.n	8007fdc <HAL_DMA_IRQHandler+0xb0>
 8007fbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007fc2:	e00b      	b.n	8007fdc <HAL_DMA_IRQHandler+0xb0>
 8007fc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007fc8:	e008      	b.n	8007fdc <HAL_DMA_IRQHandler+0xb0>
 8007fca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007fce:	e005      	b.n	8007fdc <HAL_DMA_IRQHandler+0xb0>
 8007fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd4:	e002      	b.n	8007fdc <HAL_DMA_IRQHandler+0xb0>
 8007fd6:	2340      	movs	r3, #64	; 0x40
 8007fd8:	e000      	b.n	8007fdc <HAL_DMA_IRQHandler+0xb0>
 8007fda:	2304      	movs	r3, #4
 8007fdc:	4a55      	ldr	r2, [pc, #340]	; (8008134 <HAL_DMA_IRQHandler+0x208>)
 8007fde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8094 	beq.w	8008112 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007ff2:	e08e      	b.n	8008112 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	409a      	lsls	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4013      	ands	r3, r2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d056      	beq.n	80080b2 <HAL_DMA_IRQHandler+0x186>
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d051      	beq.n	80080b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10b      	bne.n	8008034 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 020a 	bic.w	r2, r2, #10
 800802a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a38      	ldr	r2, [pc, #224]	; (800811c <HAL_DMA_IRQHandler+0x1f0>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d029      	beq.n	8008092 <HAL_DMA_IRQHandler+0x166>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a37      	ldr	r2, [pc, #220]	; (8008120 <HAL_DMA_IRQHandler+0x1f4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d022      	beq.n	800808e <HAL_DMA_IRQHandler+0x162>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a35      	ldr	r2, [pc, #212]	; (8008124 <HAL_DMA_IRQHandler+0x1f8>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d01a      	beq.n	8008088 <HAL_DMA_IRQHandler+0x15c>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a34      	ldr	r2, [pc, #208]	; (8008128 <HAL_DMA_IRQHandler+0x1fc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d012      	beq.n	8008082 <HAL_DMA_IRQHandler+0x156>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a32      	ldr	r2, [pc, #200]	; (800812c <HAL_DMA_IRQHandler+0x200>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00a      	beq.n	800807c <HAL_DMA_IRQHandler+0x150>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a31      	ldr	r2, [pc, #196]	; (8008130 <HAL_DMA_IRQHandler+0x204>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d102      	bne.n	8008076 <HAL_DMA_IRQHandler+0x14a>
 8008070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008074:	e00e      	b.n	8008094 <HAL_DMA_IRQHandler+0x168>
 8008076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800807a:	e00b      	b.n	8008094 <HAL_DMA_IRQHandler+0x168>
 800807c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008080:	e008      	b.n	8008094 <HAL_DMA_IRQHandler+0x168>
 8008082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008086:	e005      	b.n	8008094 <HAL_DMA_IRQHandler+0x168>
 8008088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800808c:	e002      	b.n	8008094 <HAL_DMA_IRQHandler+0x168>
 800808e:	2320      	movs	r3, #32
 8008090:	e000      	b.n	8008094 <HAL_DMA_IRQHandler+0x168>
 8008092:	2302      	movs	r3, #2
 8008094:	4a27      	ldr	r2, [pc, #156]	; (8008134 <HAL_DMA_IRQHandler+0x208>)
 8008096:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d034      	beq.n	8008112 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80080b0:	e02f      	b.n	8008112 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	2208      	movs	r2, #8
 80080b8:	409a      	lsls	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d028      	beq.n	8008114 <HAL_DMA_IRQHandler+0x1e8>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f003 0308 	and.w	r3, r3, #8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d023      	beq.n	8008114 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 020e 	bic.w	r2, r2, #14
 80080da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e4:	2101      	movs	r1, #1
 80080e6:	fa01 f202 	lsl.w	r2, r1, r2
 80080ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
    }
  }
  return;
 8008112:	bf00      	nop
 8008114:	bf00      	nop
}
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40020008 	.word	0x40020008
 8008120:	4002001c 	.word	0x4002001c
 8008124:	40020030 	.word	0x40020030
 8008128:	40020044 	.word	0x40020044
 800812c:	40020058 	.word	0x40020058
 8008130:	4002006c 	.word	0x4002006c
 8008134:	40020000 	.word	0x40020000

08008138 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814e:	2101      	movs	r1, #1
 8008150:	fa01 f202 	lsl.w	r2, r1, r2
 8008154:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b10      	cmp	r3, #16
 8008164:	d108      	bne.n	8008178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008176:	e007      	b.n	8008188 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	60da      	str	r2, [r3, #12]
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
	...

08008194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008194:	b480      	push	{r7}
 8008196:	b08b      	sub	sp, #44	; 0x2c
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80081a2:	2300      	movs	r3, #0
 80081a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081a6:	e169      	b.n	800847c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80081a8:	2201      	movs	r2, #1
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	4013      	ands	r3, r2
 80081ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	f040 8158 	bne.w	8008476 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	4a9a      	ldr	r2, [pc, #616]	; (8008434 <HAL_GPIO_Init+0x2a0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d05e      	beq.n	800828e <HAL_GPIO_Init+0xfa>
 80081d0:	4a98      	ldr	r2, [pc, #608]	; (8008434 <HAL_GPIO_Init+0x2a0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d875      	bhi.n	80082c2 <HAL_GPIO_Init+0x12e>
 80081d6:	4a98      	ldr	r2, [pc, #608]	; (8008438 <HAL_GPIO_Init+0x2a4>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d058      	beq.n	800828e <HAL_GPIO_Init+0xfa>
 80081dc:	4a96      	ldr	r2, [pc, #600]	; (8008438 <HAL_GPIO_Init+0x2a4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d86f      	bhi.n	80082c2 <HAL_GPIO_Init+0x12e>
 80081e2:	4a96      	ldr	r2, [pc, #600]	; (800843c <HAL_GPIO_Init+0x2a8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d052      	beq.n	800828e <HAL_GPIO_Init+0xfa>
 80081e8:	4a94      	ldr	r2, [pc, #592]	; (800843c <HAL_GPIO_Init+0x2a8>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d869      	bhi.n	80082c2 <HAL_GPIO_Init+0x12e>
 80081ee:	4a94      	ldr	r2, [pc, #592]	; (8008440 <HAL_GPIO_Init+0x2ac>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d04c      	beq.n	800828e <HAL_GPIO_Init+0xfa>
 80081f4:	4a92      	ldr	r2, [pc, #584]	; (8008440 <HAL_GPIO_Init+0x2ac>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d863      	bhi.n	80082c2 <HAL_GPIO_Init+0x12e>
 80081fa:	4a92      	ldr	r2, [pc, #584]	; (8008444 <HAL_GPIO_Init+0x2b0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d046      	beq.n	800828e <HAL_GPIO_Init+0xfa>
 8008200:	4a90      	ldr	r2, [pc, #576]	; (8008444 <HAL_GPIO_Init+0x2b0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d85d      	bhi.n	80082c2 <HAL_GPIO_Init+0x12e>
 8008206:	2b12      	cmp	r3, #18
 8008208:	d82a      	bhi.n	8008260 <HAL_GPIO_Init+0xcc>
 800820a:	2b12      	cmp	r3, #18
 800820c:	d859      	bhi.n	80082c2 <HAL_GPIO_Init+0x12e>
 800820e:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <HAL_GPIO_Init+0x80>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	0800828f 	.word	0x0800828f
 8008218:	08008269 	.word	0x08008269
 800821c:	0800827b 	.word	0x0800827b
 8008220:	080082bd 	.word	0x080082bd
 8008224:	080082c3 	.word	0x080082c3
 8008228:	080082c3 	.word	0x080082c3
 800822c:	080082c3 	.word	0x080082c3
 8008230:	080082c3 	.word	0x080082c3
 8008234:	080082c3 	.word	0x080082c3
 8008238:	080082c3 	.word	0x080082c3
 800823c:	080082c3 	.word	0x080082c3
 8008240:	080082c3 	.word	0x080082c3
 8008244:	080082c3 	.word	0x080082c3
 8008248:	080082c3 	.word	0x080082c3
 800824c:	080082c3 	.word	0x080082c3
 8008250:	080082c3 	.word	0x080082c3
 8008254:	080082c3 	.word	0x080082c3
 8008258:	08008271 	.word	0x08008271
 800825c:	08008285 	.word	0x08008285
 8008260:	4a79      	ldr	r2, [pc, #484]	; (8008448 <HAL_GPIO_Init+0x2b4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d013      	beq.n	800828e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008266:	e02c      	b.n	80082c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	623b      	str	r3, [r7, #32]
          break;
 800826e:	e029      	b.n	80082c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	3304      	adds	r3, #4
 8008276:	623b      	str	r3, [r7, #32]
          break;
 8008278:	e024      	b.n	80082c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	3308      	adds	r3, #8
 8008280:	623b      	str	r3, [r7, #32]
          break;
 8008282:	e01f      	b.n	80082c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	330c      	adds	r3, #12
 800828a:	623b      	str	r3, [r7, #32]
          break;
 800828c:	e01a      	b.n	80082c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008296:	2304      	movs	r3, #4
 8008298:	623b      	str	r3, [r7, #32]
          break;
 800829a:	e013      	b.n	80082c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d105      	bne.n	80082b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80082a4:	2308      	movs	r3, #8
 80082a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	611a      	str	r2, [r3, #16]
          break;
 80082ae:	e009      	b.n	80082c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80082b0:	2308      	movs	r3, #8
 80082b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	615a      	str	r2, [r3, #20]
          break;
 80082ba:	e003      	b.n	80082c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80082bc:	2300      	movs	r3, #0
 80082be:	623b      	str	r3, [r7, #32]
          break;
 80082c0:	e000      	b.n	80082c4 <HAL_GPIO_Init+0x130>
          break;
 80082c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	2bff      	cmp	r3, #255	; 0xff
 80082c8:	d801      	bhi.n	80082ce <HAL_GPIO_Init+0x13a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	e001      	b.n	80082d2 <HAL_GPIO_Init+0x13e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3304      	adds	r3, #4
 80082d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	2bff      	cmp	r3, #255	; 0xff
 80082d8:	d802      	bhi.n	80082e0 <HAL_GPIO_Init+0x14c>
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	e002      	b.n	80082e6 <HAL_GPIO_Init+0x152>
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	3b08      	subs	r3, #8
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	210f      	movs	r1, #15
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	fa01 f303 	lsl.w	r3, r1, r3
 80082f4:	43db      	mvns	r3, r3
 80082f6:	401a      	ands	r2, r3
 80082f8:	6a39      	ldr	r1, [r7, #32]
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008300:	431a      	orrs	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 80b1 	beq.w	8008476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008314:	4b4d      	ldr	r3, [pc, #308]	; (800844c <HAL_GPIO_Init+0x2b8>)
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	4a4c      	ldr	r2, [pc, #304]	; (800844c <HAL_GPIO_Init+0x2b8>)
 800831a:	f043 0301 	orr.w	r3, r3, #1
 800831e:	6193      	str	r3, [r2, #24]
 8008320:	4b4a      	ldr	r3, [pc, #296]	; (800844c <HAL_GPIO_Init+0x2b8>)
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	60bb      	str	r3, [r7, #8]
 800832a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800832c:	4a48      	ldr	r2, [pc, #288]	; (8008450 <HAL_GPIO_Init+0x2bc>)
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	089b      	lsrs	r3, r3, #2
 8008332:	3302      	adds	r3, #2
 8008334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	f003 0303 	and.w	r3, r3, #3
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	220f      	movs	r2, #15
 8008344:	fa02 f303 	lsl.w	r3, r2, r3
 8008348:	43db      	mvns	r3, r3
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4013      	ands	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a40      	ldr	r2, [pc, #256]	; (8008454 <HAL_GPIO_Init+0x2c0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d013      	beq.n	8008380 <HAL_GPIO_Init+0x1ec>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a3f      	ldr	r2, [pc, #252]	; (8008458 <HAL_GPIO_Init+0x2c4>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00d      	beq.n	800837c <HAL_GPIO_Init+0x1e8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a3e      	ldr	r2, [pc, #248]	; (800845c <HAL_GPIO_Init+0x2c8>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d007      	beq.n	8008378 <HAL_GPIO_Init+0x1e4>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a3d      	ldr	r2, [pc, #244]	; (8008460 <HAL_GPIO_Init+0x2cc>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d101      	bne.n	8008374 <HAL_GPIO_Init+0x1e0>
 8008370:	2303      	movs	r3, #3
 8008372:	e006      	b.n	8008382 <HAL_GPIO_Init+0x1ee>
 8008374:	2304      	movs	r3, #4
 8008376:	e004      	b.n	8008382 <HAL_GPIO_Init+0x1ee>
 8008378:	2302      	movs	r3, #2
 800837a:	e002      	b.n	8008382 <HAL_GPIO_Init+0x1ee>
 800837c:	2301      	movs	r3, #1
 800837e:	e000      	b.n	8008382 <HAL_GPIO_Init+0x1ee>
 8008380:	2300      	movs	r3, #0
 8008382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008384:	f002 0203 	and.w	r2, r2, #3
 8008388:	0092      	lsls	r2, r2, #2
 800838a:	4093      	lsls	r3, r2
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008392:	492f      	ldr	r1, [pc, #188]	; (8008450 <HAL_GPIO_Init+0x2bc>)
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	089b      	lsrs	r3, r3, #2
 8008398:	3302      	adds	r3, #2
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d006      	beq.n	80083ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80083ac:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	492c      	ldr	r1, [pc, #176]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	600b      	str	r3, [r1, #0]
 80083b8:	e006      	b.n	80083c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80083ba:	4b2a      	ldr	r3, [pc, #168]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	4928      	ldr	r1, [pc, #160]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d006      	beq.n	80083e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80083d4:	4b23      	ldr	r3, [pc, #140]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	4922      	ldr	r1, [pc, #136]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	4313      	orrs	r3, r2
 80083de:	604b      	str	r3, [r1, #4]
 80083e0:	e006      	b.n	80083f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80083e2:	4b20      	ldr	r3, [pc, #128]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	491e      	ldr	r1, [pc, #120]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d006      	beq.n	800840a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80083fc:	4b19      	ldr	r3, [pc, #100]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	4918      	ldr	r1, [pc, #96]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	4313      	orrs	r3, r2
 8008406:	608b      	str	r3, [r1, #8]
 8008408:	e006      	b.n	8008418 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800840a:	4b16      	ldr	r3, [pc, #88]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	43db      	mvns	r3, r3
 8008412:	4914      	ldr	r1, [pc, #80]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 8008414:	4013      	ands	r3, r2
 8008416:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d021      	beq.n	8008468 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008424:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	490e      	ldr	r1, [pc, #56]	; (8008464 <HAL_GPIO_Init+0x2d0>)
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	4313      	orrs	r3, r2
 800842e:	60cb      	str	r3, [r1, #12]
 8008430:	e021      	b.n	8008476 <HAL_GPIO_Init+0x2e2>
 8008432:	bf00      	nop
 8008434:	10320000 	.word	0x10320000
 8008438:	10310000 	.word	0x10310000
 800843c:	10220000 	.word	0x10220000
 8008440:	10210000 	.word	0x10210000
 8008444:	10120000 	.word	0x10120000
 8008448:	10110000 	.word	0x10110000
 800844c:	40021000 	.word	0x40021000
 8008450:	40010000 	.word	0x40010000
 8008454:	40010800 	.word	0x40010800
 8008458:	40010c00 	.word	0x40010c00
 800845c:	40011000 	.word	0x40011000
 8008460:	40011400 	.word	0x40011400
 8008464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008468:	4b0b      	ldr	r3, [pc, #44]	; (8008498 <HAL_GPIO_Init+0x304>)
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	43db      	mvns	r3, r3
 8008470:	4909      	ldr	r1, [pc, #36]	; (8008498 <HAL_GPIO_Init+0x304>)
 8008472:	4013      	ands	r3, r2
 8008474:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	3301      	adds	r3, #1
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	fa22 f303 	lsr.w	r3, r2, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	f47f ae8e 	bne.w	80081a8 <HAL_GPIO_Init+0x14>
  }
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	372c      	adds	r7, #44	; 0x2c
 8008492:	46bd      	mov	sp, r7
 8008494:	bc80      	pop	{r7}
 8008496:	4770      	bx	lr
 8008498:	40010400 	.word	0x40010400

0800849c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	887b      	ldrh	r3, [r7, #2]
 80084ae:	4013      	ands	r3, r2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
 80084b8:	e001      	b.n	80084be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr

080084ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	807b      	strh	r3, [r7, #2]
 80084d6:	4613      	mov	r3, r2
 80084d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084da:	787b      	ldrb	r3, [r7, #1]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084e0:	887a      	ldrh	r2, [r7, #2]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80084e6:	e003      	b.n	80084f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80084e8:	887b      	ldrh	r3, [r7, #2]
 80084ea:	041a      	lsls	r2, r3, #16
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	611a      	str	r2, [r3, #16]
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc80      	pop	{r7}
 80084f8:	4770      	bx	lr

080084fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b085      	sub	sp, #20
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800850c:	887a      	ldrh	r2, [r7, #2]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	4013      	ands	r3, r2
 8008512:	041a      	lsls	r2, r3, #16
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	43d9      	mvns	r1, r3
 8008518:	887b      	ldrh	r3, [r7, #2]
 800851a:	400b      	ands	r3, r1
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]
}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e26c      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 8087 	beq.w	800865a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800854c:	4b92      	ldr	r3, [pc, #584]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f003 030c 	and.w	r3, r3, #12
 8008554:	2b04      	cmp	r3, #4
 8008556:	d00c      	beq.n	8008572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008558:	4b8f      	ldr	r3, [pc, #572]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f003 030c 	and.w	r3, r3, #12
 8008560:	2b08      	cmp	r3, #8
 8008562:	d112      	bne.n	800858a <HAL_RCC_OscConfig+0x5e>
 8008564:	4b8c      	ldr	r3, [pc, #560]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800856c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008570:	d10b      	bne.n	800858a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008572:	4b89      	ldr	r3, [pc, #548]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d06c      	beq.n	8008658 <HAL_RCC_OscConfig+0x12c>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d168      	bne.n	8008658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e246      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008592:	d106      	bne.n	80085a2 <HAL_RCC_OscConfig+0x76>
 8008594:	4b80      	ldr	r3, [pc, #512]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a7f      	ldr	r2, [pc, #508]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 800859a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	e02e      	b.n	8008600 <HAL_RCC_OscConfig+0xd4>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10c      	bne.n	80085c4 <HAL_RCC_OscConfig+0x98>
 80085aa:	4b7b      	ldr	r3, [pc, #492]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a7a      	ldr	r2, [pc, #488]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	4b78      	ldr	r3, [pc, #480]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a77      	ldr	r2, [pc, #476]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	e01d      	b.n	8008600 <HAL_RCC_OscConfig+0xd4>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085cc:	d10c      	bne.n	80085e8 <HAL_RCC_OscConfig+0xbc>
 80085ce:	4b72      	ldr	r3, [pc, #456]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a71      	ldr	r2, [pc, #452]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	4b6f      	ldr	r3, [pc, #444]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a6e      	ldr	r2, [pc, #440]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	e00b      	b.n	8008600 <HAL_RCC_OscConfig+0xd4>
 80085e8:	4b6b      	ldr	r3, [pc, #428]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a6a      	ldr	r2, [pc, #424]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	4b68      	ldr	r3, [pc, #416]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a67      	ldr	r2, [pc, #412]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80085fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d013      	beq.n	8008630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008608:	f7fe fc7a 	bl	8006f00 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008610:	f7fe fc76 	bl	8006f00 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b64      	cmp	r3, #100	; 0x64
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e1fa      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008622:	4b5d      	ldr	r3, [pc, #372]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0f0      	beq.n	8008610 <HAL_RCC_OscConfig+0xe4>
 800862e:	e014      	b.n	800865a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008630:	f7fe fc66 	bl	8006f00 <HAL_GetTick>
 8008634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008636:	e008      	b.n	800864a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008638:	f7fe fc62 	bl	8006f00 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b64      	cmp	r3, #100	; 0x64
 8008644:	d901      	bls.n	800864a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e1e6      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800864a:	4b53      	ldr	r3, [pc, #332]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1f0      	bne.n	8008638 <HAL_RCC_OscConfig+0x10c>
 8008656:	e000      	b.n	800865a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d063      	beq.n	800872e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008666:	4b4c      	ldr	r3, [pc, #304]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f003 030c 	and.w	r3, r3, #12
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00b      	beq.n	800868a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008672:	4b49      	ldr	r3, [pc, #292]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f003 030c 	and.w	r3, r3, #12
 800867a:	2b08      	cmp	r3, #8
 800867c:	d11c      	bne.n	80086b8 <HAL_RCC_OscConfig+0x18c>
 800867e:	4b46      	ldr	r3, [pc, #280]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d116      	bne.n	80086b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800868a:	4b43      	ldr	r3, [pc, #268]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <HAL_RCC_OscConfig+0x176>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d001      	beq.n	80086a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e1ba      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086a2:	4b3d      	ldr	r3, [pc, #244]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	4939      	ldr	r1, [pc, #228]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086b6:	e03a      	b.n	800872e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d020      	beq.n	8008702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086c0:	4b36      	ldr	r3, [pc, #216]	; (800879c <HAL_RCC_OscConfig+0x270>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086c6:	f7fe fc1b 	bl	8006f00 <HAL_GetTick>
 80086ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086ce:	f7fe fc17 	bl	8006f00 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e19b      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086e0:	4b2d      	ldr	r3, [pc, #180]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0f0      	beq.n	80086ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ec:	4b2a      	ldr	r3, [pc, #168]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	4927      	ldr	r1, [pc, #156]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	600b      	str	r3, [r1, #0]
 8008700:	e015      	b.n	800872e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008702:	4b26      	ldr	r3, [pc, #152]	; (800879c <HAL_RCC_OscConfig+0x270>)
 8008704:	2200      	movs	r2, #0
 8008706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008708:	f7fe fbfa 	bl	8006f00 <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008710:	f7fe fbf6 	bl	8006f00 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e17a      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008722:	4b1d      	ldr	r3, [pc, #116]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1f0      	bne.n	8008710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d03a      	beq.n	80087b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d019      	beq.n	8008776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008742:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <HAL_RCC_OscConfig+0x274>)
 8008744:	2201      	movs	r2, #1
 8008746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008748:	f7fe fbda 	bl	8006f00 <HAL_GetTick>
 800874c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800874e:	e008      	b.n	8008762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008750:	f7fe fbd6 	bl	8006f00 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e15a      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008762:	4b0d      	ldr	r3, [pc, #52]	; (8008798 <HAL_RCC_OscConfig+0x26c>)
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0f0      	beq.n	8008750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800876e:	2001      	movs	r0, #1
 8008770:	f000 fad8 	bl	8008d24 <RCC_Delay>
 8008774:	e01c      	b.n	80087b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008776:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <HAL_RCC_OscConfig+0x274>)
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800877c:	f7fe fbc0 	bl	8006f00 <HAL_GetTick>
 8008780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008782:	e00f      	b.n	80087a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008784:	f7fe fbbc 	bl	8006f00 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d908      	bls.n	80087a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e140      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
 8008796:	bf00      	nop
 8008798:	40021000 	.word	0x40021000
 800879c:	42420000 	.word	0x42420000
 80087a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087a4:	4b9e      	ldr	r3, [pc, #632]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e9      	bne.n	8008784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 80a6 	beq.w	800890a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087be:	2300      	movs	r3, #0
 80087c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087c2:	4b97      	ldr	r3, [pc, #604]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10d      	bne.n	80087ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087ce:	4b94      	ldr	r3, [pc, #592]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	4a93      	ldr	r2, [pc, #588]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80087d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d8:	61d3      	str	r3, [r2, #28]
 80087da:	4b91      	ldr	r3, [pc, #580]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087e6:	2301      	movs	r3, #1
 80087e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087ea:	4b8e      	ldr	r3, [pc, #568]	; (8008a24 <HAL_RCC_OscConfig+0x4f8>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d118      	bne.n	8008828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087f6:	4b8b      	ldr	r3, [pc, #556]	; (8008a24 <HAL_RCC_OscConfig+0x4f8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a8a      	ldr	r2, [pc, #552]	; (8008a24 <HAL_RCC_OscConfig+0x4f8>)
 80087fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008802:	f7fe fb7d 	bl	8006f00 <HAL_GetTick>
 8008806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008808:	e008      	b.n	800881c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800880a:	f7fe fb79 	bl	8006f00 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b64      	cmp	r3, #100	; 0x64
 8008816:	d901      	bls.n	800881c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e0fd      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800881c:	4b81      	ldr	r3, [pc, #516]	; (8008a24 <HAL_RCC_OscConfig+0x4f8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0f0      	beq.n	800880a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d106      	bne.n	800883e <HAL_RCC_OscConfig+0x312>
 8008830:	4b7b      	ldr	r3, [pc, #492]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	4a7a      	ldr	r2, [pc, #488]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008836:	f043 0301 	orr.w	r3, r3, #1
 800883a:	6213      	str	r3, [r2, #32]
 800883c:	e02d      	b.n	800889a <HAL_RCC_OscConfig+0x36e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10c      	bne.n	8008860 <HAL_RCC_OscConfig+0x334>
 8008846:	4b76      	ldr	r3, [pc, #472]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	4a75      	ldr	r2, [pc, #468]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 800884c:	f023 0301 	bic.w	r3, r3, #1
 8008850:	6213      	str	r3, [r2, #32]
 8008852:	4b73      	ldr	r3, [pc, #460]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	4a72      	ldr	r2, [pc, #456]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008858:	f023 0304 	bic.w	r3, r3, #4
 800885c:	6213      	str	r3, [r2, #32]
 800885e:	e01c      	b.n	800889a <HAL_RCC_OscConfig+0x36e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	2b05      	cmp	r3, #5
 8008866:	d10c      	bne.n	8008882 <HAL_RCC_OscConfig+0x356>
 8008868:	4b6d      	ldr	r3, [pc, #436]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	4a6c      	ldr	r2, [pc, #432]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 800886e:	f043 0304 	orr.w	r3, r3, #4
 8008872:	6213      	str	r3, [r2, #32]
 8008874:	4b6a      	ldr	r3, [pc, #424]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	4a69      	ldr	r2, [pc, #420]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	6213      	str	r3, [r2, #32]
 8008880:	e00b      	b.n	800889a <HAL_RCC_OscConfig+0x36e>
 8008882:	4b67      	ldr	r3, [pc, #412]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	4a66      	ldr	r2, [pc, #408]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008888:	f023 0301 	bic.w	r3, r3, #1
 800888c:	6213      	str	r3, [r2, #32]
 800888e:	4b64      	ldr	r3, [pc, #400]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	4a63      	ldr	r2, [pc, #396]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008894:	f023 0304 	bic.w	r3, r3, #4
 8008898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d015      	beq.n	80088ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088a2:	f7fe fb2d 	bl	8006f00 <HAL_GetTick>
 80088a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088a8:	e00a      	b.n	80088c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088aa:	f7fe fb29 	bl	8006f00 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e0ab      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088c0:	4b57      	ldr	r3, [pc, #348]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0ee      	beq.n	80088aa <HAL_RCC_OscConfig+0x37e>
 80088cc:	e014      	b.n	80088f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ce:	f7fe fb17 	bl	8006f00 <HAL_GetTick>
 80088d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088d4:	e00a      	b.n	80088ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088d6:	f7fe fb13 	bl	8006f00 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d901      	bls.n	80088ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e095      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088ec:	4b4c      	ldr	r3, [pc, #304]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1ee      	bne.n	80088d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d105      	bne.n	800890a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088fe:	4b48      	ldr	r3, [pc, #288]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	4a47      	ldr	r2, [pc, #284]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 8081 	beq.w	8008a16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008914:	4b42      	ldr	r3, [pc, #264]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f003 030c 	and.w	r3, r3, #12
 800891c:	2b08      	cmp	r3, #8
 800891e:	d061      	beq.n	80089e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d146      	bne.n	80089b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008928:	4b3f      	ldr	r3, [pc, #252]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800892e:	f7fe fae7 	bl	8006f00 <HAL_GetTick>
 8008932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008934:	e008      	b.n	8008948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008936:	f7fe fae3 	bl	8006f00 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e067      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008948:	4b35      	ldr	r3, [pc, #212]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f0      	bne.n	8008936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800895c:	d108      	bne.n	8008970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800895e:	4b30      	ldr	r3, [pc, #192]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	492d      	ldr	r1, [pc, #180]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 800896c:	4313      	orrs	r3, r2
 800896e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008970:	4b2b      	ldr	r3, [pc, #172]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a19      	ldr	r1, [r3, #32]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	430b      	orrs	r3, r1
 8008982:	4927      	ldr	r1, [pc, #156]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 8008984:	4313      	orrs	r3, r2
 8008986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008988:	4b27      	ldr	r3, [pc, #156]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 800898a:	2201      	movs	r2, #1
 800898c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800898e:	f7fe fab7 	bl	8006f00 <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008994:	e008      	b.n	80089a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008996:	f7fe fab3 	bl	8006f00 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e037      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80089a8:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCC_OscConfig+0x46a>
 80089b4:	e02f      	b.n	8008a16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089b6:	4b1c      	ldr	r3, [pc, #112]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089bc:	f7fe faa0 	bl	8006f00 <HAL_GetTick>
 80089c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089c2:	e008      	b.n	80089d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089c4:	f7fe fa9c 	bl	8006f00 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e020      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089d6:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1f0      	bne.n	80089c4 <HAL_RCC_OscConfig+0x498>
 80089e2:	e018      	b.n	8008a16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d101      	bne.n	80089f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e013      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <HAL_RCC_OscConfig+0x4f4>)
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d106      	bne.n	8008a12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d001      	beq.n	8008a16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	40021000 	.word	0x40021000
 8008a24:	40007000 	.word	0x40007000
 8008a28:	42420060 	.word	0x42420060

08008a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e0d0      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a40:	4b6a      	ldr	r3, [pc, #424]	; (8008bec <HAL_RCC_ClockConfig+0x1c0>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d910      	bls.n	8008a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a4e:	4b67      	ldr	r3, [pc, #412]	; (8008bec <HAL_RCC_ClockConfig+0x1c0>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f023 0207 	bic.w	r2, r3, #7
 8008a56:	4965      	ldr	r1, [pc, #404]	; (8008bec <HAL_RCC_ClockConfig+0x1c0>)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a5e:	4b63      	ldr	r3, [pc, #396]	; (8008bec <HAL_RCC_ClockConfig+0x1c0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d001      	beq.n	8008a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e0b8      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d020      	beq.n	8008abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a88:	4b59      	ldr	r3, [pc, #356]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4a58      	ldr	r2, [pc, #352]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008aa0:	4b53      	ldr	r3, [pc, #332]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	4a52      	ldr	r2, [pc, #328]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aac:	4b50      	ldr	r3, [pc, #320]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	494d      	ldr	r1, [pc, #308]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d040      	beq.n	8008b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d107      	bne.n	8008ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ad2:	4b47      	ldr	r3, [pc, #284]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d115      	bne.n	8008b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e07f      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d107      	bne.n	8008afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aea:	4b41      	ldr	r3, [pc, #260]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d109      	bne.n	8008b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e073      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008afa:	4b3d      	ldr	r3, [pc, #244]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e06b      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b0a:	4b39      	ldr	r3, [pc, #228]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f023 0203 	bic.w	r2, r3, #3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	4936      	ldr	r1, [pc, #216]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b1c:	f7fe f9f0 	bl	8006f00 <HAL_GetTick>
 8008b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b22:	e00a      	b.n	8008b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b24:	f7fe f9ec 	bl	8006f00 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e053      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b3a:	4b2d      	ldr	r3, [pc, #180]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f003 020c 	and.w	r2, r3, #12
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d1eb      	bne.n	8008b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b4c:	4b27      	ldr	r3, [pc, #156]	; (8008bec <HAL_RCC_ClockConfig+0x1c0>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d210      	bcs.n	8008b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b5a:	4b24      	ldr	r3, [pc, #144]	; (8008bec <HAL_RCC_ClockConfig+0x1c0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f023 0207 	bic.w	r2, r3, #7
 8008b62:	4922      	ldr	r1, [pc, #136]	; (8008bec <HAL_RCC_ClockConfig+0x1c0>)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6a:	4b20      	ldr	r3, [pc, #128]	; (8008bec <HAL_RCC_ClockConfig+0x1c0>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d001      	beq.n	8008b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e032      	b.n	8008be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d008      	beq.n	8008b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b88:	4b19      	ldr	r3, [pc, #100]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	4916      	ldr	r1, [pc, #88]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0308 	and.w	r3, r3, #8
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008ba6:	4b12      	ldr	r3, [pc, #72]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	490e      	ldr	r1, [pc, #56]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008bba:	f000 f821 	bl	8008c00 <HAL_RCC_GetSysClockFreq>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	490a      	ldr	r1, [pc, #40]	; (8008bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8008bcc:	5ccb      	ldrb	r3, [r1, r3]
 8008bce:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd2:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8008bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008bd6:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <HAL_RCC_ClockConfig+0x1d0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fe f94e 	bl	8006e7c <HAL_InitTick>

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	40022000 	.word	0x40022000
 8008bf0:	40021000 	.word	0x40021000
 8008bf4:	0800ac8c 	.word	0x0800ac8c
 8008bf8:	2000004c 	.word	0x2000004c
 8008bfc:	20000050 	.word	0x20000050

08008c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c00:	b490      	push	{r4, r7}
 8008c02:	b08a      	sub	sp, #40	; 0x28
 8008c04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008c06:	4b2a      	ldr	r3, [pc, #168]	; (8008cb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008c08:	1d3c      	adds	r4, r7, #4
 8008c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008c10:	f240 2301 	movw	r3, #513	; 0x201
 8008c14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61bb      	str	r3, [r7, #24]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
 8008c22:	2300      	movs	r3, #0
 8008c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008c2a:	4b22      	ldr	r3, [pc, #136]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f003 030c 	and.w	r3, r3, #12
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d002      	beq.n	8008c40 <HAL_RCC_GetSysClockFreq+0x40>
 8008c3a:	2b08      	cmp	r3, #8
 8008c3c:	d003      	beq.n	8008c46 <HAL_RCC_GetSysClockFreq+0x46>
 8008c3e:	e02d      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008c40:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c42:	623b      	str	r3, [r7, #32]
      break;
 8008c44:	e02d      	b.n	8008ca2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	0c9b      	lsrs	r3, r3, #18
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008c52:	4413      	add	r3, r2
 8008c54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008c58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d013      	beq.n	8008c8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008c64:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	0c5b      	lsrs	r3, r3, #17
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008c72:	4413      	add	r3, r2
 8008c74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	4a0e      	ldr	r2, [pc, #56]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c7e:	fb02 f203 	mul.w	r2, r2, r3
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8a:	e004      	b.n	8008c96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	4a0b      	ldr	r2, [pc, #44]	; (8008cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c90:	fb02 f303 	mul.w	r3, r2, r3
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	623b      	str	r3, [r7, #32]
      break;
 8008c9a:	e002      	b.n	8008ca2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c9e:	623b      	str	r3, [r7, #32]
      break;
 8008ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3728      	adds	r7, #40	; 0x28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc90      	pop	{r4, r7}
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	0800a9b0 	.word	0x0800a9b0
 8008cb4:	40021000 	.word	0x40021000
 8008cb8:	007a1200 	.word	0x007a1200
 8008cbc:	003d0900 	.word	0x003d0900

08008cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cc4:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bc80      	pop	{r7}
 8008cce:	4770      	bx	lr
 8008cd0:	2000004c 	.word	0x2000004c

08008cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008cd8:	f7ff fff2 	bl	8008cc0 <HAL_RCC_GetHCLKFreq>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	0a1b      	lsrs	r3, r3, #8
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	4903      	ldr	r1, [pc, #12]	; (8008cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cea:	5ccb      	ldrb	r3, [r1, r3]
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	0800ac9c 	.word	0x0800ac9c

08008cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d00:	f7ff ffde 	bl	8008cc0 <HAL_RCC_GetHCLKFreq>
 8008d04:	4602      	mov	r2, r0
 8008d06:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	0adb      	lsrs	r3, r3, #11
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	4903      	ldr	r1, [pc, #12]	; (8008d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d12:	5ccb      	ldrb	r3, [r1, r3]
 8008d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	40021000 	.word	0x40021000
 8008d20:	0800ac9c 	.word	0x0800ac9c

08008d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <RCC_Delay+0x34>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a0a      	ldr	r2, [pc, #40]	; (8008d5c <RCC_Delay+0x38>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	0a5b      	lsrs	r3, r3, #9
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	fb02 f303 	mul.w	r3, r2, r3
 8008d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008d40:	bf00      	nop
  }
  while (Delay --);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	1e5a      	subs	r2, r3, #1
 8008d46:	60fa      	str	r2, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1f9      	bne.n	8008d40 <RCC_Delay+0x1c>
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bc80      	pop	{r7}
 8008d56:	4770      	bx	lr
 8008d58:	2000004c 	.word	0x2000004c
 8008d5c:	10624dd3 	.word	0x10624dd3

08008d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	613b      	str	r3, [r7, #16]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d07d      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d80:	4b4f      	ldr	r3, [pc, #316]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10d      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d8c:	4b4c      	ldr	r3, [pc, #304]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	4a4b      	ldr	r2, [pc, #300]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d96:	61d3      	str	r3, [r2, #28]
 8008d98:	4b49      	ldr	r3, [pc, #292]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008da8:	4b46      	ldr	r3, [pc, #280]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d118      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008db4:	4b43      	ldr	r3, [pc, #268]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a42      	ldr	r2, [pc, #264]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dc0:	f7fe f89e 	bl	8006f00 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dc6:	e008      	b.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dc8:	f7fe f89a 	bl	8006f00 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b64      	cmp	r3, #100	; 0x64
 8008dd4:	d901      	bls.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e06d      	b.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dda:	4b3a      	ldr	r3, [pc, #232]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0f0      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008de6:	4b36      	ldr	r3, [pc, #216]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d02e      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d027      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e04:	4b2e      	ldr	r3, [pc, #184]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e0e:	4b2e      	ldr	r3, [pc, #184]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e10:	2201      	movs	r2, #1
 8008e12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e14:	4b2c      	ldr	r3, [pc, #176]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008e1a:	4a29      	ldr	r2, [pc, #164]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d014      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e2a:	f7fe f869 	bl	8006f00 <HAL_GetTick>
 8008e2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e30:	e00a      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e32:	f7fe f865 	bl	8006f00 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d901      	bls.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e036      	b.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e48:	4b1d      	ldr	r3, [pc, #116]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d0ee      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e54:	4b1a      	ldr	r3, [pc, #104]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	4917      	ldr	r1, [pc, #92]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d105      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e6c:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	4a13      	ldr	r2, [pc, #76]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e84:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	490b      	ldr	r1, [pc, #44]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d008      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ea2:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	4904      	ldr	r1, [pc, #16]	; (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	40007000 	.word	0x40007000
 8008ec8:	42420440 	.word	0x42420440

08008ecc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ecc:	b590      	push	{r4, r7, lr}
 8008ece:	b08d      	sub	sp, #52	; 0x34
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008ed4:	4b5a      	ldr	r3, [pc, #360]	; (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8008ed6:	f107 040c 	add.w	r4, r7, #12
 8008eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008ee0:	f240 2301 	movw	r3, #513	; 0x201
 8008ee4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eea:	2300      	movs	r3, #0
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eee:	2300      	movs	r3, #0
 8008ef0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	61fb      	str	r3, [r7, #28]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b10      	cmp	r3, #16
 8008efe:	d00a      	beq.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	f200 8091 	bhi.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d04c      	beq.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d07c      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008f14:	e089      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8008f16:	4b4b      	ldr	r3, [pc, #300]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008f1c:	4b49      	ldr	r3, [pc, #292]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 8082 	beq.w	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	0c9b      	lsrs	r3, r3, #18
 8008f2e:	f003 030f 	and.w	r3, r3, #15
 8008f32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f36:	4413      	add	r3, r2
 8008f38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008f3c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d018      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f48:	4b3e      	ldr	r3, [pc, #248]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	0c5b      	lsrs	r3, r3, #17
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f56:	4413      	add	r3, r2
 8008f58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00d      	beq.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008f68:	4a37      	ldr	r2, [pc, #220]	; (8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	fb02 f303 	mul.w	r3, r2, r3
 8008f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f78:	e004      	b.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	4a33      	ldr	r2, [pc, #204]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8008f7e:	fb02 f303 	mul.w	r3, r2, r3
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008f84:	4b2f      	ldr	r3, [pc, #188]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f90:	d102      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f94:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008f96:	e04a      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	4a2c      	ldr	r2, [pc, #176]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8008f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa2:	085b      	lsrs	r3, r3, #1
 8008fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008fa6:	e042      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8008fa8:	4b26      	ldr	r3, [pc, #152]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb8:	d108      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f003 0302 	and.w	r3, r3, #2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8008fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fca:	e01f      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd6:	d109      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008fd8:	4b1a      	ldr	r3, [pc, #104]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8008fe4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fea:	e00f      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ff6:	d11c      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008ff8:	4b12      	ldr	r3, [pc, #72]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d016      	beq.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8009004:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009008:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800900a:	e012      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800900c:	e011      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800900e:	f7ff fe75 	bl	8008cfc <HAL_RCC_GetPCLK2Freq>
 8009012:	4602      	mov	r2, r0
 8009014:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	0b9b      	lsrs	r3, r3, #14
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	3301      	adds	r3, #1
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	fbb2 f3f3 	udiv	r3, r2, r3
 8009026:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8009028:	e004      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800902a:	bf00      	nop
 800902c:	e002      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800902e:	bf00      	nop
 8009030:	e000      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8009032:	bf00      	nop
    }
  }
  return (frequency);
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009036:	4618      	mov	r0, r3
 8009038:	3734      	adds	r7, #52	; 0x34
 800903a:	46bd      	mov	sp, r7
 800903c:	bd90      	pop	{r4, r7, pc}
 800903e:	bf00      	nop
 8009040:	0800a9c0 	.word	0x0800a9c0
 8009044:	40021000 	.word	0x40021000
 8009048:	007a1200 	.word	0x007a1200
 800904c:	003d0900 	.word	0x003d0900
 8009050:	aaaaaaab 	.word	0xaaaaaaab

08009054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e076      	b.n	8009154 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b00      	cmp	r3, #0
 800906c:	d108      	bne.n	8009080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009076:	d009      	beq.n	800908c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	61da      	str	r2, [r3, #28]
 800907e:	e005      	b.n	800908c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7fb fcb4 	bl	8004a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090d4:	431a      	orrs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090de:	431a      	orrs	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009110:	ea42 0103 	orr.w	r1, r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009118:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	0c1a      	lsrs	r2, r3, #16
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f002 0204 	and.w	r2, r2, #4
 8009132:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69da      	ldr	r2, [r3, #28]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009142:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009176:	2b01      	cmp	r3, #1
 8009178:	d101      	bne.n	800917e <HAL_SPI_Transmit+0x22>
 800917a:	2302      	movs	r3, #2
 800917c:	e126      	b.n	80093cc <HAL_SPI_Transmit+0x270>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009186:	f7fd febb 	bl	8006f00 <HAL_GetTick>
 800918a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b01      	cmp	r3, #1
 800919a:	d002      	beq.n	80091a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800919c:	2302      	movs	r3, #2
 800919e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091a0:	e10b      	b.n	80093ba <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d002      	beq.n	80091ae <HAL_SPI_Transmit+0x52>
 80091a8:	88fb      	ldrh	r3, [r7, #6]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d102      	bne.n	80091b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091b2:	e102      	b.n	80093ba <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2203      	movs	r2, #3
 80091b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	88fa      	ldrh	r2, [r7, #6]
 80091cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	88fa      	ldrh	r2, [r7, #6]
 80091d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091fa:	d10f      	bne.n	800921c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800920a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800921a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009226:	2b40      	cmp	r3, #64	; 0x40
 8009228:	d007      	beq.n	800923a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009242:	d14b      	bne.n	80092dc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <HAL_SPI_Transmit+0xf6>
 800924c:	8afb      	ldrh	r3, [r7, #22]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d13e      	bne.n	80092d0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009256:	881a      	ldrh	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009262:	1c9a      	adds	r2, r3, #2
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800926c:	b29b      	uxth	r3, r3
 800926e:	3b01      	subs	r3, #1
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009276:	e02b      	b.n	80092d0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 0302 	and.w	r3, r3, #2
 8009282:	2b02      	cmp	r3, #2
 8009284:	d112      	bne.n	80092ac <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	881a      	ldrh	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	1c9a      	adds	r2, r3, #2
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	3b01      	subs	r3, #1
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80092aa:	e011      	b.n	80092d0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092ac:	f7fd fe28 	bl	8006f00 <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d803      	bhi.n	80092c4 <HAL_SPI_Transmit+0x168>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c2:	d102      	bne.n	80092ca <HAL_SPI_Transmit+0x16e>
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092ce:	e074      	b.n	80093ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1ce      	bne.n	8009278 <HAL_SPI_Transmit+0x11c>
 80092da:	e04c      	b.n	8009376 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <HAL_SPI_Transmit+0x18e>
 80092e4:	8afb      	ldrh	r3, [r7, #22]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d140      	bne.n	800936c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	7812      	ldrb	r2, [r2, #0]
 80092f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009306:	b29b      	uxth	r3, r3
 8009308:	3b01      	subs	r3, #1
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009310:	e02c      	b.n	800936c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b02      	cmp	r3, #2
 800931e:	d113      	bne.n	8009348 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	330c      	adds	r3, #12
 800932a:	7812      	ldrb	r2, [r2, #0]
 800932c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800933c:	b29b      	uxth	r3, r3
 800933e:	3b01      	subs	r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	86da      	strh	r2, [r3, #54]	; 0x36
 8009346:	e011      	b.n	800936c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009348:	f7fd fdda 	bl	8006f00 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d803      	bhi.n	8009360 <HAL_SPI_Transmit+0x204>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935e:	d102      	bne.n	8009366 <HAL_SPI_Transmit+0x20a>
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d102      	bne.n	800936c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	77fb      	strb	r3, [r7, #31]
          goto error;
 800936a:	e026      	b.n	80093ba <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009370:	b29b      	uxth	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1cd      	bne.n	8009312 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 fbb8 	bl	8009af0 <SPI_EndRxTxTransaction>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009394:	2300      	movs	r3, #0
 8009396:	613b      	str	r3, [r7, #16]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	613b      	str	r3, [r7, #16]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	77fb      	strb	r3, [r7, #31]
 80093b6:	e000      	b.n	80093ba <HAL_SPI_Transmit+0x25e>
  }

error:
 80093b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af02      	add	r7, sp, #8
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	4613      	mov	r3, r2
 80093e2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093f0:	d112      	bne.n	8009418 <HAL_SPI_Receive+0x44>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10e      	bne.n	8009418 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2204      	movs	r2, #4
 80093fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009402:	88fa      	ldrh	r2, [r7, #6]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4613      	mov	r3, r2
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 f8f1 	bl	80095f6 <HAL_SPI_TransmitReceive>
 8009414:	4603      	mov	r3, r0
 8009416:	e0ea      	b.n	80095ee <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800941e:	2b01      	cmp	r3, #1
 8009420:	d101      	bne.n	8009426 <HAL_SPI_Receive+0x52>
 8009422:	2302      	movs	r3, #2
 8009424:	e0e3      	b.n	80095ee <HAL_SPI_Receive+0x21a>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800942e:	f7fd fd67 	bl	8006f00 <HAL_GetTick>
 8009432:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b01      	cmp	r3, #1
 800943e:	d002      	beq.n	8009446 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009440:	2302      	movs	r3, #2
 8009442:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009444:	e0ca      	b.n	80095dc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_SPI_Receive+0x7e>
 800944c:	88fb      	ldrh	r3, [r7, #6]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009456:	e0c1      	b.n	80095dc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2204      	movs	r2, #4
 800945c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	88fa      	ldrh	r2, [r7, #6]
 8009470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	88fa      	ldrh	r2, [r7, #6]
 8009476:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800949e:	d10f      	bne.n	80094c0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d007      	beq.n	80094de <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d162      	bne.n	80095ac <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80094e6:	e02e      	b.n	8009546 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d115      	bne.n	8009522 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f103 020c 	add.w	r2, r3, #12
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009516:	b29b      	uxth	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009520:	e011      	b.n	8009546 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009522:	f7fd fced 	bl	8006f00 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d803      	bhi.n	800953a <HAL_SPI_Receive+0x166>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009538:	d102      	bne.n	8009540 <HAL_SPI_Receive+0x16c>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d102      	bne.n	8009546 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009544:	e04a      	b.n	80095dc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800954a:	b29b      	uxth	r3, r3
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1cb      	bne.n	80094e8 <HAL_SPI_Receive+0x114>
 8009550:	e031      	b.n	80095b6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b01      	cmp	r3, #1
 800955e:	d113      	bne.n	8009588 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68da      	ldr	r2, [r3, #12]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	b292      	uxth	r2, r2
 800956c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009572:	1c9a      	adds	r2, r3, #2
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009586:	e011      	b.n	80095ac <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009588:	f7fd fcba 	bl	8006f00 <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d803      	bhi.n	80095a0 <HAL_SPI_Receive+0x1cc>
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800959e:	d102      	bne.n	80095a6 <HAL_SPI_Receive+0x1d2>
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d102      	bne.n	80095ac <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80095aa:	e017      	b.n	80095dc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1cd      	bne.n	8009552 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 fa46 	bl	8009a4c <SPI_EndRxTransaction>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	75fb      	strb	r3, [r7, #23]
 80095d8:	e000      	b.n	80095dc <HAL_SPI_Receive+0x208>
  }

error :
 80095da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b08c      	sub	sp, #48	; 0x30
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	60f8      	str	r0, [r7, #12]
 80095fe:	60b9      	str	r1, [r7, #8]
 8009600:	607a      	str	r2, [r7, #4]
 8009602:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009604:	2301      	movs	r3, #1
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009614:	2b01      	cmp	r3, #1
 8009616:	d101      	bne.n	800961c <HAL_SPI_TransmitReceive+0x26>
 8009618:	2302      	movs	r3, #2
 800961a:	e18a      	b.n	8009932 <HAL_SPI_TransmitReceive+0x33c>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009624:	f7fd fc6c 	bl	8006f00 <HAL_GetTick>
 8009628:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800963a:	887b      	ldrh	r3, [r7, #2]
 800963c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800963e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009642:	2b01      	cmp	r3, #1
 8009644:	d00f      	beq.n	8009666 <HAL_SPI_TransmitReceive+0x70>
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800964c:	d107      	bne.n	800965e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d103      	bne.n	800965e <HAL_SPI_TransmitReceive+0x68>
 8009656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800965a:	2b04      	cmp	r3, #4
 800965c:	d003      	beq.n	8009666 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800965e:	2302      	movs	r3, #2
 8009660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009664:	e15b      	b.n	800991e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <HAL_SPI_TransmitReceive+0x82>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <HAL_SPI_TransmitReceive+0x82>
 8009672:	887b      	ldrh	r3, [r7, #2]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800967e:	e14e      	b.n	800991e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b04      	cmp	r3, #4
 800968a:	d003      	beq.n	8009694 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2205      	movs	r2, #5
 8009690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	887a      	ldrh	r2, [r7, #2]
 80096a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	887a      	ldrh	r2, [r7, #2]
 80096aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	887a      	ldrh	r2, [r7, #2]
 80096b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	887a      	ldrh	r2, [r7, #2]
 80096bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	d007      	beq.n	80096e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096f0:	d178      	bne.n	80097e4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_SPI_TransmitReceive+0x10a>
 80096fa:	8b7b      	ldrh	r3, [r7, #26]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d166      	bne.n	80097ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	881a      	ldrh	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009710:	1c9a      	adds	r2, r3, #2
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800971a:	b29b      	uxth	r3, r3
 800971c:	3b01      	subs	r3, #1
 800971e:	b29a      	uxth	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009724:	e053      	b.n	80097ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 0302 	and.w	r3, r3, #2
 8009730:	2b02      	cmp	r3, #2
 8009732:	d11b      	bne.n	800976c <HAL_SPI_TransmitReceive+0x176>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009738:	b29b      	uxth	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d016      	beq.n	800976c <HAL_SPI_TransmitReceive+0x176>
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	2b01      	cmp	r3, #1
 8009742:	d113      	bne.n	800976c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009748:	881a      	ldrh	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009754:	1c9a      	adds	r2, r3, #2
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800975e:	b29b      	uxth	r3, r3
 8009760:	3b01      	subs	r3, #1
 8009762:	b29a      	uxth	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b01      	cmp	r3, #1
 8009778:	d119      	bne.n	80097ae <HAL_SPI_TransmitReceive+0x1b8>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d014      	beq.n	80097ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	b292      	uxth	r2, r2
 8009790:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	1c9a      	adds	r2, r3, #2
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097aa:	2301      	movs	r3, #1
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097ae:	f7fd fba7 	bl	8006f00 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d807      	bhi.n	80097ce <HAL_SPI_TransmitReceive+0x1d8>
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c4:	d003      	beq.n	80097ce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80097cc:	e0a7      	b.n	800991e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1a6      	bne.n	8009726 <HAL_SPI_TransmitReceive+0x130>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097dc:	b29b      	uxth	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1a1      	bne.n	8009726 <HAL_SPI_TransmitReceive+0x130>
 80097e2:	e07c      	b.n	80098de <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <HAL_SPI_TransmitReceive+0x1fc>
 80097ec:	8b7b      	ldrh	r3, [r7, #26]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d16b      	bne.n	80098ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	330c      	adds	r3, #12
 80097fc:	7812      	ldrb	r2, [r2, #0]
 80097fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800980e:	b29b      	uxth	r3, r3
 8009810:	3b01      	subs	r3, #1
 8009812:	b29a      	uxth	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009818:	e057      	b.n	80098ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b02      	cmp	r3, #2
 8009826:	d11c      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x26c>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800982c:	b29b      	uxth	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d017      	beq.n	8009862 <HAL_SPI_TransmitReceive+0x26c>
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	2b01      	cmp	r3, #1
 8009836:	d114      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	330c      	adds	r3, #12
 8009842:	7812      	ldrb	r2, [r2, #0]
 8009844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b01      	cmp	r3, #1
 800986e:	d119      	bne.n	80098a4 <HAL_SPI_TransmitReceive+0x2ae>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009874:	b29b      	uxth	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d014      	beq.n	80098a4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68da      	ldr	r2, [r3, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	3b01      	subs	r3, #1
 800989a:	b29a      	uxth	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098a0:	2301      	movs	r3, #1
 80098a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80098a4:	f7fd fb2c 	bl	8006f00 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d803      	bhi.n	80098bc <HAL_SPI_TransmitReceive+0x2c6>
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ba:	d102      	bne.n	80098c2 <HAL_SPI_TransmitReceive+0x2cc>
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d103      	bne.n	80098ca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80098c8:	e029      	b.n	800991e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1a2      	bne.n	800981a <HAL_SPI_TransmitReceive+0x224>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098d8:	b29b      	uxth	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d19d      	bne.n	800981a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 f904 	bl	8009af0 <SPI_EndRxTxTransaction>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d006      	beq.n	80098fc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2220      	movs	r2, #32
 80098f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80098fa:	e010      	b.n	800991e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10b      	bne.n	800991c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	e000      	b.n	800991e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800991c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800992e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009932:	4618      	mov	r0, r3
 8009934:	3730      	adds	r7, #48	; 0x30
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	4613      	mov	r3, r2
 800994a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800994c:	f7fd fad8 	bl	8006f00 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4413      	add	r3, r2
 800995a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800995c:	f7fd fad0 	bl	8006f00 <HAL_GetTick>
 8009960:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009962:	4b39      	ldr	r3, [pc, #228]	; (8009a48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	015b      	lsls	r3, r3, #5
 8009968:	0d1b      	lsrs	r3, r3, #20
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	fb02 f303 	mul.w	r3, r2, r3
 8009970:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009972:	e054      	b.n	8009a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d050      	beq.n	8009a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800997c:	f7fd fac0 	bl	8006f00 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	69fa      	ldr	r2, [r7, #28]
 8009988:	429a      	cmp	r2, r3
 800998a:	d902      	bls.n	8009992 <SPI_WaitFlagStateUntilTimeout+0x56>
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d13d      	bne.n	8009a0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099aa:	d111      	bne.n	80099d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b4:	d004      	beq.n	80099c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099be:	d107      	bne.n	80099d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d8:	d10f      	bne.n	80099fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e017      	b.n	8009a3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4013      	ands	r3, r2
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	bf0c      	ite	eq
 8009a2e:	2301      	moveq	r3, #1
 8009a30:	2300      	movne	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d19b      	bne.n	8009974 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	2000004c 	.word	0x2000004c

08009a4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a60:	d111      	bne.n	8009a86 <SPI_EndRxTransaction+0x3a>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a6a:	d004      	beq.n	8009a76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a74:	d107      	bne.n	8009a86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a84:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a8e:	d117      	bne.n	8009ac0 <SPI_EndRxTransaction+0x74>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a98:	d112      	bne.n	8009ac0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f7ff ff49 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01a      	beq.n	8009ae6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab4:	f043 0220 	orr.w	r2, r3, #32
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e013      	b.n	8009ae8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2180      	movs	r1, #128	; 0x80
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7ff ff36 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d007      	beq.n	8009ae6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ada:	f043 0220 	orr.w	r2, r3, #32
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e000      	b.n	8009ae8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2200      	movs	r2, #0
 8009b04:	2180      	movs	r1, #128	; 0x80
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f7ff ff18 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b16:	f043 0220 	orr.w	r2, r3, #32
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e000      	b.n	8009b24 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e041      	b.n	8009bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7fa ffa8 	bl	8004aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f000 f8f2 	bl	8009d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b084      	sub	sp, #16
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d101      	bne.n	8009be2 <HAL_TIM_ConfigClockSource+0x18>
 8009bde:	2302      	movs	r3, #2
 8009be0:	e0b3      	b.n	8009d4a <HAL_TIM_ConfigClockSource+0x180>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c00:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c08:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c1a:	d03e      	beq.n	8009c9a <HAL_TIM_ConfigClockSource+0xd0>
 8009c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c20:	f200 8087 	bhi.w	8009d32 <HAL_TIM_ConfigClockSource+0x168>
 8009c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c28:	f000 8085 	beq.w	8009d36 <HAL_TIM_ConfigClockSource+0x16c>
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c30:	d87f      	bhi.n	8009d32 <HAL_TIM_ConfigClockSource+0x168>
 8009c32:	2b70      	cmp	r3, #112	; 0x70
 8009c34:	d01a      	beq.n	8009c6c <HAL_TIM_ConfigClockSource+0xa2>
 8009c36:	2b70      	cmp	r3, #112	; 0x70
 8009c38:	d87b      	bhi.n	8009d32 <HAL_TIM_ConfigClockSource+0x168>
 8009c3a:	2b60      	cmp	r3, #96	; 0x60
 8009c3c:	d050      	beq.n	8009ce0 <HAL_TIM_ConfigClockSource+0x116>
 8009c3e:	2b60      	cmp	r3, #96	; 0x60
 8009c40:	d877      	bhi.n	8009d32 <HAL_TIM_ConfigClockSource+0x168>
 8009c42:	2b50      	cmp	r3, #80	; 0x50
 8009c44:	d03c      	beq.n	8009cc0 <HAL_TIM_ConfigClockSource+0xf6>
 8009c46:	2b50      	cmp	r3, #80	; 0x50
 8009c48:	d873      	bhi.n	8009d32 <HAL_TIM_ConfigClockSource+0x168>
 8009c4a:	2b40      	cmp	r3, #64	; 0x40
 8009c4c:	d058      	beq.n	8009d00 <HAL_TIM_ConfigClockSource+0x136>
 8009c4e:	2b40      	cmp	r3, #64	; 0x40
 8009c50:	d86f      	bhi.n	8009d32 <HAL_TIM_ConfigClockSource+0x168>
 8009c52:	2b30      	cmp	r3, #48	; 0x30
 8009c54:	d064      	beq.n	8009d20 <HAL_TIM_ConfigClockSource+0x156>
 8009c56:	2b30      	cmp	r3, #48	; 0x30
 8009c58:	d86b      	bhi.n	8009d32 <HAL_TIM_ConfigClockSource+0x168>
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	d060      	beq.n	8009d20 <HAL_TIM_ConfigClockSource+0x156>
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d867      	bhi.n	8009d32 <HAL_TIM_ConfigClockSource+0x168>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d05c      	beq.n	8009d20 <HAL_TIM_ConfigClockSource+0x156>
 8009c66:	2b10      	cmp	r3, #16
 8009c68:	d05a      	beq.n	8009d20 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009c6a:	e062      	b.n	8009d32 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	6899      	ldr	r1, [r3, #8]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f000 f943 	bl	8009f06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	609a      	str	r2, [r3, #8]
      break;
 8009c98:	e04e      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6818      	ldr	r0, [r3, #0]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	6899      	ldr	r1, [r3, #8]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f000 f92c 	bl	8009f06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cbc:	609a      	str	r2, [r3, #8]
      break;
 8009cbe:	e03b      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	6859      	ldr	r1, [r3, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f000 f8a3 	bl	8009e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2150      	movs	r1, #80	; 0x50
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f8fa 	bl	8009ed2 <TIM_ITRx_SetConfig>
      break;
 8009cde:	e02b      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	6859      	ldr	r1, [r3, #4]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	461a      	mov	r2, r3
 8009cee:	f000 f8c1 	bl	8009e74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2160      	movs	r1, #96	; 0x60
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 f8ea 	bl	8009ed2 <TIM_ITRx_SetConfig>
      break;
 8009cfe:	e01b      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6818      	ldr	r0, [r3, #0]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	6859      	ldr	r1, [r3, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	f000 f883 	bl	8009e18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2140      	movs	r1, #64	; 0x40
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 f8da 	bl	8009ed2 <TIM_ITRx_SetConfig>
      break;
 8009d1e:	e00b      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	f000 f8d1 	bl	8009ed2 <TIM_ITRx_SetConfig>
        break;
 8009d30:	e002      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009d32:	bf00      	nop
 8009d34:	e000      	b.n	8009d38 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a29      	ldr	r2, [pc, #164]	; (8009e0c <TIM_Base_SetConfig+0xb8>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d00b      	beq.n	8009d84 <TIM_Base_SetConfig+0x30>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d72:	d007      	beq.n	8009d84 <TIM_Base_SetConfig+0x30>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a26      	ldr	r2, [pc, #152]	; (8009e10 <TIM_Base_SetConfig+0xbc>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d003      	beq.n	8009d84 <TIM_Base_SetConfig+0x30>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a25      	ldr	r2, [pc, #148]	; (8009e14 <TIM_Base_SetConfig+0xc0>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d108      	bne.n	8009d96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a1c      	ldr	r2, [pc, #112]	; (8009e0c <TIM_Base_SetConfig+0xb8>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d00b      	beq.n	8009db6 <TIM_Base_SetConfig+0x62>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da4:	d007      	beq.n	8009db6 <TIM_Base_SetConfig+0x62>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a19      	ldr	r2, [pc, #100]	; (8009e10 <TIM_Base_SetConfig+0xbc>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d003      	beq.n	8009db6 <TIM_Base_SetConfig+0x62>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a18      	ldr	r2, [pc, #96]	; (8009e14 <TIM_Base_SetConfig+0xc0>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d108      	bne.n	8009dc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a07      	ldr	r2, [pc, #28]	; (8009e0c <TIM_Base_SetConfig+0xb8>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d103      	bne.n	8009dfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	615a      	str	r2, [r3, #20]
}
 8009e02:	bf00      	nop
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr
 8009e0c:	40012c00 	.word	0x40012c00
 8009e10:	40000400 	.word	0x40000400
 8009e14:	40000800 	.word	0x40000800

08009e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	f023 0201 	bic.w	r2, r3, #1
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	011b      	lsls	r3, r3, #4
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f023 030a 	bic.w	r3, r3, #10
 8009e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	621a      	str	r2, [r3, #32]
}
 8009e6a:	bf00      	nop
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bc80      	pop	{r7}
 8009e72:	4770      	bx	lr

08009e74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6a1b      	ldr	r3, [r3, #32]
 8009e84:	f023 0210 	bic.w	r2, r3, #16
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	031b      	lsls	r3, r3, #12
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	011b      	lsls	r3, r3, #4
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	621a      	str	r2, [r3, #32]
}
 8009ec8:	bf00      	nop
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr

08009ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	f043 0307 	orr.w	r3, r3, #7
 8009ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	609a      	str	r2, [r3, #8]
}
 8009efc:	bf00      	nop
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bc80      	pop	{r7}
 8009f04:	4770      	bx	lr

08009f06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b087      	sub	sp, #28
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	607a      	str	r2, [r7, #4]
 8009f12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	021a      	lsls	r2, r3, #8
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	609a      	str	r2, [r3, #8]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bc80      	pop	{r7}
 8009f42:	4770      	bx	lr

08009f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d101      	bne.n	8009f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	e046      	b.n	8009fea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2202      	movs	r2, #2
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a16      	ldr	r2, [pc, #88]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00e      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa8:	d009      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a12      	ldr	r2, [pc, #72]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d004      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a10      	ldr	r2, [pc, #64]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d10c      	bne.n	8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bc80      	pop	{r7}
 8009ff2:	4770      	bx	lr
 8009ff4:	40012c00 	.word	0x40012c00
 8009ff8:	40000400 	.word	0x40000400
 8009ffc:	40000800 	.word	0x40000800

0800a000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e03f      	b.n	800a092 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7fa fd5a 	bl	8004ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2224      	movs	r2, #36	; 0x24
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fb9d 	bl	800a784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	691a      	ldr	r2, [r3, #16]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	695a      	ldr	r2, [r3, #20]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68da      	ldr	r2, [r3, #12]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2220      	movs	r2, #32
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e047      	b.n	800a13c <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7fa fd0d 	bl	8004ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2224      	movs	r2, #36	; 0x24
 800a0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68da      	ldr	r2, [r3, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fb50 	bl	800a784 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	691a      	ldr	r2, [r3, #16]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	695a      	ldr	r2, [r3, #20]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a102:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	695a      	ldr	r2, [r3, #20]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f042 0208 	orr.w	r2, r2, #8
 800a112:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68da      	ldr	r2, [r3, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a122:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2220      	movs	r2, #32
 800a136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08a      	sub	sp, #40	; 0x28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a164:	2300      	movs	r3, #0
 800a166:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10d      	bne.n	800a196 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	f003 0320 	and.w	r3, r3, #32
 800a180:	2b00      	cmp	r3, #0
 800a182:	d008      	beq.n	800a196 <HAL_UART_IRQHandler+0x52>
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	f003 0320 	and.w	r3, r3, #32
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fa4f 	bl	800a632 <UART_Receive_IT>
      return;
 800a194:	e17b      	b.n	800a48e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 80b1 	beq.w	800a300 <HAL_UART_IRQHandler+0x1bc>
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d105      	bne.n	800a1b4 <HAL_UART_IRQHandler+0x70>
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 80a6 	beq.w	800a300 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <HAL_UART_IRQHandler+0x90>
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d005      	beq.n	800a1d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1cc:	f043 0201 	orr.w	r2, r3, #1
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <HAL_UART_IRQHandler+0xb0>
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ec:	f043 0202 	orr.w	r2, r3, #2
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <HAL_UART_IRQHandler+0xd0>
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	f043 0204 	orr.w	r2, r3, #4
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	f003 0308 	and.w	r3, r3, #8
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00f      	beq.n	800a23e <HAL_UART_IRQHandler+0xfa>
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	f003 0320 	and.w	r3, r3, #32
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <HAL_UART_IRQHandler+0xee>
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	f043 0208 	orr.w	r2, r3, #8
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 811e 	beq.w	800a484 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <HAL_UART_IRQHandler+0x11e>
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	f003 0320 	and.w	r3, r3, #32
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f9e8 	bl	800a632 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	bf14      	ite	ne
 800a270:	2301      	movne	r3, #1
 800a272:	2300      	moveq	r3, #0
 800a274:	b2db      	uxtb	r3, r3
 800a276:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27c:	f003 0308 	and.w	r3, r3, #8
 800a280:	2b00      	cmp	r3, #0
 800a282:	d102      	bne.n	800a28a <HAL_UART_IRQHandler+0x146>
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d031      	beq.n	800a2ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f92a 	bl	800a4e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d023      	beq.n	800a2e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	695a      	ldr	r2, [r3, #20]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d013      	beq.n	800a2de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ba:	4a76      	ldr	r2, [pc, #472]	; (800a494 <HAL_UART_IRQHandler+0x350>)
 800a2bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fd fdbc 	bl	8007e40 <HAL_DMA_Abort_IT>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d016      	beq.n	800a2fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2dc:	e00e      	b.n	800a2fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f8ec 	bl	800a4bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e4:	e00a      	b.n	800a2fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f8e8 	bl	800a4bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ec:	e006      	b.n	800a2fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f8e4 	bl	800a4bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a2fa:	e0c3      	b.n	800a484 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2fc:	bf00      	nop
    return;
 800a2fe:	e0c1      	b.n	800a484 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a304:	2b01      	cmp	r3, #1
 800a306:	f040 80a1 	bne.w	800a44c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	f003 0310 	and.w	r3, r3, #16
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 809b 	beq.w	800a44c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	f003 0310 	and.w	r3, r3, #16
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f000 8095 	beq.w	800a44c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	60fb      	str	r3, [r7, #12]
 800a336:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a342:	2b00      	cmp	r3, #0
 800a344:	d04e      	beq.n	800a3e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a350:	8a3b      	ldrh	r3, [r7, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 8098 	beq.w	800a488 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a35c:	8a3a      	ldrh	r2, [r7, #16]
 800a35e:	429a      	cmp	r2, r3
 800a360:	f080 8092 	bcs.w	800a488 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	8a3a      	ldrh	r2, [r7, #16]
 800a368:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	2b20      	cmp	r3, #32
 800a372:	d02b      	beq.n	800a3cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68da      	ldr	r2, [r3, #12]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a382:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	695a      	ldr	r2, [r3, #20]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 0201 	bic.w	r2, r2, #1
 800a392:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	695a      	ldr	r2, [r3, #20]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f022 0210 	bic.w	r2, r2, #16
 800a3c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fd fcff 	bl	8007dca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f876 	bl	800a4ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a3e2:	e051      	b.n	800a488 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d047      	beq.n	800a48c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a3fc:	8a7b      	ldrh	r3, [r7, #18]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d044      	beq.n	800a48c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a410:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	695a      	ldr	r2, [r3, #20]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0201 	bic.w	r2, r2, #1
 800a420:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2220      	movs	r2, #32
 800a426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0210 	bic.w	r2, r2, #16
 800a43e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a440:	8a7b      	ldrh	r3, [r7, #18]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f842 	bl	800a4ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a44a:	e01f      	b.n	800a48c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b00      	cmp	r3, #0
 800a454:	d008      	beq.n	800a468 <HAL_UART_IRQHandler+0x324>
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f87f 	bl	800a564 <UART_Transmit_IT>
    return;
 800a466:	e012      	b.n	800a48e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00d      	beq.n	800a48e <HAL_UART_IRQHandler+0x34a>
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d008      	beq.n	800a48e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f8c0 	bl	800a602 <UART_EndTransmit_IT>
    return;
 800a482:	e004      	b.n	800a48e <HAL_UART_IRQHandler+0x34a>
    return;
 800a484:	bf00      	nop
 800a486:	e002      	b.n	800a48e <HAL_UART_IRQHandler+0x34a>
      return;
 800a488:	bf00      	nop
 800a48a:	e000      	b.n	800a48e <HAL_UART_IRQHandler+0x34a>
      return;
 800a48c:	bf00      	nop
  }
}
 800a48e:	3728      	adds	r7, #40	; 0x28
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	0800a53d 	.word	0x0800a53d

0800a498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bc80      	pop	{r7}
 800a4a8:	4770      	bx	lr

0800a4aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a4b2:	bf00      	nop
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bc80      	pop	{r7}
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr

0800a4ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bc80      	pop	{r7}
 800a4e2:	4770      	bx	lr

0800a4e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a4fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695a      	ldr	r2, [r3, #20]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0201 	bic.w	r2, r2, #1
 800a50a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a510:	2b01      	cmp	r3, #1
 800a512:	d107      	bne.n	800a524 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0210 	bic.w	r2, r2, #16
 800a522:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2220      	movs	r2, #32
 800a528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a532:	bf00      	nop
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	bc80      	pop	{r7}
 800a53a:	4770      	bx	lr

0800a53c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7ff ffb0 	bl	800a4bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a55c:	bf00      	nop
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b21      	cmp	r3, #33	; 0x21
 800a576:	d13e      	bne.n	800a5f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a580:	d114      	bne.n	800a5ac <UART_Transmit_IT+0x48>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d110      	bne.n	800a5ac <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	461a      	mov	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a59e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a1b      	ldr	r3, [r3, #32]
 800a5a4:	1c9a      	adds	r2, r3, #2
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	621a      	str	r2, [r3, #32]
 800a5aa:	e008      	b.n	800a5be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	1c59      	adds	r1, r3, #1
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	6211      	str	r1, [r2, #32]
 800a5b6:	781a      	ldrb	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10f      	bne.n	800a5f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e000      	b.n	800a5f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5f6:	2302      	movs	r3, #2
  }
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bc80      	pop	{r7}
 800a600:	4770      	bx	lr

0800a602 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68da      	ldr	r2, [r3, #12]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a618:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff ff38 	bl	800a498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b086      	sub	sp, #24
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b22      	cmp	r3, #34	; 0x22
 800a644:	f040 8099 	bne.w	800a77a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a650:	d117      	bne.n	800a682 <UART_Receive_IT+0x50>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d113      	bne.n	800a682 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a670:	b29a      	uxth	r2, r3
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67a:	1c9a      	adds	r2, r3, #2
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	629a      	str	r2, [r3, #40]	; 0x28
 800a680:	e026      	b.n	800a6d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a686:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a688:	2300      	movs	r3, #0
 800a68a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a694:	d007      	beq.n	800a6a6 <UART_Receive_IT+0x74>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <UART_Receive_IT+0x82>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	701a      	strb	r2, [r3, #0]
 800a6b2:	e008      	b.n	800a6c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d148      	bne.n	800a776 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f022 0220 	bic.w	r2, r2, #32
 800a6f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68da      	ldr	r2, [r3, #12]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	695a      	ldr	r2, [r3, #20]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f022 0201 	bic.w	r2, r2, #1
 800a712:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2220      	movs	r2, #32
 800a718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a720:	2b01      	cmp	r3, #1
 800a722:	d123      	bne.n	800a76c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 0210 	bic.w	r2, r2, #16
 800a738:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b10      	cmp	r3, #16
 800a746:	d10a      	bne.n	800a75e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff feb2 	bl	800a4ce <HAL_UARTEx_RxEventCallback>
 800a76a:	e002      	b.n	800a772 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff fe9c 	bl	800a4aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	e002      	b.n	800a77c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	e000      	b.n	800a77c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a77a:	2302      	movs	r3, #2
  }
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68da      	ldr	r2, [r3, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a7be:	f023 030c 	bic.w	r3, r3, #12
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	699a      	ldr	r2, [r3, #24]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a2c      	ldr	r2, [pc, #176]	; (800a898 <UART_SetConfig+0x114>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d103      	bne.n	800a7f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a7ec:	f7fe fa86 	bl	8008cfc <HAL_RCC_GetPCLK2Freq>
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	e002      	b.n	800a7fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a7f4:	f7fe fa6e 	bl	8008cd4 <HAL_RCC_GetPCLK1Freq>
 800a7f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	009a      	lsls	r2, r3, #2
 800a804:	441a      	add	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a810:	4a22      	ldr	r2, [pc, #136]	; (800a89c <UART_SetConfig+0x118>)
 800a812:	fba2 2303 	umull	r2, r3, r2, r3
 800a816:	095b      	lsrs	r3, r3, #5
 800a818:	0119      	lsls	r1, r3, #4
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009a      	lsls	r2, r3, #2
 800a824:	441a      	add	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a830:	4b1a      	ldr	r3, [pc, #104]	; (800a89c <UART_SetConfig+0x118>)
 800a832:	fba3 0302 	umull	r0, r3, r3, r2
 800a836:	095b      	lsrs	r3, r3, #5
 800a838:	2064      	movs	r0, #100	; 0x64
 800a83a:	fb00 f303 	mul.w	r3, r0, r3
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	011b      	lsls	r3, r3, #4
 800a842:	3332      	adds	r3, #50	; 0x32
 800a844:	4a15      	ldr	r2, [pc, #84]	; (800a89c <UART_SetConfig+0x118>)
 800a846:	fba2 2303 	umull	r2, r3, r2, r3
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a850:	4419      	add	r1, r3
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	009a      	lsls	r2, r3, #2
 800a85c:	441a      	add	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	fbb2 f2f3 	udiv	r2, r2, r3
 800a868:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <UART_SetConfig+0x118>)
 800a86a:	fba3 0302 	umull	r0, r3, r3, r2
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	2064      	movs	r0, #100	; 0x64
 800a872:	fb00 f303 	mul.w	r3, r0, r3
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	3332      	adds	r3, #50	; 0x32
 800a87c:	4a07      	ldr	r2, [pc, #28]	; (800a89c <UART_SetConfig+0x118>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	f003 020f 	and.w	r2, r3, #15
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	440a      	add	r2, r1
 800a88e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a890:	bf00      	nop
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	40013800 	.word	0x40013800
 800a89c:	51eb851f 	.word	0x51eb851f

0800a8a0 <__libc_init_array>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	2600      	movs	r6, #0
 800a8a4:	4d0c      	ldr	r5, [pc, #48]	; (800a8d8 <__libc_init_array+0x38>)
 800a8a6:	4c0d      	ldr	r4, [pc, #52]	; (800a8dc <__libc_init_array+0x3c>)
 800a8a8:	1b64      	subs	r4, r4, r5
 800a8aa:	10a4      	asrs	r4, r4, #2
 800a8ac:	42a6      	cmp	r6, r4
 800a8ae:	d109      	bne.n	800a8c4 <__libc_init_array+0x24>
 800a8b0:	f000 f822 	bl	800a8f8 <_init>
 800a8b4:	2600      	movs	r6, #0
 800a8b6:	4d0a      	ldr	r5, [pc, #40]	; (800a8e0 <__libc_init_array+0x40>)
 800a8b8:	4c0a      	ldr	r4, [pc, #40]	; (800a8e4 <__libc_init_array+0x44>)
 800a8ba:	1b64      	subs	r4, r4, r5
 800a8bc:	10a4      	asrs	r4, r4, #2
 800a8be:	42a6      	cmp	r6, r4
 800a8c0:	d105      	bne.n	800a8ce <__libc_init_array+0x2e>
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c8:	4798      	blx	r3
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	e7ee      	b.n	800a8ac <__libc_init_array+0xc>
 800a8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d2:	4798      	blx	r3
 800a8d4:	3601      	adds	r6, #1
 800a8d6:	e7f2      	b.n	800a8be <__libc_init_array+0x1e>
 800a8d8:	0800ba8c 	.word	0x0800ba8c
 800a8dc:	0800ba8c 	.word	0x0800ba8c
 800a8e0:	0800ba8c 	.word	0x0800ba8c
 800a8e4:	0800ba90 	.word	0x0800ba90

0800a8e8 <memset>:
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	4402      	add	r2, r0
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d100      	bne.n	800a8f2 <memset+0xa>
 800a8f0:	4770      	bx	lr
 800a8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8f6:	e7f9      	b.n	800a8ec <memset+0x4>

0800a8f8 <_init>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr

0800a904 <_fini>:
 800a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a906:	bf00      	nop
 800a908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a90a:	bc08      	pop	{r3}
 800a90c:	469e      	mov	lr, r3
 800a90e:	4770      	bx	lr
